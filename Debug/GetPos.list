
GetPos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013430  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002430  080135c0  080135c0  000145c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080159f0  080159f0  000171dc  2**0
                  CONTENTS
  4 .ARM          00000008  080159f0  080159f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080159f8  080159f8  000171dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080159f8  080159f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080159fc  080159fc  000169fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08015a00  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006578  200001e0  08015bdc  000171e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006758  08015bdc  00017758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000171dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c6b  00000000  00000000  0001720c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005721  00000000  00000000  0003be77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f10  00000000  00000000  00041598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001806  00000000  00000000  000434a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cb1e  00000000  00000000  00044cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029142  00000000  00000000  000717cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001046cc  00000000  00000000  0009a90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019efda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009630  00000000  00000000  0019f020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  001a8650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080135a8 	.word	0x080135a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080135a8 	.word	0x080135a8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a07      	ldr	r2, [pc, #28]	@ (800106c <vApplicationGetIdleTaskMemory+0x2c>)
 8001050:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4a06      	ldr	r2, [pc, #24]	@ (8001070 <vApplicationGetIdleTaskMemory+0x30>)
 8001056:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200001fc 	.word	0x200001fc
 8001070:	20000250 	.word	0x20000250

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107a:	f002 fa95 	bl	80035a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107e:	f000 f827 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001082:	f000 f877 	bl	8001174 <MX_GPIO_Init>
  MX_GNSS_Init();
 8001086:	f000 fd2d 	bl	8001ae4 <MX_GNSS_Init>
  /* Call PreOsInit function */
  MX_GNSS_PreOSInit();
 800108a:	f000 fd37 	bl	8001afc <MX_GNSS_PreOSInit>
  /* USER CODE BEGIN 2 */
  GNSS_PRINT("USART2 test OK\r\n");
 800108e:	480d      	ldr	r0, [pc, #52]	@ (80010c4 <main+0x50>)
 8001090:	f001 f9de 	bl	8002450 <GNSS_PRINT>

  /* USER CODE END 2 */

  /* Call PostOsInit function */
  MX_GNSS_PostOSInit();
 8001094:	f000 fd39 	bl	8001b0a <MX_GNSS_PostOSInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <main+0x54>)
 800109a:	1d3c      	adds	r4, r7, #4
 800109c:	461d      	mov	r5, r3
 800109e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f007 fb1c 	bl	80086ec <osThreadCreate>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <main+0x58>)
 80010b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010ba:	f007 fb10 	bl	80086de <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010be:	bf00      	nop
 80010c0:	e7fd      	b.n	80010be <main+0x4a>
 80010c2:	bf00      	nop
 80010c4:	080135c0 	.word	0x080135c0
 80010c8:	080135e0 	.word	0x080135e0
 80010cc:	20000450 	.word	0x20000450

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b096      	sub	sp, #88	@ 0x58
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2244      	movs	r2, #68	@ 0x44
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f00f fc6d 	bl	80109be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010f6:	f004 fe59 	bl	8005dac <HAL_PWREx_ControlVoltageScaling>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001100:	f000 f8ec 	bl	80012dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001104:	2302      	movs	r3, #2
 8001106:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001108:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800110c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110e:	2310      	movs	r3, #16
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001112:	2302      	movs	r3, #2
 8001114:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001116:	2302      	movs	r3, #2
 8001118:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800111a:	2301      	movs	r3, #1
 800111c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800111e:	230a      	movs	r3, #10
 8001120:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001122:	2307      	movs	r3, #7
 8001124:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800112a:	2302      	movs	r3, #2
 800112c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4618      	mov	r0, r3
 8001134:	f004 fe90 	bl	8005e58 <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800113e:	f000 f8cd 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001146:	2303      	movs	r3, #3
 8001148:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	2104      	movs	r1, #4
 800115a:	4618      	mov	r0, r3
 800115c:	f005 fa58 	bl	8006610 <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001166:	f000 f8b9 	bl	80012dc <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3758      	adds	r7, #88	@ 0x58
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	@ 0x28
 8001178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	4b2c      	ldr	r3, [pc, #176]	@ (800123c <MX_GPIO_Init+0xc8>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	4a2b      	ldr	r2, [pc, #172]	@ (800123c <MX_GPIO_Init+0xc8>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001196:	4b29      	ldr	r3, [pc, #164]	@ (800123c <MX_GPIO_Init+0xc8>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a2:	4b26      	ldr	r3, [pc, #152]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	4a25      	ldr	r2, [pc, #148]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	4a1f      	ldr	r2, [pc, #124]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c6:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	4a19      	ldr	r2, [pc, #100]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <MX_GPIO_Init+0xc8>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f4:	f002 fe56 	bl	8003ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	480c      	ldr	r0, [pc, #48]	@ (8001240 <MX_GPIO_Init+0xcc>)
 8001210:	f002 fb92 	bl	8003938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8001214:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001230:	f002 fb82 	bl	8003938 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	@ 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40021000 	.word	0x40021000
 8001240:	48000800 	.word	0x48000800

08001244 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	b0a9      	sub	sp, #164	@ 0xa4
 8001248:	af06      	add	r7, sp, #24
 800124a:	6078      	str	r0, [r7, #4]

	  /* Infinite loop */
	  for(;;)
	  {
	    // Wait for the GNSS data to be ready by acquiring the mutex
	    osMutexWait(gnssDataMutexHandle, osWaitForever);
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <StartDefaultTask+0x68>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	4618      	mov	r0, r3
 8001256:	f007 fad3 	bl	8008800 <osMutexWait>
	    // Check if the data from the GPGGA message is valid.
	//    if(GNSSParser_Data.gpgga_data.valid == 1)
		if(1)
	    {
	      // The coordinates are stored in the nested 'xyz' structure.
	      sprintf(print_buffer, "Position: Lat: %f, Long: %f, Alt: %f, Valid: %d\r\n",
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <StartDefaultTask+0x6c>)
 800125c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001260:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <StartDefaultTask+0x6c>)
 8001262:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001266:	4912      	ldr	r1, [pc, #72]	@ (80012b0 <StartDefaultTask+0x6c>)
 8001268:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	@ 0x28
	              GNSSParser_Data.gpgga_data.xyz.lat,
	              GNSSParser_Data.gpgga_data.xyz.lon,
	              GNSSParser_Data.gpgga_data.xyz.alt,
				  GNSSParser_Data.gpgga_data.valid);
 800126c:	4e10      	ldr	r6, [pc, #64]	@ (80012b0 <StartDefaultTask+0x6c>)
 800126e:	f896 603e 	ldrb.w	r6, [r6, #62]	@ 0x3e
	      sprintf(print_buffer, "Position: Lat: %f, Long: %f, Alt: %f, Valid: %d\r\n",
 8001272:	f107 0c08 	add.w	ip, r7, #8
 8001276:	9604      	str	r6, [sp, #16]
 8001278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800127c:	e9cd 2300 	strd	r2, r3, [sp]
 8001280:	4622      	mov	r2, r4
 8001282:	462b      	mov	r3, r5
 8001284:	490b      	ldr	r1, [pc, #44]	@ (80012b4 <StartDefaultTask+0x70>)
 8001286:	4660      	mov	r0, ip
 8001288:	f00f fb34 	bl	80108f4 <siprintf>

	      GNSS_PRINT(print_buffer);
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4618      	mov	r0, r3
 8001292:	f001 f8dd 	bl	8002450 <GNSS_PRINT>
	    {
	      GNSS_PRINT("Waiting for a valid GPS fix...\r\n");
	    }

	    // Release the mutex to allow other tasks to access the data
	    osMutexRelease(gnssDataMutexHandle);
 8001296:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <StartDefaultTask+0x68>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f007 fafe 	bl	800889c <osMutexRelease>

	    // Delay for 2 seconds to avoid flooding the serial monitor
	    osDelay(2000);
 80012a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012a4:	f007 fa80 	bl	80087a8 <osDelay>
	    osMutexWait(gnssDataMutexHandle, osWaitForever);
 80012a8:	e7d0      	b.n	800124c <StartDefaultTask+0x8>
 80012aa:	bf00      	nop
 80012ac:	200005bc 	.word	0x200005bc
 80012b0:	200005d0 	.word	0x200005d0
 80012b4:	080135fc 	.word	0x080135fc

080012b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ca:	f002 f98d 	bl	80035e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40012c00 	.word	0x40012c00

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <Error_Handler+0x8>

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_MspInit+0x4c>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f2:	4a10      	ldr	r2, [pc, #64]	@ (8001334 <HAL_MspInit+0x4c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <HAL_MspInit+0x4c>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <HAL_MspInit+0x4c>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <HAL_MspInit+0x4c>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001310:	6593      	str	r3, [r2, #88]	@ 0x58
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <HAL_MspInit+0x4c>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	210f      	movs	r1, #15
 8001322:	f06f 0001 	mvn.w	r0, #1
 8001326:	f002 fa7f 	bl	8003828 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	@ 0x30
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001346:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <HAL_InitTick+0xc8>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134a:	4a2d      	ldr	r2, [pc, #180]	@ (8001400 <HAL_InitTick+0xc8>)
 800134c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001350:	6613      	str	r3, [r2, #96]	@ 0x60
 8001352:	4b2b      	ldr	r3, [pc, #172]	@ (8001400 <HAL_InitTick+0xc8>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800135e:	f107 020c 	add.w	r2, r7, #12
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f005 fb15 	bl	8006998 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800136e:	f005 fafd 	bl	800696c <HAL_RCC_GetPCLK2Freq>
 8001372:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001376:	4a23      	ldr	r2, [pc, #140]	@ (8001404 <HAL_InitTick+0xcc>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	0c9b      	lsrs	r3, r3, #18
 800137e:	3b01      	subs	r3, #1
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001382:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <HAL_InitTick+0xd0>)
 8001384:	4a21      	ldr	r2, [pc, #132]	@ (800140c <HAL_InitTick+0xd4>)
 8001386:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <HAL_InitTick+0xd0>)
 800138a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800138e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001390:	4a1d      	ldr	r2, [pc, #116]	@ (8001408 <HAL_InitTick+0xd0>)
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <HAL_InitTick+0xd0>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_InitTick+0xd0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_InitTick+0xd0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80013a8:	4817      	ldr	r0, [pc, #92]	@ (8001408 <HAL_InitTick+0xd0>)
 80013aa:	f006 f843 	bl	8007434 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80013b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d11b      	bne.n	80013f4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80013bc:	4812      	ldr	r0, [pc, #72]	@ (8001408 <HAL_InitTick+0xd0>)
 80013be:	f006 f89b 	bl	80074f8 <HAL_TIM_Base_Start_IT>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80013c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d111      	bne.n	80013f4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013d0:	2019      	movs	r0, #25
 80013d2:	f002 fa45 	bl	8003860 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d808      	bhi.n	80013ee <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	2019      	movs	r0, #25
 80013e2:	f002 fa21 	bl	8003828 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <HAL_InitTick+0xd8>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	e002      	b.n	80013f4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3730      	adds	r7, #48	@ 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	431bde83 	.word	0x431bde83
 8001408:	20000454 	.word	0x20000454
 800140c:	40012c00 	.word	0x40012c00
 8001410:	20000008 	.word	0x20000008

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <NMI_Handler+0x4>

0800141c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <MemManage_Handler+0x4>

0800142c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <UsageFault_Handler+0x4>

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001452:	f006 f8c1 	bl	80075d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000454 	.word	0x20000454

08001460 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <I2C1_EV_IRQHandler+0x10>)
 8001466:	f002 ffff 	bl	8004468 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000052c 	.word	0x2000052c

08001474 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <I2C1_ER_IRQHandler+0x10>)
 800147a:	f003 f80f 	bl	800449c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000052c 	.word	0x2000052c

08001488 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d903      	bls.n	80014a4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800149c:	f06f 0301 	mvn.w	r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	e025      	b.n	80014f0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	79fa      	ldrb	r2, [r7, #7]
 80014a8:	4914      	ldr	r1, [pc, #80]	@ (80014fc <BSP_COM_Init+0x74>)
 80014aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80014ae:	4814      	ldr	r0, [pc, #80]	@ (8001500 <BSP_COM_Init+0x78>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	4413      	add	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4403      	add	r3, r0
 80014ba:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 80014bc:	79fa      	ldrb	r2, [r7, #7]
 80014be:	4613      	mov	r3, r2
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001500 <BSP_COM_Init+0x78>)
 80014c8:	4413      	add	r3, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f86a 	bl	80015a4 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80014d0:	79fa      	ldrb	r2, [r7, #7]
 80014d2:	4613      	mov	r3, r2
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	4413      	add	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4a09      	ldr	r2, [pc, #36]	@ (8001500 <BSP_COM_Init+0x78>)
 80014dc:	4413      	add	r3, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f810 	bl	8001504 <MX_USART2_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80014ea:	f06f 0303 	mvn.w	r3, #3
 80014ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80014f0:	68fb      	ldr	r3, [r7, #12]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000000 	.word	0x20000000
 8001500:	200004a0 	.word	0x200004a0

08001504 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a15      	ldr	r2, [pc, #84]	@ (8001568 <MX_USART2_UART_Init+0x64>)
 8001514:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800151c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f006 fa24 	bl	800799c <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40004400 	.word	0x40004400

0800156c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <__io_putchar+0x30>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4613      	mov	r3, r2
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <__io_putchar+0x34>)
 8001584:	1898      	adds	r0, r3, r2
 8001586:	1d39      	adds	r1, r7, #4
 8001588:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158c:	2201      	movs	r2, #1
 800158e:	f006 fa5d 	bl	8007a4c <HAL_UART_Transmit>
  return ch;
 8001592:	687b      	ldr	r3, [r7, #4]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000528 	.word	0x20000528
 80015a0:	200004a0 	.word	0x200004a0

080015a4 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b0ac      	sub	sp, #176	@ 0xb0
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2288      	movs	r2, #136	@ 0x88
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00f fa02 	bl	80109be <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015be:	2300      	movs	r3, #0
 80015c0:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4618      	mov	r0, r3
 80015c8:	f005 fa78 	bl	8006abc <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015cc:	4b23      	ldr	r3, [pc, #140]	@ (800165c <USART2_MspInit+0xb8>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d0:	4a22      	ldr	r2, [pc, #136]	@ (800165c <USART2_MspInit+0xb8>)
 80015d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d8:	4b20      	ldr	r3, [pc, #128]	@ (800165c <USART2_MspInit+0xb8>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <USART2_MspInit+0xb8>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e8:	4a1c      	ldr	r2, [pc, #112]	@ (800165c <USART2_MspInit+0xb8>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f0:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <USART2_MspInit+0xb8>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80015fc:	2304      	movs	r3, #4
 80015fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8001614:	2307      	movs	r3, #7
 8001616:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800161a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001624:	f002 f988 	bl	8003938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8001628:	2308      	movs	r3, #8
 800162a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001640:	2307      	movs	r3, #7
 8001642:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001646:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800164a:	4619      	mov	r1, r3
 800164c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001650:	f002 f972 	bl	8003938 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8001654:	bf00      	nop
 8001656:	37b0      	adds	r7, #176	@ 0xb0
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000

08001660 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800166a:	4b1d      	ldr	r3, [pc, #116]	@ (80016e0 <BSP_I2C1_Init+0x80>)
 800166c:	4a1d      	ldr	r2, [pc, #116]	@ (80016e4 <BSP_I2C1_Init+0x84>)
 800166e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001670:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <BSP_I2C1_Init+0x88>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	491c      	ldr	r1, [pc, #112]	@ (80016e8 <BSP_I2C1_Init+0x88>)
 8001678:	600a      	str	r2, [r1, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d12b      	bne.n	80016d6 <BSP_I2C1_Init+0x76>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800167e:	4818      	ldr	r0, [pc, #96]	@ (80016e0 <BSP_I2C1_Init+0x80>)
 8001680:	f002 ffd5 	bl	800462e <HAL_I2C_GetState>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d125      	bne.n	80016d6 <BSP_I2C1_Init+0x76>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
    #else
      if(IsI2C1MspCbValid == 0U)
 800168a:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <BSP_I2C1_Init+0x8c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d107      	bne.n	80016a2 <BSP_I2C1_Init+0x42>
      {
        if(BSP_I2C1_RegisterDefaultMspCallbacks() != BSP_ERROR_NONE)
 8001692:	f000 f851 	bl	8001738 <BSP_I2C1_RegisterDefaultMspCallbacks>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <BSP_I2C1_Init+0x42>
        {
          return BSP_ERROR_MSP_FAILURE;
 800169c:	f06f 0309 	mvn.w	r3, #9
 80016a0:	e01a      	b.n	80016d8 <BSP_I2C1_Init+0x78>
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d116      	bne.n	80016d6 <BSP_I2C1_Init+0x76>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80016a8:	480d      	ldr	r0, [pc, #52]	@ (80016e0 <BSP_I2C1_Init+0x80>)
 80016aa:	f000 f87f 	bl	80017ac <MX_I2C1_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <BSP_I2C1_Init+0x5c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80016b4:	f06f 0307 	mvn.w	r3, #7
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	e00c      	b.n	80016d6 <BSP_I2C1_Init+0x76>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016bc:	2100      	movs	r1, #0
 80016be:	4808      	ldr	r0, [pc, #32]	@ (80016e0 <BSP_I2C1_Init+0x80>)
 80016c0:	f004 face 	bl	8005c60 <HAL_I2CEx_ConfigAnalogFilter>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <BSP_I2C1_Init+0x72>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80016ca:	f06f 0307 	mvn.w	r3, #7
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	e001      	b.n	80016d6 <BSP_I2C1_Init+0x76>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80016d6:	687b      	ldr	r3, [r7, #4]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000052c 	.word	0x2000052c
 80016e4:	40005400 	.word	0x40005400
 80016e8:	200005b4 	.word	0x200005b4
 80016ec:	200005b0 	.word	0x200005b0

080016f0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80016fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <BSP_I2C1_DeInit+0x40>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d011      	beq.n	8001726 <BSP_I2C1_DeInit+0x36>
  {
    if (--I2C1InitCounter == 0)
 8001702:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <BSP_I2C1_DeInit+0x40>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3b01      	subs	r3, #1
 8001708:	4a09      	ldr	r2, [pc, #36]	@ (8001730 <BSP_I2C1_DeInit+0x40>)
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <BSP_I2C1_DeInit+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d108      	bne.n	8001726 <BSP_I2C1_DeInit+0x36>
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001714:	4807      	ldr	r0, [pc, #28]	@ (8001734 <BSP_I2C1_DeInit+0x44>)
 8001716:	f002 fcb5 	bl	8004084 <HAL_I2C_DeInit>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <BSP_I2C1_DeInit+0x36>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001720:	f06f 0307 	mvn.w	r3, #7
 8001724:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001726:	687b      	ldr	r3, [r7, #4]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200005b4 	.word	0x200005b4
 8001734:	2000052c 	.word	0x2000052c

08001738 <BSP_I2C1_RegisterDefaultMspCallbacks>:
/**
  * @brief Register Default BSP I2C1 Bus Msp Callbacks
  * @retval BSP status
  */
int32_t BSP_I2C1_RegisterDefaultMspCallbacks (void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

  __HAL_I2C_RESET_HANDLE_STATE(&hi2c1);
 800173c:	4b13      	ldr	r3, [pc, #76]	@ (800178c <BSP_I2C1_RegisterDefaultMspCallbacks+0x54>)
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <BSP_I2C1_RegisterDefaultMspCallbacks+0x54>)
 8001746:	2200      	movs	r2, #0
 8001748:	67da      	str	r2, [r3, #124]	@ 0x7c
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <BSP_I2C1_RegisterDefaultMspCallbacks+0x54>)
 800174c:	2200      	movs	r2, #0
 800174e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Register MspInit Callback */
  if (HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_MSPINIT_CB_ID, I2C1_MspInit)  != HAL_OK)
 8001752:	4a0f      	ldr	r2, [pc, #60]	@ (8001790 <BSP_I2C1_RegisterDefaultMspCallbacks+0x58>)
 8001754:	2109      	movs	r1, #9
 8001756:	480d      	ldr	r0, [pc, #52]	@ (800178c <BSP_I2C1_RegisterDefaultMspCallbacks+0x54>)
 8001758:	f002 fce4 	bl	8004124 <HAL_I2C_RegisterCallback>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <BSP_I2C1_RegisterDefaultMspCallbacks+0x30>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8001762:	f06f 0303 	mvn.w	r3, #3
 8001766:	e00e      	b.n	8001786 <BSP_I2C1_RegisterDefaultMspCallbacks+0x4e>
  }

  /* Register MspDeInit Callback */
  if (HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_MSPDEINIT_CB_ID, I2C1_MspDeInit) != HAL_OK)
 8001768:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <BSP_I2C1_RegisterDefaultMspCallbacks+0x5c>)
 800176a:	210a      	movs	r1, #10
 800176c:	4807      	ldr	r0, [pc, #28]	@ (800178c <BSP_I2C1_RegisterDefaultMspCallbacks+0x54>)
 800176e:	f002 fcd9 	bl	8004124 <HAL_I2C_RegisterCallback>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <BSP_I2C1_RegisterDefaultMspCallbacks+0x46>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8001778:	f06f 0303 	mvn.w	r3, #3
 800177c:	e003      	b.n	8001786 <BSP_I2C1_RegisterDefaultMspCallbacks+0x4e>
  }
  IsI2C1MspCbValid = 1;
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000052c 	.word	0x2000052c
 8001790:	08001835 	.word	0x08001835
 8001794:	08001915 	.word	0x08001915
 8001798:	200005b0 	.word	0x200005b0

0800179c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80017a0:	f001 ff36 	bl	8003610 <HAL_GetTick>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a1c      	ldr	r2, [pc, #112]	@ (800182c <MX_I2C1_Init+0x80>)
 80017bc:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001830 <MX_I2C1_Init+0x84>)
 80017c2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f002 fb70 	bl	8003ed4 <HAL_I2C_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017fe:	2100      	movs	r1, #0
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f004 fa2d 	bl	8005c60 <HAL_I2CEx_ConfigAnalogFilter>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001810:	2100      	movs	r1, #0
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f004 fa6f 	bl	8005cf6 <HAL_I2CEx_ConfigDigitalFilter>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40005400 	.word	0x40005400
 8001830:	10909cec 	.word	0x10909cec

08001834 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0ac      	sub	sp, #176	@ 0xb0
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2288      	movs	r2, #136	@ 0x88
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f00f f8ba 	bl	80109be <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800184a:	2340      	movs	r3, #64	@ 0x40
 800184c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800184e:	2300      	movs	r3, #0
 8001850:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4618      	mov	r0, r3
 8001858:	f005 f930 	bl	8006abc <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	4b2b      	ldr	r3, [pc, #172]	@ (800190c <I2C1_MspInit+0xd8>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001860:	4a2a      	ldr	r2, [pc, #168]	@ (800190c <I2C1_MspInit+0xd8>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001868:	4b28      	ldr	r3, [pc, #160]	@ (800190c <I2C1_MspInit+0xd8>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001874:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001878:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187c:	2312      	movs	r3, #18
 800187e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800188e:	2304      	movs	r3, #4
 8001890:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001894:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001898:	4619      	mov	r1, r3
 800189a:	481d      	ldr	r0, [pc, #116]	@ (8001910 <I2C1_MspInit+0xdc>)
 800189c:	f002 f84c 	bl	8003938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80018a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a8:	2312      	movs	r3, #18
 80018aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80018ba:	2304      	movs	r3, #4
 80018bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80018c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018c4:	4619      	mov	r1, r3
 80018c6:	4812      	ldr	r0, [pc, #72]	@ (8001910 <I2C1_MspInit+0xdc>)
 80018c8:	f002 f836 	bl	8003938 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018cc:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <I2C1_MspInit+0xd8>)
 80018ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d0:	4a0e      	ldr	r2, [pc, #56]	@ (800190c <I2C1_MspInit+0xd8>)
 80018d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <I2C1_MspInit+0xd8>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2105      	movs	r1, #5
 80018e8:	201f      	movs	r0, #31
 80018ea:	f001 ff9d 	bl	8003828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018ee:	201f      	movs	r0, #31
 80018f0:	f001 ffb6 	bl	8003860 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2105      	movs	r1, #5
 80018f8:	2020      	movs	r0, #32
 80018fa:	f001 ff95 	bl	8003828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80018fe:	2020      	movs	r0, #32
 8001900:	f001 ffae 	bl	8003860 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001904:	bf00      	nop
 8001906:	37b0      	adds	r7, #176	@ 0xb0
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	48000400 	.word	0x48000400

08001914 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800191c:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <I2C1_MspDeInit+0x3c>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	4a0b      	ldr	r2, [pc, #44]	@ (8001950 <I2C1_MspDeInit+0x3c>)
 8001922:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001926:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001928:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800192c:	4809      	ldr	r0, [pc, #36]	@ (8001954 <I2C1_MspDeInit+0x40>)
 800192e:	f002 f9ad 	bl	8003c8c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001932:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001936:	4807      	ldr	r0, [pc, #28]	@ (8001954 <I2C1_MspDeInit+0x40>)
 8001938:	f002 f9a8 	bl	8003c8c <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800193c:	201f      	movs	r0, #31
 800193e:	f001 ff9d 	bl	800387c <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001942:	2020      	movs	r0, #32
 8001944:	f001 ff9a 	bl	800387c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	48000400 	.word	0x48000400

08001958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
	return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_kill>:

int _kill(int pid, int sig)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001972:	f00f f89b 	bl	8010aac <__errno>
 8001976:	4603      	mov	r3, r0
 8001978:	2216      	movs	r2, #22
 800197a:	601a      	str	r2, [r3, #0]
	return -1;
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_exit>:

void _exit (int status)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ffe7 	bl	8001968 <_kill>
	while (1) {}		/* Make sure we hang here */
 800199a:	bf00      	nop
 800199c:	e7fd      	b.n	800199a <_exit+0x12>

0800199e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e00a      	b.n	80019c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019b0:	f3af 8000 	nop.w
 80019b4:	4601      	mov	r1, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	60ba      	str	r2, [r7, #8]
 80019bc:	b2ca      	uxtb	r2, r1
 80019be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dbf0      	blt.n	80019b0 <_read+0x12>
	}

return len;
 80019ce:	687b      	ldr	r3, [r7, #4]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e009      	b.n	80019fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	60ba      	str	r2, [r7, #8]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fdba 	bl	800156c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	dbf1      	blt.n	80019ea <_write+0x12>
	}
	return len;
 8001a06:	687b      	ldr	r3, [r7, #4]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_close>:

int _close(int file)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a38:	605a      	str	r2, [r3, #4]
	return 0;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_isatty>:

int _isatty(int file)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	return 1;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b085      	sub	sp, #20
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
	return 0;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a80:	4a14      	ldr	r2, [pc, #80]	@ (8001ad4 <_sbrk+0x5c>)
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <_sbrk+0x60>)
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a94:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <_sbrk+0x64>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	@ (8001ae0 <_sbrk+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d207      	bcs.n	8001ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa8:	f00f f800 	bl	8010aac <__errno>
 8001aac:	4603      	mov	r3, r0
 8001aae:	220c      	movs	r2, #12
 8001ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	e009      	b.n	8001acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001abe:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a05      	ldr	r2, [pc, #20]	@ (8001adc <_sbrk+0x64>)
 8001ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20018000 	.word	0x20018000
 8001ad8:	00000400 	.word	0x00000400
 8001adc:	200005b8 	.word	0x200005b8
 8001ae0:	20006758 	.word	0x20006758

08001ae4 <MX_GNSS_Init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void MX_GNSS_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GNSS_Init_PreTreatment */

  /* USER CODE END GNSS_Init_PreTreatment */

  /* Initialize the BSP common utilities*/
  if(BSP_COM_Init(COM1) != BSP_ERROR_NONE)
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff fccd 	bl	8001488 <BSP_COM_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_GNSS_Init+0x14>
  {
    Error_Handler();
 8001af4:	f7ff fbf2 	bl	80012dc <Error_Handler>
  }

  /* USER CODE BEGIN GNSS_Init_PostTreatment */

  /* USER CODE END GNSS_Init_PostTreatment */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <MX_GNSS_PreOSInit>:

void MX_GNSS_PreOSInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GNSS_PreOSInit */

  /* USER CODE END GNSS_PreOSInit */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <MX_GNSS_PostOSInit>:

void MX_GNSS_PostOSInit(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GNSS_PostOSInit_PreTreatment */

  /* USER CODE END GNSS_PostOSInit_PreTreatment */

  /* Initialize the tasks */
  Console_Parse_Task_Init();
 8001b0e:	f000 f853 	bl	8001bb8 <Console_Parse_Task_Init>
#if (USE_I2C == 1)
  Background_Task_Init();
 8001b12:	f000 f835 	bl	8001b80 <Background_Task_Init>
#endif /* USE_I2C */
  Teseo_Consumer_Task_Init();
 8001b16:	f000 f817 	bl	8001b48 <Teseo_Consumer_Task_Init>
  PRINT_DBG("Booting...\r\n");

  /* USER CODE BEGIN GNSS_PostOSInit_PostTreatment */

  /* USER CODE END GNSS_PostOSInit_PostTreatment */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <GNSSData_Mutex_Init>:

/*
 * This function creates the Mutex for GNSS Data access
 */
static void GNSSData_Mutex_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexDef(data_mutex);
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
  gnssDataMutexHandle = osMutexCreate(osMutex(data_mutex));
 8001b2e:	463b      	mov	r3, r7
 8001b30:	4618      	mov	r0, r3
 8001b32:	f006 fe4d 	bl	80087d0 <osMutexCreate>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a02      	ldr	r2, [pc, #8]	@ (8001b44 <GNSSData_Mutex_Init+0x24>)
 8001b3a:	6013      	str	r3, [r2, #0]
#else
  gnssDataMutexHandle = osMutexNew((osMutexAttr_t *)&mutex_attributes);
#endif /* osCMSIS */
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200005bc 	.word	0x200005bc

08001b48 <Teseo_Consumer_Task_Init>:

/*
 * This function creates the task reading the messages coming from Teseo
 */
static void Teseo_Consumer_Task_Init(void)
{
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osThreadDef(teseoConsumerTask, TeseoConsumerTask, osPriorityNormal, 0, CONSUMER_STACK_SIZE);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <Teseo_Consumer_Task_Init+0x30>)
 8001b50:	1d3c      	adds	r4, r7, #4
 8001b52:	461d      	mov	r5, r3
 8001b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  teseoConsumerTaskHandle = osThreadCreate(osThread(teseoConsumerTask), NULL);
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f006 fdc1 	bl	80086ec <osThreadCreate>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a03      	ldr	r2, [pc, #12]	@ (8001b7c <Teseo_Consumer_Task_Init+0x34>)
 8001b6e:	6013      	str	r3, [r2, #0]
#else
  task_attributes.name = "teseoConsumerTask";
  task_attributes.stack_size = CONSUMER_STACK_SIZE;
  teseoConsumerTaskHandle = osThreadNew(TeseoConsumerTask, NULL, (const osThreadAttr_t *)&task_attributes);
#endif /* osCMSIS */
}
 8001b70:	bf00      	nop
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bdb0      	pop	{r4, r5, r7, pc}
 8001b78:	08013644 	.word	0x08013644
 8001b7c:	200005c0 	.word	0x200005c0

08001b80 <Background_Task_Init>:

#if (USE_I2C == 1)
/* This function creates a background task for I2C FSM */
static void Background_Task_Init(void)
{
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osThreadDef(backgroundTask, BackgroundTask, osPriorityNormal, 0, BACKGROUND_STACK_SIZE);
 8001b86:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <Background_Task_Init+0x30>)
 8001b88:	1d3c      	adds	r4, r7, #4
 8001b8a:	461d      	mov	r5, r3
 8001b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  backgroundTaskHandle = osThreadCreate(osThread(backgroundTask), NULL);
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f006 fda5 	bl	80086ec <osThreadCreate>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4a03      	ldr	r2, [pc, #12]	@ (8001bb4 <Background_Task_Init+0x34>)
 8001ba6:	6013      	str	r3, [r2, #0]
#else
  task_attributes.name = "backgroundTask";
  task_attributes.stack_size = BACKGROUND_STACK_SIZE;
  backgroundTaskHandle = osThreadNew(BackgroundTask, NULL, (const osThreadAttr_t *)&task_attributes);
#endif /* osCMSIS */
}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb0:	08013670 	.word	0x08013670
 8001bb4:	200005c8 	.word	0x200005c8

08001bb8 <Console_Parse_Task_Init>:
#endif /* USE_I2C */

static void Console_Parse_Task_Init(void)
{
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osThreadDef(consoleParseTask, ConsoleParseTask, osPriorityNormal, 0, CONSOLE_STACK_SIZE);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <Console_Parse_Task_Init+0x30>)
 8001bc0:	1d3c      	adds	r4, r7, #4
 8001bc2:	461d      	mov	r5, r3
 8001bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  consoleParseTaskHandle = osThreadCreate(osThread(consoleParseTask), NULL);
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f006 fd89 	bl	80086ec <osThreadCreate>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a03      	ldr	r2, [pc, #12]	@ (8001bec <Console_Parse_Task_Init+0x34>)
 8001bde:	6013      	str	r3, [r2, #0]
#else
  task_attributes.name = "consoleParseTask";
  task_attributes.stack_size = CONSOLE_STACK_SIZE;
  consoleParseTaskHandle = osThreadNew(ConsoleParseTask, NULL, (const osThreadAttr_t *)&task_attributes);
#endif /* osCMSIS */
}
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}
 8001be8:	080136a0 	.word	0x080136a0
 8001bec:	200005c4 	.word	0x200005c4

08001bf0 <BackgroundTask>:
#if (osCMSIS < 0x20000U)
static void BackgroundTask(void const *argument)
#else
static void BackgroundTask(void *argument)
#endif /* osCMSIS */
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    GNSS1A1_GNSS_BackgroundProcess(GNSS1A1_TESEO_LIV3F);
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f001 fc0f 	bl	800341c <GNSS1A1_GNSS_BackgroundProcess>
 8001bfe:	e7fb      	b.n	8001bf8 <BackgroundTask+0x8>

08001c00 <TeseoConsumerTask>:
#if (osCMSIS < 0x20000U)
static void TeseoConsumerTask(void const *argument)
#else
static void TeseoConsumerTask(void *argument)
#endif /* osCMSIS */
{
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GNSSParser_Status_t status, check;
  const GNSS1A1_GNSS_Msg_t *gnssMsg;

  GNSS1A1_GNSS_Init(GNSS1A1_TESEO_LIV3F);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f001 fb49 	bl	80032a0 <GNSS1A1_GNSS_Init>

#if (configUSE_DATALOG == 1)
  gnss_feature |= DATALOG;
#endif /* configUSE_DATALOG */

  GNSSData_Mutex_Init();
 8001c0e:	f7ff ff87 	bl	8001b20 <GNSSData_Mutex_Init>
  GNSS_PARSER_Init(&GNSSParser_Data);
 8001c12:	4830      	ldr	r0, [pc, #192]	@ (8001cd4 <TeseoConsumerTask+0xd4>)
 8001c14:	f00a fcc8 	bl	800c5a8 <GNSS_PARSER_Init>

  for(;;)
  {
    gnssMsg = GNSS1A1_GNSS_GetMessage(GNSS1A1_TESEO_LIV3F);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f001 fb5d 	bl	80032d8 <GNSS1A1_GNSS_GetMessage>
 8001c1e:	6138      	str	r0, [r7, #16]

    if(gnssMsg == NULL)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d053      	beq.n	8001cce <TeseoConsumerTask+0xce>
    {
      continue;
    }

    check = GNSS_PARSER_CheckSanity((uint8_t *)gnssMsg->buf, gnssMsg->len);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	6819      	ldr	r1, [r3, #0]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	889b      	ldrh	r3, [r3, #4]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	2200      	movs	r2, #0
 8001c32:	461c      	mov	r4, r3
 8001c34:	4615      	mov	r5, r2
 8001c36:	4622      	mov	r2, r4
 8001c38:	462b      	mov	r3, r5
 8001c3a:	4608      	mov	r0, r1
 8001c3c:	f00a fd49 	bl	800c6d2 <GNSS_PARSER_CheckSanity>
 8001c40:	4603      	mov	r3, r0
 8001c42:	73fb      	strb	r3, [r7, #15]

    if(check != GNSS_PARSER_ERROR)
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d03c      	beq.n	8001cc4 <TeseoConsumerTask+0xc4>
    {
      for(int m = 0; m < NMEA_MSGS_NUM; m++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e036      	b.n	8001cbe <TeseoConsumerTask+0xbe>
      {
        osMutexWait(gnssDataMutexHandle, osWaitForever);
 8001c50:	4b21      	ldr	r3, [pc, #132]	@ (8001cd8 <TeseoConsumerTask+0xd8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f006 fdd1 	bl	8008800 <osMutexWait>
        status = GNSS_PARSER_ParseMsg(&GNSSParser_Data, (eNMEAMsg)m, (uint8_t *)gnssMsg->buf);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	b2d9      	uxtb	r1, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	481a      	ldr	r0, [pc, #104]	@ (8001cd4 <TeseoConsumerTask+0xd4>)
 8001c6a:	f00a fd97 	bl	800c79c <GNSS_PARSER_ParseMsg>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73bb      	strb	r3, [r7, #14]
        osMutexRelease(gnssDataMutexHandle);
 8001c72:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <TeseoConsumerTask+0xd8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f006 fe10 	bl	800889c <osMutexRelease>

        if((status != GNSS_PARSER_ERROR) && ((eNMEAMsg)m == PSTMVER))
 8001c7c:	7bbb      	ldrb	r3, [r7, #14]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d006      	beq.n	8001c90 <TeseoConsumerTask+0x90>
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d102      	bne.n	8001c90 <TeseoConsumerTask+0x90>
        {
          GNSS_DATA_GetPSTMVerInfo(&GNSSParser_Data);
 8001c8a:	4812      	ldr	r0, [pc, #72]	@ (8001cd4 <TeseoConsumerTask+0xd4>)
 8001c8c:	f00a fbec 	bl	800c468 <GNSS_DATA_GetPSTMVerInfo>
        if((status != GNSS_PARSER_ERROR) && ((eNMEAMsg)m == PSTMDATALOG))
        {
          GNSS_DATA_GetDatalogInfo(&GNSSParser_Data);
        }
#endif /* configUSE_DATALOG */
        if((status != GNSS_PARSER_ERROR) && ((eNMEAMsg)m == PSTMSGL))
 8001c90:	7bbb      	ldrb	r3, [r7, #14]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d006      	beq.n	8001ca4 <TeseoConsumerTask+0xa4>
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d102      	bne.n	8001ca4 <TeseoConsumerTask+0xa4>
        {
          GNSS_DATA_GetMsglistAck(&GNSSParser_Data);
 8001c9e:	480d      	ldr	r0, [pc, #52]	@ (8001cd4 <TeseoConsumerTask+0xd4>)
 8001ca0:	f00a fc1c 	bl	800c4dc <GNSS_DATA_GetMsglistAck>
        }

        if((status != GNSS_PARSER_ERROR) && ((eNMEAMsg)m == PSTMSAVEPAR))
 8001ca4:	7bbb      	ldrb	r3, [r7, #14]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d006      	beq.n	8001cb8 <TeseoConsumerTask+0xb8>
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b0d      	cmp	r3, #13
 8001cb0:	d102      	bne.n	8001cb8 <TeseoConsumerTask+0xb8>
        {
          GNSS_DATA_GetGNSSAck(&GNSSParser_Data);
 8001cb2:	4808      	ldr	r0, [pc, #32]	@ (8001cd4 <TeseoConsumerTask+0xd4>)
 8001cb4:	f00a fc3a 	bl	800c52c <GNSS_DATA_GetGNSSAck>
      for(int m = 0; m < NMEA_MSGS_NUM; m++)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2b0d      	cmp	r3, #13
 8001cc2:	ddc5      	ble.n	8001c50 <TeseoConsumerTask+0x50>
        }
      }
    }
  GNSS1A1_GNSS_ReleaseMessage(GNSS1A1_TESEO_LIV3F, gnssMsg);
 8001cc4:	6939      	ldr	r1, [r7, #16]
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f001 fb1c 	bl	8003304 <GNSS1A1_GNSS_ReleaseMessage>
 8001ccc:	e7a4      	b.n	8001c18 <TeseoConsumerTask+0x18>
      continue;
 8001cce:	bf00      	nop
    gnssMsg = GNSS1A1_GNSS_GetMessage(GNSS1A1_TESEO_LIV3F);
 8001cd0:	e7a2      	b.n	8001c18 <TeseoConsumerTask+0x18>
 8001cd2:	bf00      	nop
 8001cd4:	200005d0 	.word	0x200005d0
 8001cd8:	200005bc 	.word	0x200005bc

08001cdc <ConsoleParseTask>:
#if (osCMSIS < 0x20000U)
static void ConsoleParseTask(void const *argument)
#else
static void ConsoleParseTask(void *argument)
#endif /* osCMSIS */
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	@ 0x30
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  char cmd[32] = {0};
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	2220      	movs	r2, #32
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f00e fe66 	bl	80109be <memset>
  uint8_t ch;

  showCmds();
 8001cf2:	f000 fc41 	bl	8002578 <showCmds>
  for(;;)
  {
    ch = '\0';
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]

    while(!ConsoleReadable())
 8001cfa:	e001      	b.n	8001d00 <ConsoleParseTask+0x24>
    {
      osThreadYield();
 8001cfc:	f006 fd42 	bl	8008784 <osThreadYield>
    while(!ConsoleReadable())
 8001d00:	f000 fb3c 	bl	800237c <ConsoleReadable>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f8      	beq.n	8001cfc <ConsoleParseTask+0x20>
    }
    HAL_UART_Receive(&hcom_uart[COM1], &ch, 1, 100);
 8001d0a:	f107 010f 	add.w	r1, r7, #15
 8001d0e:	2364      	movs	r3, #100	@ 0x64
 8001d10:	2201      	movs	r2, #1
 8001d12:	4822      	ldr	r0, [pc, #136]	@ (8001d9c <ConsoleParseTask+0xc0>)
 8001d14:	f005 ff23 	bl	8007b5e <HAL_UART_Receive>

    if((ch > 31 && ch < 126))
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	2b1f      	cmp	r3, #31
 8001d1c:	d906      	bls.n	8001d2c <ConsoleParseTask+0x50>
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	2b7d      	cmp	r3, #125	@ 0x7d
 8001d22:	d803      	bhi.n	8001d2c <ConsoleParseTask+0x50>
    {
      PUTC_OUT((char)ch);
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fbb6 	bl	8002498 <GNSS_PUTC>
    }
    if(ch == '\r')
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b0d      	cmp	r3, #13
 8001d30:	d122      	bne.n	8001d78 <ConsoleParseTask+0x9c>
    {
      PRINT_OUT("\n\r");
 8001d32:	481b      	ldr	r0, [pc, #108]	@ (8001da0 <ConsoleParseTask+0xc4>)
 8001d34:	f000 fb8c 	bl	8002450 <GNSS_PRINT>

      if (strlen(cmd) > 0)
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d017      	beq.n	8001d72 <ConsoleParseTask+0x96>
      {
        cmd[strlen(cmd)] = '\0';
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe faa2 	bl	8000290 <strlen>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	3330      	adds	r3, #48	@ 0x30
 8001d50:	443b      	add	r3, r7
 8001d52:	2200      	movs	r2, #0
 8001d54:	f803 2c20 	strb.w	r2, [r3, #-32]
        AppCmdProcess(cmd);
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 f85f 	bl	8001e20 <AppCmdProcess>
        memset(cmd, 0, sizeof(cmd));
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	2220      	movs	r2, #32
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f00e fe27 	bl	80109be <memset>
 8001d70:	e7c1      	b.n	8001cf6 <ConsoleParseTask+0x1a>
      }
      else
      {
        showPrompt();
 8001d72:	f000 fc5b 	bl	800262c <showPrompt>
 8001d76:	e7be      	b.n	8001cf6 <ConsoleParseTask+0x1a>
      }
    }
    else if((ch > 31 && ch < 126))
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	2b1f      	cmp	r3, #31
 8001d7c:	d9bb      	bls.n	8001cf6 <ConsoleParseTask+0x1a>
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	2b7d      	cmp	r3, #125	@ 0x7d
 8001d82:	d8b8      	bhi.n	8001cf6 <ConsoleParseTask+0x1a>
    {
      cmd[strlen(cmd)] = ch;
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fa81 	bl	8000290 <strlen>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	3330      	adds	r3, #48	@ 0x30
 8001d94:	443b      	add	r3, r7
 8001d96:	f803 2c20 	strb.w	r2, [r3, #-32]
    ch = '\0';
 8001d9a:	e7ac      	b.n	8001cf6 <ConsoleParseTask+0x1a>
 8001d9c:	200004a0 	.word	0x200004a0
 8001da0:	080136bc 	.word	0x080136bc

08001da4 <ConsoleRead>:
    }
  }
}

static void ConsoleRead(uint8_t *string)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint8_t ch;

  while(1)
  {
    ch = '\0';
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]

    HAL_UART_Receive(&hcom_uart[COM1], &ch, 1, 1000);
 8001db0:	f107 010f 	add.w	r1, r7, #15
 8001db4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db8:	2201      	movs	r2, #1
 8001dba:	4817      	ldr	r0, [pc, #92]	@ (8001e18 <ConsoleRead+0x74>)
 8001dbc:	f005 fecf 	bl	8007b5e <HAL_UART_Receive>

    if((ch > 31 && ch < 126))
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b1f      	cmp	r3, #31
 8001dc4:	d906      	bls.n	8001dd4 <ConsoleRead+0x30>
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	2b7d      	cmp	r3, #125	@ 0x7d
 8001dca:	d803      	bhi.n	8001dd4 <ConsoleRead+0x30>
    {
      PUTC_OUT((char)ch);
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fb62 	bl	8002498 <GNSS_PUTC>
    }
    if(ch == '\r')
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b0d      	cmp	r3, #13
 8001dd8:	d10b      	bne.n	8001df2 <ConsoleRead+0x4e>
    {
      PRINT_OUT("\n\r");
 8001dda:	4810      	ldr	r0, [pc, #64]	@ (8001e1c <ConsoleRead+0x78>)
 8001ddc:	f000 fb38 	bl	8002450 <GNSS_PRINT>
      string[strlen((char *)string)] = '\0';
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7fe fa55 	bl	8000290 <strlen>
 8001de6:	4602      	mov	r2, r0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
      break;
 8001df0:	e00e      	b.n	8001e10 <ConsoleRead+0x6c>
    }
    else
    {
      if((ch > 31 && ch < 126)) {
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	2b1f      	cmp	r3, #31
 8001df6:	d9d9      	bls.n	8001dac <ConsoleRead+0x8>
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	2b7d      	cmp	r3, #125	@ 0x7d
 8001dfc:	d8d6      	bhi.n	8001dac <ConsoleRead+0x8>
        string[strlen((char *)string)] = ch;
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7fe fa46 	bl	8000290 <strlen>
 8001e04:	4602      	mov	r2, r0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	701a      	strb	r2, [r3, #0]
    ch = '\0';
 8001e0e:	e7cd      	b.n	8001dac <ConsoleRead+0x8>
      }
    }
  }
}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200004a0 	.word	0x200004a0
 8001e1c:	080136bc 	.word	0x080136bc

08001e20 <AppCmdProcess>:

static void AppCmdProcess(char *com)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0b8      	sub	sp, #224	@ 0xe0
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint8_t secs[MAX_STR_LEN];
  char msg[128];
  uint8_t status;
  static int32_t tracked = 0;

  if(strcmp((char *)com, "y") == 0)
 8001e28:	49b0      	ldr	r1, [pc, #704]	@ (80020ec <AppCmdProcess+0x2cc>)
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe f9d0 	bl	80001d0 <strcmp>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d110      	bne.n	8001e58 <AppCmdProcess+0x38>
    * 0x8 $GPGST Message
    * 0x40 $GPRMC Message
    * 0x80000 $GPGSV Message
    * 0x100000 $GPGLL Message
    */
    int lowMask = 0x18004F;
 8001e36:	4bae      	ldr	r3, [pc, #696]	@ (80020f0 <AppCmdProcess+0x2d0>)
 8001e38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    int highMask = gnss_feature;
 8001e3c:	4bad      	ldr	r3, [pc, #692]	@ (80020f4 <AppCmdProcess+0x2d4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* PRINT_DBG("Saving Configuration..."); */
    AppCfgMsgList(lowMask, highMask);
 8001e44:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001e48:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001e4c:	f000 fa88 	bl	8002360 <AppCfgMsgList>

    PRINT_OUT("\r\n>");
 8001e50:	48a9      	ldr	r0, [pc, #676]	@ (80020f8 <AppCmdProcess+0x2d8>)
 8001e52:	f000 fafd 	bl	8002450 <GNSS_PRINT>

  else
  {
    PRINT_OUT("Command not valid.\r\n\n>");
  }
}
 8001e56:	e25c      	b.n	8002312 <AppCmdProcess+0x4f2>
  else if((strcmp((char *)com, "1") == 0 || strcmp((char *)com, "getpos") == 0) ||
 8001e58:	49a8      	ldr	r1, [pc, #672]	@ (80020fc <AppCmdProcess+0x2dc>)
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe f9b8 	bl	80001d0 <strcmp>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d014      	beq.n	8001e90 <AppCmdProcess+0x70>
 8001e66:	49a6      	ldr	r1, [pc, #664]	@ (8002100 <AppCmdProcess+0x2e0>)
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7fe f9b1 	bl	80001d0 <strcmp>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00d      	beq.n	8001e90 <AppCmdProcess+0x70>
     (strcmp((char *)com, "2") == 0 || strcmp((char *)com, "lastpos") == 0))
 8001e74:	49a3      	ldr	r1, [pc, #652]	@ (8002104 <AppCmdProcess+0x2e4>)
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe f9aa 	bl	80001d0 <strcmp>
 8001e7c:	4603      	mov	r3, r0
  else if((strcmp((char *)com, "1") == 0 || strcmp((char *)com, "getpos") == 0) ||
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <AppCmdProcess+0x70>
     (strcmp((char *)com, "2") == 0 || strcmp((char *)com, "lastpos") == 0))
 8001e82:	49a1      	ldr	r1, [pc, #644]	@ (8002108 <AppCmdProcess+0x2e8>)
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7fe f9a3 	bl	80001d0 <strcmp>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10f      	bne.n	8001eb0 <AppCmdProcess+0x90>
    osMutexWait(gnssDataMutexHandle, osWaitForever);
 8001e90:	4b9e      	ldr	r3, [pc, #632]	@ (800210c <AppCmdProcess+0x2ec>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f006 fcb1 	bl	8008800 <osMutexWait>
    GNSS_DATA_GetValidInfo(&GNSSParser_Data);
 8001e9e:	489c      	ldr	r0, [pc, #624]	@ (8002110 <AppCmdProcess+0x2f0>)
 8001ea0:	f009 f866 	bl	800af70 <GNSS_DATA_GetValidInfo>
    osMutexRelease(gnssDataMutexHandle);
 8001ea4:	4b99      	ldr	r3, [pc, #612]	@ (800210c <AppCmdProcess+0x2ec>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f006 fcf7 	bl	800889c <osMutexRelease>
 8001eae:	e230      	b.n	8002312 <AppCmdProcess+0x4f2>
  else if(strcmp((char *)com, "3") == 0 || strcmp((char *)com, "wakestatus") == 0)
 8001eb0:	4998      	ldr	r1, [pc, #608]	@ (8002114 <AppCmdProcess+0x2f4>)
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7fe f98c 	bl	80001d0 <strcmp>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <AppCmdProcess+0xac>
 8001ebe:	4996      	ldr	r1, [pc, #600]	@ (8002118 <AppCmdProcess+0x2f8>)
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7fe f985 	bl	80001d0 <strcmp>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d116      	bne.n	8001efa <AppCmdProcess+0xda>
    GNSS1A1_GNSS_Wakeup_Status(GNSS1A1_TESEO_LIV3F, &status);
 8001ecc:	f107 030f 	add.w	r3, r7, #15
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f001 fa56 	bl	8003384 <GNSS1A1_GNSS_Wakeup_Status>
    PRINT_OUT("WakeUp Status: ");
 8001ed8:	4890      	ldr	r0, [pc, #576]	@ (800211c <AppCmdProcess+0x2fc>)
 8001eda:	f000 fab9 	bl	8002450 <GNSS_PRINT>
    status == 0 ? PRINT_OUT("0") : PRINT_OUT("1");
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <AppCmdProcess+0xcc>
 8001ee4:	488e      	ldr	r0, [pc, #568]	@ (8002120 <AppCmdProcess+0x300>)
 8001ee6:	f000 fab3 	bl	8002450 <GNSS_PRINT>
 8001eea:	e002      	b.n	8001ef2 <AppCmdProcess+0xd2>
 8001eec:	4883      	ldr	r0, [pc, #524]	@ (80020fc <AppCmdProcess+0x2dc>)
 8001eee:	f000 faaf 	bl	8002450 <GNSS_PRINT>
    PRINT_OUT("\r\n>");
 8001ef2:	4881      	ldr	r0, [pc, #516]	@ (80020f8 <AppCmdProcess+0x2d8>)
 8001ef4:	f000 faac 	bl	8002450 <GNSS_PRINT>
 8001ef8:	e20b      	b.n	8002312 <AppCmdProcess+0x4f2>
  else if(strcmp((char *)com, "4") == 0 || strcmp((char *)com, "help") == 0)
 8001efa:	498a      	ldr	r1, [pc, #552]	@ (8002124 <AppCmdProcess+0x304>)
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7fe f967 	bl	80001d0 <strcmp>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <AppCmdProcess+0xf6>
 8001f08:	4987      	ldr	r1, [pc, #540]	@ (8002128 <AppCmdProcess+0x308>)
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe f960 	bl	80001d0 <strcmp>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <AppCmdProcess+0xfc>
    showCmds();
 8001f16:	f000 fb2f 	bl	8002578 <showCmds>
 8001f1a:	e1fa      	b.n	8002312 <AppCmdProcess+0x4f2>
  else if(strcmp((char *)com, "5") == 0 || strcmp((char *)com, "debug") == 0)
 8001f1c:	4983      	ldr	r1, [pc, #524]	@ (800212c <AppCmdProcess+0x30c>)
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe f956 	bl	80001d0 <strcmp>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <AppCmdProcess+0x118>
 8001f2a:	4981      	ldr	r1, [pc, #516]	@ (8002130 <AppCmdProcess+0x310>)
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7fe f94f 	bl	80001d0 <strcmp>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d115      	bne.n	8001f64 <AppCmdProcess+0x144>
    GNSSParser_Data.debug = (GNSSParser_Data.debug == DEBUG_ON ? DEBUG_OFF : DEBUG_ON);
 8001f38:	4b75      	ldr	r3, [pc, #468]	@ (8002110 <AppCmdProcess+0x2f0>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	bf14      	ite	ne
 8001f40:	2301      	movne	r3, #1
 8001f42:	2300      	moveq	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b71      	ldr	r3, [pc, #452]	@ (8002110 <AppCmdProcess+0x2f0>)
 8001f4a:	701a      	strb	r2, [r3, #0]
    if(GNSSParser_Data.debug == DEBUG_OFF)
 8001f4c:	4b70      	ldr	r3, [pc, #448]	@ (8002110 <AppCmdProcess+0x2f0>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d103      	bne.n	8001f5c <AppCmdProcess+0x13c>
      PRINT_OUT("Debug: OFF\r\n>");
 8001f54:	4877      	ldr	r0, [pc, #476]	@ (8002134 <AppCmdProcess+0x314>)
 8001f56:	f000 fa7b 	bl	8002450 <GNSS_PRINT>
    if(GNSSParser_Data.debug == DEBUG_OFF)
 8001f5a:	e1da      	b.n	8002312 <AppCmdProcess+0x4f2>
      PRINT_OUT("Debug: ON\r\n>");
 8001f5c:	4876      	ldr	r0, [pc, #472]	@ (8002138 <AppCmdProcess+0x318>)
 8001f5e:	f000 fa77 	bl	8002450 <GNSS_PRINT>
    if(GNSSParser_Data.debug == DEBUG_OFF)
 8001f62:	e1d6      	b.n	8002312 <AppCmdProcess+0x4f2>
  else if(strcmp((char *)com, "6") == 0 || strcmp((char *)com, "track") == 0)
 8001f64:	4975      	ldr	r1, [pc, #468]	@ (800213c <AppCmdProcess+0x31c>)
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe f932 	bl	80001d0 <strcmp>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <AppCmdProcess+0x160>
 8001f72:	4973      	ldr	r1, [pc, #460]	@ (8002140 <AppCmdProcess+0x320>)
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe f92b 	bl	80001d0 <strcmp>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d166      	bne.n	800204e <AppCmdProcess+0x22e>
      memset(tracks, 0, 16);
 8001f80:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001f84:	2210      	movs	r2, #16
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00e fd18 	bl	80109be <memset>
      sprintf(msg, "How many positions do you want to track? (max allowed %d)\r\n>", (int)MAX_STOR_POS);
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	2240      	movs	r2, #64	@ 0x40
 8001f94:	496b      	ldr	r1, [pc, #428]	@ (8002144 <AppCmdProcess+0x324>)
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00e fcac 	bl	80108f4 <siprintf>
      PRINT_OUT(msg);
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fa55 	bl	8002450 <GNSS_PRINT>
      ConsoleRead((uint8_t *)tracks);
 8001fa6:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fefa 	bl	8001da4 <ConsoleRead>
    } while(atoi((char *)tracks) < 0 || atoi((char *)tracks) > MAX_STOR_POS);
 8001fb0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00c ff1a 	bl	800edee <atoi>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	dbdf      	blt.n	8001f80 <AppCmdProcess+0x160>
 8001fc0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00c ff12 	bl	800edee <atoi>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b40      	cmp	r3, #64	@ 0x40
 8001fce:	dcd7      	bgt.n	8001f80 <AppCmdProcess+0x160>
      memset(secs, 0, 16);
 8001fd0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f00e fcf0 	bl	80109be <memset>
      PRINT_OUT("How many seconds do you want to delay while tracking? (>= 0)\r\n> ");
 8001fde:	485a      	ldr	r0, [pc, #360]	@ (8002148 <AppCmdProcess+0x328>)
 8001fe0:	f000 fa36 	bl	8002450 <GNSS_PRINT>
      ConsoleRead((uint8_t *)secs);
 8001fe4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fedb 	bl	8001da4 <ConsoleRead>
    } while(atoi((char *)secs) < 0);
 8001fee:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f00c fefb 	bl	800edee <atoi>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	dbe8      	blt.n	8001fd0 <AppCmdProcess+0x1b0>
    t = strtoul((char *)tracks, NULL, 10);
 8001ffe:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002002:	220a      	movs	r2, #10
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f00d fe5c 	bl	800fcc4 <strtoul>
 800200c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    s = strtoul((char *)secs, NULL, 10);
 8002010:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002014:	220a      	movs	r2, #10
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f00d fe53 	bl	800fcc4 <strtoul>
 800201e:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
    tracked = GNSS_DATA_TrackGotPos(&GNSSParser_Data, t, s);
 8002022:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8002026:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800202a:	4839      	ldr	r0, [pc, #228]	@ (8002110 <AppCmdProcess+0x2f0>)
 800202c:	f009 f8cc 	bl	800b1c8 <GNSS_DATA_TrackGotPos>
 8002030:	4603      	mov	r3, r0
 8002032:	4a46      	ldr	r2, [pc, #280]	@ (800214c <AppCmdProcess+0x32c>)
 8002034:	6013      	str	r3, [r2, #0]
    if(tracked > 0)
 8002036:	4b45      	ldr	r3, [pc, #276]	@ (800214c <AppCmdProcess+0x32c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	dd03      	ble.n	8002046 <AppCmdProcess+0x226>
      PRINT_OUT("Last tracking process went good.\r\n\n>");
 800203e:	4844      	ldr	r0, [pc, #272]	@ (8002150 <AppCmdProcess+0x330>)
 8002040:	f000 fa06 	bl	8002450 <GNSS_PRINT>
  {
 8002044:	e165      	b.n	8002312 <AppCmdProcess+0x4f2>
      PRINT_OUT("Last tracking process went bad.\r\n\n>");
 8002046:	4843      	ldr	r0, [pc, #268]	@ (8002154 <AppCmdProcess+0x334>)
 8002048:	f000 fa02 	bl	8002450 <GNSS_PRINT>
  {
 800204c:	e161      	b.n	8002312 <AppCmdProcess+0x4f2>
  else if(strcmp((char *)com, "7") == 0 || strcmp((char *)com, "lasttrack") == 0)
 800204e:	4942      	ldr	r1, [pc, #264]	@ (8002158 <AppCmdProcess+0x338>)
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7fe f8bd 	bl	80001d0 <strcmp>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <AppCmdProcess+0x24a>
 800205c:	493f      	ldr	r1, [pc, #252]	@ (800215c <AppCmdProcess+0x33c>)
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe f8b6 	bl	80001d0 <strcmp>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d110      	bne.n	800208c <AppCmdProcess+0x26c>
    if(tracked > 0)
 800206a:	4b38      	ldr	r3, [pc, #224]	@ (800214c <AppCmdProcess+0x32c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	dd08      	ble.n	8002084 <AppCmdProcess+0x264>
      PRINT_OUT("Acquired positions:\r\n");
 8002072:	483b      	ldr	r0, [pc, #236]	@ (8002160 <AppCmdProcess+0x340>)
 8002074:	f000 f9ec 	bl	8002450 <GNSS_PRINT>
      GNSS_DATA_PrintTrackedPositions(tracked);
 8002078:	4b34      	ldr	r3, [pc, #208]	@ (800214c <AppCmdProcess+0x32c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f009 f9fb 	bl	800b478 <GNSS_DATA_PrintTrackedPositions>
    if(tracked > 0)
 8002082:	e146      	b.n	8002312 <AppCmdProcess+0x4f2>
      PRINT_OUT("Last tracking process went bad.\r\n\n>");
 8002084:	4833      	ldr	r0, [pc, #204]	@ (8002154 <AppCmdProcess+0x334>)
 8002086:	f000 f9e3 	bl	8002450 <GNSS_PRINT>
    if(tracked > 0)
 800208a:	e142      	b.n	8002312 <AppCmdProcess+0x4f2>
  else if(strcmp((char *)com, "8") == 0 || strcmp((char *)com, "getfwver") == 0)
 800208c:	4935      	ldr	r1, [pc, #212]	@ (8002164 <AppCmdProcess+0x344>)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe f89e 	bl	80001d0 <strcmp>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <AppCmdProcess+0x288>
 800209a:	4933      	ldr	r1, [pc, #204]	@ (8002168 <AppCmdProcess+0x348>)
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7fe f897 	bl	80001d0 <strcmp>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d173      	bne.n	8002190 <AppCmdProcess+0x370>
    memset(com, 0, MAX_STR_LEN);
 80020a8:	2220      	movs	r2, #32
 80020aa:	2100      	movs	r1, #0
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f00e fc86 	bl	80109be <memset>
    PRINT_OUT("Type \"$PSTMGETSWVER\"     to get the GNSSLIB version \r\n");
 80020b2:	482e      	ldr	r0, [pc, #184]	@ (800216c <AppCmdProcess+0x34c>)
 80020b4:	f000 f9cc 	bl	8002450 <GNSS_PRINT>
    PRINT_OUT("Type \"$PSTMGETSWVER,1\"   to get the OS20LIB version \r\n");
 80020b8:	482d      	ldr	r0, [pc, #180]	@ (8002170 <AppCmdProcess+0x350>)
 80020ba:	f000 f9c9 	bl	8002450 <GNSS_PRINT>
    PRINT_OUT("Type \"$PSTMGETSWVER,2\"   to get the GPSAPP version \r\n");
 80020be:	482d      	ldr	r0, [pc, #180]	@ (8002174 <AppCmdProcess+0x354>)
 80020c0:	f000 f9c6 	bl	8002450 <GNSS_PRINT>
    PRINT_OUT("Type \"$PSTMGETSWVER,4\"   to get the WAASLIB version \r\n");
 80020c4:	482c      	ldr	r0, [pc, #176]	@ (8002178 <AppCmdProcess+0x358>)
 80020c6:	f000 f9c3 	bl	8002450 <GNSS_PRINT>
    PRINT_OUT("Type \"$PSTMGETSWVER,6\"   to get the BINIMG version \r\n");
 80020ca:	482c      	ldr	r0, [pc, #176]	@ (800217c <AppCmdProcess+0x35c>)
 80020cc:	f000 f9c0 	bl	8002450 <GNSS_PRINT>
    PRINT_OUT("Type \"$PSTMGETSWVER,7\"   to get the board version \r\n");
 80020d0:	482b      	ldr	r0, [pc, #172]	@ (8002180 <AppCmdProcess+0x360>)
 80020d2:	f000 f9bd 	bl	8002450 <GNSS_PRINT>
    PRINT_OUT("Type \"$PSTMGETSWVER,8\"   to get the STAGPSLIB version \r\n");
 80020d6:	482b      	ldr	r0, [pc, #172]	@ (8002184 <AppCmdProcess+0x364>)
 80020d8:	f000 f9ba 	bl	8002450 <GNSS_PRINT>
    PRINT_OUT("Type \"$PSTMGETSWVER,255\" to get all versions \r\n");
 80020dc:	482a      	ldr	r0, [pc, #168]	@ (8002188 <AppCmdProcess+0x368>)
 80020de:	f000 f9b7 	bl	8002450 <GNSS_PRINT>
    PRINT_OUT("\nType the command now:\r\n> ");
 80020e2:	482a      	ldr	r0, [pc, #168]	@ (800218c <AppCmdProcess+0x36c>)
 80020e4:	f000 f9b4 	bl	8002450 <GNSS_PRINT>
 80020e8:	e113      	b.n	8002312 <AppCmdProcess+0x4f2>
 80020ea:	bf00      	nop
 80020ec:	080136c0 	.word	0x080136c0
 80020f0:	0018004f 	.word	0x0018004f
 80020f4:	20000908 	.word	0x20000908
 80020f8:	080136c4 	.word	0x080136c4
 80020fc:	080136c8 	.word	0x080136c8
 8002100:	080136cc 	.word	0x080136cc
 8002104:	080136d4 	.word	0x080136d4
 8002108:	080136d8 	.word	0x080136d8
 800210c:	200005bc 	.word	0x200005bc
 8002110:	200005d0 	.word	0x200005d0
 8002114:	080136e0 	.word	0x080136e0
 8002118:	080136e4 	.word	0x080136e4
 800211c:	080136f0 	.word	0x080136f0
 8002120:	08013700 	.word	0x08013700
 8002124:	08013704 	.word	0x08013704
 8002128:	08013708 	.word	0x08013708
 800212c:	08013710 	.word	0x08013710
 8002130:	08013714 	.word	0x08013714
 8002134:	0801371c 	.word	0x0801371c
 8002138:	0801372c 	.word	0x0801372c
 800213c:	0801373c 	.word	0x0801373c
 8002140:	08013740 	.word	0x08013740
 8002144:	08013748 	.word	0x08013748
 8002148:	08013788 	.word	0x08013788
 800214c:	2000090c 	.word	0x2000090c
 8002150:	080137cc 	.word	0x080137cc
 8002154:	080137f4 	.word	0x080137f4
 8002158:	08013818 	.word	0x08013818
 800215c:	0801381c 	.word	0x0801381c
 8002160:	08013828 	.word	0x08013828
 8002164:	08013840 	.word	0x08013840
 8002168:	08013844 	.word	0x08013844
 800216c:	08013850 	.word	0x08013850
 8002170:	08013888 	.word	0x08013888
 8002174:	080138c0 	.word	0x080138c0
 8002178:	080138f8 	.word	0x080138f8
 800217c:	08013930 	.word	0x08013930
 8002180:	08013968 	.word	0x08013968
 8002184:	080139a0 	.word	0x080139a0
 8002188:	080139dc 	.word	0x080139dc
 800218c:	08013a0c 	.word	0x08013a0c
  else if(strncmp((char *)com, "$PSTMGETSWVER", strlen("$PSTMGETSWVER")) == 0)
 8002190:	220d      	movs	r2, #13
 8002192:	4962      	ldr	r1, [pc, #392]	@ (800231c <AppCmdProcess+0x4fc>)
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f00e fc1a 	bl	80109ce <strncmp>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10d      	bne.n	80021bc <AppCmdProcess+0x39c>
    if (GetSWVerCmdIsAllowed(com)) {
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f909 	bl	80023b8 <GetSWVerCmdIsAllowed>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <AppCmdProcess+0x394>
      GNSS_DATA_SendCommand((uint8_t *)com);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f008 feb3 	bl	800af18 <GNSS_DATA_SendCommand>
}
 80021b2:	e0ae      	b.n	8002312 <AppCmdProcess+0x4f2>
      PRINT_OUT("\nCommand not valid.\r\n> ");
 80021b4:	485a      	ldr	r0, [pc, #360]	@ (8002320 <AppCmdProcess+0x500>)
 80021b6:	f000 f94b 	bl	8002450 <GNSS_PRINT>
}
 80021ba:	e0aa      	b.n	8002312 <AppCmdProcess+0x4f2>
  else if(strcmp((char *)com, "9") == 0 || strcmp((char *)com, "getgnsmsg") == 0)
 80021bc:	4959      	ldr	r1, [pc, #356]	@ (8002324 <AppCmdProcess+0x504>)
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe f806 	bl	80001d0 <strcmp>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d006      	beq.n	80021d8 <AppCmdProcess+0x3b8>
 80021ca:	4957      	ldr	r1, [pc, #348]	@ (8002328 <AppCmdProcess+0x508>)
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7fd ffff 	bl	80001d0 <strcmp>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10f      	bne.n	80021f8 <AppCmdProcess+0x3d8>
    osMutexWait(gnssDataMutexHandle, osWaitForever);
 80021d8:	4b54      	ldr	r3, [pc, #336]	@ (800232c <AppCmdProcess+0x50c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	4618      	mov	r0, r3
 80021e2:	f006 fb0d 	bl	8008800 <osMutexWait>
    GNSS_DATA_GetGNSInfo(&GNSSParser_Data);
 80021e6:	4852      	ldr	r0, [pc, #328]	@ (8002330 <AppCmdProcess+0x510>)
 80021e8:	f009 face 	bl	800b788 <GNSS_DATA_GetGNSInfo>
    osMutexRelease(gnssDataMutexHandle);
 80021ec:	4b4f      	ldr	r3, [pc, #316]	@ (800232c <AppCmdProcess+0x50c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f006 fb53 	bl	800889c <osMutexRelease>
 80021f6:	e08c      	b.n	8002312 <AppCmdProcess+0x4f2>
  else if(strcmp((char *)com, "10") == 0 || strcmp((char *)com, "getgpgst") == 0)
 80021f8:	494e      	ldr	r1, [pc, #312]	@ (8002334 <AppCmdProcess+0x514>)
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fd ffe8 	bl	80001d0 <strcmp>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <AppCmdProcess+0x3f4>
 8002206:	494c      	ldr	r1, [pc, #304]	@ (8002338 <AppCmdProcess+0x518>)
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7fd ffe1 	bl	80001d0 <strcmp>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10f      	bne.n	8002234 <AppCmdProcess+0x414>
    osMutexWait(gnssDataMutexHandle, osWaitForever);
 8002214:	4b45      	ldr	r3, [pc, #276]	@ (800232c <AppCmdProcess+0x50c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	4618      	mov	r0, r3
 800221e:	f006 faef 	bl	8008800 <osMutexWait>
    GNSS_DATA_GetGPGSTInfo(&GNSSParser_Data);
 8002222:	4843      	ldr	r0, [pc, #268]	@ (8002330 <AppCmdProcess+0x510>)
 8002224:	f009 fc30 	bl	800ba88 <GNSS_DATA_GetGPGSTInfo>
    osMutexRelease(gnssDataMutexHandle);
 8002228:	4b40      	ldr	r3, [pc, #256]	@ (800232c <AppCmdProcess+0x50c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f006 fb35 	bl	800889c <osMutexRelease>
 8002232:	e06e      	b.n	8002312 <AppCmdProcess+0x4f2>
  else if(strcmp((char *)com, "11") == 0 || strcmp((char *)com, "getgprmc") == 0)
 8002234:	4941      	ldr	r1, [pc, #260]	@ (800233c <AppCmdProcess+0x51c>)
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fd ffca 	bl	80001d0 <strcmp>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <AppCmdProcess+0x430>
 8002242:	493f      	ldr	r1, [pc, #252]	@ (8002340 <AppCmdProcess+0x520>)
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7fd ffc3 	bl	80001d0 <strcmp>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10f      	bne.n	8002270 <AppCmdProcess+0x450>
    osMutexWait(gnssDataMutexHandle, osWaitForever);
 8002250:	4b36      	ldr	r3, [pc, #216]	@ (800232c <AppCmdProcess+0x50c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	4618      	mov	r0, r3
 800225a:	f006 fad1 	bl	8008800 <osMutexWait>
    GNSS_DATA_GetGPRMCInfo(&GNSSParser_Data);
 800225e:	4834      	ldr	r0, [pc, #208]	@ (8002330 <AppCmdProcess+0x510>)
 8002260:	f009 fcd2 	bl	800bc08 <GNSS_DATA_GetGPRMCInfo>
    osMutexRelease(gnssDataMutexHandle);
 8002264:	4b31      	ldr	r3, [pc, #196]	@ (800232c <AppCmdProcess+0x50c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f006 fb17 	bl	800889c <osMutexRelease>
 800226e:	e050      	b.n	8002312 <AppCmdProcess+0x4f2>
  else if(strcmp((char *)com, "12") == 0 || strcmp((char *)com, "getgsamsg") == 0)
 8002270:	4934      	ldr	r1, [pc, #208]	@ (8002344 <AppCmdProcess+0x524>)
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fd ffac 	bl	80001d0 <strcmp>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <AppCmdProcess+0x46c>
 800227e:	4932      	ldr	r1, [pc, #200]	@ (8002348 <AppCmdProcess+0x528>)
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7fd ffa5 	bl	80001d0 <strcmp>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10f      	bne.n	80022ac <AppCmdProcess+0x48c>
    osMutexWait(gnssDataMutexHandle, osWaitForever);
 800228c:	4b27      	ldr	r3, [pc, #156]	@ (800232c <AppCmdProcess+0x50c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	4618      	mov	r0, r3
 8002296:	f006 fab3 	bl	8008800 <osMutexWait>
    GNSS_DATA_GetGSAInfo(&GNSSParser_Data);
 800229a:	4825      	ldr	r0, [pc, #148]	@ (8002330 <AppCmdProcess+0x510>)
 800229c:	f009 fe5e 	bl	800bf5c <GNSS_DATA_GetGSAInfo>
    osMutexRelease(gnssDataMutexHandle);
 80022a0:	4b22      	ldr	r3, [pc, #136]	@ (800232c <AppCmdProcess+0x50c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f006 faf9 	bl	800889c <osMutexRelease>
 80022aa:	e032      	b.n	8002312 <AppCmdProcess+0x4f2>
  else if(strcmp((char *)com, "13") == 0 || strcmp((char *)com, "getgsvmsg") == 0)
 80022ac:	4927      	ldr	r1, [pc, #156]	@ (800234c <AppCmdProcess+0x52c>)
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fd ff8e 	bl	80001d0 <strcmp>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d006      	beq.n	80022c8 <AppCmdProcess+0x4a8>
 80022ba:	4925      	ldr	r1, [pc, #148]	@ (8002350 <AppCmdProcess+0x530>)
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7fd ff87 	bl	80001d0 <strcmp>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10f      	bne.n	80022e8 <AppCmdProcess+0x4c8>
    osMutexWait(gnssDataMutexHandle, osWaitForever);
 80022c8:	4b18      	ldr	r3, [pc, #96]	@ (800232c <AppCmdProcess+0x50c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f04f 31ff 	mov.w	r1, #4294967295
 80022d0:	4618      	mov	r0, r3
 80022d2:	f006 fa95 	bl	8008800 <osMutexWait>
    GNSS_DATA_GetGSVInfo(&GNSSParser_Data);
 80022d6:	4816      	ldr	r0, [pc, #88]	@ (8002330 <AppCmdProcess+0x510>)
 80022d8:	f009 ff74 	bl	800c1c4 <GNSS_DATA_GetGSVInfo>
    osMutexRelease(gnssDataMutexHandle);
 80022dc:	4b13      	ldr	r3, [pc, #76]	@ (800232c <AppCmdProcess+0x50c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f006 fadb 	bl	800889c <osMutexRelease>
 80022e6:	e014      	b.n	8002312 <AppCmdProcess+0x4f2>
  else if(strcmp((char *)com, "19") == 0 || strcmp((char *)com, "ext-help") == 0)
 80022e8:	491a      	ldr	r1, [pc, #104]	@ (8002354 <AppCmdProcess+0x534>)
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fd ff70 	bl	80001d0 <strcmp>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <AppCmdProcess+0x4e4>
 80022f6:	4918      	ldr	r1, [pc, #96]	@ (8002358 <AppCmdProcess+0x538>)
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7fd ff69 	bl	80001d0 <strcmp>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <AppCmdProcess+0x4ea>
    printHelp();
 8002304:	f000 f8e8 	bl	80024d8 <printHelp>
 8002308:	e003      	b.n	8002312 <AppCmdProcess+0x4f2>
    PRINT_OUT("Command not valid.\r\n\n>");
 800230a:	4814      	ldr	r0, [pc, #80]	@ (800235c <AppCmdProcess+0x53c>)
 800230c:	f000 f8a0 	bl	8002450 <GNSS_PRINT>
}
 8002310:	e7ff      	b.n	8002312 <AppCmdProcess+0x4f2>
 8002312:	bf00      	nop
 8002314:	37e0      	adds	r7, #224	@ 0xe0
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	08013a28 	.word	0x08013a28
 8002320:	08013a38 	.word	0x08013a38
 8002324:	08013a50 	.word	0x08013a50
 8002328:	08013a54 	.word	0x08013a54
 800232c:	200005bc 	.word	0x200005bc
 8002330:	200005d0 	.word	0x200005d0
 8002334:	08013a60 	.word	0x08013a60
 8002338:	08013a64 	.word	0x08013a64
 800233c:	08013a70 	.word	0x08013a70
 8002340:	08013a74 	.word	0x08013a74
 8002344:	08013a80 	.word	0x08013a80
 8002348:	08013a84 	.word	0x08013a84
 800234c:	08013a90 	.word	0x08013a90
 8002350:	08013a94 	.word	0x08013a94
 8002354:	08013aa0 	.word	0x08013aa0
 8002358:	08013aa4 	.word	0x08013aa4
 800235c:	08013ab0 	.word	0x08013ab0

08002360 <AppCfgMsgList>:

/* CfgMessageList */
static void AppCfgMsgList(int lowMask, int highMask)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  GNSS_DATA_CfgMessageList(lowMask, highMask);
 800236a:	6839      	ldr	r1, [r7, #0]
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f00a f8ff 	bl	800c570 <GNSS_DATA_CfgMessageList>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <ConsoleReadable>:
  }
}
#endif /* configUSE_DATALOG */

static int ConsoleReadable(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /*  To avoid a target blocking case, let's check for
  *  possible OVERRUN error and discard it
  */
  if(__HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_ORE)) {
 8002380:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <ConsoleReadable+0x38>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b08      	cmp	r3, #8
 800238c:	d103      	bne.n	8002396 <ConsoleReadable+0x1a>
    __HAL_UART_CLEAR_OREFLAG(&hcom_uart[COM1]);
 800238e:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <ConsoleReadable+0x38>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2208      	movs	r2, #8
 8002394:	621a      	str	r2, [r3, #32]
  }
  /* Check if data is received */
  return (__HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE) != RESET) ? 1 : 0;
 8002396:	4b07      	ldr	r3, [pc, #28]	@ (80023b4 <ConsoleReadable+0x38>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	200004a0 	.word	0x200004a0

080023b8 <GetSWVerCmdIsAllowed>:

static int GetSWVerCmdIsAllowed(char* com)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
#ifdef TESEO_LIV3F_DEVICE
  if ((com[13] == '\0')
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	330d      	adds	r3, #13
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d036      	beq.n	800243c <GetSWVerCmdIsAllowed+0x84>
      || (((com[14] == '1') || (com[14] == '2') || (com[14] == '4') || (com[14] == '6') || (com[14] == '7') || (com[14] == '8')) && (com[15] == '\0'))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	330e      	adds	r3, #14
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b31      	cmp	r3, #49	@ 0x31
 80023d6:	d018      	beq.n	800240a <GetSWVerCmdIsAllowed+0x52>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	330e      	adds	r3, #14
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b32      	cmp	r3, #50	@ 0x32
 80023e0:	d013      	beq.n	800240a <GetSWVerCmdIsAllowed+0x52>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	330e      	adds	r3, #14
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b34      	cmp	r3, #52	@ 0x34
 80023ea:	d00e      	beq.n	800240a <GetSWVerCmdIsAllowed+0x52>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	330e      	adds	r3, #14
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b36      	cmp	r3, #54	@ 0x36
 80023f4:	d009      	beq.n	800240a <GetSWVerCmdIsAllowed+0x52>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	330e      	adds	r3, #14
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b37      	cmp	r3, #55	@ 0x37
 80023fe:	d004      	beq.n	800240a <GetSWVerCmdIsAllowed+0x52>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	330e      	adds	r3, #14
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b38      	cmp	r3, #56	@ 0x38
 8002408:	d104      	bne.n	8002414 <GetSWVerCmdIsAllowed+0x5c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	330f      	adds	r3, #15
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <GetSWVerCmdIsAllowed+0x84>
        || ((com[14] == '2') && (com[15] == '5') && (com[16] == '5') && (com[17] == '\0'))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	330e      	adds	r3, #14
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b32      	cmp	r3, #50	@ 0x32
 800241c:	d110      	bne.n	8002440 <GetSWVerCmdIsAllowed+0x88>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	330f      	adds	r3, #15
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b35      	cmp	r3, #53	@ 0x35
 8002426:	d10b      	bne.n	8002440 <GetSWVerCmdIsAllowed+0x88>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3310      	adds	r3, #16
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b35      	cmp	r3, #53	@ 0x35
 8002430:	d106      	bne.n	8002440 <GetSWVerCmdIsAllowed+0x88>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3311      	adds	r3, #17
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <GetSWVerCmdIsAllowed+0x88>
     )
  {
    ret = 1;
 800243c:	2301      	movs	r3, #1
 800243e:	60fb      	str	r3, [r7, #12]
  {
    ret = 1;
  }
#endif

  return ret;
 8002440:	68fb      	ldr	r3, [r7, #12]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <GNSS_PRINT>:

int GNSS_PRINT(char *pBuffer)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if (HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t*)pBuffer, (uint16_t)strlen((char *)pBuffer), 1000) != HAL_OK)
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7fd ff19 	bl	8000290 <strlen>
 800245e:	4603      	mov	r3, r0
 8002460:	b29a      	uxth	r2, r3
 8002462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4809      	ldr	r0, [pc, #36]	@ (8002490 <GNSS_PRINT+0x40>)
 800246a:	f005 faef 	bl	8007a4c <HAL_UART_Transmit>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <GNSS_PRINT+0x28>
  {
    return 1;
 8002474:	2301      	movs	r3, #1
 8002476:	e006      	b.n	8002486 <GNSS_PRINT+0x36>
  }
  fflush(stdout);
 8002478:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <GNSS_PRINT+0x44>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	4618      	mov	r0, r3
 8002480:	f00e f92c 	bl	80106dc <fflush>

  return 0;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200004a0 	.word	0x200004a0
 8002494:	2000018c 	.word	0x2000018c

08002498 <GNSS_PUTC>:

int GNSS_PUTC(char pChar)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
  if (HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t*)&pChar, 1, 1000) != HAL_OK)
 80024a2:	1df9      	adds	r1, r7, #7
 80024a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024a8:	2201      	movs	r2, #1
 80024aa:	4809      	ldr	r0, [pc, #36]	@ (80024d0 <GNSS_PUTC+0x38>)
 80024ac:	f005 face 	bl	8007a4c <HAL_UART_Transmit>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <GNSS_PUTC+0x22>
  {
    return 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e006      	b.n	80024c8 <GNSS_PUTC+0x30>
  }
  fflush(stdout);
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <GNSS_PUTC+0x3c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f00e f90b 	bl	80106dc <fflush>

  return 0;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200004a0 	.word	0x200004a0
 80024d4:	2000018c 	.word	0x2000018c

080024d8 <printHelp>:

/* Defines -------------------------------------------------------------------*/

/* Exported functions --------------------------------------------------------*/

void printHelp(void){
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  PRINT_INFO("\n\r 1) GETPOS:\r\n\tGets and decode the first useful $GPGGA NMEA string with the global position information.\n");
 80024dc:	4817      	ldr	r0, [pc, #92]	@ (800253c <printHelp+0x64>)
 80024de:	f7ff ffb7 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r 2) LASTPOS:\r\n\tPrints the last saved position from the GPS reception process.\n");
 80024e2:	4817      	ldr	r0, [pc, #92]	@ (8002540 <printHelp+0x68>)
 80024e4:	f7ff ffb4 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r 3) WAKESTATUS:\r\n\tGets the activity state of the GPS data reception.\r\n\tWill be printed one of the two states: 0 / 1.\n");
 80024e8:	4816      	ldr	r0, [pc, #88]	@ (8002544 <printHelp+0x6c>)
 80024ea:	f7ff ffb1 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r 4) HELP:\r\n\tPrints command menu.\n");
 80024ee:	4816      	ldr	r0, [pc, #88]	@ (8002548 <printHelp+0x70>)
 80024f0:	f7ff ffae 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r 5) DEBUG:\r\n\tChanges the debug state of the application (default is ON).\r\n\tIf debug is ON, when the getpos command is sent, the just decoded position will be printed.\n");
 80024f4:	4815      	ldr	r0, [pc, #84]	@ (800254c <printHelp+0x74>)
 80024f6:	f7ff ffab 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r 6) TRACK:\r\n\tBegins the tracking position process.\r\n\tYou have to choose the number of positions that you want to track and the delay between two\r\n\treceptions.\n");
 80024fa:	4815      	ldr	r0, [pc, #84]	@ (8002550 <printHelp+0x78>)
 80024fc:	f7ff ffa8 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r 7) LASTTRACK:\r\n\tIf last tracking process went good, prints last tracked positions on the console.\n");
 8002500:	4814      	ldr	r0, [pc, #80]	@ (8002554 <printHelp+0x7c>)
 8002502:	f7ff ffa5 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r 8) GETFWVER:\r\n\tSends the ST proprietary $PSTMGETSWVER NMEA command (to be written on serial terminal) and decode the answer with all info about the FW version.\n");
 8002506:	4814      	ldr	r0, [pc, #80]	@ (8002558 <printHelp+0x80>)
 8002508:	f7ff ffa2 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r 9) GETGNSMSG:\r\n\tGets and decode the first useful NMEA string (the $--GNS one) with fix data for single or combined satellite navigation system information.\n");
 800250c:	4813      	ldr	r0, [pc, #76]	@ (800255c <printHelp+0x84>)
 800250e:	f7ff ff9f 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r10) GETGPGST:\r\n\tGets and decode the first useful $GPGST NMEA string with the GPS Pseudorange Noise Statistics.\n");
 8002512:	4813      	ldr	r0, [pc, #76]	@ (8002560 <printHelp+0x88>)
 8002514:	f7ff ff9c 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r11) GETGPRMC:\r\n\tGets and decode the first useful $GPRMC NMEA string with the Recommended Minimum Specific GPS/Transit data.\n");
 8002518:	4812      	ldr	r0, [pc, #72]	@ (8002564 <printHelp+0x8c>)
 800251a:	f7ff ff99 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r12) GETGSAMSG:\r\n\tGets and decode the first useful NMEA string (the $--GSA one) with GNSS DOP and active satellites information.\n");
 800251e:	4812      	ldr	r0, [pc, #72]	@ (8002568 <printHelp+0x90>)
 8002520:	f7ff ff96 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r13) GETGSVMSG:\r\n\tGets and decode the first useful NMEA string (the $--GSV one) with GNSS Satellites in View information.\n\n\r");
 8002524:	4811      	ldr	r0, [pc, #68]	@ (800256c <printHelp+0x94>)
 8002526:	f7ff ff93 	bl	8002450 <GNSS_PRINT>

#if (configUSE_DATALOG == 1)
  PRINT_INFO("\n\r18) DATALOG-OP:\r\n\tSends a proprietary ST NMEA command to config/start/stop/erase datalog and returns the answer.\n");
#endif /* configUSE_DATALOG */

  PRINT_INFO("\n\r19) EXT-HELP:\r\n\tPrints this extended help.\n");
 800252a:	4811      	ldr	r0, [pc, #68]	@ (8002570 <printHelp+0x98>)
 800252c:	f7ff ff90 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r> ");
 8002530:	4810      	ldr	r0, [pc, #64]	@ (8002574 <printHelp+0x9c>)
 8002532:	f7ff ff8d 	bl	8002450 <GNSS_PRINT>
  //PRINT_INFO("\n\r 0) ENDAPP:\r\n\tEnds the application.\r\n\tTo restart it, press CTRL+B command on the console or restart the Nucleo.\n\n\r");
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	08013ac8 	.word	0x08013ac8
 8002540:	08013b34 	.word	0x08013b34
 8002544:	08013b88 	.word	0x08013b88
 8002548:	08013c00 	.word	0x08013c00
 800254c:	08013c24 	.word	0x08013c24
 8002550:	08013cd0 	.word	0x08013cd0
 8002554:	08013d74 	.word	0x08013d74
 8002558:	08013ddc 	.word	0x08013ddc
 800255c:	08013e80 	.word	0x08013e80
 8002560:	08013f20 	.word	0x08013f20
 8002564:	08013f94 	.word	0x08013f94
 8002568:	08014014 	.word	0x08014014
 800256c:	08014098 	.word	0x08014098
 8002570:	08014118 	.word	0x08014118
 8002574:	08014148 	.word	0x08014148

08002578 <showCmds>:

void showCmds(void){
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  PRINT_INFO("Select a command:\n\r");
 800257c:	481a      	ldr	r0, [pc, #104]	@ (80025e8 <showCmds+0x70>)
 800257e:	f7ff ff67 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO(" 1 - getpos\n\r");
 8002582:	481a      	ldr	r0, [pc, #104]	@ (80025ec <showCmds+0x74>)
 8002584:	f7ff ff64 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO(" 2 - lastpos\n\r");
 8002588:	4819      	ldr	r0, [pc, #100]	@ (80025f0 <showCmds+0x78>)
 800258a:	f7ff ff61 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO(" 3 - wakestatus\n\r");
 800258e:	4819      	ldr	r0, [pc, #100]	@ (80025f4 <showCmds+0x7c>)
 8002590:	f7ff ff5e 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO(" 4 - help\n\r");
 8002594:	4818      	ldr	r0, [pc, #96]	@ (80025f8 <showCmds+0x80>)
 8002596:	f7ff ff5b 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO(" 5 - debug\n\r");
 800259a:	4818      	ldr	r0, [pc, #96]	@ (80025fc <showCmds+0x84>)
 800259c:	f7ff ff58 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO(" 6 - track\n\r");
 80025a0:	4817      	ldr	r0, [pc, #92]	@ (8002600 <showCmds+0x88>)
 80025a2:	f7ff ff55 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO(" 7 - lasttrack\n\r");
 80025a6:	4817      	ldr	r0, [pc, #92]	@ (8002604 <showCmds+0x8c>)
 80025a8:	f7ff ff52 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO(" 8 - getfwver\n\r");
 80025ac:	4816      	ldr	r0, [pc, #88]	@ (8002608 <showCmds+0x90>)
 80025ae:	f7ff ff4f 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO(" 9 - getgnsmsg\n\r");
 80025b2:	4816      	ldr	r0, [pc, #88]	@ (800260c <showCmds+0x94>)
 80025b4:	f7ff ff4c 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("10 - getgpgst\n\r");
 80025b8:	4815      	ldr	r0, [pc, #84]	@ (8002610 <showCmds+0x98>)
 80025ba:	f7ff ff49 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("11 - getgprmc\n\r");
 80025be:	4815      	ldr	r0, [pc, #84]	@ (8002614 <showCmds+0x9c>)
 80025c0:	f7ff ff46 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("12 - getgsamsg\n\r");
 80025c4:	4814      	ldr	r0, [pc, #80]	@ (8002618 <showCmds+0xa0>)
 80025c6:	f7ff ff43 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("13 - getgsvmsg\n\r");
 80025ca:	4814      	ldr	r0, [pc, #80]	@ (800261c <showCmds+0xa4>)
 80025cc:	f7ff ff40 	bl	8002450 <GNSS_PRINT>

#if (configUSE_DATALOG == 1)
  PRINT_INFO("18 - datalog-op\n\r");
#endif

  PRINT_INFO("19 - ext-help\n\r");
 80025d0:	4813      	ldr	r0, [pc, #76]	@ (8002620 <showCmds+0xa8>)
 80025d2:	f7ff ff3d 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\rSave configuration (y/n)? ");
 80025d6:	4813      	ldr	r0, [pc, #76]	@ (8002624 <showCmds+0xac>)
 80025d8:	f7ff ff3a 	bl	8002450 <GNSS_PRINT>
  PRINT_INFO("\n\r> ");
 80025dc:	4812      	ldr	r0, [pc, #72]	@ (8002628 <showCmds+0xb0>)
 80025de:	f7ff ff37 	bl	8002450 <GNSS_PRINT>
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	08014150 	.word	0x08014150
 80025ec:	08014164 	.word	0x08014164
 80025f0:	08014174 	.word	0x08014174
 80025f4:	08014184 	.word	0x08014184
 80025f8:	08014198 	.word	0x08014198
 80025fc:	080141a4 	.word	0x080141a4
 8002600:	080141b4 	.word	0x080141b4
 8002604:	080141c4 	.word	0x080141c4
 8002608:	080141d8 	.word	0x080141d8
 800260c:	080141e8 	.word	0x080141e8
 8002610:	080141fc 	.word	0x080141fc
 8002614:	0801420c 	.word	0x0801420c
 8002618:	0801421c 	.word	0x0801421c
 800261c:	08014230 	.word	0x08014230
 8002620:	08014244 	.word	0x08014244
 8002624:	08014254 	.word	0x08014254
 8002628:	08014148 	.word	0x08014148

0800262c <showPrompt>:

void showPrompt(void){
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  PRINT_INFO("> ");
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <showPrompt+0x10>)
 8002632:	f7ff ff0d 	bl	8002450 <GNSS_PRINT>
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	08014274 	.word	0x08014274

08002640 <GNSS_Wrapper_Send>:

#include "gnss_lib_config.h"
#include "gnss1a1_gnss.h"

int32_t GNSS_Wrapper_Send(uint8_t *buffer, uint16_t length)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
  int32_t status=0;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  GNSS1A1_GNSS_Msg_t gnssMsg;

  gnssMsg.buf = buffer;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	60fb      	str	r3, [r7, #12]
  gnssMsg.len = length;
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	823b      	strh	r3, [r7, #16]

  status = GNSS1A1_GNSS_Send(GNSS1A1_TESEO_LIV3F, &gnssMsg);
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	4619      	mov	r1, r3
 800265e:	2000      	movs	r0, #0
 8002660:	f000 fe70 	bl	8003344 <GNSS1A1_GNSS_Send>
 8002664:	6178      	str	r0, [r7, #20]

  return status;
 8002666:	697b      	ldr	r3, [r7, #20]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <GNSS_Wrapper_Reset>:

int32_t GNSS_Wrapper_Reset(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  int32_t status=0;
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]

  status = GNSS1A1_GNSS_Reset(GNSS1A1_TESEO_LIV3F);
 800267a:	2000      	movs	r0, #0
 800267c:	f000 fea4 	bl	80033c8 <GNSS1A1_GNSS_Reset>
 8002680:	6078      	str	r0, [r7, #4]

  return status;
 8002682:	687b      	ldr	r3, [r7, #4]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <BSP_I2C1_Send_IT>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send_IT(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	80fb      	strh	r3, [r7, #6]
 8002698:	4613      	mov	r3, r2
 800269a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800269c:	f06f 0307 	mvn.w	r3, #7
 80026a0:	60fb      	str	r3, [r7, #12]

  if(HAL_I2C_Master_Transmit_IT(&hi2c1, (uint8_t)DevAddr,
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	4619      	mov	r1, r3
 80026a8:	88bb      	ldrh	r3, [r7, #4]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	4808      	ldr	r0, [pc, #32]	@ (80026d0 <BSP_I2C1_Send_IT+0x44>)
 80026ae:	f001 fdd3 	bl	8004258 <HAL_I2C_Master_Transmit_IT>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <BSP_I2C1_Send_IT+0x32>
                                         (uint8_t *)pData, Length) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e002      	b.n	80026c4 <BSP_I2C1_Send_IT+0x38>
  }
  else
  {
    ret =  BSP_ERROR_PERIPH_FAILURE;
 80026be:	f06f 0303 	mvn.w	r3, #3
 80026c2:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80026c4:	68fb      	ldr	r3, [r7, #12]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000052c 	.word	0x2000052c

080026d4 <BSP_I2C1_Recv_IT>:
  * @param  pData Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv_IT(uint16_t DevAddr, uint8_t *pData, uint16_t Length)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	6039      	str	r1, [r7, #0]
 80026de:	80fb      	strh	r3, [r7, #6]
 80026e0:	4613      	mov	r3, r2
 80026e2:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80026e4:	f06f 0307 	mvn.w	r3, #7
 80026e8:	60fb      	str	r3, [r7, #12]

  if(HAL_I2C_Master_Receive_IT(&hi2c1, (uint8_t)DevAddr,
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	88bb      	ldrh	r3, [r7, #4]
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	4808      	ldr	r0, [pc, #32]	@ (8002718 <BSP_I2C1_Recv_IT+0x44>)
 80026f6:	f001 fe47 	bl	8004388 <HAL_I2C_Master_Receive_IT>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <BSP_I2C1_Recv_IT+0x32>
                                        (uint8_t *)pData, Length) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	e002      	b.n	800270c <BSP_I2C1_Recv_IT+0x38>
  }
  else
  {
    ret =  BSP_ERROR_PERIPH_FAILURE;
 8002706:	f06f 0303 	mvn.w	r3, #3
 800270a:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800270c:	68fb      	ldr	r3, [r7, #12]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	2000052c 	.word	0x2000052c

0800271c <BSP_I2C1_RegisterRxCallback>:

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
int32_t BSP_I2C1_RegisterRxCallback(pI2C_CallbackTypeDef pCallback)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 8002724:	bf00      	nop
 8002726:	4808      	ldr	r0, [pc, #32]	@ (8002748 <BSP_I2C1_RegisterRxCallback+0x2c>)
 8002728:	f001 ff81 	bl	800462e <HAL_I2C_GetState>
 800272c:	4603      	mov	r3, r0
 800272e:	2b20      	cmp	r3, #32
 8002730:	d1f9      	bne.n	8002726 <BSP_I2C1_RegisterRxCallback+0xa>
  {
  }
  return HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_MASTER_RX_COMPLETE_CB_ID, pCallback);
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	2101      	movs	r1, #1
 8002736:	4804      	ldr	r0, [pc, #16]	@ (8002748 <BSP_I2C1_RegisterRxCallback+0x2c>)
 8002738:	f001 fcf4 	bl	8004124 <HAL_I2C_RegisterCallback>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2000052c 	.word	0x2000052c

0800274c <BSP_I2C1_RegisterErrorCallback>:

int32_t BSP_I2C1_RegisterErrorCallback(pI2C_CallbackTypeDef pCallback)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 8002754:	bf00      	nop
 8002756:	4808      	ldr	r0, [pc, #32]	@ (8002778 <BSP_I2C1_RegisterErrorCallback+0x2c>)
 8002758:	f001 ff69 	bl	800462e <HAL_I2C_GetState>
 800275c:	4603      	mov	r3, r0
 800275e:	2b20      	cmp	r3, #32
 8002760:	d1f9      	bne.n	8002756 <BSP_I2C1_RegisterErrorCallback+0xa>
  {
  }
  return HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_ERROR_CB_ID, pCallback);
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	2107      	movs	r1, #7
 8002766:	4804      	ldr	r0, [pc, #16]	@ (8002778 <BSP_I2C1_RegisterErrorCallback+0x2c>)
 8002768:	f001 fcdc 	bl	8004124 <HAL_I2C_RegisterCallback>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	2000052c 	.word	0x2000052c

0800277c <BSP_I2C1_RegisterAbortCallback>:

int32_t BSP_I2C1_RegisterAbortCallback(pI2C_CallbackTypeDef pCallback)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 8002784:	bf00      	nop
 8002786:	4808      	ldr	r0, [pc, #32]	@ (80027a8 <BSP_I2C1_RegisterAbortCallback+0x2c>)
 8002788:	f001 ff51 	bl	800462e <HAL_I2C_GetState>
 800278c:	4603      	mov	r3, r0
 800278e:	2b20      	cmp	r3, #32
 8002790:	d1f9      	bne.n	8002786 <BSP_I2C1_RegisterAbortCallback+0xa>
  {
  }
  return HAL_I2C_RegisterCallback(&hi2c1, HAL_I2C_ABORT_CB_ID, pCallback);
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	2108      	movs	r1, #8
 8002796:	4804      	ldr	r0, [pc, #16]	@ (80027a8 <BSP_I2C1_RegisterAbortCallback+0x2c>)
 8002798:	f001 fcc4 	bl	8004124 <HAL_I2C_RegisterCallback>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000052c 	.word	0x2000052c

080027ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027b0:	f000 fec8 	bl	8003544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027b6:	e003      	b.n	80027c0 <LoopCopyDataInit>

080027b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027be:	3104      	adds	r1, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027c0:	480a      	ldr	r0, [pc, #40]	@ (80027ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80027c2:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80027c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80027c8:	d3f6      	bcc.n	80027b8 <CopyDataInit>
	ldr	r2, =_sbss
 80027ca:	4a0a      	ldr	r2, [pc, #40]	@ (80027f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80027cc:	e002      	b.n	80027d4 <LoopFillZerobss>

080027ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027d0:	f842 3b04 	str.w	r3, [r2], #4

080027d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027d4:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <LoopForever+0x16>)
	cmp	r2, r3
 80027d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027d8:	d3f9      	bcc.n	80027ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027da:	f00e f96d 	bl	8010ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027de:	f7fe fc49 	bl	8001074 <main>

080027e2 <LoopForever>:

LoopForever:
    b LoopForever
 80027e2:	e7fe      	b.n	80027e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027e4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80027e8:	08015a00 	.word	0x08015a00
	ldr	r0, =_sdata
 80027ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027f0:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80027f4:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 80027f8:	20006758 	.word	0x20006758

080027fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027fc:	e7fe      	b.n	80027fc <ADC1_2_IRQHandler>

080027fe <teseo_i2c_enable>:
 * @}
 */

/* Private functions ---------------------------------------------------------*/
static inline void teseo_i2c_enable(TESEO_LIV3F_ctx_t *pCtx)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  teseo_i2c_onoff(pCtx, 1U, -1);
 8002806:	f04f 32ff 	mov.w	r2, #4294967295
 800280a:	2101      	movs	r1, #1
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fadd 	bl	8002dcc <teseo_i2c_onoff>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <teseo_i2c_disable>:

static inline void teseo_i2c_disable(TESEO_LIV3F_ctx_t *pCtx)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  teseo_i2c_onoff(pCtx, 0U, -1);
 8002822:	f04f 32ff 	mov.w	r2, #4294967295
 8002826:	2100      	movs	r1, #0
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 facf 	bl	8002dcc <teseo_i2c_onoff>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <teseo_i2c_rx_callback_ok>:

static inline void teseo_i2c_rx_callback_ok(void)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	af00      	add	r7, sp, #0
  teseo_i2c_rx_callback(_i2c_ok);
 800283a:	2000      	movs	r0, #0
 800283c:	f000 fa58 	bl	8002cf0 <teseo_i2c_rx_callback>
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}

08002844 <teseo_i2c_rx_callback_error>:

static inline void teseo_i2c_rx_callback_error(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  teseo_i2c_rx_callback(_i2c_error);
 8002848:	2001      	movs	r0, #1
 800284a:	f000 fa51 	bl	8002cf0 <teseo_i2c_rx_callback>
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}

08002852 <teseo_i2c_rx_callback_abort>:

static inline void teseo_i2c_rx_callback_abort(void)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	af00      	add	r7, sp, #0
  teseo_i2c_rx_callback(_i2c_abort);
 8002856:	2002      	movs	r0, #2
 8002858:	f000 fa4a 	bl	8002cf0 <teseo_i2c_rx_callback>
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}

08002860 <TESEO_LIV3F_RegisterBusIO>:
/** @defgroup TESEO_LIV3F_Exported_Functions TESEO_LIV3F Exported Functions
 * @{
 */

int32_t TESEO_LIV3F_RegisterBusIO(TESEO_LIV3F_Object_t *pObj, TESEO_LIV3F_IO_t *pIO)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  int32_t ret = TESEO_LIV3F_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d103      	bne.n	800287c <TESEO_LIV3F_RegisterBusIO+0x1c>
  {
    ret = TESEO_LIV3F_ERROR;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	e03b      	b.n	80028f4 <TESEO_LIV3F_RegisterBusIO+0x94>
  }
  else
  {
    pObj->IO.Init        = pIO->Init;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit      = pIO->DeInit;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType     = pIO->BusType;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]
    pObj->IO.Address     = pIO->Address;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	899a      	ldrh	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	819a      	strh	r2, [r3, #12]
    pObj->IO.Transmit_IT = pIO->Transmit_IT;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	611a      	str	r2, [r3, #16]
    pObj->IO.Receive_IT  = pIO->Receive_IT;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	615a      	str	r2, [r3, #20]
    pObj->IO.Reset       = pIO->Reset;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick     = pIO->GetTick;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	61da      	str	r2, [r3, #28]
    pObj->IO.ClearOREF   = pIO->ClearOREF;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6a1a      	ldr	r2, [r3, #32]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	621a      	str	r2, [r3, #32]

    /* init the message queue */
    pObj->pTeseoQueue = teseo_queue_init();
 80028c4:	f000 fbd4 	bl	8003070 <teseo_queue_init>
 80028c8:	4602      	mov	r2, r0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    pObj->Ctx.Receive    = ReceiveWrap;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002900 <TESEO_LIV3F_RegisterBusIO+0xa0>)
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.Transmit   = TransmitWrap;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002904 <TESEO_LIV3F_RegisterBusIO+0xa4>)
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.GetTick    = GetTickWrap;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002908 <TESEO_LIV3F_RegisterBusIO+0xa8>)
 80028de:	62da      	str	r2, [r3, #44]	@ 0x2c
    pObj->Ctx.ClearOREF  = ClearOREFWrap;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a0a      	ldr	r2, [pc, #40]	@ (800290c <TESEO_LIV3F_RegisterBusIO+0xac>)
 80028e4:	631a      	str	r2, [r3, #48]	@ 0x30
    pObj->Ctx.pQueue     = pObj->pTeseoQueue;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	635a      	str	r2, [r3, #52]	@ 0x34
    pObj->Ctx.Handle     = pObj;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	08002ae5 	.word	0x08002ae5
 8002904:	08002b13 	.word	0x08002b13
 8002908:	08002b41 	.word	0x08002b41
 800290c:	08002b5d 	.word	0x08002b5d

08002910 <TESEO_LIV3F_Init>:

int32_t TESEO_LIV3F_Init(TESEO_LIV3F_Object_t *pObj)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  int32_t ret = TESEO_LIV3F_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]

  /* Reset the device */
  pObj->IO.Reset();
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	4798      	blx	r3

  /* Init the Bus */
  if (pObj->IO.Init == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <TESEO_LIV3F_Init+0x22>
  {
    ret = TESEO_LIV3F_ERROR;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	e017      	b.n	8002962 <TESEO_LIV3F_Init+0x52>
  }
  else if (pObj->IO.Init() != TESEO_LIV3F_OK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4798      	blx	r3
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <TESEO_LIV3F_Init+0x36>
  {
    ret = TESEO_LIV3F_ERROR;
 800293e:	f04f 33ff 	mov.w	r3, #4294967295
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	e00d      	b.n	8002962 <TESEO_LIV3F_Init+0x52>
  }
  else
  {
    /* Enable the component SM */
    if(TESEO_LIV3F_Enable(pObj) != TESEO_LIV3F_OK)
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f886 	bl	8002a58 <TESEO_LIV3F_Enable>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <TESEO_LIV3F_Init+0x4a>
    {
      ret = TESEO_LIV3F_ERROR;
 8002952:	f04f 33ff 	mov.w	r3, #4294967295
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	e003      	b.n	8002962 <TESEO_LIV3F_Init+0x52>
    }
    else
    {
      pObj->is_initialized = 1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }
  }
  return ret;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <TESEO_LIV3F_DeInit>:

int32_t TESEO_LIV3F_DeInit(TESEO_LIV3F_Object_t *pObj)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  int32_t ret = TESEO_LIV3F_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]

  /* Disable the component SM */
  if(TESEO_LIV3F_Disable(pObj) != TESEO_LIV3F_OK)
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f890 	bl	8002a9e <TESEO_LIV3F_Disable>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <TESEO_LIV3F_DeInit+0x20>
  {
    ret = TESEO_LIV3F_ERROR;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	e015      	b.n	80029b8 <TESEO_LIV3F_DeInit+0x4c>
  }
  else
  {
    /* Deinit the Bus */
    if (pObj->IO.DeInit == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d103      	bne.n	800299c <TESEO_LIV3F_DeInit+0x30>
    {
      ret = TESEO_LIV3F_ERROR;
 8002994:	f04f 33ff 	mov.w	r3, #4294967295
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e00d      	b.n	80029b8 <TESEO_LIV3F_DeInit+0x4c>
    }
    else if (pObj->IO.DeInit() != TESEO_LIV3F_OK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4798      	blx	r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <TESEO_LIV3F_DeInit+0x44>
    {
      ret = TESEO_LIV3F_ERROR;
 80029a8:	f04f 33ff 	mov.w	r3, #4294967295
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	e003      	b.n	80029b8 <TESEO_LIV3F_DeInit+0x4c>
    }
    else
    {
      pObj->is_initialized = 0;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }
  }

  return ret;
 80029b8:	68fb      	ldr	r3, [r7, #12]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <TESEO_LIV3F_GetMessage>:

const TESEO_LIV3F_Msg_t* TESEO_LIV3F_GetMessage(const TESEO_LIV3F_Object_t *pObj)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  return teseo_queue_claim_rd_buffer(pObj->pTeseoQueue);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fbdb 	bl	800318a <teseo_queue_claim_rd_buffer>
 80029d4:	4603      	mov	r3, r0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <TESEO_LIV3F_ReleaseMessage>:

int32_t TESEO_LIV3F_ReleaseMessage(const TESEO_LIV3F_Object_t *pObj, const TESEO_LIV3F_Msg_t *Message)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
  teseo_queue_release_rd_buffer(pObj->pTeseoQueue, Message);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ec:	6839      	ldr	r1, [r7, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fbfc 	bl	80031ec <teseo_queue_release_rd_buffer>

  return TESEO_LIV3F_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <TESEO_LIV3F_Send>:

int32_t TESEO_LIV3F_Send(const TESEO_LIV3F_Object_t *pObj, const TESEO_LIV3F_Msg_t *Message)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
  return pObj->IO.Transmit_IT((pObj->IO.Address << 1), Message->buf, Message->len);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	8992      	ldrh	r2, [r2, #12]
 8002a10:	0052      	lsls	r2, r2, #1
 8002a12:	b290      	uxth	r0, r2
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	6811      	ldr	r1, [r2, #0]
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	8892      	ldrh	r2, [r2, #4]
 8002a1c:	4798      	blx	r3
 8002a1e:	4603      	mov	r3, r0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <TESEO_LIV3F_I2C_BackgroundProcess>:

void TESEO_LIV3F_I2C_BackgroundProcess(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  teseo_i2c_background_process();
 8002a2c:	f000 fa20 	bl	8002e70 <teseo_i2c_background_process>
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <TESEO_LIV3F_I2C_RxCb>:

/* I2C callbacks */

void TESEO_LIV3F_I2C_RxCb(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  teseo_i2c_rx_callback_ok();
 8002a38:	f7ff fefd 	bl	8002836 <teseo_i2c_rx_callback_ok>
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <TESEO_LIV3F_I2C_ErrorCb>:

void TESEO_LIV3F_I2C_ErrorCb(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  teseo_i2c_rx_callback_error();
 8002a44:	f7ff fefe 	bl	8002844 <teseo_i2c_rx_callback_error>
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <TESEO_LIV3F_I2C_AbortCb>:

void TESEO_LIV3F_I2C_AbortCb(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  teseo_i2c_rx_callback_abort();
 8002a50:	f7ff feff 	bl	8002852 <teseo_i2c_rx_callback_abort>
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <TESEO_LIV3F_Enable>:
 * @brief  Enable the TESEO component
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t TESEO_LIV3F_Enable(TESEO_LIV3F_Object_t *pObj)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  int32_t ret = TESEO_LIV3F_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]

  if(pObj->IO.BusType == TESEO_LIV3F_I2C_BUS)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d105      	bne.n	8002a78 <TESEO_LIV3F_Enable+0x20>
  {
    teseo_i2c_enable(&pObj->Ctx);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3324      	adds	r3, #36	@ 0x24
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fec4 	bl	80027fe <teseo_i2c_enable>
 8002a76:	e00d      	b.n	8002a94 <TESEO_LIV3F_Enable+0x3c>
  }
  else if(pObj->IO.BusType == TESEO_LIV3F_UART_BUS)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d106      	bne.n	8002a8e <TESEO_LIV3F_Enable+0x36>
  {
    teseo_uart_rx_enable(&pObj->Ctx);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3324      	adds	r3, #36	@ 0x24
 8002a84:	2101      	movs	r1, #1
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fbd2 	bl	8003230 <teseo_uart_rx_onoff>
 8002a8c:	e002      	b.n	8002a94 <TESEO_LIV3F_Enable+0x3c>
  }
  else
  {
    ret = TESEO_LIV3F_ERROR;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a92:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a94:	68fb      	ldr	r3, [r7, #12]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <TESEO_LIV3F_Disable>:
 * @brief  Disable the TESEO component
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t TESEO_LIV3F_Disable(TESEO_LIV3F_Object_t *pObj)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  int32_t ret = TESEO_LIV3F_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]

  if(pObj->IO.BusType == TESEO_LIV3F_I2C_BUS)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <TESEO_LIV3F_Disable+0x20>
  {
    teseo_i2c_disable(&pObj->Ctx);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3324      	adds	r3, #36	@ 0x24
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff feaf 	bl	800281a <teseo_i2c_disable>
 8002abc:	e00d      	b.n	8002ada <TESEO_LIV3F_Disable+0x3c>
  }
  else if(pObj->IO.BusType == TESEO_LIV3F_UART_BUS)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <TESEO_LIV3F_Disable+0x36>
  {
    teseo_uart_rx_disable(&pObj->Ctx);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3324      	adds	r3, #36	@ 0x24
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fbaf 	bl	8003230 <teseo_uart_rx_onoff>
 8002ad2:	e002      	b.n	8002ada <TESEO_LIV3F_Disable+0x3c>
  }
  else
  {
    ret = TESEO_LIV3F_ERROR;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002ada:	68fb      	ldr	r3, [r7, #12]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <ReceiveWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReceiveWrap(void *Handle, uint8_t *pData, uint16_t Length)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  const TESEO_LIV3F_Object_t *pObj = (TESEO_LIV3F_Object_t *)Handle;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	617b      	str	r3, [r7, #20]

  return pObj->IO.Receive_IT((uint16_t)(pObj->IO.Address << 1), pData, Length);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	8992      	ldrh	r2, [r2, #12]
 8002afe:	0052      	lsls	r2, r2, #1
 8002b00:	b290      	uxth	r0, r2
 8002b02:	88fa      	ldrh	r2, [r7, #6]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	4798      	blx	r3
 8002b08:	4603      	mov	r3, r0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <TransmitWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t TransmitWrap(void *Handle, uint8_t *pData, uint16_t Length)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	80fb      	strh	r3, [r7, #6]
  const TESEO_LIV3F_Object_t *pObj = (TESEO_LIV3F_Object_t *)Handle;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	617b      	str	r3, [r7, #20]

  return pObj->IO.Transmit_IT((uint16_t)(pObj->IO.Address << 1), pData, Length);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	8992      	ldrh	r2, [r2, #12]
 8002b2c:	0052      	lsls	r2, r2, #1
 8002b2e:	b290      	uxth	r0, r2
 8002b30:	88fa      	ldrh	r2, [r7, #6]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	4798      	blx	r3
 8002b36:	4603      	mov	r3, r0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <GetTickWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval tick
 */
static uint32_t GetTickWrap(void *Handle)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  const TESEO_LIV3F_Object_t *pObj = (TESEO_LIV3F_Object_t *)Handle;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]

  return pObj->IO.GetTick();
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	4798      	blx	r3
 8002b52:	4603      	mov	r3, r0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <ClearOREFWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval tick
 */
static void ClearOREFWrap(void *Handle)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  const TESEO_LIV3F_Object_t *pObj = (TESEO_LIV3F_Object_t *)Handle;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60fb      	str	r3, [r7, #12]

  pObj->IO.ClearOREF();
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4798      	blx	r3
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <i2c_fsm>:

/*
 * I2C state machine function (param temp is char read on the I2C bus
 */
static void i2c_fsm(uint8_t temp)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
  TESEO_LIV3F_ctx_t *pCtx = Teseo_I2C_Data.pCtx;
 8002b82:	4b5a      	ldr	r3, [pc, #360]	@ (8002cec <i2c_fsm+0x174>)
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	60fb      	str	r3, [r7, #12]
  uint32_t offset = 1;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]

  Teseo_I2C_Data.fsm_restart = 1;
 8002b8c:	4b57      	ldr	r3, [pc, #348]	@ (8002cec <i2c_fsm+0x174>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	745a      	strb	r2, [r3, #17]

  while(Teseo_I2C_Data.fsm_restart == 1)
 8002b92:	e0a0      	b.n	8002cd6 <i2c_fsm+0x15e>
  {
    Teseo_I2C_Data.fsm_state = Teseo_I2C_Data.fsm_next_state;
 8002b94:	4b55      	ldr	r3, [pc, #340]	@ (8002cec <i2c_fsm+0x174>)
 8002b96:	7a5b      	ldrb	r3, [r3, #9]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4b54      	ldr	r3, [pc, #336]	@ (8002cec <i2c_fsm+0x174>)
 8002b9c:	721a      	strb	r2, [r3, #8]
    
    switch (Teseo_I2C_Data.fsm_state)
 8002b9e:	4b53      	ldr	r3, [pc, #332]	@ (8002cec <i2c_fsm+0x174>)
 8002ba0:	7a1b      	ldrb	r3, [r3, #8]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <i2c_fsm+0x36>
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d031      	beq.n	8002c10 <i2c_fsm+0x98>
 8002bac:	e08c      	b.n	8002cc8 <i2c_fsm+0x150>
    {
      
    case i2c_fsm_discard:
      Teseo_I2C_Data.fsm_restart = 0;
 8002bae:	4b4f      	ldr	r3, [pc, #316]	@ (8002cec <i2c_fsm+0x174>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	745a      	strb	r2, [r3, #17]
      Teseo_I2C_Data.fsm_next_state = i2c_fsm_discard;
 8002bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8002cec <i2c_fsm+0x174>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	725a      	strb	r2, [r3, #9]
      //PRINT_DBG(".");
      
      if (temp != (uint8_t)'$') {
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	2b24      	cmp	r3, #36	@ 0x24
 8002bbe:	f040 8087 	bne.w	8002cd0 <i2c_fsm+0x158>
        break;
      }
      
      if (Teseo_I2C_Data.wr_msg == NULL)
 8002bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002cec <i2c_fsm+0x174>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d107      	bne.n	8002bda <i2c_fsm+0x62>
      {
        Teseo_I2C_Data.wr_msg = teseo_queue_claim_wr_buffer(pCtx->pQueue);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fa88 	bl	80030e4 <teseo_queue_claim_wr_buffer>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4a45      	ldr	r2, [pc, #276]	@ (8002cec <i2c_fsm+0x174>)
 8002bd8:	6053      	str	r3, [r2, #4]
      }
      
      if (Teseo_I2C_Data.wr_msg == NULL)
 8002bda:	4b44      	ldr	r3, [pc, #272]	@ (8002cec <i2c_fsm+0x174>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d078      	beq.n	8002cd4 <i2c_fsm+0x15c>
      {
        break;
      }
      
      Teseo_I2C_Data.wr_msg->len = 0;
 8002be2:	4b42      	ldr	r3, [pc, #264]	@ (8002cec <i2c_fsm+0x174>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	809a      	strh	r2, [r3, #4]
      Teseo_I2C_Data.wr_msg->buf[Teseo_I2C_Data.wr_msg->len] = temp; /* save '$' */
 8002bea:	4b40      	ldr	r3, [pc, #256]	@ (8002cec <i2c_fsm+0x174>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a3e      	ldr	r2, [pc, #248]	@ (8002cec <i2c_fsm+0x174>)
 8002bf2:	6852      	ldr	r2, [r2, #4]
 8002bf4:	8892      	ldrh	r2, [r2, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	79fa      	ldrb	r2, [r7, #7]
 8002bfa:	701a      	strb	r2, [r3, #0]
      Teseo_I2C_Data.wr_msg->len++;
 8002bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8002cec <i2c_fsm+0x174>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	889a      	ldrh	r2, [r3, #4]
 8002c02:	3201      	adds	r2, #1
 8002c04:	b292      	uxth	r2, r2
 8002c06:	809a      	strh	r2, [r3, #4]

      Teseo_I2C_Data.fsm_next_state = i2c_fsm_synch;
 8002c08:	4b38      	ldr	r3, [pc, #224]	@ (8002cec <i2c_fsm+0x174>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	725a      	strb	r2, [r3, #9]
      PRINT_DBG("I2C buffer synch\n\r");
      break;
 8002c0e:	e062      	b.n	8002cd6 <i2c_fsm+0x15e>
      
    case i2c_fsm_synch:
      Teseo_I2C_Data.fsm_restart = 0;
 8002c10:	4b36      	ldr	r3, [pc, #216]	@ (8002cec <i2c_fsm+0x174>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	745a      	strb	r2, [r3, #17]
      Teseo_I2C_Data.wr_msg->buf[Teseo_I2C_Data.wr_msg->len] = temp;
 8002c16:	4b35      	ldr	r3, [pc, #212]	@ (8002cec <i2c_fsm+0x174>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a33      	ldr	r2, [pc, #204]	@ (8002cec <i2c_fsm+0x174>)
 8002c1e:	6852      	ldr	r2, [r2, #4]
 8002c20:	8892      	ldrh	r2, [r2, #4]
 8002c22:	4413      	add	r3, r2
 8002c24:	79fa      	ldrb	r2, [r7, #7]
 8002c26:	701a      	strb	r2, [r3, #0]
      Teseo_I2C_Data.wr_msg->len++;
 8002c28:	4b30      	ldr	r3, [pc, #192]	@ (8002cec <i2c_fsm+0x174>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	889a      	ldrh	r2, [r3, #4]
 8002c2e:	3201      	adds	r2, #1
 8002c30:	b292      	uxth	r2, r2
 8002c32:	809a      	strh	r2, [r3, #4]
      
      if (Teseo_I2C_Data.wr_msg->buf[Teseo_I2C_Data.wr_msg->len-offset] == (uint8_t)'$')
 8002c34:	4b2d      	ldr	r3, [pc, #180]	@ (8002cec <i2c_fsm+0x174>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cec <i2c_fsm+0x174>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	889b      	ldrh	r3, [r3, #4]
 8002c40:	4619      	mov	r1, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	1acb      	subs	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b24      	cmp	r3, #36	@ 0x24
 8002c4c:	d138      	bne.n	8002cc0 <i2c_fsm+0x148>
      {
        --Teseo_I2C_Data.wr_msg->len;
 8002c4e:	4b27      	ldr	r3, [pc, #156]	@ (8002cec <i2c_fsm+0x174>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	889a      	ldrh	r2, [r3, #4]
 8002c54:	3a01      	subs	r2, #1
 8002c56:	b292      	uxth	r2, r2
 8002c58:	809a      	strh	r2, [r3, #4]
        Teseo_I2C_Data.wr_msg->buf[Teseo_I2C_Data.wr_msg->len] = (uint8_t)'\0';
 8002c5a:	4b24      	ldr	r3, [pc, #144]	@ (8002cec <i2c_fsm+0x174>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a22      	ldr	r2, [pc, #136]	@ (8002cec <i2c_fsm+0x174>)
 8002c62:	6852      	ldr	r2, [r2, #4]
 8002c64:	8892      	ldrh	r2, [r2, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
        teseo_queue_release_wr_buffer(pCtx->pQueue, Teseo_I2C_Data.wr_msg);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	4a1e      	ldr	r2, [pc, #120]	@ (8002cec <i2c_fsm+0x174>)
 8002c72:	6852      	ldr	r2, [r2, #4]
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fa61 	bl	800313e <teseo_queue_release_wr_buffer>
        if (Teseo_I2C_Data.nr_msg != -1)
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <i2c_fsm+0x174>)
 8002c7e:	7c1b      	ldrb	r3, [r3, #16]
 8002c80:	b25b      	sxtb	r3, r3
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c86:	d011      	beq.n	8002cac <i2c_fsm+0x134>
        {
          --Teseo_I2C_Data.nr_msg;
 8002c88:	4b18      	ldr	r3, [pc, #96]	@ (8002cec <i2c_fsm+0x174>)
 8002c8a:	7c1b      	ldrb	r3, [r3, #16]
 8002c8c:	b25b      	sxtb	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	b25a      	sxtb	r2, r3
 8002c96:	4b15      	ldr	r3, [pc, #84]	@ (8002cec <i2c_fsm+0x174>)
 8002c98:	741a      	strb	r2, [r3, #16]
          if (Teseo_I2C_Data.nr_msg == 0)
 8002c9a:	4b14      	ldr	r3, [pc, #80]	@ (8002cec <i2c_fsm+0x174>)
 8002c9c:	7c1b      	ldrb	r3, [r3, #16]
 8002c9e:	b25b      	sxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d103      	bne.n	8002cac <i2c_fsm+0x134>
          {
            Teseo_I2C_Data.cmd = IDLE;
 8002ca4:	4b11      	ldr	r3, [pc, #68]	@ (8002cec <i2c_fsm+0x174>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
            break;
 8002caa:	e014      	b.n	8002cd6 <i2c_fsm+0x15e>
          }
        }
        PRINT_DBG("I2C buffer released\n\r");
        Teseo_I2C_Data.wr_msg = NULL;
 8002cac:	4b0f      	ldr	r3, [pc, #60]	@ (8002cec <i2c_fsm+0x174>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
        Teseo_I2C_Data.fsm_next_state = i2c_fsm_discard;
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cec <i2c_fsm+0x174>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	725a      	strb	r2, [r3, #9]

        Teseo_I2C_Data.fsm_restart = 1; // check if we can resynch the new sentence
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cec <i2c_fsm+0x174>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	745a      	strb	r2, [r3, #17]
        break;
 8002cbe:	e00a      	b.n	8002cd6 <i2c_fsm+0x15e>

        Teseo_I2C_Data.fsm_restart = 1;
        break;
      }
#endif
      Teseo_I2C_Data.fsm_next_state = i2c_fsm_synch;
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cec <i2c_fsm+0x174>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	725a      	strb	r2, [r3, #9]
      break;
 8002cc6:	e006      	b.n	8002cd6 <i2c_fsm+0x15e>
      
    default:
      Teseo_I2C_Data.fsm_restart = 0;
 8002cc8:	4b08      	ldr	r3, [pc, #32]	@ (8002cec <i2c_fsm+0x174>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	745a      	strb	r2, [r3, #17]
      break;
 8002cce:	e002      	b.n	8002cd6 <i2c_fsm+0x15e>
        break;
 8002cd0:	bf00      	nop
 8002cd2:	e000      	b.n	8002cd6 <i2c_fsm+0x15e>
        break;
 8002cd4:	bf00      	nop
  while(Teseo_I2C_Data.fsm_restart == 1)
 8002cd6:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <i2c_fsm+0x174>)
 8002cd8:	7c5b      	ldrb	r3, [r3, #17]
 8002cda:	b25b      	sxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	f43f af59 	beq.w	8002b94 <i2c_fsm+0x1c>
    }
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000910 	.word	0x20000910

08002cf0 <teseo_i2c_rx_callback>:

/* Exported functions --------------------------------------------------------*/
void teseo_i2c_rx_callback(Teseo_I2C_CB_CallerTypedef c)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  TESEO_LIV3F_ctx_t *pCtx = Teseo_I2C_Data.pCtx;
 8002cfa:	4b32      	ldr	r3, [pc, #200]	@ (8002dc4 <teseo_i2c_rx_callback+0xd4>)
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	60bb      	str	r3, [r7, #8]
  int32_t i;

  if (Teseo_I2C_Data.cmd == IDLE)
 8002d00:	4b30      	ldr	r3, [pc, #192]	@ (8002dc4 <teseo_i2c_rx_callback+0xd4>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <teseo_i2c_rx_callback+0x22>
  {
    /* turn-off I2C-ISR... */
    Teseo_I2C_Data.state = IDLE;
 8002d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc4 <teseo_i2c_rx_callback+0xd4>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	705a      	strb	r2, [r3, #1]
    return;
 8002d10:	e055      	b.n	8002dbe <teseo_i2c_rx_callback+0xce>
  }

  if (c == _i2c_abort)
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d103      	bne.n	8002d20 <teseo_i2c_rx_callback+0x30>
  {
    PRINT_DBG("Teseo I2C Abort on ISR\n\r");
    /* turn-off I2C-ISR... */
    Teseo_I2C_Data.state = IDLE;
 8002d18:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc4 <teseo_i2c_rx_callback+0xd4>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	705a      	strb	r2, [r3, #1]
    return;
 8002d1e:	e04e      	b.n	8002dbe <teseo_i2c_rx_callback+0xce>
  }
  
  if (c == _i2c_error)
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d10d      	bne.n	8002d42 <teseo_i2c_rx_callback+0x52>
  {
    PRINT_DBG("Teseo I2C Error on ISR\n\r");
    /* suspend I2C-ISR... and try to resume later...*/
#define TIMEOUT_DELAY	(uint32_t)100
    Teseo_I2C_Data.timeout = pCtx->GetTick(pCtx->Handle) + TIMEOUT_DELAY;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	6952      	ldr	r2, [r2, #20]
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4798      	blx	r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	3364      	adds	r3, #100	@ 0x64
 8002d36:	4a23      	ldr	r2, [pc, #140]	@ (8002dc4 <teseo_i2c_rx_callback+0xd4>)
 8002d38:	60d3      	str	r3, [r2, #12]
    Teseo_I2C_Data.state = WAITING; /* turn-off */
 8002d3a:	4b22      	ldr	r3, [pc, #136]	@ (8002dc4 <teseo_i2c_rx_callback+0xd4>)
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	705a      	strb	r2, [r3, #1]
    return;
 8002d40:	e03d      	b.n	8002dbe <teseo_i2c_rx_callback+0xce>
  }
  
  PRINT_DBG("I2C ISR\n\r");
  for (i = 0; i < I2C_LOCAL_BUF; ++i)
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e011      	b.n	8002d6c <teseo_i2c_rx_callback+0x7c>
  {
    if (Teseo_I2C_Data.buf[i] != (uint8_t)0xff)
 8002d48:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc4 <teseo_i2c_rx_callback+0xd4>)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3312      	adds	r3, #18
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2bff      	cmp	r3, #255	@ 0xff
 8002d54:	d007      	beq.n	8002d66 <teseo_i2c_rx_callback+0x76>
    {
      i2c_fsm(Teseo_I2C_Data.buf[i]);
 8002d56:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc4 <teseo_i2c_rx_callback+0xd4>)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3312      	adds	r3, #18
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff09 	bl	8002b78 <i2c_fsm>
  for (i = 0; i < I2C_LOCAL_BUF; ++i)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b0f      	cmp	r3, #15
 8002d70:	ddea      	ble.n	8002d48 <teseo_i2c_rx_callback+0x58>
    }
  } 
  
  if (Teseo_I2C_Data.buf[I2C_LOCAL_BUF-1] == (uint8_t)0xff)
 8002d72:	4b14      	ldr	r3, [pc, #80]	@ (8002dc4 <teseo_i2c_rx_callback+0xd4>)
 8002d74:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d78:	2bff      	cmp	r3, #255	@ 0xff
 8002d7a:	d10d      	bne.n	8002d98 <teseo_i2c_rx_callback+0xa8>
  {
    Teseo_I2C_Data.timeout = pCtx->GetTick(pCtx->Handle) + TIMEOUT_DELAY;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	6952      	ldr	r2, [r2, #20]
 8002d84:	4610      	mov	r0, r2
 8002d86:	4798      	blx	r3
 8002d88:	4603      	mov	r3, r0
 8002d8a:	3364      	adds	r3, #100	@ 0x64
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc4 <teseo_i2c_rx_callback+0xd4>)
 8002d8e:	60d3      	str	r3, [r2, #12]
    Teseo_I2C_Data.state = WAITING;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <teseo_i2c_rx_callback+0xd4>)
 8002d92:	2202      	movs	r2, #2
 8002d94:	705a      	strb	r2, [r3, #1]
    return;
 8002d96:	e012      	b.n	8002dbe <teseo_i2c_rx_callback+0xce>
  }

  Teseo_I2C_Data.timeout = pCtx->GetTick(pCtx->Handle);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	6952      	ldr	r2, [r2, #20]
 8002da0:	4610      	mov	r0, r2
 8002da2:	4798      	blx	r3
 8002da4:	4603      	mov	r3, r0
 8002da6:	4a07      	ldr	r2, [pc, #28]	@ (8002dc4 <teseo_i2c_rx_callback+0xd4>)
 8002da8:	60d3      	str	r3, [r2, #12]
  Teseo_I2C_Data.state = RUNNING;
 8002daa:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <teseo_i2c_rx_callback+0xd4>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	705a      	strb	r2, [r3, #1]
  pCtx->Receive(pCtx->Handle, (uint8_t *)Teseo_I2C_Data.buf, I2C_LOCAL_BUF);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	6950      	ldr	r0, [r2, #20]
 8002db8:	2210      	movs	r2, #16
 8002dba:	4903      	ldr	r1, [pc, #12]	@ (8002dc8 <teseo_i2c_rx_callback+0xd8>)
 8002dbc:	4798      	blx	r3
}
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000910 	.word	0x20000910
 8002dc8:	20000922 	.word	0x20000922

08002dcc <teseo_i2c_onoff>:

void teseo_i2c_onoff(TESEO_LIV3F_ctx_t *pCtx, uint8_t enable, int8_t nr_msg)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	70fb      	strb	r3, [r7, #3]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	70bb      	strb	r3, [r7, #2]
  Teseo_I2C_Data.pCtx = pCtx;
 8002ddc:	4a22      	ldr	r2, [pc, #136]	@ (8002e68 <teseo_i2c_onoff+0x9c>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6253      	str	r3, [r2, #36]	@ 0x24

  if ((Teseo_I2C_Data.state == RUNNING) && (enable == 1U))
 8002de2:	4b21      	ldr	r3, [pc, #132]	@ (8002e68 <teseo_i2c_onoff+0x9c>)
 8002de4:	785b      	ldrb	r3, [r3, #1]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <teseo_i2c_onoff+0x26>
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d034      	beq.n	8002e5c <teseo_i2c_onoff+0x90>
  {
    return;
  }
  if ((Teseo_I2C_Data.state == IDLE) && (enable == 0U))
 8002df2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <teseo_i2c_onoff+0x9c>)
 8002df4:	785b      	ldrb	r3, [r3, #1]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <teseo_i2c_onoff+0x36>
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d02e      	beq.n	8002e60 <teseo_i2c_onoff+0x94>
  {
    return;
  }
  
  if (enable == 1U)
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d11f      	bne.n	8002e48 <teseo_i2c_onoff+0x7c>
  {
    PRINT_DBG("I2C running\n\r");
    Teseo_I2C_Data.fsm_next_state = i2c_fsm_discard;
 8002e08:	4b17      	ldr	r3, [pc, #92]	@ (8002e68 <teseo_i2c_onoff+0x9c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	725a      	strb	r2, [r3, #9]
    Teseo_I2C_Data.fsm_restart = 1;
 8002e0e:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <teseo_i2c_onoff+0x9c>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	745a      	strb	r2, [r3, #17]
    Teseo_I2C_Data.nr_msg = nr_msg;
 8002e14:	4a14      	ldr	r2, [pc, #80]	@ (8002e68 <teseo_i2c_onoff+0x9c>)
 8002e16:	78bb      	ldrb	r3, [r7, #2]
 8002e18:	7413      	strb	r3, [r2, #16]
    Teseo_I2C_Data.timeout = pCtx->GetTick(pCtx->Handle);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6952      	ldr	r2, [r2, #20]
 8002e22:	4610      	mov	r0, r2
 8002e24:	4798      	blx	r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	4a0f      	ldr	r2, [pc, #60]	@ (8002e68 <teseo_i2c_onoff+0x9c>)
 8002e2a:	60d3      	str	r3, [r2, #12]
    Teseo_I2C_Data.wr_msg = NULL;
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <teseo_i2c_onoff+0x9c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	605a      	str	r2, [r3, #4]
    Teseo_I2C_Data.cmd = RUNNING;
 8002e32:	4b0d      	ldr	r3, [pc, #52]	@ (8002e68 <teseo_i2c_onoff+0x9c>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
    pCtx->Receive(pCtx->Handle, (uint8_t *)Teseo_I2C_Data.buf, I2C_LOCAL_BUF);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6950      	ldr	r0, [r2, #20]
 8002e40:	2210      	movs	r2, #16
 8002e42:	490a      	ldr	r1, [pc, #40]	@ (8002e6c <teseo_i2c_onoff+0xa0>)
 8002e44:	4798      	blx	r3
    
    return;
 8002e46:	e00c      	b.n	8002e62 <teseo_i2c_onoff+0x96>
  }

  Teseo_I2C_Data.cmd = IDLE;
 8002e48:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <teseo_i2c_onoff+0x9c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
  while (Teseo_I2C_Data.state == RUNNING) {};
 8002e4e:	bf00      	nop
 8002e50:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <teseo_i2c_onoff+0x9c>)
 8002e52:	785b      	ldrb	r3, [r3, #1]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d0fa      	beq.n	8002e50 <teseo_i2c_onoff+0x84>
 8002e5a:	e002      	b.n	8002e62 <teseo_i2c_onoff+0x96>
    return;
 8002e5c:	bf00      	nop
 8002e5e:	e000      	b.n	8002e62 <teseo_i2c_onoff+0x96>
    return;
 8002e60:	bf00      	nop
  /*
   * This function returns when the I2C-FiniteStateMachine is no more running...
   */
}
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000910 	.word	0x20000910
 8002e6c:	20000922 	.word	0x20000922

08002e70 <teseo_i2c_background_process>:

void teseo_i2c_background_process(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
  const TESEO_LIV3F_ctx_t *pCtx = Teseo_I2C_Data.pCtx;
 8002e76:	4b11      	ldr	r3, [pc, #68]	@ (8002ebc <teseo_i2c_background_process+0x4c>)
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	607b      	str	r3, [r7, #4]

  if (Teseo_I2C_Data.cmd == IDLE)
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ebc <teseo_i2c_background_process+0x4c>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d015      	beq.n	8002eb2 <teseo_i2c_background_process+0x42>
  {
    return;
  }

  if (pCtx->GetTick(pCtx->Handle) > Teseo_I2C_Data.timeout)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6952      	ldr	r2, [r2, #20]
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4798      	blx	r3
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b09      	ldr	r3, [pc, #36]	@ (8002ebc <teseo_i2c_background_process+0x4c>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d90b      	bls.n	8002eb4 <teseo_i2c_background_process+0x44>
  {
    //PRINT_DBG("I2C Idle running\n\r");
    Teseo_I2C_Data.state = RUNNING;
 8002e9c:	4b07      	ldr	r3, [pc, #28]	@ (8002ebc <teseo_i2c_background_process+0x4c>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	705a      	strb	r2, [r3, #1]
    pCtx->Receive(pCtx->Handle, (uint8_t *)Teseo_I2C_Data.buf, I2C_LOCAL_BUF);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6950      	ldr	r0, [r2, #20]
 8002eaa:	2210      	movs	r2, #16
 8002eac:	4904      	ldr	r1, [pc, #16]	@ (8002ec0 <teseo_i2c_background_process+0x50>)
 8002eae:	4798      	blx	r3
 8002eb0:	e000      	b.n	8002eb4 <teseo_i2c_background_process+0x44>
    return;
 8002eb2:	bf00      	nop
  }
}
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000910 	.word	0x20000910
 8002ec0:	20000922 	.word	0x20000922

08002ec4 <teseo_ffs>:
 * differs in spirit from the above ffz (man ffs).
 * Source: 
 * git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/tree/include/asm-generic/bitops/ffs.h?h=v4.1.46
 */
static inline int32_t teseo_ffs(uint32_t _w)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  int32_t r = 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
  uint32_t w = _w;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	60bb      	str	r3, [r7, #8]
  
  if (w == 0U)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <teseo_ffs+0x1a>
  {
    return 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e032      	b.n	8002f44 <teseo_ffs+0x80>
  }
  if ((w & 0xffffU) == 0U)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <teseo_ffs+0x2e>
  {
    w >>= 16;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	60bb      	str	r3, [r7, #8]
    r += 16;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3310      	adds	r3, #16
 8002ef0:	60fb      	str	r3, [r7, #12]
  }
  if ((w & 0xffU) == 0U)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d105      	bne.n	8002f06 <teseo_ffs+0x42>
  {
    w >>= 8;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	60bb      	str	r3, [r7, #8]
    r += 8;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3308      	adds	r3, #8
 8002f04:	60fb      	str	r3, [r7, #12]
  }
  if ((w & 0xfU) == 0U)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <teseo_ffs+0x58>
  {
    w >>= 4;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	091b      	lsrs	r3, r3, #4
 8002f14:	60bb      	str	r3, [r7, #8]
    r += 4;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
  }
  if ((w & 3U) == 0U)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <teseo_ffs+0x6e>
  {
    w >>= 2;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	60bb      	str	r3, [r7, #8]
    r += 2;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3302      	adds	r3, #2
 8002f30:	60fb      	str	r3, [r7, #12]
  }
  if ((w & 1U) == 0U)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d102      	bne.n	8002f42 <teseo_ffs+0x7e>
  {
    r += 1;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
  }
  return r;
 8002f42:	68fb      	ldr	r3, [r7, #12]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <Teseo_Queue_static_alloc>:

/*
 * Returns the static instance of a Queue object.
 */
static TESEO_LIV3F_Queue_t *Teseo_Queue_static_alloc(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  static TESEO_LIV3F_Queue_t Teseo_Queue_Instance;
  return &Teseo_Queue_Instance;
 8002f54:	4b02      	ldr	r3, [pc, #8]	@ (8002f60 <Teseo_Queue_static_alloc+0x10>)
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	20000938 	.word	0x20000938

08002f64 <__find_msg_idx>:

/*
 * Returns the index of a message in the queue.
 */
static int32_t __find_msg_idx(const TESEO_LIV3F_Queue_t *pTeseoQueue, const TESEO_LIV3F_Msg_t *pTeseoMsg)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  int32_t i;
  
  for (i = 0; i < MAX_MSG_QUEUE; ++i)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	e00c      	b.n	8002f8e <__find_msg_idx+0x2a>
  {
    if (&pTeseoQueue->nmea_queue[i] == pTeseoMsg)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3301      	adds	r3, #1
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d101      	bne.n	8002f88 <__find_msg_idx+0x24>
    {
      return i;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	e007      	b.n	8002f98 <__find_msg_idx+0x34>
  for (i = 0; i < MAX_MSG_QUEUE; ++i)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b07      	cmp	r3, #7
 8002f92:	ddef      	ble.n	8002f74 <__find_msg_idx+0x10>
    }
  }
  
  return -1;
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <__check_unreleased_buffer>:

/*
 * Checks for buffers not yet released.
 */
static void __check_unreleased_buffer(TESEO_LIV3F_Queue_t *pTeseoQueue)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  
  PRINT_DBG("R\n\r");
  pTeseoQueue->bitmap_buffer_readable |= pTeseoQueue->bitmap_unreleased_buffer_irq;
  pTeseoQueue->bitmap_unreleased_buffer_irq = 0;
#endif /* ANY_RTOS */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <check_longer_msg>:

/*
 * Checks for messages longer than MAX_MSG_BUF.
 */
static void check_longer_msg(TESEO_LIV3F_Queue_t *pTeseoQueue, const TESEO_LIV3F_Msg_t *pTeseoMsg, uint32_t idx, int8_t wr_or_rd)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	@ 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	70fb      	strb	r3, [r7, #3]
  if (pTeseoMsg->len <= (uint32_t)MAX_MSG_BUF)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	889b      	ldrh	r3, [r3, #4]
 8002fca:	2b50      	cmp	r3, #80	@ 0x50
 8002fcc:	d947      	bls.n	800305e <check_longer_msg+0xa6>
  {
    return;
  }
  
  uint32_t j;
  uint32_t extra_bufs = (pTeseoMsg->len / (uint32_t)MAX_MSG_BUF) + (((pTeseoMsg->len % (uint32_t)MAX_MSG_BUF) != 0U) ? 1U : 0U);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	889b      	ldrh	r3, [r3, #4]
 8002fd2:	4a26      	ldr	r2, [pc, #152]	@ (800306c <check_longer_msg+0xb4>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4618      	mov	r0, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	889a      	ldrh	r2, [r3, #4]
 8002fe2:	4b22      	ldr	r3, [pc, #136]	@ (800306c <check_longer_msg+0xb4>)
 8002fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe8:	0999      	lsrs	r1, r3, #6
 8002fea:	460b      	mov	r3, r1
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <check_longer_msg+0x46>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <check_longer_msg+0x48>
 8002ffe:	2300      	movs	r3, #0
 8003000:	4403      	add	r3, r0
 8003002:	61bb      	str	r3, [r7, #24]
  
  for (j = 0; j < extra_bufs; j++)
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	e024      	b.n	8003054 <check_longer_msg+0x9c>
  {
    uint32_t rhs = (idx + j);
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	4413      	add	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

    if (wr_or_rd == 1)
 8003012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d10d      	bne.n	8003036 <check_longer_msg+0x7e>
    {
      if(rhs < 32U)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b1f      	cmp	r3, #31
 800301e:	d816      	bhi.n	800304e <check_longer_msg+0x96>
      {
        pTeseoQueue->bitmap_buffer_writable &= ~(1UL << rhs);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	2101      	movs	r1, #1
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	fa01 f303 	lsl.w	r3, r1, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	401a      	ands	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e00b      	b.n	800304e <check_longer_msg+0x96>
      }
    }
    else
    {
      if(rhs < 32U)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b1f      	cmp	r3, #31
 800303a:	d808      	bhi.n	800304e <check_longer_msg+0x96>
      {
        pTeseoQueue->bitmap_buffer_writable |= (1UL << rhs);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2101      	movs	r1, #1
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	431a      	orrs	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	601a      	str	r2, [r3, #0]
  for (j = 0; j < extra_bufs; j++)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3301      	adds	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	429a      	cmp	r2, r3
 800305a:	d3d6      	bcc.n	800300a <check_longer_msg+0x52>
 800305c:	e000      	b.n	8003060 <check_longer_msg+0xa8>
    return;
 800305e:	bf00      	nop
      }
    }
  }
}
 8003060:	3724      	adds	r7, #36	@ 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	cccccccd 	.word	0xcccccccd

08003070 <teseo_queue_init>:

/* Exported functions --------------------------------------------------------*/
TESEO_LIV3F_Queue_t *teseo_queue_init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
  TESEO_LIV3F_Queue_t *pTeseoQueue = Teseo_Queue_static_alloc();
 8003076:	f7ff ff6b 	bl	8002f50 <Teseo_Queue_static_alloc>
 800307a:	60b8      	str	r0, [r7, #8]
  int8_t i;
  TESEO_LIV3F_Msg_t *pTeseoMsg;
  
  PRINT_DBG("teseo_queue_init...\n\r" );
  pTeseoQueue->bitmap_buffer_writable = 0;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
  for (i = 0;  i < MAX_MSG_QUEUE; ++i)
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]
 8003086:	e021      	b.n	80030cc <teseo_queue_init+0x5c>
  {
    pTeseoMsg = &pTeseoQueue->nmea_queue[i];
 8003088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308c:	3301      	adds	r3, #1
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	4413      	add	r3, r2
 8003094:	607b      	str	r3, [r7, #4]

    pTeseoMsg->buf = &pTeseoQueue->single_message_buffer[i * MAX_MSG_BUF];
 8003096:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	3348      	adds	r3, #72	@ 0x48
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	441a      	add	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	601a      	str	r2, [r3, #0]
    pTeseoMsg->len = 0;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	809a      	strh	r2, [r3, #4]
    pTeseoQueue->bitmap_buffer_writable |=  (1UL << (uint8_t)i);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	4619      	mov	r1, r3
 80030ba:	2301      	movs	r3, #1
 80030bc:	408b      	lsls	r3, r1
 80030be:	431a      	orrs	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	601a      	str	r2, [r3, #0]
  for (i = 0;  i < MAX_MSG_QUEUE; ++i)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	3301      	adds	r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d0:	2b07      	cmp	r3, #7
 80030d2:	ddd9      	ble.n	8003088 <teseo_queue_init+0x18>
  }
  pTeseoQueue->bitmap_buffer_readable = 0;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2200      	movs	r2, #0
 80030d8:	605a      	str	r2, [r3, #4]
  pTeseoQueue->bitmap_unreleased_buffer_irq = 0;
  pTeseoQueue->semaphore = semaphore_create();  
#endif /* ANY_RTOS */
  PRINT_DBG("teseo_queue_init: Done\n\r");
  
  return pTeseoQueue;
 80030da:	68bb      	ldr	r3, [r7, #8]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <teseo_queue_claim_wr_buffer>:
  semaphore_delete(pTeseoQueue->semaphore);
#endif /* ANY_RTOS */
}

TESEO_LIV3F_Msg_t *teseo_queue_claim_wr_buffer(TESEO_LIV3F_Queue_t *pTeseoQueue)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
    return NULL;
  }
#endif /* ANY_RTOS */

  /* first available buffer writable */
  i = teseo_ffs(pTeseoQueue->bitmap_buffer_writable);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fee7 	bl	8002ec4 <teseo_ffs>
 80030f6:	60f8      	str	r0, [r7, #12]
  
  if (i == 0) {
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <teseo_queue_claim_wr_buffer+0x1e>
#if (ANY_RTOS)
    /* release the semaphore */
    semaphore_free_irq(pTeseoQueue->semaphore);
#endif /* ANY_RTOS */
    PRINT_DBG("-\n\r");
    return NULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	e019      	b.n	8003136 <teseo_queue_claim_wr_buffer+0x52>
  }
  
  i--; /* first available buffer writable */
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3b01      	subs	r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
  
  /* buffer no more writable */
  pTeseoQueue->bitmap_buffer_writable &= ~(1U << (uint32_t)i);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2101      	movs	r1, #1
 8003110:	fa01 f303 	lsl.w	r3, r1, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	401a      	ands	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	601a      	str	r2, [r3, #0]
  
  __check_unreleased_buffer(pTeseoQueue);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff41 	bl	8002fa4 <__check_unreleased_buffer>

#if (ANY_RTOS)
  semaphore_free_irq(pTeseoQueue->semaphore);
#endif /* ANY_RTOS */

  pTeseoMsg = &pTeseoQueue->nmea_queue[i];
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3301      	adds	r3, #1
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	4413      	add	r3, r2
 800312c:	60bb      	str	r3, [r7, #8]
  pTeseoMsg->len = 0;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2200      	movs	r2, #0
 8003132:	809a      	strh	r2, [r3, #4]
  
  return pTeseoMsg;
 8003134:	68bb      	ldr	r3, [r7, #8]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <teseo_queue_release_wr_buffer>:

void teseo_queue_release_wr_buffer(TESEO_LIV3F_Queue_t *pTeseoQueue, TESEO_LIV3F_Msg_t *pTeseoMsg)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]

#if (ANY_RTOS)
  BaseVal_t ret;
#endif /* ANY_RTOS */
  
  if (pTeseoMsg == NULL) {
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d017      	beq.n	800317e <teseo_queue_release_wr_buffer+0x40>
    return;
  }
  
  i = __find_msg_idx(pTeseoQueue, pTeseoMsg);
 800314e:	6839      	ldr	r1, [r7, #0]
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff07 	bl	8002f64 <__find_msg_idx>
 8003156:	60f8      	str	r0, [r7, #12]
  if (i < 0) {
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	db11      	blt.n	8003182 <teseo_queue_release_wr_buffer+0x44>
    return;
  }
#endif /* ANY_RTOS */
  
  /* mark the buffer as readable */
  pTeseoQueue->bitmap_buffer_readable |= (1UL << (uint32_t)i);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2101      	movs	r1, #1
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	605a      	str	r2, [r3, #4]

  /* check for longer message */
  check_longer_msg(pTeseoQueue, pTeseoMsg, (uint32_t)i, 1);
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	2301      	movs	r3, #1
 8003174:	6839      	ldr	r1, [r7, #0]
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff ff1e 	bl	8002fb8 <check_longer_msg>
 800317c:	e002      	b.n	8003184 <teseo_queue_release_wr_buffer+0x46>
    return;
 800317e:	bf00      	nop
 8003180:	e000      	b.n	8003184 <teseo_queue_release_wr_buffer+0x46>
    return;
 8003182:	bf00      	nop

#if (ANY_RTOS)
  __check_unreleased_buffer(pTeseoQueue);
  semaphore_free_irq(pTeseoQueue->semaphore);
#endif /* ANY_RTOS */
}
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <teseo_queue_claim_rd_buffer>:

const TESEO_LIV3F_Msg_t *teseo_queue_claim_rd_buffer(TESEO_LIV3F_Queue_t *pTeseoQueue)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  const TESEO_LIV3F_Msg_t *pTeseoMsg = NULL;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
  int32_t i;
  uint8_t rd_buffer_re_try = 1;
 8003196:	2301      	movs	r3, #1
 8003198:	74fb      	strb	r3, [r7, #19]
  
#if (ANY_RTOS)
  BaseVal_t ret;
#endif /* ANY_RTOS */
  
  while(rd_buffer_re_try == 1U) {
 800319a:	e01d      	b.n	80031d8 <teseo_queue_claim_rd_buffer+0x4e>
      return NULL;
    }
#endif /* ANY_RTOS */
    
    /* first available readable buffer */
    i = teseo_ffs(pTeseoQueue->bitmap_buffer_readable);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fe8f 	bl	8002ec4 <teseo_ffs>
 80031a6:	60f8      	str	r0, [r7, #12]
    
    if (i == 0) {
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d018      	beq.n	80031e0 <teseo_queue_claim_rd_buffer+0x56>
      break;
#endif /* ANY_RTOS */
    }

    /* first available readable buffer */
    i -= 1;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
    /* buffer no more readable */
    pTeseoQueue->bitmap_buffer_readable &= ~(1UL << (uint32_t)i);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f303 	lsl.w	r3, r1, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	401a      	ands	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	605a      	str	r2, [r3, #4]
    pTeseoMsg = &pTeseoQueue->nmea_queue[i];
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3301      	adds	r3, #1
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]

#if (ANY_RTOS)
    semaphore_free(pTeseoQueue->semaphore);
#endif /* ANY_RTOS */

    rd_buffer_re_try = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	74fb      	strb	r3, [r7, #19]
  while(rd_buffer_re_try == 1U) {
 80031d8:	7cfb      	ldrb	r3, [r7, #19]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d0de      	beq.n	800319c <teseo_queue_claim_rd_buffer+0x12>
 80031de:	e000      	b.n	80031e2 <teseo_queue_claim_rd_buffer+0x58>
      break;
 80031e0:	bf00      	nop
  } /* while */
  return pTeseoMsg;
 80031e2:	697b      	ldr	r3, [r7, #20]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <teseo_queue_release_rd_buffer>:

void teseo_queue_release_rd_buffer(TESEO_LIV3F_Queue_t *pTeseoQueue, const TESEO_LIV3F_Msg_t *pTeseoMsg)
{ 
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  
#if (ANY_RTOS)
  BaseVal_t ret;
#endif /* ANY_RTOS */
  
  i = __find_msg_idx(pTeseoQueue, pTeseoMsg);
 80031f6:	6839      	ldr	r1, [r7, #0]
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff feb3 	bl	8002f64 <__find_msg_idx>
 80031fe:	60f8      	str	r0, [r7, #12]
  if (i < 0) {
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	db0f      	blt.n	8003226 <teseo_queue_release_rd_buffer+0x3a>
    return;
  }  
#endif /* ANY_RTOS */

  /* mark the buffer as writeable */
  pTeseoQueue->bitmap_buffer_writable |= (1UL << (uint32_t)i);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2101      	movs	r1, #1
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	601a      	str	r2, [r3, #0]

  /* check for longer message */
  check_longer_msg(pTeseoQueue, pTeseoMsg, (uint32_t)i, 0);
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	2300      	movs	r3, #0
 800321c:	6839      	ldr	r1, [r7, #0]
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff feca 	bl	8002fb8 <check_longer_msg>
 8003224:	e000      	b.n	8003228 <teseo_queue_release_rd_buffer+0x3c>
    return;
 8003226:	bf00      	nop

#if (ANY_RTOS)
  semaphore_free(pTeseoQueue->semaphore);
#endif /* ANY_RTOS */
}
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <teseo_uart_rx_onoff>:
    break;
  }
}

void teseo_uart_rx_onoff(TESEO_LIV3F_ctx_t *pCtx, uint8_t enable)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	70fb      	strb	r3, [r7, #3]
  Teseo_UART_Data.pCtx = pCtx;
 800323c:	4a16      	ldr	r2, [pc, #88]	@ (8003298 <teseo_uart_rx_onoff+0x68>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	60d3      	str	r3, [r2, #12]

  if ((Teseo_UART_Data.fsm_state == fsm_discard) && (enable == 0U))
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <teseo_uart_rx_onoff+0x68>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d102      	bne.n	8003252 <teseo_uart_rx_onoff+0x22>
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01d      	beq.n	800328e <teseo_uart_rx_onoff+0x5e>
  {
    return;
  }

  if (enable == 0U)
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <teseo_uart_rx_onoff+0x3c>
  {
    Teseo_UART_Data.fsm_next_state = fsm_stop;
 8003258:	4b0f      	ldr	r3, [pc, #60]	@ (8003298 <teseo_uart_rx_onoff+0x68>)
 800325a:	2202      	movs	r2, #2
 800325c:	705a      	strb	r2, [r3, #1]
    
    while (Teseo_UART_Data.fsm_state != fsm_stop) {};
 800325e:	bf00      	nop
 8003260:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <teseo_uart_rx_onoff+0x68>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d1fa      	bne.n	8003260 <teseo_uart_rx_onoff+0x30>
    return;
 800326a:	e011      	b.n	8003290 <teseo_uart_rx_onoff+0x60>
  }

  Teseo_UART_Data.wr_msg = NULL;
 800326c:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <teseo_uart_rx_onoff+0x68>)
 800326e:	2200      	movs	r2, #0
 8003270:	605a      	str	r2, [r3, #4]
  Teseo_UART_Data.fsm_state = fsm_discard;
 8003272:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <teseo_uart_rx_onoff+0x68>)
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]
  Teseo_UART_Data.fsm_next_state = fsm_discard;
 8003278:	4b07      	ldr	r3, [pc, #28]	@ (8003298 <teseo_uart_rx_onoff+0x68>)
 800327a:	2200      	movs	r2, #0
 800327c:	705a      	strb	r2, [r3, #1]
  
  pCtx->Receive(pCtx->Handle, &Teseo_UART_Data.dummy_char, 1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6950      	ldr	r0, [r2, #20]
 8003286:	2201      	movs	r2, #1
 8003288:	4904      	ldr	r1, [pc, #16]	@ (800329c <teseo_uart_rx_onoff+0x6c>)
 800328a:	4798      	blx	r3
 800328c:	e000      	b.n	8003290 <teseo_uart_rx_onoff+0x60>
    return;
 800328e:	bf00      	nop
}
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000c00 	.word	0x20000c00
 800329c:	20000c02 	.word	0x20000c02

080032a0 <GNSS1A1_GNSS_Init>:

#endif /* USE_I2C */
#endif

int32_t GNSS1A1_GNSS_Init(uint32_t Instance)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]

  switch (Instance)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d108      	bne.n	80032c4 <GNSS1A1_GNSS_Init+0x24>
  {
#if (USE_GNSS1A1_GNSS_TESEO_LIV3F == 1)
    case GNSS1A1_TESEO_LIV3F:
      if (TESEO_LIV3F_Probe() != BSP_ERROR_NONE)
 80032b2:	f000 f8bd 	bl	8003430 <TESEO_LIV3F_Probe>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <GNSS1A1_GNSS_Init+0x2c>
      {
        ret = BSP_ERROR_NO_INIT;
 80032bc:	f04f 33ff 	mov.w	r3, #4294967295
 80032c0:	60fb      	str	r3, [r7, #12]
      }
      break;
 80032c2:	e003      	b.n	80032cc <GNSS1A1_GNSS_Init+0x2c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80032c4:	f06f 0301 	mvn.w	r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
      break;
 80032ca:	e000      	b.n	80032ce <GNSS1A1_GNSS_Init+0x2e>
      break;
 80032cc:	bf00      	nop
  }

  return ret;
 80032ce:	68fb      	ldr	r3, [r7, #12]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <GNSS1A1_GNSS_GetMessage>:

  return ret;
}

const GNSS1A1_GNSS_Msg_t* GNSS1A1_GNSS_GetMessage(uint32_t Instance)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  const GNSS1A1_GNSS_Msg_t* msg;

  if (Instance >= GNSS1A1_GNSS_INSTANCES_NBR)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <GNSS1A1_GNSS_GetMessage+0x14>
  {
    msg = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e003      	b.n	80032f4 <GNSS1A1_GNSS_GetMessage+0x1c>
  }
  else
  {
    msg =  (GNSS1A1_GNSS_Msg_t *)TESEO_LIV3F_GetMessage(&teseo_liv3f_obj);
 80032ec:	4804      	ldr	r0, [pc, #16]	@ (8003300 <GNSS1A1_GNSS_GetMessage+0x28>)
 80032ee:	f7ff fb68 	bl	80029c2 <TESEO_LIV3F_GetMessage>
 80032f2:	60f8      	str	r0, [r7, #12]
  }

  return msg;
 80032f4:	68fb      	ldr	r3, [r7, #12]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000c10 	.word	0x20000c10

08003304 <GNSS1A1_GNSS_ReleaseMessage>:

int32_t GNSS1A1_GNSS_ReleaseMessage(uint32_t Instance, const GNSS1A1_GNSS_Msg_t *Message)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= GNSS1A1_GNSS_INSTANCES_NBR)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <GNSS1A1_GNSS_ReleaseMessage+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003314:	f06f 0301 	mvn.w	r3, #1
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e00c      	b.n	8003336 <GNSS1A1_GNSS_ReleaseMessage+0x32>
  }
  else
  {
    if (TESEO_LIV3F_ReleaseMessage(&teseo_liv3f_obj, (TESEO_LIV3F_Msg_t*)Message) != BSP_ERROR_NONE)
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	4808      	ldr	r0, [pc, #32]	@ (8003340 <GNSS1A1_GNSS_ReleaseMessage+0x3c>)
 8003320:	f7ff fb5d 	bl	80029de <TESEO_LIV3F_ReleaseMessage>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <GNSS1A1_GNSS_ReleaseMessage+0x2e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800332a:	f06f 0304 	mvn.w	r3, #4
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	e001      	b.n	8003336 <GNSS1A1_GNSS_ReleaseMessage+0x32>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
    } 
  }

  return ret;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000c10 	.word	0x20000c10

08003344 <GNSS1A1_GNSS_Send>:

int32_t GNSS1A1_GNSS_Send(uint32_t Instance, const GNSS1A1_GNSS_Msg_t *Message)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= GNSS1A1_GNSS_INSTANCES_NBR)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <GNSS1A1_GNSS_Send+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003354:	f06f 0301 	mvn.w	r3, #1
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	e00c      	b.n	8003376 <GNSS1A1_GNSS_Send+0x32>
  }
  else
  {
    if (TESEO_LIV3F_Send(&teseo_liv3f_obj, (TESEO_LIV3F_Msg_t*)Message) != BSP_ERROR_NONE)
 800335c:	6839      	ldr	r1, [r7, #0]
 800335e:	4808      	ldr	r0, [pc, #32]	@ (8003380 <GNSS1A1_GNSS_Send+0x3c>)
 8003360:	f7ff fb4d 	bl	80029fe <TESEO_LIV3F_Send>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <GNSS1A1_GNSS_Send+0x2e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800336a:	f06f 0304 	mvn.w	r3, #4
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e001      	b.n	8003376 <GNSS1A1_GNSS_Send+0x32>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
    } 
  }

  return ret;
 8003376:	68fb      	ldr	r3, [r7, #12]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000c10 	.word	0x20000c10

08003384 <GNSS1A1_GNSS_Wakeup_Status>:

int32_t GNSS1A1_GNSS_Wakeup_Status(uint32_t Instance, uint8_t *status)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]

  if (Instance >= GNSS1A1_GNSS_INSTANCES_NBR)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <GNSS1A1_GNSS_Wakeup_Status+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003398:	f06f 0301 	mvn.w	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e00e      	b.n	80033be <GNSS1A1_GNSS_Wakeup_Status+0x3a>
  }
  else
  {
    (HAL_GPIO_ReadPin(GNSS1A1_WAKEUP_PORT, GNSS1A1_WAKEUP_PIN) == GPIO_PIN_RESET) ? (*status = 0) : (*status = 1);
 80033a0:	2120      	movs	r1, #32
 80033a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033a6:	f000 fd65 	bl	8003e74 <HAL_GPIO_ReadPin>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d103      	bne.n	80033b8 <GNSS1A1_GNSS_Wakeup_Status+0x34>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e002      	b.n	80033be <GNSS1A1_GNSS_Wakeup_Status+0x3a>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80033be:	68fb      	ldr	r3, [r7, #12]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <GNSS1A1_GNSS_Reset>:

int32_t GNSS1A1_GNSS_Reset(uint32_t Instance)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]

  if (Instance >= GNSS1A1_GNSS_INSTANCES_NBR)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <GNSS1A1_GNSS_Reset+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80033da:	f06f 0301 	mvn.w	r3, #1
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	e015      	b.n	800340e <GNSS1A1_GNSS_Reset+0x46>
  }
  else
  {
    if (TESEO_LIV3F_DeInit(&teseo_liv3f_obj) != TESEO_LIV3F_OK)
 80033e2:	480d      	ldr	r0, [pc, #52]	@ (8003418 <GNSS1A1_GNSS_Reset+0x50>)
 80033e4:	f7ff fac2 	bl	800296c <TESEO_LIV3F_DeInit>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <GNSS1A1_GNSS_Reset+0x2e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80033ee:	f06f 0304 	mvn.w	r3, #4
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e00b      	b.n	800340e <GNSS1A1_GNSS_Reset+0x46>
    }
    else
    {
      if (TESEO_LIV3F_Init(&teseo_liv3f_obj) != TESEO_LIV3F_OK)
 80033f6:	4808      	ldr	r0, [pc, #32]	@ (8003418 <GNSS1A1_GNSS_Reset+0x50>)
 80033f8:	f7ff fa8a 	bl	8002910 <TESEO_LIV3F_Init>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <GNSS1A1_GNSS_Reset+0x42>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003402:	f06f 0304 	mvn.w	r3, #4
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	e001      	b.n	800340e <GNSS1A1_GNSS_Reset+0x46>
      }
      else
      {
        GNSS1A1_GNSS_RegisterCallbacks();
 800340a:	f000 f869 	bl	80034e0 <GNSS1A1_GNSS_RegisterCallbacks>
      }
    }
  }

  return ret;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000c10 	.word	0x20000c10

0800341c <GNSS1A1_GNSS_BackgroundProcess>:

void GNSS1A1_GNSS_BackgroundProcess(uint32_t Instance)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  (void)Instance;

  TESEO_LIV3F_I2C_BackgroundProcess();
 8003424:	f7ff fb00 	bl	8002a28 <TESEO_LIV3F_I2C_BackgroundProcess>
#else
#if (USE_AZRTOS_NATIVE_API)
  tx_thread_sleep(((TX_TIMER_TICKS_PER_SECOND / 100)));  // wait 10mS /* SO: not sure it is required */
#endif /* USE_AZRTOS_NATIVE_API */
#endif /* USE_FREE_RTOS_NATIVE_API */
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <TESEO_LIV3F_Probe>:
/**
 * @brief  Register Bus IOs for instance 0
 * @retval BSP status
 */
static int32_t TESEO_LIV3F_Probe(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	@ 0x28
 8003434:	af00      	add	r7, sp, #0
  int32_t ret;

  /* Register user BUS (I2C/UART) callbacks */
#if (USE_I2C == 1)

  io_ctx.BusType     = TESEO_LIV3F_I2C_BUS;
 8003436:	2301      	movs	r3, #1
 8003438:	60bb      	str	r3, [r7, #8]
  io_ctx.Address     = TESEO_LIV3F_I2C_7BITS_ADDR;
 800343a:	233a      	movs	r3, #58	@ 0x3a
 800343c:	81bb      	strh	r3, [r7, #12]
  io_ctx.Init        = GNSS1A1_GNSS_I2C_Init;
 800343e:	4b15      	ldr	r3, [pc, #84]	@ (8003494 <TESEO_LIV3F_Probe+0x64>)
 8003440:	603b      	str	r3, [r7, #0]
  io_ctx.DeInit      = GNSS1A1_GNSS_I2C_DeInit;
 8003442:	4b15      	ldr	r3, [pc, #84]	@ (8003498 <TESEO_LIV3F_Probe+0x68>)
 8003444:	607b      	str	r3, [r7, #4]
  io_ctx.Transmit_IT = GNSS1A1_GNSS_I2C_Transmit_IT;
 8003446:	4b15      	ldr	r3, [pc, #84]	@ (800349c <TESEO_LIV3F_Probe+0x6c>)
 8003448:	613b      	str	r3, [r7, #16]
  io_ctx.Receive_IT  = GNSS1A1_GNSS_I2C_Receive_IT;
 800344a:	4b15      	ldr	r3, [pc, #84]	@ (80034a0 <TESEO_LIV3F_Probe+0x70>)
 800344c:	617b      	str	r3, [r7, #20]
  io_ctx.Receive_IT  = GNSS1A1_GNSS_UART_Receive_IT;
  io_ctx.ClearOREF   = GNSS1A1_GNSS_UART_ClearOREF;

#endif

  io_ctx.Reset         = GNSS1A1_GNSS_Rst;
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <TESEO_LIV3F_Probe+0x74>)
 8003450:	61bb      	str	r3, [r7, #24]
  io_ctx.GetTick       = GNSS1A1_GNSS_GetTick;
 8003452:	4b15      	ldr	r3, [pc, #84]	@ (80034a8 <TESEO_LIV3F_Probe+0x78>)
 8003454:	61fb      	str	r3, [r7, #28]

//  GNSS1A1_RegisterDefaultMspCallbacks();

  if (TESEO_LIV3F_RegisterBusIO(&teseo_liv3f_obj, &io_ctx) != TESEO_LIV3F_OK)
 8003456:	463b      	mov	r3, r7
 8003458:	4619      	mov	r1, r3
 800345a:	4814      	ldr	r0, [pc, #80]	@ (80034ac <TESEO_LIV3F_Probe+0x7c>)
 800345c:	f7ff fa00 	bl	8002860 <TESEO_LIV3F_RegisterBusIO>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <TESEO_LIV3F_Probe+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003466:	f06f 0306 	mvn.w	r3, #6
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24
 800346c:	e00d      	b.n	800348a <TESEO_LIV3F_Probe+0x5a>
  }
  else
  {
    if (TESEO_LIV3F_Init(&teseo_liv3f_obj) != TESEO_LIV3F_OK)
 800346e:	480f      	ldr	r0, [pc, #60]	@ (80034ac <TESEO_LIV3F_Probe+0x7c>)
 8003470:	f7ff fa4e 	bl	8002910 <TESEO_LIV3F_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <TESEO_LIV3F_Probe+0x52>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800347a:	f06f 0304 	mvn.w	r3, #4
 800347e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003480:	e003      	b.n	800348a <TESEO_LIV3F_Probe+0x5a>
    }
    else
    {
      GNSS1A1_GNSS_RegisterCallbacks();
 8003482:	f000 f82d 	bl	80034e0 <GNSS1A1_GNSS_RegisterCallbacks>

      ret = BSP_ERROR_NONE;
 8003486:	2300      	movs	r3, #0
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return ret;
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800348c:	4618      	mov	r0, r3
 800348e:	3728      	adds	r7, #40	@ 0x28
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	08001661 	.word	0x08001661
 8003498:	080016f1 	.word	0x080016f1
 800349c:	0800268d 	.word	0x0800268d
 80034a0:	080026d5 	.word	0x080026d5
 80034a4:	080034b1 	.word	0x080034b1
 80034a8:	0800179d 	.word	0x0800179d
 80034ac:	20000c10 	.word	0x20000c10

080034b0 <GNSS1A1_GNSS_Rst>:

static void GNSS1A1_GNSS_Rst(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GNSS1A1_RST_PORT, GNSS1A1_RST_PIN, GPIO_PIN_RESET);
 80034b4:	2200      	movs	r2, #0
 80034b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034be:	f000 fcf1 	bl	8003ea4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80034c2:	200a      	movs	r0, #10
 80034c4:	f000 f8b0 	bl	8003628 <HAL_Delay>
  HAL_GPIO_WritePin(GNSS1A1_RST_PORT, GNSS1A1_RST_PIN, GPIO_PIN_SET);
 80034c8:	2201      	movs	r2, #1
 80034ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034d2:	f000 fce7 	bl	8003ea4 <HAL_GPIO_WritePin>
  HAL_Delay(150);
 80034d6:	2096      	movs	r0, #150	@ 0x96
 80034d8:	f000 f8a6 	bl	8003628 <HAL_Delay>
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}

080034e0 <GNSS1A1_GNSS_RegisterCallbacks>:

static void GNSS1A1_GNSS_RegisterCallbacks(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
#if (USE_I2C == 1)
  
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  // FIXME: check the return value instead
  (void)GNSS1A1_RegisterRxCb(GNSS1A1_GNSS_I2C_RxCb);
 80034e4:	4805      	ldr	r0, [pc, #20]	@ (80034fc <GNSS1A1_GNSS_RegisterCallbacks+0x1c>)
 80034e6:	f7ff f919 	bl	800271c <BSP_I2C1_RegisterRxCallback>
  (void)GNSS1A1_RegisterErrorCb(GNSS1A1_GNSS_I2C_ErrorCb);
 80034ea:	4805      	ldr	r0, [pc, #20]	@ (8003500 <GNSS1A1_GNSS_RegisterCallbacks+0x20>)
 80034ec:	f7ff f92e 	bl	800274c <BSP_I2C1_RegisterErrorCallback>
  (void)GNSS1A1_RegisterAbortCb(GNSS1A1_GNSS_I2C_AbortCb);
 80034f0:	4804      	ldr	r0, [pc, #16]	@ (8003504 <GNSS1A1_GNSS_RegisterCallbacks+0x24>)
 80034f2:	f7ff f943 	bl	800277c <BSP_I2C1_RegisterAbortCallback>
  (void)GNSS1A1_RegisterRxCb(GNSS1A1_GNSS_UART_RxCb);
  (void)GNSS1A1_RegisterErrorCb(GNSS1A1_GNSS_UART_ErrorCb);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  
#endif /* USE_I2C */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	08003509 	.word	0x08003509
 8003500:	0800351d 	.word	0x0800351d
 8003504:	08003531 	.word	0x08003531

08003508 <GNSS1A1_GNSS_I2C_RxCb>:

#if (USE_I2C == 1)

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
void GNSS1A1_GNSS_I2C_RxCb(I2C_HandleTypeDef *hi2c)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  (void)(hi2c);
  TESEO_LIV3F_I2C_RxCb();
 8003510:	f7ff fa90 	bl	8002a34 <TESEO_LIV3F_I2C_RxCb>
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <GNSS1A1_GNSS_I2C_ErrorCb>:

void GNSS1A1_GNSS_I2C_ErrorCb(I2C_HandleTypeDef *hi2c)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  (void)(hi2c);
  TESEO_LIV3F_I2C_ErrorCb();
 8003524:	f7ff fa8c 	bl	8002a40 <TESEO_LIV3F_I2C_ErrorCb>
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <GNSS1A1_GNSS_I2C_AbortCb>:

void GNSS1A1_GNSS_I2C_AbortCb(I2C_HandleTypeDef *hi2c)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  (void)(hi2c);
  TESEO_LIV3F_I2C_AbortCb();
 8003538:	f7ff fa88 	bl	8002a4c <TESEO_LIV3F_I2C_AbortCb>
}
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003548:	4b15      	ldr	r3, [pc, #84]	@ (80035a0 <SystemInit+0x5c>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354e:	4a14      	ldr	r2, [pc, #80]	@ (80035a0 <SystemInit+0x5c>)
 8003550:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003554:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003558:	4b12      	ldr	r3, [pc, #72]	@ (80035a4 <SystemInit+0x60>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a11      	ldr	r2, [pc, #68]	@ (80035a4 <SystemInit+0x60>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003564:	4b0f      	ldr	r3, [pc, #60]	@ (80035a4 <SystemInit+0x60>)
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800356a:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <SystemInit+0x60>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a0d      	ldr	r2, [pc, #52]	@ (80035a4 <SystemInit+0x60>)
 8003570:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8003574:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8003578:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800357a:	4b0a      	ldr	r3, [pc, #40]	@ (80035a4 <SystemInit+0x60>)
 800357c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003580:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003582:	4b08      	ldr	r3, [pc, #32]	@ (80035a4 <SystemInit+0x60>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a07      	ldr	r2, [pc, #28]	@ (80035a4 <SystemInit+0x60>)
 8003588:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800358c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800358e:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <SystemInit+0x60>)
 8003590:	2200      	movs	r2, #0
 8003592:	619a      	str	r2, [r3, #24]
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000ed00 	.word	0xe000ed00
 80035a4:	40021000 	.word	0x40021000

080035a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035b2:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <HAL_Init+0x3c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a0b      	ldr	r2, [pc, #44]	@ (80035e4 <HAL_Init+0x3c>)
 80035b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035be:	2003      	movs	r0, #3
 80035c0:	f000 f927 	bl	8003812 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035c4:	200f      	movs	r0, #15
 80035c6:	f7fd feb7 	bl	8001338 <HAL_InitTick>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	71fb      	strb	r3, [r7, #7]
 80035d4:	e001      	b.n	80035da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035d6:	f7fd fe87 	bl	80012e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035da:	79fb      	ldrb	r3, [r7, #7]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40022000 	.word	0x40022000

080035e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035ec:	4b06      	ldr	r3, [pc, #24]	@ (8003608 <HAL_IncTick+0x20>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b06      	ldr	r3, [pc, #24]	@ (800360c <HAL_IncTick+0x24>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4413      	add	r3, r2
 80035f8:	4a04      	ldr	r2, [pc, #16]	@ (800360c <HAL_IncTick+0x24>)
 80035fa:	6013      	str	r3, [r2, #0]
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	2000000c 	.word	0x2000000c
 800360c:	20000c54 	.word	0x20000c54

08003610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return uwTick;
 8003614:	4b03      	ldr	r3, [pc, #12]	@ (8003624 <HAL_GetTick+0x14>)
 8003616:	681b      	ldr	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000c54 	.word	0x20000c54

08003628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003630:	f7ff ffee 	bl	8003610 <HAL_GetTick>
 8003634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d005      	beq.n	800364e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003642:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <HAL_Delay+0x44>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800364e:	bf00      	nop
 8003650:	f7ff ffde 	bl	8003610 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	429a      	cmp	r2, r3
 800365e:	d8f7      	bhi.n	8003650 <HAL_Delay+0x28>
  {
  }
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	2000000c 	.word	0x2000000c

08003670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003680:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800368c:	4013      	ands	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003698:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800369c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036a2:	4a04      	ldr	r2, [pc, #16]	@ (80036b4 <__NVIC_SetPriorityGrouping+0x44>)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	60d3      	str	r3, [r2, #12]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036bc:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <__NVIC_GetPriorityGrouping+0x18>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	0a1b      	lsrs	r3, r3, #8
 80036c2:	f003 0307 	and.w	r3, r3, #7
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	db0b      	blt.n	80036fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	f003 021f 	and.w	r2, r3, #31
 80036ec:	4907      	ldr	r1, [pc, #28]	@ (800370c <__NVIC_EnableIRQ+0x38>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2001      	movs	r0, #1
 80036f6:	fa00 f202 	lsl.w	r2, r0, r2
 80036fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	e000e100 	.word	0xe000e100

08003710 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	2b00      	cmp	r3, #0
 8003720:	db12      	blt.n	8003748 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	f003 021f 	and.w	r2, r3, #31
 8003728:	490a      	ldr	r1, [pc, #40]	@ (8003754 <__NVIC_DisableIRQ+0x44>)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2001      	movs	r0, #1
 8003732:	fa00 f202 	lsl.w	r2, r0, r2
 8003736:	3320      	adds	r3, #32
 8003738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800373c:	f3bf 8f4f 	dsb	sy
}
 8003740:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003742:	f3bf 8f6f 	isb	sy
}
 8003746:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000e100 	.word	0xe000e100

08003758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	2b00      	cmp	r3, #0
 800376a:	db0a      	blt.n	8003782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	490c      	ldr	r1, [pc, #48]	@ (80037a4 <__NVIC_SetPriority+0x4c>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	0112      	lsls	r2, r2, #4
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	440b      	add	r3, r1
 800377c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003780:	e00a      	b.n	8003798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4908      	ldr	r1, [pc, #32]	@ (80037a8 <__NVIC_SetPriority+0x50>)
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	3b04      	subs	r3, #4
 8003790:	0112      	lsls	r2, r2, #4
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	440b      	add	r3, r1
 8003796:	761a      	strb	r2, [r3, #24]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000e100 	.word	0xe000e100
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	@ 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f1c3 0307 	rsb	r3, r3, #7
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	bf28      	it	cs
 80037ca:	2304      	movcs	r3, #4
 80037cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d902      	bls.n	80037dc <NVIC_EncodePriority+0x30>
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3b03      	subs	r3, #3
 80037da:	e000      	b.n	80037de <NVIC_EncodePriority+0x32>
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e0:	f04f 32ff 	mov.w	r2, #4294967295
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	401a      	ands	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f4:	f04f 31ff 	mov.w	r1, #4294967295
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	43d9      	mvns	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003804:	4313      	orrs	r3, r2
         );
}
 8003806:	4618      	mov	r0, r3
 8003808:	3724      	adds	r7, #36	@ 0x24
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ff28 	bl	8003670 <__NVIC_SetPriorityGrouping>
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800383a:	f7ff ff3d 	bl	80036b8 <__NVIC_GetPriorityGrouping>
 800383e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	6978      	ldr	r0, [r7, #20]
 8003846:	f7ff ffb1 	bl	80037ac <NVIC_EncodePriority>
 800384a:	4602      	mov	r2, r0
 800384c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff ff80 	bl	8003758 <__NVIC_SetPriority>
}
 8003858:	bf00      	nop
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ff30 	bl	80036d4 <__NVIC_EnableIRQ>
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff ff40 	bl	8003710 <__NVIC_DisableIRQ>
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d005      	beq.n	80038bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2204      	movs	r2, #4
 80038b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	73fb      	strb	r3, [r7, #15]
 80038ba:	e029      	b.n	8003910 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 020e 	bic.w	r2, r2, #14
 80038ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e0:	f003 021c 	and.w	r2, r3, #28
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	2101      	movs	r1, #1
 80038ea:	fa01 f202 	lsl.w	r2, r1, r2
 80038ee:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
    }
  }
  return status;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003928:	b2db      	uxtb	r3, r3
}
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003946:	e17f      	b.n	8003c48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2101      	movs	r1, #1
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	fa01 f303 	lsl.w	r3, r1, r3
 8003954:	4013      	ands	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8171 	beq.w	8003c42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d005      	beq.n	8003978 <HAL_GPIO_Init+0x40>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d130      	bne.n	80039da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	2203      	movs	r2, #3
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4013      	ands	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ae:	2201      	movs	r2, #1
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4013      	ands	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	f003 0201 	and.w	r2, r3, #1
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d118      	bne.n	8003a18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039ec:	2201      	movs	r2, #1
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	08db      	lsrs	r3, r3, #3
 8003a02:	f003 0201 	and.w	r2, r3, #1
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d017      	beq.n	8003a54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	2203      	movs	r2, #3
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d123      	bne.n	8003aa8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	08da      	lsrs	r2, r3, #3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3208      	adds	r2, #8
 8003a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	220f      	movs	r2, #15
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	08da      	lsrs	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3208      	adds	r2, #8
 8003aa2:	6939      	ldr	r1, [r7, #16]
 8003aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4013      	ands	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0203 	and.w	r2, r3, #3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80ac 	beq.w	8003c42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aea:	4b5f      	ldr	r3, [pc, #380]	@ (8003c68 <HAL_GPIO_Init+0x330>)
 8003aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aee:	4a5e      	ldr	r2, [pc, #376]	@ (8003c68 <HAL_GPIO_Init+0x330>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003af6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c68 <HAL_GPIO_Init+0x330>)
 8003af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b02:	4a5a      	ldr	r2, [pc, #360]	@ (8003c6c <HAL_GPIO_Init+0x334>)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	089b      	lsrs	r3, r3, #2
 8003b08:	3302      	adds	r3, #2
 8003b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	220f      	movs	r2, #15
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4013      	ands	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b2c:	d025      	beq.n	8003b7a <HAL_GPIO_Init+0x242>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a4f      	ldr	r2, [pc, #316]	@ (8003c70 <HAL_GPIO_Init+0x338>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01f      	beq.n	8003b76 <HAL_GPIO_Init+0x23e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a4e      	ldr	r2, [pc, #312]	@ (8003c74 <HAL_GPIO_Init+0x33c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d019      	beq.n	8003b72 <HAL_GPIO_Init+0x23a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a4d      	ldr	r2, [pc, #308]	@ (8003c78 <HAL_GPIO_Init+0x340>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_GPIO_Init+0x236>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a4c      	ldr	r2, [pc, #304]	@ (8003c7c <HAL_GPIO_Init+0x344>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00d      	beq.n	8003b6a <HAL_GPIO_Init+0x232>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a4b      	ldr	r2, [pc, #300]	@ (8003c80 <HAL_GPIO_Init+0x348>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <HAL_GPIO_Init+0x22e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a4a      	ldr	r2, [pc, #296]	@ (8003c84 <HAL_GPIO_Init+0x34c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <HAL_GPIO_Init+0x22a>
 8003b5e:	2306      	movs	r3, #6
 8003b60:	e00c      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b62:	2307      	movs	r3, #7
 8003b64:	e00a      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b66:	2305      	movs	r3, #5
 8003b68:	e008      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	e006      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e004      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e002      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	f002 0203 	and.w	r2, r2, #3
 8003b82:	0092      	lsls	r2, r2, #2
 8003b84:	4093      	lsls	r3, r2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b8c:	4937      	ldr	r1, [pc, #220]	@ (8003c6c <HAL_GPIO_Init+0x334>)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	3302      	adds	r3, #2
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bbe:	4a32      	ldr	r2, [pc, #200]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bc4:	4b30      	ldr	r3, [pc, #192]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003be8:	4a27      	ldr	r2, [pc, #156]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bee:	4b26      	ldr	r3, [pc, #152]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c12:	4a1d      	ldr	r2, [pc, #116]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c18:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c3c:	4a12      	ldr	r2, [pc, #72]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	3301      	adds	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f47f ae78 	bne.w	8003948 <HAL_GPIO_Init+0x10>
  }
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	48000400 	.word	0x48000400
 8003c74:	48000800 	.word	0x48000800
 8003c78:	48000c00 	.word	0x48000c00
 8003c7c:	48001000 	.word	0x48001000
 8003c80:	48001400 	.word	0x48001400
 8003c84:	48001800 	.word	0x48001800
 8003c88:	40010400 	.word	0x40010400

08003c8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003c9a:	e0cd      	b.n	8003e38 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80c0 	beq.w	8003e32 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003cb2:	4a68      	ldr	r2, [pc, #416]	@ (8003e54 <HAL_GPIO_DeInit+0x1c8>)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	089b      	lsrs	r3, r3, #2
 8003cb8:	3302      	adds	r3, #2
 8003cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cbe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	220f      	movs	r2, #15
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003cda:	d025      	beq.n	8003d28 <HAL_GPIO_DeInit+0x9c>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a5e      	ldr	r2, [pc, #376]	@ (8003e58 <HAL_GPIO_DeInit+0x1cc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d01f      	beq.n	8003d24 <HAL_GPIO_DeInit+0x98>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a5d      	ldr	r2, [pc, #372]	@ (8003e5c <HAL_GPIO_DeInit+0x1d0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d019      	beq.n	8003d20 <HAL_GPIO_DeInit+0x94>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a5c      	ldr	r2, [pc, #368]	@ (8003e60 <HAL_GPIO_DeInit+0x1d4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <HAL_GPIO_DeInit+0x90>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a5b      	ldr	r2, [pc, #364]	@ (8003e64 <HAL_GPIO_DeInit+0x1d8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00d      	beq.n	8003d18 <HAL_GPIO_DeInit+0x8c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a5a      	ldr	r2, [pc, #360]	@ (8003e68 <HAL_GPIO_DeInit+0x1dc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d007      	beq.n	8003d14 <HAL_GPIO_DeInit+0x88>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a59      	ldr	r2, [pc, #356]	@ (8003e6c <HAL_GPIO_DeInit+0x1e0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <HAL_GPIO_DeInit+0x84>
 8003d0c:	2306      	movs	r3, #6
 8003d0e:	e00c      	b.n	8003d2a <HAL_GPIO_DeInit+0x9e>
 8003d10:	2307      	movs	r3, #7
 8003d12:	e00a      	b.n	8003d2a <HAL_GPIO_DeInit+0x9e>
 8003d14:	2305      	movs	r3, #5
 8003d16:	e008      	b.n	8003d2a <HAL_GPIO_DeInit+0x9e>
 8003d18:	2304      	movs	r3, #4
 8003d1a:	e006      	b.n	8003d2a <HAL_GPIO_DeInit+0x9e>
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e004      	b.n	8003d2a <HAL_GPIO_DeInit+0x9e>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e002      	b.n	8003d2a <HAL_GPIO_DeInit+0x9e>
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <HAL_GPIO_DeInit+0x9e>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	f002 0203 	and.w	r2, r2, #3
 8003d30:	0092      	lsls	r2, r2, #2
 8003d32:	4093      	lsls	r3, r2
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d132      	bne.n	8003da0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8003e70 <HAL_GPIO_DeInit+0x1e4>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	494b      	ldr	r1, [pc, #300]	@ (8003e70 <HAL_GPIO_DeInit+0x1e4>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003d48:	4b49      	ldr	r3, [pc, #292]	@ (8003e70 <HAL_GPIO_DeInit+0x1e4>)
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	4947      	ldr	r1, [pc, #284]	@ (8003e70 <HAL_GPIO_DeInit+0x1e4>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003d56:	4b46      	ldr	r3, [pc, #280]	@ (8003e70 <HAL_GPIO_DeInit+0x1e4>)
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	4944      	ldr	r1, [pc, #272]	@ (8003e70 <HAL_GPIO_DeInit+0x1e4>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003d64:	4b42      	ldr	r3, [pc, #264]	@ (8003e70 <HAL_GPIO_DeInit+0x1e4>)
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	4940      	ldr	r1, [pc, #256]	@ (8003e70 <HAL_GPIO_DeInit+0x1e4>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	220f      	movs	r2, #15
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003d82:	4a34      	ldr	r2, [pc, #208]	@ (8003e54 <HAL_GPIO_DeInit+0x1c8>)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	3302      	adds	r3, #2
 8003d8a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	43da      	mvns	r2, r3
 8003d92:	4830      	ldr	r0, [pc, #192]	@ (8003e54 <HAL_GPIO_DeInit+0x1c8>)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	089b      	lsrs	r3, r3, #2
 8003d98:	400a      	ands	r2, r1
 8003d9a:	3302      	adds	r3, #2
 8003d9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	2103      	movs	r1, #3
 8003daa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	08da      	lsrs	r2, r3, #3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3208      	adds	r2, #8
 8003dbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	220f      	movs	r2, #15
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	08d2      	lsrs	r2, r2, #3
 8003dd4:	4019      	ands	r1, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3208      	adds	r2, #8
 8003dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	2103      	movs	r1, #3
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	401a      	ands	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	2101      	movs	r1, #1
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	401a      	ands	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	2103      	movs	r1, #3
 8003e12:	fa01 f303 	lsl.w	r3, r1, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	401a      	ands	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e22:	2101      	movs	r1, #1
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	401a      	ands	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	3301      	adds	r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f47f af2b 	bne.w	8003c9c <HAL_GPIO_DeInit+0x10>
  }
}
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40010000 	.word	0x40010000
 8003e58:	48000400 	.word	0x48000400
 8003e5c:	48000800 	.word	0x48000800
 8003e60:	48000c00 	.word	0x48000c00
 8003e64:	48001000 	.word	0x48001000
 8003e68:	48001400 	.word	0x48001400
 8003e6c:	48001800 	.word	0x48001800
 8003e70:	40010400 	.word	0x40010400

08003e74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	887b      	ldrh	r3, [r7, #2]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
 8003e90:	e001      	b.n	8003e96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	807b      	strh	r3, [r7, #2]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb4:	787b      	ldrb	r3, [r7, #1]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eba:	887a      	ldrh	r2, [r7, #2]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ec0:	e002      	b.n	8003ec8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ec2:	887a      	ldrh	r2, [r7, #2]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e0b3      	b.n	800404e <HAL_I2C_Init+0x17a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d12c      	bne.n	8003f4c <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a56      	ldr	r2, [pc, #344]	@ (8004058 <HAL_I2C_Init+0x184>)
 8003efe:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a56      	ldr	r2, [pc, #344]	@ (800405c <HAL_I2C_Init+0x188>)
 8003f04:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a55      	ldr	r2, [pc, #340]	@ (8004060 <HAL_I2C_Init+0x18c>)
 8003f0a:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a55      	ldr	r2, [pc, #340]	@ (8004064 <HAL_I2C_Init+0x190>)
 8003f10:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a54      	ldr	r2, [pc, #336]	@ (8004068 <HAL_I2C_Init+0x194>)
 8003f16:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a54      	ldr	r2, [pc, #336]	@ (800406c <HAL_I2C_Init+0x198>)
 8003f1c:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a53      	ldr	r2, [pc, #332]	@ (8004070 <HAL_I2C_Init+0x19c>)
 8003f22:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a53      	ldr	r2, [pc, #332]	@ (8004074 <HAL_I2C_Init+0x1a0>)
 8003f28:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	@ (8004078 <HAL_I2C_Init+0x1a4>)
 8003f2e:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a52      	ldr	r2, [pc, #328]	@ (800407c <HAL_I2C_Init+0x1a8>)
 8003f34:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d102      	bne.n	8003f44 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a4f      	ldr	r2, [pc, #316]	@ (8004080 <HAL_I2C_Init+0x1ac>)
 8003f42:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2224      	movs	r2, #36	@ 0x24
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d107      	bne.n	8003f9a <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	e006      	b.n	8003fa8 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d108      	bne.n	8003fc2 <HAL_I2C_Init+0xee>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	e007      	b.n	8003fd2 <HAL_I2C_Init+0xfe>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fe4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ff4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69d9      	ldr	r1, [r3, #28]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	0800455f 	.word	0x0800455f
 800405c:	08004573 	.word	0x08004573
 8004060:	08004587 	.word	0x08004587
 8004064:	0800459b 	.word	0x0800459b
 8004068:	080045cb 	.word	0x080045cb
 800406c:	080045df 	.word	0x080045df
 8004070:	080045f3 	.word	0x080045f3
 8004074:	08004607 	.word	0x08004607
 8004078:	0800461b 	.word	0x0800461b
 800407c:	080045af 	.word	0x080045af
 8004080:	080040fd 	.word	0x080040fd

08004084 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e02c      	b.n	80040f0 <HAL_I2C_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2224      	movs	r2, #36	@ 0x24
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  if (hi2c->MspDeInitCallback == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d103      	bne.n	80040c0 <HAL_I2C_DeInit+0x3c>
  {
    hi2c->MspDeInitCallback = HAL_I2C_MspDeInit; /* Legacy weak MspDeInit  */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a0f      	ldr	r2, [pc, #60]	@ (80040f8 <HAL_I2C_DeInit+0x74>)
 80040bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	4798      	blx	r3
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	08004111 	.word	0x08004111

080040fc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_I2C_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_RegisterCallback(I2C_HandleTypeDef *hi2c, HAL_I2C_CallbackIDTypeDef CallbackID,
                                           pI2C_CallbackTypeDef pCallback)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	460b      	mov	r3, r1
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d107      	bne.n	800414c <HAL_I2C_RegisterCallback+0x28>
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004140:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	645a      	str	r2, [r3, #68]	@ 0x44

    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e07e      	b.n	800424a <HAL_I2C_RegisterCallback+0x126>
  }

  if (HAL_I2C_STATE_READY == hi2c->State)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b20      	cmp	r3, #32
 8004156:	d151      	bne.n	80041fc <HAL_I2C_RegisterCallback+0xd8>
  {
    switch (CallbackID)
 8004158:	7afb      	ldrb	r3, [r7, #11]
 800415a:	2b0a      	cmp	r3, #10
 800415c:	d845      	bhi.n	80041ea <HAL_I2C_RegisterCallback+0xc6>
 800415e:	a201      	add	r2, pc, #4	@ (adr r2, 8004164 <HAL_I2C_RegisterCallback+0x40>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	08004191 	.word	0x08004191
 8004168:	08004199 	.word	0x08004199
 800416c:	080041a1 	.word	0x080041a1
 8004170:	080041a9 	.word	0x080041a9
 8004174:	080041b1 	.word	0x080041b1
 8004178:	080041b9 	.word	0x080041b9
 800417c:	080041c1 	.word	0x080041c1
 8004180:	080041c9 	.word	0x080041c9
 8004184:	080041d1 	.word	0x080041d1
 8004188:	080041d9 	.word	0x080041d9
 800418c:	080041e1 	.word	0x080041e1
    {
      case HAL_I2C_MASTER_TX_COMPLETE_CB_ID :
        hi2c->MasterTxCpltCallback = pCallback;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004196:	e057      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MASTER_RX_COMPLETE_CB_ID :
        hi2c->MasterRxCpltCallback = pCallback;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800419e:	e053      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_SLAVE_TX_COMPLETE_CB_ID :
        hi2c->SlaveTxCpltCallback = pCallback;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80041a6:	e04f      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_SLAVE_RX_COMPLETE_CB_ID :
        hi2c->SlaveRxCpltCallback = pCallback;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80041ae:	e04b      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_LISTEN_COMPLETE_CB_ID :
        hi2c->ListenCpltCallback = pCallback;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80041b6:	e047      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MEM_TX_COMPLETE_CB_ID :
        hi2c->MemTxCpltCallback = pCallback;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80041be:	e043      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MEM_RX_COMPLETE_CB_ID :
        hi2c->MemRxCpltCallback = pCallback;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80041c6:	e03f      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_ERROR_CB_ID :
        hi2c->ErrorCallback = pCallback;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80041ce:	e03b      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_ABORT_CB_ID :
        hi2c->AbortCpltCallback = pCallback;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80041d6:	e037      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80041de:	e033      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80041e8:	e02e      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
        break;
 80041fa:	e025      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>
    }
  }
  else if (HAL_I2C_STATE_RESET == hi2c->State)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d117      	bne.n	8004238 <HAL_I2C_RegisterCallback+0x114>
  {
    switch (CallbackID)
 8004208:	7afb      	ldrb	r3, [r7, #11]
 800420a:	2b09      	cmp	r3, #9
 800420c:	d002      	beq.n	8004214 <HAL_I2C_RegisterCallback+0xf0>
 800420e:	2b0a      	cmp	r3, #10
 8004210:	d004      	beq.n	800421c <HAL_I2C_RegisterCallback+0xf8>
 8004212:	e008      	b.n	8004226 <HAL_I2C_RegisterCallback+0x102>
    {
      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800421a:	e015      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8004224:	e010      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	75fb      	strb	r3, [r7, #23]
        break;
 8004236:	e007      	b.n	8004248 <HAL_I2C_RegisterCallback+0x124>
    }
  }
  else
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Return error status */
    status =  HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004248:	7dfb      	ldrb	r3, [r7, #23]
}
 800424a:	4618      	mov	r0, r3
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop

08004258 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	461a      	mov	r2, r3
 8004264:	460b      	mov	r3, r1
 8004266:	817b      	strh	r3, [r7, #10]
 8004268:	4613      	mov	r3, r2
 800426a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b20      	cmp	r3, #32
 8004276:	d17c      	bne.n	8004372 <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004286:	d101      	bne.n	800428c <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
 800428a:	e073      	b.n	8004374 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_I2C_Master_Transmit_IT+0x42>
 8004296:	2302      	movs	r3, #2
 8004298:	e06c      	b.n	8004374 <HAL_I2C_Master_Transmit_IT+0x11c>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2221      	movs	r2, #33	@ 0x21
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2210      	movs	r2, #16
 80042ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	893a      	ldrh	r2, [r7, #8]
 80042c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a2d      	ldr	r2, [pc, #180]	@ (800437c <HAL_I2C_Master_Transmit_IT+0x124>)
 80042c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004380 <HAL_I2C_Master_Transmit_IT+0x128>)
 80042ce:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2bff      	cmp	r3, #255	@ 0xff
 80042d8:	d906      	bls.n	80042e8 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	22ff      	movs	r2, #255	@ 0xff
 80042de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80042e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e007      	b.n	80042f8 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80042f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042f6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d024      	beq.n	800434a <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	781a      	ldrb	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	b2db      	uxtb	r3, r3
 8004336:	3301      	adds	r3, #1
 8004338:	b2da      	uxtb	r2, r3
 800433a:	8979      	ldrh	r1, [r7, #10]
 800433c:	4b11      	ldr	r3, [pc, #68]	@ (8004384 <HAL_I2C_Master_Transmit_IT+0x12c>)
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f001 fb78 	bl	8005a38 <I2C_TransferConfig>
 8004348:	e009      	b.n	800435e <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434e:	b2da      	uxtb	r2, r3
 8004350:	8979      	ldrh	r1, [r7, #10]
 8004352:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f001 fb6d 	bl	8005a38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004366:	2101      	movs	r1, #1
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f001 fb97 	bl	8005a9c <I2C_Enable_IRQ>

    return HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	e000      	b.n	8004374 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004372:	2302      	movs	r3, #2
  }
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	ffff0000 	.word	0xffff0000
 8004380:	0800464b 	.word	0x0800464b
 8004384:	80002000 	.word	0x80002000

08004388 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	461a      	mov	r2, r3
 8004394:	460b      	mov	r3, r1
 8004396:	817b      	strh	r3, [r7, #10]
 8004398:	4613      	mov	r3, r2
 800439a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d153      	bne.n	8004450 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043b6:	d101      	bne.n	80043bc <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80043b8:	2302      	movs	r3, #2
 80043ba:	e04a      	b.n	8004452 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_I2C_Master_Receive_IT+0x42>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e043      	b.n	8004452 <HAL_I2C_Master_Receive_IT+0xca>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2222      	movs	r2, #34	@ 0x22
 80043d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2210      	movs	r2, #16
 80043de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	893a      	ldrh	r2, [r7, #8]
 80043f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a19      	ldr	r2, [pc, #100]	@ (800445c <HAL_I2C_Master_Receive_IT+0xd4>)
 80043f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4a18      	ldr	r2, [pc, #96]	@ (8004460 <HAL_I2C_Master_Receive_IT+0xd8>)
 80043fe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	2bff      	cmp	r3, #255	@ 0xff
 8004408:	d906      	bls.n	8004418 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	22ff      	movs	r2, #255	@ 0xff
 800440e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004410:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	e007      	b.n	8004428 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004422:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004426:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800442c:	b2da      	uxtb	r2, r3
 800442e:	8979      	ldrh	r1, [r7, #10]
 8004430:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <HAL_I2C_Master_Receive_IT+0xdc>)
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f001 fafe 	bl	8005a38 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004444:	2102      	movs	r1, #2
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f001 fb28 	bl	8005a9c <I2C_Enable_IRQ>

    return HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	e000      	b.n	8004452 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004450:	2302      	movs	r3, #2
  }
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	ffff0000 	.word	0xffff0000
 8004460:	0800464b 	.word	0x0800464b
 8004464:	80002400 	.word	0x80002400

08004468 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	68f9      	ldr	r1, [r7, #12]
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4798      	blx	r3
  }
}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	0a1b      	lsrs	r3, r3, #8
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d010      	beq.n	80044e2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	09db      	lsrs	r3, r3, #7
 80044c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d0:	f043 0201 	orr.w	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	0a9b      	lsrs	r3, r3, #10
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d010      	beq.n	8004510 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	09db      	lsrs	r3, r3, #7
 80044f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	f043 0208 	orr.w	r2, r3, #8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800450e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	0a5b      	lsrs	r3, r3, #9
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d010      	beq.n	800453e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	09db      	lsrs	r3, r3, #7
 8004520:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452c:	f043 0202 	orr.w	r2, r3, #2
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800453c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004542:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 030b 	and.w	r3, r3, #11
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800454e:	68f9      	ldr	r1, [r7, #12]
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f001 f915 	bl	8005780 <I2C_ITError>
  }
}
 8004556:	bf00      	nop
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	70fb      	strb	r3, [r7, #3]
 80045ba:	4613      	mov	r3, r2
 80045bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463c:	b2db      	uxtb	r3, r3
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b088      	sub	sp, #32
 800464e:	af02      	add	r7, sp, #8
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <I2C_Master_ISR_IT+0x1e>
 8004664:	2302      	movs	r3, #2
 8004666:	e120      	b.n	80048aa <I2C_Master_ISR_IT+0x260>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d013      	beq.n	80046a4 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2210      	movs	r2, #16
 800468e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004694:	f043 0204 	orr.w	r2, r3, #4
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f001 f988 	bl	80059b2 <I2C_Flush_TXDR>
 80046a2:	e0ed      	b.n	8004880 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	089b      	lsrs	r3, r3, #2
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d023      	beq.n	80046f8 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	089b      	lsrs	r3, r3, #2
 80046b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01d      	beq.n	80046f8 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f023 0304 	bic.w	r3, r3, #4
 80046c2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046f6:	e0c3      	b.n	8004880 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	099b      	lsrs	r3, r3, #6
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d12a      	bne.n	800475a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800470c:	2b00      	cmp	r3, #0
 800470e:	d024      	beq.n	800475a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01e      	beq.n	800475a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80ac 	beq.w	8004880 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	781a      	ldrb	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004758:	e092      	b.n	8004880 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	09db      	lsrs	r3, r3, #7
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d05d      	beq.n	8004822 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	099b      	lsrs	r3, r3, #6
 800476a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800476e:	2b00      	cmp	r3, #0
 8004770:	d057      	beq.n	8004822 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d040      	beq.n	80047fe <I2C_Master_ISR_IT+0x1b4>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004780:	2b00      	cmp	r3, #0
 8004782:	d13c      	bne.n	80047fe <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	b29b      	uxth	r3, r3
 800478c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004790:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004796:	b29b      	uxth	r3, r3
 8004798:	2bff      	cmp	r3, #255	@ 0xff
 800479a:	d90e      	bls.n	80047ba <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	22ff      	movs	r2, #255	@ 0xff
 80047a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	8a79      	ldrh	r1, [r7, #18]
 80047aa:	2300      	movs	r3, #0
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f001 f940 	bl	8005a38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047b8:	e032      	b.n	8004820 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047cc:	d00b      	beq.n	80047e6 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d2:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80047d8:	8a79      	ldrh	r1, [r7, #18]
 80047da:	2000      	movs	r0, #0
 80047dc:	9000      	str	r0, [sp, #0]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f001 f92a 	bl	8005a38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047e4:	e01c      	b.n	8004820 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	8a79      	ldrh	r1, [r7, #18]
 80047ee:	2300      	movs	r3, #0
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f001 f91e 	bl	8005a38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047fc:	e010      	b.n	8004820 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004808:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800480c:	d003      	beq.n	8004816 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fcda 	bl	80051c8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004814:	e034      	b.n	8004880 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004816:	2140      	movs	r1, #64	@ 0x40
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 ffb1 	bl	8005780 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800481e:	e02f      	b.n	8004880 <I2C_Master_ISR_IT+0x236>
 8004820:	e02e      	b.n	8004880 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	099b      	lsrs	r3, r3, #6
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d028      	beq.n	8004880 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	099b      	lsrs	r3, r3, #6
 8004832:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004836:	2b00      	cmp	r3, #0
 8004838:	d022      	beq.n	8004880 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d119      	bne.n	8004878 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004852:	d015      	beq.n	8004880 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004858:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800485c:	d108      	bne.n	8004870 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	e007      	b.n	8004880 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 fca9 	bl	80051c8 <I2C_ITMasterSeqCplt>
 8004876:	e003      	b.n	8004880 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004878:	2140      	movs	r1, #64	@ 0x40
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 ff80 	bl	8005780 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d009      	beq.n	80048a0 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004898:	6979      	ldr	r1, [r7, #20]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 fd34 	bl	8005308 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b086      	sub	sp, #24
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <I2C_Slave_ISR_IT+0x24>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e0ec      	b.n	8004ab0 <I2C_Slave_ISR_IT+0x1fe>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80048f6:	6939      	ldr	r1, [r7, #16]
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fdd3 	bl	80054a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d04d      	beq.n	80049a6 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004912:	2b00      	cmp	r3, #0
 8004914:	d047      	beq.n	80049a6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d128      	bne.n	8004972 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b28      	cmp	r3, #40	@ 0x28
 800492a:	d108      	bne.n	800493e <I2C_Slave_ISR_IT+0x8c>
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004932:	d104      	bne.n	800493e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004934:	6939      	ldr	r1, [r7, #16]
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fecc 	bl	80056d4 <I2C_ITListenCplt>
 800493c:	e032      	b.n	80049a4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b29      	cmp	r3, #41	@ 0x29
 8004948:	d10e      	bne.n	8004968 <I2C_Slave_ISR_IT+0xb6>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004950:	d00a      	beq.n	8004968 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2210      	movs	r2, #16
 8004958:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f001 f829 	bl	80059b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fc70 	bl	8005246 <I2C_ITSlaveSeqCplt>
 8004966:	e01d      	b.n	80049a4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2210      	movs	r2, #16
 800496e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004970:	e096      	b.n	8004aa0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2210      	movs	r2, #16
 8004978:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497e:	f043 0204 	orr.w	r2, r3, #4
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <I2C_Slave_ISR_IT+0xe4>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004992:	f040 8085 	bne.w	8004aa0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499a:	4619      	mov	r1, r3
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 feef 	bl	8005780 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80049a2:	e07d      	b.n	8004aa0 <I2C_Slave_ISR_IT+0x1ee>
 80049a4:	e07c      	b.n	8004aa0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	089b      	lsrs	r3, r3, #2
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d030      	beq.n	8004a14 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d02a      	beq.n	8004a14 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d018      	beq.n	80049fa <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d14f      	bne.n	8004aa4 <I2C_Slave_ISR_IT+0x1f2>
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a0a:	d04b      	beq.n	8004aa4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 fc1a 	bl	8005246 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004a12:	e047      	b.n	8004aa4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	08db      	lsrs	r3, r3, #3
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	08db      	lsrs	r3, r3, #3
 8004a24:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004a2c:	6939      	ldr	r1, [r7, #16]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fb46 	bl	80050c0 <I2C_ITAddrCplt>
 8004a34:	e037      	b.n	8004aa6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d031      	beq.n	8004aa6 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	085b      	lsrs	r3, r3, #1
 8004a46:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d02b      	beq.n	8004aa6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d018      	beq.n	8004a8a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	781a      	ldrb	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004a88:	e00d      	b.n	8004aa6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a90:	d002      	beq.n	8004a98 <I2C_Slave_ISR_IT+0x1e6>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fbd4 	bl	8005246 <I2C_ITSlaveSeqCplt>
 8004a9e:	e002      	b.n	8004aa6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004aa0:	bf00      	nop
 8004aa2:	e000      	b.n	8004aa6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004aa4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <I2C_Master_ISR_DMA+0x1a>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e0e1      	b.n	8004c96 <I2C_Master_ISR_DMA+0x1de>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	091b      	lsrs	r3, r3, #4
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d017      	beq.n	8004b16 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d011      	beq.n	8004b16 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2210      	movs	r2, #16
 8004af8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afe:	f043 0204 	orr.w	r2, r3, #4
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004b06:	2120      	movs	r1, #32
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 ffc7 	bl	8005a9c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 ff4f 	bl	80059b2 <I2C_Flush_TXDR>
 8004b14:	e0ba      	b.n	8004c8c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	09db      	lsrs	r3, r3, #7
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d072      	beq.n	8004c08 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	099b      	lsrs	r3, r3, #6
 8004b26:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d06c      	beq.n	8004c08 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b3c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d04e      	beq.n	8004be6 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b54:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2bff      	cmp	r3, #255	@ 0xff
 8004b5e:	d906      	bls.n	8004b6e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	22ff      	movs	r2, #255	@ 0xff
 8004b64:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004b66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e010      	b.n	8004b90 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b80:	d003      	beq.n	8004b8a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e002      	b.n	8004b90 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004b8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b8e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	8a79      	ldrh	r1, [r7, #18]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 ff4a 	bl	8005a38 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b22      	cmp	r3, #34	@ 0x22
 8004bc0:	d108      	bne.n	8004bd4 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bd0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004bd2:	e05b      	b.n	8004c8c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004be2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004be4:	e052      	b.n	8004c8c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bf4:	d003      	beq.n	8004bfe <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fae6 	bl	80051c8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004bfc:	e046      	b.n	8004c8c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004bfe:	2140      	movs	r1, #64	@ 0x40
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fdbd 	bl	8005780 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004c06:	e041      	b.n	8004c8c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	099b      	lsrs	r3, r3, #6
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d029      	beq.n	8004c68 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d023      	beq.n	8004c68 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d119      	bne.n	8004c5e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c38:	d027      	beq.n	8004c8a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c42:	d108      	bne.n	8004c56 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c52:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004c54:	e019      	b.n	8004c8a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fab6 	bl	80051c8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004c5c:	e015      	b.n	8004c8a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004c5e:	2140      	movs	r1, #64	@ 0x40
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fd8d 	bl	8005780 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004c66:	e010      	b.n	8004c8a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00b      	beq.n	8004c8c <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fb40 	bl	8005308 <I2C_ITMasterCplt>
 8004c88:	e000      	b.n	8004c8c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004c8a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004cac:	4b92      	ldr	r3, [pc, #584]	@ (8004ef8 <I2C_Mem_ISR_DMA+0x258>)
 8004cae:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <I2C_Mem_ISR_DMA+0x1e>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e118      	b.n	8004ef0 <I2C_Mem_ISR_DMA+0x250>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d017      	beq.n	8004d02 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d011      	beq.n	8004d02 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cea:	f043 0204 	orr.w	r2, r3, #4
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004cf2:	2120      	movs	r1, #32
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fed1 	bl	8005a9c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 fe59 	bl	80059b2 <I2C_Flush_TXDR>
 8004d00:	e0f1      	b.n	8004ee6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00f      	beq.n	8004d2e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d2c:	e0db      	b.n	8004ee6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	09db      	lsrs	r3, r3, #7
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d060      	beq.n	8004dfc <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	099b      	lsrs	r3, r3, #6
 8004d3e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d05a      	beq.n	8004dfc <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d46:	2101      	movs	r1, #1
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 ff2b 	bl	8005ba4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004d4e:	2110      	movs	r1, #16
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fea3 	bl	8005a9c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d048      	beq.n	8004df2 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2bff      	cmp	r3, #255	@ 0xff
 8004d68:	d910      	bls.n	8004d8c <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	22ff      	movs	r2, #255	@ 0xff
 8004d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d74:	b299      	uxth	r1, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 fe57 	bl	8005a38 <I2C_TransferConfig>
 8004d8a:	e011      	b.n	8004db0 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d9a:	b299      	uxth	r1, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	2300      	movs	r3, #0
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fe44 	bl	8005a38 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b22      	cmp	r3, #34	@ 0x22
 8004dcc:	d108      	bne.n	8004de0 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ddc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004dde:	e082      	b.n	8004ee6 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004df0:	e079      	b.n	8004ee6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004df2:	2140      	movs	r1, #64	@ 0x40
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fcc3 	bl	8005780 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004dfa:	e074      	b.n	8004ee6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	099b      	lsrs	r3, r3, #6
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d05e      	beq.n	8004ec6 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	099b      	lsrs	r3, r3, #6
 8004e0c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d058      	beq.n	8004ec6 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e14:	2101      	movs	r1, #1
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 fec4 	bl	8005ba4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004e1c:	2110      	movs	r1, #16
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 fe3c 	bl	8005a9c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b22      	cmp	r3, #34	@ 0x22
 8004e2e:	d101      	bne.n	8004e34 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8004e30:	4b32      	ldr	r3, [pc, #200]	@ (8004efc <I2C_Mem_ISR_DMA+0x25c>)
 8004e32:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2bff      	cmp	r3, #255	@ 0xff
 8004e3c:	d910      	bls.n	8004e60 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	22ff      	movs	r2, #255	@ 0xff
 8004e42:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e48:	b299      	uxth	r1, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fded 	bl	8005a38 <I2C_TransferConfig>
 8004e5e:	e011      	b.n	8004e84 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e6e:	b299      	uxth	r1, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 fdda 	bl	8005a38 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b22      	cmp	r3, #34	@ 0x22
 8004ea0:	d108      	bne.n	8004eb4 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004eb0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004eb2:	e018      	b.n	8004ee6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ec2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ec4:	e00f      	b.n	8004ee6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fa11 	bl	8005308 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	80002000 	.word	0x80002000
 8004efc:	80002400 	.word	0x80002400

08004f00 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b088      	sub	sp, #32
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <I2C_Slave_ISR_DMA+0x24>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e0c9      	b.n	80050b8 <I2C_Slave_ISR_DMA+0x1b8>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d009      	beq.n	8004f4c <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 faac 	bl	80054a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	091b      	lsrs	r3, r3, #4
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 809a 	beq.w	800508e <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8093 	beq.w	800508e <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	0b9b      	lsrs	r3, r3, #14
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d105      	bne.n	8004f80 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	0bdb      	lsrs	r3, r3, #15
 8004f78:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d07f      	beq.n	8005080 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00d      	beq.n	8004fa4 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	0bdb      	lsrs	r3, r3, #15
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00d      	beq.n	8004fc8 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	0b9b      	lsrs	r3, r3, #14
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d128      	bne.n	8005020 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b28      	cmp	r3, #40	@ 0x28
 8004fd8:	d108      	bne.n	8004fec <I2C_Slave_ISR_DMA+0xec>
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fe0:	d104      	bne.n	8004fec <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 fb75 	bl	80056d4 <I2C_ITListenCplt>
 8004fea:	e048      	b.n	800507e <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b29      	cmp	r3, #41	@ 0x29
 8004ff6:	d10e      	bne.n	8005016 <I2C_Slave_ISR_DMA+0x116>
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ffe:	d00a      	beq.n	8005016 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2210      	movs	r2, #16
 8005006:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 fcd2 	bl	80059b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 f919 	bl	8005246 <I2C_ITSlaveSeqCplt>
 8005014:	e033      	b.n	800507e <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2210      	movs	r2, #16
 800501c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800501e:	e034      	b.n	800508a <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2210      	movs	r2, #16
 8005026:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502c:	f043 0204 	orr.w	r2, r3, #4
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800503a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <I2C_Slave_ISR_DMA+0x14a>
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005048:	d11f      	bne.n	800508a <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	2b21      	cmp	r3, #33	@ 0x21
 800504e:	d002      	beq.n	8005056 <I2C_Slave_ISR_DMA+0x156>
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	2b29      	cmp	r3, #41	@ 0x29
 8005054:	d103      	bne.n	800505e <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2221      	movs	r2, #33	@ 0x21
 800505a:	631a      	str	r2, [r3, #48]	@ 0x30
 800505c:	e008      	b.n	8005070 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	2b22      	cmp	r3, #34	@ 0x22
 8005062:	d002      	beq.n	800506a <I2C_Slave_ISR_DMA+0x16a>
 8005064:	7dfb      	ldrb	r3, [r7, #23]
 8005066:	2b2a      	cmp	r3, #42	@ 0x2a
 8005068:	d102      	bne.n	8005070 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2222      	movs	r2, #34	@ 0x22
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005074:	4619      	mov	r1, r3
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fb82 	bl	8005780 <I2C_ITError>
      if (treatdmanack == 1U)
 800507c:	e005      	b.n	800508a <I2C_Slave_ISR_DMA+0x18a>
 800507e:	e004      	b.n	800508a <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2210      	movs	r2, #16
 8005086:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005088:	e011      	b.n	80050ae <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800508a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800508c:	e00f      	b.n	80050ae <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	08db      	lsrs	r3, r3, #3
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	08db      	lsrs	r3, r3, #3
 800509e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f809 	bl	80050c0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050d6:	2b28      	cmp	r3, #40	@ 0x28
 80050d8:	d16a      	bne.n	80051b0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	0c1b      	lsrs	r3, r3, #16
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	0c1b      	lsrs	r3, r3, #16
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80050f8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	b29b      	uxth	r3, r3
 8005102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005106:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	b29b      	uxth	r3, r3
 8005110:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005114:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d138      	bne.n	8005190 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800511e:	897b      	ldrh	r3, [r7, #10]
 8005120:	09db      	lsrs	r3, r3, #7
 8005122:	b29a      	uxth	r2, r3
 8005124:	89bb      	ldrh	r3, [r7, #12]
 8005126:	4053      	eors	r3, r2
 8005128:	b29b      	uxth	r3, r3
 800512a:	f003 0306 	and.w	r3, r3, #6
 800512e:	2b00      	cmp	r3, #0
 8005130:	d11c      	bne.n	800516c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005132:	897b      	ldrh	r3, [r7, #10]
 8005134:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005144:	2b02      	cmp	r3, #2
 8005146:	d13b      	bne.n	80051c0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2208      	movs	r2, #8
 8005154:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005162:	89ba      	ldrh	r2, [r7, #12]
 8005164:	7bf9      	ldrb	r1, [r7, #15]
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800516a:	e029      	b.n	80051c0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800516c:	893b      	ldrh	r3, [r7, #8]
 800516e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005170:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fd15 	bl	8005ba4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005186:	89ba      	ldrh	r2, [r7, #12]
 8005188:	7bf9      	ldrb	r1, [r7, #15]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
}
 800518e:	e017      	b.n	80051c0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005190:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fd05 	bl	8005ba4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051a6:	89ba      	ldrh	r2, [r7, #12]
 80051a8:	7bf9      	ldrb	r1, [r7, #15]
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	4798      	blx	r3
}
 80051ae:	e007      	b.n	80051c0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2208      	movs	r2, #8
 80051b6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b21      	cmp	r3, #33	@ 0x21
 80051e2:	d116      	bne.n	8005212 <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2211      	movs	r2, #17
 80051f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80051f8:	2101      	movs	r1, #1
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fcd2 	bl	8005ba4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005210:	e015      	b.n	800523e <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2212      	movs	r2, #18
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005226:	2102      	movs	r1, #2
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fcbb 	bl	8005ba4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	4798      	blx	r3
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	0b9b      	lsrs	r3, r3, #14
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e00d      	b.n	8005298 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	0bdb      	lsrs	r3, r3, #15
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005296:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b29      	cmp	r3, #41	@ 0x29
 80052a2:	d113      	bne.n	80052cc <I2C_ITSlaveSeqCplt+0x86>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2228      	movs	r2, #40	@ 0x28
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2221      	movs	r2, #33	@ 0x21
 80052b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80052b2:	2101      	movs	r1, #1
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fc75 	bl	8005ba4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 80052ca:	e018      	b.n	80052fe <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80052d6:	d112      	bne.n	80052fe <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2228      	movs	r2, #40	@ 0x28
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2222      	movs	r2, #34	@ 0x22
 80052e4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80052e6:	2102      	movs	r1, #2
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fc5b 	bl	8005ba4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
}
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2220      	movs	r2, #32
 800531c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b21      	cmp	r3, #33	@ 0x21
 8005328:	d107      	bne.n	800533a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800532a:	2101      	movs	r1, #1
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fc39 	bl	8005ba4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2211      	movs	r2, #17
 8005336:	631a      	str	r2, [r3, #48]	@ 0x30
 8005338:	e00c      	b.n	8005354 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b22      	cmp	r3, #34	@ 0x22
 8005344:	d106      	bne.n	8005354 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005346:	2102      	movs	r1, #2
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fc2b 	bl	8005ba4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2212      	movs	r2, #18
 8005352:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6859      	ldr	r1, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b4f      	ldr	r3, [pc, #316]	@ (800549c <I2C_ITMasterCplt+0x194>)
 8005360:	400b      	ands	r3, r1
 8005362:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a4c      	ldr	r2, [pc, #304]	@ (80054a0 <I2C_ITMasterCplt+0x198>)
 800536e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	091b      	lsrs	r3, r3, #4
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d009      	beq.n	8005390 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2210      	movs	r2, #16
 8005382:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005388:	f043 0204 	orr.w	r2, r3, #4
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b60      	cmp	r3, #96	@ 0x60
 800539a:	d10b      	bne.n	80053b4 <I2C_ITMasterCplt+0xac>
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	089b      	lsrs	r3, r3, #2
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80053b2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fafc 	bl	80059b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053be:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b60      	cmp	r3, #96	@ 0x60
 80053ca:	d002      	beq.n	80053d2 <I2C_ITMasterCplt+0xca>
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d006      	beq.n	80053e0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f9d1 	bl	8005780 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80053de:	e058      	b.n	8005492 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b21      	cmp	r3, #33	@ 0x21
 80053ea:	d126      	bne.n	800543a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b40      	cmp	r3, #64	@ 0x40
 8005404:	d10c      	bne.n	8005420 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->MemTxCpltCallback(hi2c);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	4798      	blx	r3
}
 800541e:	e038      	b.n	8005492 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
}
 8005438:	e02b      	b.n	8005492 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b22      	cmp	r3, #34	@ 0x22
 8005444:	d125      	bne.n	8005492 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b40      	cmp	r3, #64	@ 0x40
 800545e:	d10c      	bne.n	800547a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->MemRxCpltCallback(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	4798      	blx	r3
}
 8005478:	e00b      	b.n	8005492 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	4798      	blx	r3
}
 8005492:	bf00      	nop
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	fe00e800 	.word	0xfe00e800
 80054a0:	ffff0000 	.word	0xffff0000

080054a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054c0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2220      	movs	r2, #32
 80054c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	2b21      	cmp	r3, #33	@ 0x21
 80054ce:	d002      	beq.n	80054d6 <I2C_ITSlaveCplt+0x32>
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	2b29      	cmp	r3, #41	@ 0x29
 80054d4:	d108      	bne.n	80054e8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80054d6:	f248 0101 	movw	r1, #32769	@ 0x8001
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fb62 	bl	8005ba4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2221      	movs	r2, #33	@ 0x21
 80054e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80054e6:	e019      	b.n	800551c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	2b22      	cmp	r3, #34	@ 0x22
 80054ec:	d002      	beq.n	80054f4 <I2C_ITSlaveCplt+0x50>
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80054f2:	d108      	bne.n	8005506 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80054f4:	f248 0102 	movw	r1, #32770	@ 0x8002
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fb53 	bl	8005ba4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2222      	movs	r2, #34	@ 0x22
 8005502:	631a      	str	r2, [r3, #48]	@ 0x30
 8005504:	e00a      	b.n	800551c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2b28      	cmp	r3, #40	@ 0x28
 800550a:	d107      	bne.n	800551c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800550c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fb47 	bl	8005ba4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800552a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6859      	ldr	r1, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	4b65      	ldr	r3, [pc, #404]	@ (80056cc <I2C_ITSlaveCplt+0x228>)
 8005538:	400b      	ands	r3, r1
 800553a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fa38 	bl	80059b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	0b9b      	lsrs	r3, r3, #14
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d013      	beq.n	8005576 <I2C_ITSlaveCplt+0xd2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800555c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005562:	2b00      	cmp	r3, #0
 8005564:	d020      	beq.n	80055a8 <I2C_ITSlaveCplt+0x104>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	b29a      	uxth	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005574:	e018      	b.n	80055a8 <I2C_ITSlaveCplt+0x104>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	0bdb      	lsrs	r3, r3, #15
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d012      	beq.n	80055a8 <I2C_ITSlaveCplt+0x104>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005590:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d006      	beq.n	80055a8 <I2C_ITSlaveCplt+0x104>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	089b      	lsrs	r3, r3, #2
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d020      	beq.n	80055f6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f023 0304 	bic.w	r3, r3, #4
 80055ba:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00c      	beq.n	80055f6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005604:	f043 0204 	orr.w	r2, r3, #4
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	2b00      	cmp	r3, #0
 8005620:	d010      	beq.n	8005644 <I2C_ITSlaveCplt+0x1a0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005626:	4619      	mov	r1, r3
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f8a9 	bl	8005780 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b28      	cmp	r3, #40	@ 0x28
 8005638:	d144      	bne.n	80056c4 <I2C_ITSlaveCplt+0x220>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800563a:	6979      	ldr	r1, [r7, #20]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f849 	bl	80056d4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005642:	e03f      	b.n	80056c4 <I2C_ITSlaveCplt+0x220>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005648:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800564c:	d015      	beq.n	800567a <I2C_ITSlaveCplt+0x1d6>
    I2C_ITSlaveSeqCplt(hi2c);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fdf9 	bl	8005246 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a1e      	ldr	r2, [pc, #120]	@ (80056d0 <I2C_ITSlaveCplt+0x22c>)
 8005658:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->ListenCpltCallback(hi2c);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	4798      	blx	r3
}
 8005678:	e024      	b.n	80056c4 <I2C_ITSlaveCplt+0x220>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b22      	cmp	r3, #34	@ 0x22
 8005684:	d10f      	bne.n	80056a6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	4798      	blx	r3
}
 80056a4:	e00e      	b.n	80056c4 <I2C_ITSlaveCplt+0x220>
    hi2c->State = HAL_I2C_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	4798      	blx	r3
}
 80056c4:	bf00      	nop
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	fe00e800 	.word	0xfe00e800
 80056d0:	ffff0000 	.word	0xffff0000

080056d4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a26      	ldr	r2, [pc, #152]	@ (800577c <I2C_ITListenCplt+0xa8>)
 80056e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	089b      	lsrs	r3, r3, #2
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d022      	beq.n	8005752 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005728:	2b00      	cmp	r3, #0
 800572a:	d012      	beq.n	8005752 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574a:	f043 0204 	orr.w	r2, r3, #4
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005752:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fa24 	bl	8005ba4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2210      	movs	r2, #16
 8005762:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005774:	bf00      	nop
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	ffff0000 	.word	0xffff0000

08005780 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005790:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a6d      	ldr	r2, [pc, #436]	@ (8005954 <I2C_ITError+0x1d4>)
 800579e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	2b28      	cmp	r3, #40	@ 0x28
 80057b6:	d005      	beq.n	80057c4 <I2C_ITError+0x44>
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	2b29      	cmp	r3, #41	@ 0x29
 80057bc:	d002      	beq.n	80057c4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80057c2:	d10b      	bne.n	80057dc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80057c4:	2103      	movs	r1, #3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f9ec 	bl	8005ba4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2228      	movs	r2, #40	@ 0x28
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a60      	ldr	r2, [pc, #384]	@ (8005958 <I2C_ITError+0x1d8>)
 80057d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80057da:	e030      	b.n	800583e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80057dc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f9df 	bl	8005ba4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f8e3 	bl	80059b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b60      	cmp	r3, #96	@ 0x60
 80057f6:	d01f      	beq.n	8005838 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b20      	cmp	r3, #32
 800580c:	d114      	bne.n	8005838 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b10      	cmp	r3, #16
 800581a:	d109      	bne.n	8005830 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2210      	movs	r2, #16
 8005822:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005828:	f043 0204 	orr.w	r2, r3, #4
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2220      	movs	r2, #32
 8005836:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005842:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005848:	2b00      	cmp	r3, #0
 800584a:	d039      	beq.n	80058c0 <I2C_ITError+0x140>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b11      	cmp	r3, #17
 8005850:	d002      	beq.n	8005858 <I2C_ITError+0xd8>
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b21      	cmp	r3, #33	@ 0x21
 8005856:	d133      	bne.n	80058c0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005866:	d107      	bne.n	8005878 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005876:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe f84c 	bl	800391a <HAL_DMA_GetState>
 8005882:	4603      	mov	r3, r0
 8005884:	2b01      	cmp	r3, #1
 8005886:	d017      	beq.n	80058b8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588c:	4a33      	ldr	r2, [pc, #204]	@ (800595c <I2C_ITError+0x1dc>)
 800588e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589c:	4618      	mov	r0, r3
 800589e:	f7fd fffb 	bl	8003898 <HAL_DMA_Abort_IT>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d04d      	beq.n	8005944 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80058b2:	4610      	mov	r0, r2
 80058b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058b6:	e045      	b.n	8005944 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f851 	bl	8005960 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058be:	e041      	b.n	8005944 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d039      	beq.n	800593c <I2C_ITError+0x1bc>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b12      	cmp	r3, #18
 80058cc:	d002      	beq.n	80058d4 <I2C_ITError+0x154>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b22      	cmp	r3, #34	@ 0x22
 80058d2:	d133      	bne.n	800593c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058e2:	d107      	bne.n	80058f4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fe f80e 	bl	800391a <HAL_DMA_GetState>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b01      	cmp	r3, #1
 8005902:	d017      	beq.n	8005934 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005908:	4a14      	ldr	r2, [pc, #80]	@ (800595c <I2C_ITError+0x1dc>)
 800590a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005918:	4618      	mov	r0, r3
 800591a:	f7fd ffbd 	bl	8003898 <HAL_DMA_Abort_IT>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d011      	beq.n	8005948 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800592e:	4610      	mov	r0, r2
 8005930:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005932:	e009      	b.n	8005948 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f813 	bl	8005960 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800593a:	e005      	b.n	8005948 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f80f 	bl	8005960 <I2C_TreatErrorCallback>
  }
}
 8005942:	e002      	b.n	800594a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005944:	bf00      	nop
 8005946:	e000      	b.n	800594a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005948:	bf00      	nop
}
 800594a:	bf00      	nop
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	ffff0000 	.word	0xffff0000
 8005958:	080048b3 	.word	0x080048b3
 800595c:	080059fb 	.word	0x080059fb

08005960 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b60      	cmp	r3, #96	@ 0x60
 8005972:	d10f      	bne.n	8005994 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005992:	e00a      	b.n	80059aa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    hi2c->ErrorCallback(hi2c);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	4798      	blx	r3
}
 80059aa:	bf00      	nop
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d103      	bne.n	80059d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2200      	movs	r2, #0
 80059ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d007      	beq.n	80059ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699a      	ldr	r2, [r3, #24]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0201 	orr.w	r2, r2, #1
 80059ec:	619a      	str	r2, [r3, #24]
  }
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a14:	2200      	movs	r2, #0
 8005a16:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a24:	2200      	movs	r2, #0
 8005a26:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff ff99 	bl	8005960 <I2C_TreatErrorCallback>
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	607b      	str	r3, [r7, #4]
 8005a42:	460b      	mov	r3, r1
 8005a44:	817b      	strh	r3, [r7, #10]
 8005a46:	4613      	mov	r3, r2
 8005a48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a4a:	897b      	ldrh	r3, [r7, #10]
 8005a4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a50:	7a7b      	ldrb	r3, [r7, #9]
 8005a52:	041b      	lsls	r3, r3, #16
 8005a54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	0d5b      	lsrs	r3, r3, #21
 8005a72:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005a76:	4b08      	ldr	r3, [pc, #32]	@ (8005a98 <I2C_TransferConfig+0x60>)
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	43db      	mvns	r3, r3
 8005a7c:	ea02 0103 	and.w	r1, r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	03ff63ff 	.word	0x03ff63ff

08005a9c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab0:	4a39      	ldr	r2, [pc, #228]	@ (8005b98 <I2C_Enable_IRQ+0xfc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d032      	beq.n	8005b1c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005aba:	4a38      	ldr	r2, [pc, #224]	@ (8005b9c <I2C_Enable_IRQ+0x100>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d02d      	beq.n	8005b1c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005ac4:	4a36      	ldr	r2, [pc, #216]	@ (8005ba0 <I2C_Enable_IRQ+0x104>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d028      	beq.n	8005b1c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005aca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	da03      	bge.n	8005ada <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005ad8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005ada:	887b      	ldrh	r3, [r7, #2]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005aea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005aec:	887b      	ldrh	r3, [r7, #2]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005afc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005afe:	887b      	ldrh	r3, [r7, #2]
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d103      	bne.n	8005b0c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005b0a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b0c:	887b      	ldrh	r3, [r7, #2]
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d133      	bne.n	8005b7a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f043 0320 	orr.w	r3, r3, #32
 8005b18:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b1a:	e02e      	b.n	8005b7a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005b1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	da03      	bge.n	8005b2c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005b2a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005b2c:	887b      	ldrh	r3, [r7, #2]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005b3c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005b3e:	887b      	ldrh	r3, [r7, #2]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005b4e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005b50:	887b      	ldrh	r3, [r7, #2]
 8005b52:	2b10      	cmp	r3, #16
 8005b54:	d103      	bne.n	8005b5e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005b5c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b5e:	887b      	ldrh	r3, [r7, #2]
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d103      	bne.n	8005b6c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005b6c:	887b      	ldrh	r3, [r7, #2]
 8005b6e:	2b40      	cmp	r3, #64	@ 0x40
 8005b70:	d103      	bne.n	8005b7a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b78:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6819      	ldr	r1, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	601a      	str	r2, [r3, #0]
}
 8005b8a:	bf00      	nop
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	08004ab9 	.word	0x08004ab9
 8005b9c:	08004f01 	.word	0x08004f01
 8005ba0:	08004ca1 	.word	0x08004ca1

08005ba4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005bb4:	887b      	ldrh	r3, [r7, #2]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00f      	beq.n	8005bde <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005bc4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005bd2:	2b28      	cmp	r3, #40	@ 0x28
 8005bd4:	d003      	beq.n	8005bde <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005bdc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005bde:	887b      	ldrh	r3, [r7, #2]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00f      	beq.n	8005c08 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005bee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005bfc:	2b28      	cmp	r3, #40	@ 0x28
 8005bfe:	d003      	beq.n	8005c08 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005c06:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005c08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	da03      	bge.n	8005c18 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005c16:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005c18:	887b      	ldrh	r3, [r7, #2]
 8005c1a:	2b10      	cmp	r3, #16
 8005c1c:	d103      	bne.n	8005c26 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005c24:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005c26:	887b      	ldrh	r3, [r7, #2]
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	d103      	bne.n	8005c34 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f043 0320 	orr.w	r3, r3, #32
 8005c32:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005c34:	887b      	ldrh	r3, [r7, #2]
 8005c36:	2b40      	cmp	r3, #64	@ 0x40
 8005c38:	d103      	bne.n	8005c42 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c40:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6819      	ldr	r1, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	43da      	mvns	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	400a      	ands	r2, r1
 8005c52:	601a      	str	r2, [r3, #0]
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d138      	bne.n	8005ce8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e032      	b.n	8005cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2224      	movs	r2, #36	@ 0x24
 8005c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005cb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6819      	ldr	r1, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e000      	b.n	8005cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ce8:	2302      	movs	r3, #2
  }
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d139      	bne.n	8005d80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e033      	b.n	8005d82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2224      	movs	r2, #36	@ 0x24
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0201 	bic.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e000      	b.n	8005d82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d80:	2302      	movs	r3, #2
  }
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
	...

08005d90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d94:	4b04      	ldr	r3, [pc, #16]	@ (8005da8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40007000 	.word	0x40007000

08005dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dba:	d130      	bne.n	8005e1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dbc:	4b23      	ldr	r3, [pc, #140]	@ (8005e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dc8:	d038      	beq.n	8005e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005dca:	4b20      	ldr	r3, [pc, #128]	@ (8005e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8005e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005dd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005dda:	4b1d      	ldr	r3, [pc, #116]	@ (8005e50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2232      	movs	r2, #50	@ 0x32
 8005de0:	fb02 f303 	mul.w	r3, r2, r3
 8005de4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005de6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dea:	0c9b      	lsrs	r3, r3, #18
 8005dec:	3301      	adds	r3, #1
 8005dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005df0:	e002      	b.n	8005df8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005df8:	4b14      	ldr	r3, [pc, #80]	@ (8005e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e04:	d102      	bne.n	8005e0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1f2      	bne.n	8005df2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e18:	d110      	bne.n	8005e3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e00f      	b.n	8005e3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e2a:	d007      	beq.n	8005e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e2c:	4b07      	ldr	r3, [pc, #28]	@ (8005e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e34:	4a05      	ldr	r2, [pc, #20]	@ (8005e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	40007000 	.word	0x40007000
 8005e50:	20000004 	.word	0x20000004
 8005e54:	431bde83 	.word	0x431bde83

08005e58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e3ca      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e6a:	4b97      	ldr	r3, [pc, #604]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 030c 	and.w	r3, r3, #12
 8005e72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e74:	4b94      	ldr	r3, [pc, #592]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f003 0303 	and.w	r3, r3, #3
 8005e7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 80e4 	beq.w	8006054 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x4a>
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b0c      	cmp	r3, #12
 8005e96:	f040 808b 	bne.w	8005fb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	f040 8087 	bne.w	8005fb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ea2:	4b89      	ldr	r3, [pc, #548]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_RCC_OscConfig+0x62>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e3a2      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1a      	ldr	r2, [r3, #32]
 8005ebe:	4b82      	ldr	r3, [pc, #520]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d004      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x7c>
 8005eca:	4b7f      	ldr	r3, [pc, #508]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ed2:	e005      	b.n	8005ee0 <HAL_RCC_OscConfig+0x88>
 8005ed4:	4b7c      	ldr	r3, [pc, #496]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eda:	091b      	lsrs	r3, r3, #4
 8005edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d223      	bcs.n	8005f2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 fd87 	bl	80069fc <RCC_SetFlashLatencyFromMSIRange>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e383      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ef8:	4b73      	ldr	r3, [pc, #460]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a72      	ldr	r2, [pc, #456]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005efe:	f043 0308 	orr.w	r3, r3, #8
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	4b70      	ldr	r3, [pc, #448]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	496d      	ldr	r1, [pc, #436]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f16:	4b6c      	ldr	r3, [pc, #432]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	4968      	ldr	r1, [pc, #416]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	604b      	str	r3, [r1, #4]
 8005f2a:	e025      	b.n	8005f78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f2c:	4b66      	ldr	r3, [pc, #408]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a65      	ldr	r2, [pc, #404]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005f32:	f043 0308 	orr.w	r3, r3, #8
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	4b63      	ldr	r3, [pc, #396]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	4960      	ldr	r1, [pc, #384]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f4a:	4b5f      	ldr	r3, [pc, #380]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	495b      	ldr	r1, [pc, #364]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d109      	bne.n	8005f78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fd47 	bl	80069fc <RCC_SetFlashLatencyFromMSIRange>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e343      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f78:	f000 fc4a 	bl	8006810 <HAL_RCC_GetSysClockFreq>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	4b52      	ldr	r3, [pc, #328]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	091b      	lsrs	r3, r3, #4
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	4950      	ldr	r1, [pc, #320]	@ (80060cc <HAL_RCC_OscConfig+0x274>)
 8005f8a:	5ccb      	ldrb	r3, [r1, r3]
 8005f8c:	f003 031f 	and.w	r3, r3, #31
 8005f90:	fa22 f303 	lsr.w	r3, r2, r3
 8005f94:	4a4e      	ldr	r2, [pc, #312]	@ (80060d0 <HAL_RCC_OscConfig+0x278>)
 8005f96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f98:	4b4e      	ldr	r3, [pc, #312]	@ (80060d4 <HAL_RCC_OscConfig+0x27c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fb f9cb 	bl	8001338 <HAL_InitTick>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d052      	beq.n	8006052 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	e327      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d032      	beq.n	800601e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005fb8:	4b43      	ldr	r3, [pc, #268]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a42      	ldr	r2, [pc, #264]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fc4:	f7fd fb24 	bl	8003610 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fcc:	f7fd fb20 	bl	8003610 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e310      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005fde:	4b3a      	ldr	r3, [pc, #232]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0f0      	beq.n	8005fcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fea:	4b37      	ldr	r3, [pc, #220]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a36      	ldr	r2, [pc, #216]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005ff0:	f043 0308 	orr.w	r3, r3, #8
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	4b34      	ldr	r3, [pc, #208]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	4931      	ldr	r1, [pc, #196]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8006004:	4313      	orrs	r3, r2
 8006006:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006008:	4b2f      	ldr	r3, [pc, #188]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	021b      	lsls	r3, r3, #8
 8006016:	492c      	ldr	r1, [pc, #176]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8006018:	4313      	orrs	r3, r2
 800601a:	604b      	str	r3, [r1, #4]
 800601c:	e01a      	b.n	8006054 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800601e:	4b2a      	ldr	r3, [pc, #168]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a29      	ldr	r2, [pc, #164]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800602a:	f7fd faf1 	bl	8003610 <HAL_GetTick>
 800602e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006032:	f7fd faed 	bl	8003610 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e2dd      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006044:	4b20      	ldr	r3, [pc, #128]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1f0      	bne.n	8006032 <HAL_RCC_OscConfig+0x1da>
 8006050:	e000      	b.n	8006054 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006052:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d074      	beq.n	800614a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	2b08      	cmp	r3, #8
 8006064:	d005      	beq.n	8006072 <HAL_RCC_OscConfig+0x21a>
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b0c      	cmp	r3, #12
 800606a:	d10e      	bne.n	800608a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b03      	cmp	r3, #3
 8006070:	d10b      	bne.n	800608a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006072:	4b15      	ldr	r3, [pc, #84]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d064      	beq.n	8006148 <HAL_RCC_OscConfig+0x2f0>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d160      	bne.n	8006148 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e2ba      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006092:	d106      	bne.n	80060a2 <HAL_RCC_OscConfig+0x24a>
 8006094:	4b0c      	ldr	r3, [pc, #48]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a0b      	ldr	r2, [pc, #44]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 800609a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	e026      	b.n	80060f0 <HAL_RCC_OscConfig+0x298>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060aa:	d115      	bne.n	80060d8 <HAL_RCC_OscConfig+0x280>
 80060ac:	4b06      	ldr	r3, [pc, #24]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a05      	ldr	r2, [pc, #20]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 80060b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	4b03      	ldr	r3, [pc, #12]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a02      	ldr	r2, [pc, #8]	@ (80060c8 <HAL_RCC_OscConfig+0x270>)
 80060be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	e014      	b.n	80060f0 <HAL_RCC_OscConfig+0x298>
 80060c6:	bf00      	nop
 80060c8:	40021000 	.word	0x40021000
 80060cc:	08015574 	.word	0x08015574
 80060d0:	20000004 	.word	0x20000004
 80060d4:	20000008 	.word	0x20000008
 80060d8:	4ba0      	ldr	r3, [pc, #640]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a9f      	ldr	r2, [pc, #636]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80060de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	4b9d      	ldr	r3, [pc, #628]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a9c      	ldr	r2, [pc, #624]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80060ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d013      	beq.n	8006120 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fd fa8a 	bl	8003610 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006100:	f7fd fa86 	bl	8003610 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b64      	cmp	r3, #100	@ 0x64
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e276      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006112:	4b92      	ldr	r3, [pc, #584]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0x2a8>
 800611e:	e014      	b.n	800614a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7fd fa76 	bl	8003610 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006128:	f7fd fa72 	bl	8003610 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b64      	cmp	r3, #100	@ 0x64
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e262      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800613a:	4b88      	ldr	r3, [pc, #544]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0x2d0>
 8006146:	e000      	b.n	800614a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d060      	beq.n	8006218 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b04      	cmp	r3, #4
 800615a:	d005      	beq.n	8006168 <HAL_RCC_OscConfig+0x310>
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	2b0c      	cmp	r3, #12
 8006160:	d119      	bne.n	8006196 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d116      	bne.n	8006196 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006168:	4b7c      	ldr	r3, [pc, #496]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_RCC_OscConfig+0x328>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e23f      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006180:	4b76      	ldr	r3, [pc, #472]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	061b      	lsls	r3, r3, #24
 800618e:	4973      	ldr	r1, [pc, #460]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 8006190:	4313      	orrs	r3, r2
 8006192:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006194:	e040      	b.n	8006218 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d023      	beq.n	80061e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800619e:	4b6f      	ldr	r3, [pc, #444]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a6e      	ldr	r2, [pc, #440]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80061a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061aa:	f7fd fa31 	bl	8003610 <HAL_GetTick>
 80061ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061b2:	f7fd fa2d 	bl	8003610 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e21d      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061c4:	4b65      	ldr	r3, [pc, #404]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0f0      	beq.n	80061b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d0:	4b62      	ldr	r3, [pc, #392]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	061b      	lsls	r3, r3, #24
 80061de:	495f      	ldr	r1, [pc, #380]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	604b      	str	r3, [r1, #4]
 80061e4:	e018      	b.n	8006218 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061e6:	4b5d      	ldr	r3, [pc, #372]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a5c      	ldr	r2, [pc, #368]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80061ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f2:	f7fd fa0d 	bl	8003610 <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061fa:	f7fd fa09 	bl	8003610 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e1f9      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800620c:	4b53      	ldr	r3, [pc, #332]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1f0      	bne.n	80061fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0308 	and.w	r3, r3, #8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d03c      	beq.n	800629e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01c      	beq.n	8006266 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800622c:	4b4b      	ldr	r3, [pc, #300]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 800622e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006232:	4a4a      	ldr	r2, [pc, #296]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 8006234:	f043 0301 	orr.w	r3, r3, #1
 8006238:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623c:	f7fd f9e8 	bl	8003610 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006244:	f7fd f9e4 	bl	8003610 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e1d4      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006256:	4b41      	ldr	r3, [pc, #260]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 8006258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0ef      	beq.n	8006244 <HAL_RCC_OscConfig+0x3ec>
 8006264:	e01b      	b.n	800629e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006266:	4b3d      	ldr	r3, [pc, #244]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 8006268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800626c:	4a3b      	ldr	r2, [pc, #236]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006276:	f7fd f9cb 	bl	8003610 <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800627e:	f7fd f9c7 	bl	8003610 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e1b7      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006290:	4b32      	ldr	r3, [pc, #200]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 8006292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1ef      	bne.n	800627e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 80a6 	beq.w	80063f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062ac:	2300      	movs	r3, #0
 80062ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80062b0:	4b2a      	ldr	r3, [pc, #168]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80062b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10d      	bne.n	80062d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062bc:	4b27      	ldr	r3, [pc, #156]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80062be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c0:	4a26      	ldr	r2, [pc, #152]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80062c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80062c8:	4b24      	ldr	r3, [pc, #144]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 80062ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062d0:	60bb      	str	r3, [r7, #8]
 80062d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062d4:	2301      	movs	r3, #1
 80062d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062d8:	4b21      	ldr	r3, [pc, #132]	@ (8006360 <HAL_RCC_OscConfig+0x508>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d118      	bne.n	8006316 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006360 <HAL_RCC_OscConfig+0x508>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006360 <HAL_RCC_OscConfig+0x508>)
 80062ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062f0:	f7fd f98e 	bl	8003610 <HAL_GetTick>
 80062f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f8:	f7fd f98a 	bl	8003610 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e17a      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800630a:	4b15      	ldr	r3, [pc, #84]	@ (8006360 <HAL_RCC_OscConfig+0x508>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0f0      	beq.n	80062f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d108      	bne.n	8006330 <HAL_RCC_OscConfig+0x4d8>
 800631e:	4b0f      	ldr	r3, [pc, #60]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 8006320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006324:	4a0d      	ldr	r2, [pc, #52]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800632e:	e029      	b.n	8006384 <HAL_RCC_OscConfig+0x52c>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	2b05      	cmp	r3, #5
 8006336:	d115      	bne.n	8006364 <HAL_RCC_OscConfig+0x50c>
 8006338:	4b08      	ldr	r3, [pc, #32]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 800633a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633e:	4a07      	ldr	r2, [pc, #28]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 8006340:	f043 0304 	orr.w	r3, r3, #4
 8006344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006348:	4b04      	ldr	r3, [pc, #16]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634e:	4a03      	ldr	r2, [pc, #12]	@ (800635c <HAL_RCC_OscConfig+0x504>)
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006358:	e014      	b.n	8006384 <HAL_RCC_OscConfig+0x52c>
 800635a:	bf00      	nop
 800635c:	40021000 	.word	0x40021000
 8006360:	40007000 	.word	0x40007000
 8006364:	4b9c      	ldr	r3, [pc, #624]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636a:	4a9b      	ldr	r2, [pc, #620]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006374:	4b98      	ldr	r3, [pc, #608]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 8006376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637a:	4a97      	ldr	r2, [pc, #604]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 800637c:	f023 0304 	bic.w	r3, r3, #4
 8006380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d016      	beq.n	80063ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800638c:	f7fd f940 	bl	8003610 <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006392:	e00a      	b.n	80063aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006394:	f7fd f93c 	bl	8003610 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e12a      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063aa:	4b8b      	ldr	r3, [pc, #556]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 80063ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0ed      	beq.n	8006394 <HAL_RCC_OscConfig+0x53c>
 80063b8:	e015      	b.n	80063e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ba:	f7fd f929 	bl	8003610 <HAL_GetTick>
 80063be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063c0:	e00a      	b.n	80063d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063c2:	f7fd f925 	bl	8003610 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e113      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063d8:	4b7f      	ldr	r3, [pc, #508]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1ed      	bne.n	80063c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063e6:	7ffb      	ldrb	r3, [r7, #31]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d105      	bne.n	80063f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ec:	4b7a      	ldr	r3, [pc, #488]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 80063ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f0:	4a79      	ldr	r2, [pc, #484]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 80063f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063f6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 80fe 	beq.w	80065fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006406:	2b02      	cmp	r3, #2
 8006408:	f040 80d0 	bne.w	80065ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800640c:	4b72      	ldr	r3, [pc, #456]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f003 0203 	and.w	r2, r3, #3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641c:	429a      	cmp	r2, r3
 800641e:	d130      	bne.n	8006482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642a:	3b01      	subs	r3, #1
 800642c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800642e:	429a      	cmp	r2, r3
 8006430:	d127      	bne.n	8006482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800643c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800643e:	429a      	cmp	r2, r3
 8006440:	d11f      	bne.n	8006482 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800644c:	2a07      	cmp	r2, #7
 800644e:	bf14      	ite	ne
 8006450:	2201      	movne	r2, #1
 8006452:	2200      	moveq	r2, #0
 8006454:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006456:	4293      	cmp	r3, r2
 8006458:	d113      	bne.n	8006482 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006464:	085b      	lsrs	r3, r3, #1
 8006466:	3b01      	subs	r3, #1
 8006468:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800646a:	429a      	cmp	r2, r3
 800646c:	d109      	bne.n	8006482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006478:	085b      	lsrs	r3, r3, #1
 800647a:	3b01      	subs	r3, #1
 800647c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800647e:	429a      	cmp	r2, r3
 8006480:	d06e      	beq.n	8006560 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b0c      	cmp	r3, #12
 8006486:	d069      	beq.n	800655c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006488:	4b53      	ldr	r3, [pc, #332]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d105      	bne.n	80064a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006494:	4b50      	ldr	r3, [pc, #320]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0ad      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80064a4:	4b4c      	ldr	r3, [pc, #304]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a4b      	ldr	r2, [pc, #300]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 80064aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80064b0:	f7fd f8ae 	bl	8003610 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b8:	f7fd f8aa 	bl	8003610 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e09a      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064ca:	4b43      	ldr	r3, [pc, #268]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1f0      	bne.n	80064b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064d6:	4b40      	ldr	r3, [pc, #256]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	4b40      	ldr	r3, [pc, #256]	@ (80065dc <HAL_RCC_OscConfig+0x784>)
 80064dc:	4013      	ands	r3, r2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80064e6:	3a01      	subs	r2, #1
 80064e8:	0112      	lsls	r2, r2, #4
 80064ea:	4311      	orrs	r1, r2
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064f0:	0212      	lsls	r2, r2, #8
 80064f2:	4311      	orrs	r1, r2
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80064f8:	0852      	lsrs	r2, r2, #1
 80064fa:	3a01      	subs	r2, #1
 80064fc:	0552      	lsls	r2, r2, #21
 80064fe:	4311      	orrs	r1, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006504:	0852      	lsrs	r2, r2, #1
 8006506:	3a01      	subs	r2, #1
 8006508:	0652      	lsls	r2, r2, #25
 800650a:	4311      	orrs	r1, r2
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006510:	0912      	lsrs	r2, r2, #4
 8006512:	0452      	lsls	r2, r2, #17
 8006514:	430a      	orrs	r2, r1
 8006516:	4930      	ldr	r1, [pc, #192]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 8006518:	4313      	orrs	r3, r2
 800651a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800651c:	4b2e      	ldr	r3, [pc, #184]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a2d      	ldr	r2, [pc, #180]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 8006522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006526:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006528:	4b2b      	ldr	r3, [pc, #172]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4a2a      	ldr	r2, [pc, #168]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 800652e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006532:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006534:	f7fd f86c 	bl	8003610 <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800653c:	f7fd f868 	bl	8003610 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e058      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800654e:	4b22      	ldr	r3, [pc, #136]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0f0      	beq.n	800653c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800655a:	e050      	b.n	80065fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e04f      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006560:	4b1d      	ldr	r3, [pc, #116]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d148      	bne.n	80065fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800656c:	4b1a      	ldr	r3, [pc, #104]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a19      	ldr	r2, [pc, #100]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 8006572:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006576:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006578:	4b17      	ldr	r3, [pc, #92]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	4a16      	ldr	r2, [pc, #88]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 800657e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006582:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006584:	f7fd f844 	bl	8003610 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800658c:	f7fd f840 	bl	8003610 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e030      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800659e:	4b0e      	ldr	r3, [pc, #56]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f0      	beq.n	800658c <HAL_RCC_OscConfig+0x734>
 80065aa:	e028      	b.n	80065fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2b0c      	cmp	r3, #12
 80065b0:	d023      	beq.n	80065fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b2:	4b09      	ldr	r3, [pc, #36]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a08      	ldr	r2, [pc, #32]	@ (80065d8 <HAL_RCC_OscConfig+0x780>)
 80065b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065be:	f7fd f827 	bl	8003610 <HAL_GetTick>
 80065c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065c4:	e00c      	b.n	80065e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c6:	f7fd f823 	bl	8003610 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d905      	bls.n	80065e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e013      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
 80065d8:	40021000 	.word	0x40021000
 80065dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065e0:	4b09      	ldr	r3, [pc, #36]	@ (8006608 <HAL_RCC_OscConfig+0x7b0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1ec      	bne.n	80065c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80065ec:	4b06      	ldr	r3, [pc, #24]	@ (8006608 <HAL_RCC_OscConfig+0x7b0>)
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	4905      	ldr	r1, [pc, #20]	@ (8006608 <HAL_RCC_OscConfig+0x7b0>)
 80065f2:	4b06      	ldr	r3, [pc, #24]	@ (800660c <HAL_RCC_OscConfig+0x7b4>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	60cb      	str	r3, [r1, #12]
 80065f8:	e001      	b.n	80065fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40021000 	.word	0x40021000
 800660c:	feeefffc 	.word	0xfeeefffc

08006610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e0e7      	b.n	80067f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006624:	4b75      	ldr	r3, [pc, #468]	@ (80067fc <HAL_RCC_ClockConfig+0x1ec>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d910      	bls.n	8006654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006632:	4b72      	ldr	r3, [pc, #456]	@ (80067fc <HAL_RCC_ClockConfig+0x1ec>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f023 0207 	bic.w	r2, r3, #7
 800663a:	4970      	ldr	r1, [pc, #448]	@ (80067fc <HAL_RCC_ClockConfig+0x1ec>)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	4313      	orrs	r3, r2
 8006640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006642:	4b6e      	ldr	r3, [pc, #440]	@ (80067fc <HAL_RCC_ClockConfig+0x1ec>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d001      	beq.n	8006654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e0cf      	b.n	80067f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d010      	beq.n	8006682 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	4b66      	ldr	r3, [pc, #408]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800666c:	429a      	cmp	r2, r3
 800666e:	d908      	bls.n	8006682 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006670:	4b63      	ldr	r3, [pc, #396]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	4960      	ldr	r1, [pc, #384]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 800667e:	4313      	orrs	r3, r2
 8006680:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d04c      	beq.n	8006728 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b03      	cmp	r3, #3
 8006694:	d107      	bne.n	80066a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006696:	4b5a      	ldr	r3, [pc, #360]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d121      	bne.n	80066e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e0a6      	b.n	80067f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d107      	bne.n	80066be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066ae:	4b54      	ldr	r3, [pc, #336]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d115      	bne.n	80066e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e09a      	b.n	80067f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d107      	bne.n	80066d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066c6:	4b4e      	ldr	r3, [pc, #312]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d109      	bne.n	80066e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e08e      	b.n	80067f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e086      	b.n	80067f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066e6:	4b46      	ldr	r3, [pc, #280]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f023 0203 	bic.w	r2, r3, #3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	4943      	ldr	r1, [pc, #268]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066f8:	f7fc ff8a 	bl	8003610 <HAL_GetTick>
 80066fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066fe:	e00a      	b.n	8006716 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006700:	f7fc ff86 	bl	8003610 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800670e:	4293      	cmp	r3, r2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e06e      	b.n	80067f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006716:	4b3a      	ldr	r3, [pc, #232]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 020c 	and.w	r2, r3, #12
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	429a      	cmp	r2, r3
 8006726:	d1eb      	bne.n	8006700 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d010      	beq.n	8006756 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	4b31      	ldr	r3, [pc, #196]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006740:	429a      	cmp	r2, r3
 8006742:	d208      	bcs.n	8006756 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006744:	4b2e      	ldr	r3, [pc, #184]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	492b      	ldr	r1, [pc, #172]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 8006752:	4313      	orrs	r3, r2
 8006754:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006756:	4b29      	ldr	r3, [pc, #164]	@ (80067fc <HAL_RCC_ClockConfig+0x1ec>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0307 	and.w	r3, r3, #7
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d210      	bcs.n	8006786 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006764:	4b25      	ldr	r3, [pc, #148]	@ (80067fc <HAL_RCC_ClockConfig+0x1ec>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f023 0207 	bic.w	r2, r3, #7
 800676c:	4923      	ldr	r1, [pc, #140]	@ (80067fc <HAL_RCC_ClockConfig+0x1ec>)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	4313      	orrs	r3, r2
 8006772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006774:	4b21      	ldr	r3, [pc, #132]	@ (80067fc <HAL_RCC_ClockConfig+0x1ec>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d001      	beq.n	8006786 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e036      	b.n	80067f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0304 	and.w	r3, r3, #4
 800678e:	2b00      	cmp	r3, #0
 8006790:	d008      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006792:	4b1b      	ldr	r3, [pc, #108]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	4918      	ldr	r1, [pc, #96]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0308 	and.w	r3, r3, #8
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d009      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067b0:	4b13      	ldr	r3, [pc, #76]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	4910      	ldr	r1, [pc, #64]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067c4:	f000 f824 	bl	8006810 <HAL_RCC_GetSysClockFreq>
 80067c8:	4602      	mov	r2, r0
 80067ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006800 <HAL_RCC_ClockConfig+0x1f0>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	091b      	lsrs	r3, r3, #4
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	490b      	ldr	r1, [pc, #44]	@ (8006804 <HAL_RCC_ClockConfig+0x1f4>)
 80067d6:	5ccb      	ldrb	r3, [r1, r3]
 80067d8:	f003 031f 	and.w	r3, r3, #31
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
 80067e0:	4a09      	ldr	r2, [pc, #36]	@ (8006808 <HAL_RCC_ClockConfig+0x1f8>)
 80067e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80067e4:	4b09      	ldr	r3, [pc, #36]	@ (800680c <HAL_RCC_ClockConfig+0x1fc>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fa fda5 	bl	8001338 <HAL_InitTick>
 80067ee:	4603      	mov	r3, r0
 80067f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80067f2:	7afb      	ldrb	r3, [r7, #11]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40022000 	.word	0x40022000
 8006800:	40021000 	.word	0x40021000
 8006804:	08015574 	.word	0x08015574
 8006808:	20000004 	.word	0x20000004
 800680c:	20000008 	.word	0x20000008

08006810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006810:	b480      	push	{r7}
 8006812:	b089      	sub	sp, #36	@ 0x24
 8006814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	2300      	movs	r3, #0
 800681c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800681e:	4b3e      	ldr	r3, [pc, #248]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x108>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 030c 	and.w	r3, r3, #12
 8006826:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006828:	4b3b      	ldr	r3, [pc, #236]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x108>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0303 	and.w	r3, r3, #3
 8006830:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_RCC_GetSysClockFreq+0x34>
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b0c      	cmp	r3, #12
 800683c:	d121      	bne.n	8006882 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d11e      	bne.n	8006882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006844:	4b34      	ldr	r3, [pc, #208]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x108>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d107      	bne.n	8006860 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006850:	4b31      	ldr	r3, [pc, #196]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x108>)
 8006852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	61fb      	str	r3, [r7, #28]
 800685e:	e005      	b.n	800686c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006860:	4b2d      	ldr	r3, [pc, #180]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x108>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	091b      	lsrs	r3, r3, #4
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800686c:	4a2b      	ldr	r2, [pc, #172]	@ (800691c <HAL_RCC_GetSysClockFreq+0x10c>)
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006874:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10d      	bne.n	8006898 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006880:	e00a      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	2b04      	cmp	r3, #4
 8006886:	d102      	bne.n	800688e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006888:	4b25      	ldr	r3, [pc, #148]	@ (8006920 <HAL_RCC_GetSysClockFreq+0x110>)
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	e004      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d101      	bne.n	8006898 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006894:	4b23      	ldr	r3, [pc, #140]	@ (8006924 <HAL_RCC_GetSysClockFreq+0x114>)
 8006896:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b0c      	cmp	r3, #12
 800689c:	d134      	bne.n	8006908 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800689e:	4b1e      	ldr	r3, [pc, #120]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x108>)
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d003      	beq.n	80068b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d003      	beq.n	80068bc <HAL_RCC_GetSysClockFreq+0xac>
 80068b4:	e005      	b.n	80068c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80068b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006920 <HAL_RCC_GetSysClockFreq+0x110>)
 80068b8:	617b      	str	r3, [r7, #20]
      break;
 80068ba:	e005      	b.n	80068c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80068bc:	4b19      	ldr	r3, [pc, #100]	@ (8006924 <HAL_RCC_GetSysClockFreq+0x114>)
 80068be:	617b      	str	r3, [r7, #20]
      break;
 80068c0:	e002      	b.n	80068c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	617b      	str	r3, [r7, #20]
      break;
 80068c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068c8:	4b13      	ldr	r3, [pc, #76]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x108>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	091b      	lsrs	r3, r3, #4
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	3301      	adds	r3, #1
 80068d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80068d6:	4b10      	ldr	r3, [pc, #64]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x108>)
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	0a1b      	lsrs	r3, r3, #8
 80068dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	fb03 f202 	mul.w	r2, r3, r2
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006918 <HAL_RCC_GetSysClockFreq+0x108>)
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	0e5b      	lsrs	r3, r3, #25
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	3301      	adds	r3, #1
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	fbb2 f3f3 	udiv	r3, r2, r3
 8006906:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006908:	69bb      	ldr	r3, [r7, #24]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3724      	adds	r7, #36	@ 0x24
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40021000 	.word	0x40021000
 800691c:	0801558c 	.word	0x0801558c
 8006920:	00f42400 	.word	0x00f42400
 8006924:	007a1200 	.word	0x007a1200

08006928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800692c:	4b03      	ldr	r3, [pc, #12]	@ (800693c <HAL_RCC_GetHCLKFreq+0x14>)
 800692e:	681b      	ldr	r3, [r3, #0]
}
 8006930:	4618      	mov	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	20000004 	.word	0x20000004

08006940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006944:	f7ff fff0 	bl	8006928 <HAL_RCC_GetHCLKFreq>
 8006948:	4602      	mov	r2, r0
 800694a:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	0a1b      	lsrs	r3, r3, #8
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	4904      	ldr	r1, [pc, #16]	@ (8006968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006956:	5ccb      	ldrb	r3, [r1, r3]
 8006958:	f003 031f 	and.w	r3, r3, #31
 800695c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006960:	4618      	mov	r0, r3
 8006962:	bd80      	pop	{r7, pc}
 8006964:	40021000 	.word	0x40021000
 8006968:	08015584 	.word	0x08015584

0800696c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006970:	f7ff ffda 	bl	8006928 <HAL_RCC_GetHCLKFreq>
 8006974:	4602      	mov	r2, r0
 8006976:	4b06      	ldr	r3, [pc, #24]	@ (8006990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	0adb      	lsrs	r3, r3, #11
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	4904      	ldr	r1, [pc, #16]	@ (8006994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006982:	5ccb      	ldrb	r3, [r1, r3]
 8006984:	f003 031f 	and.w	r3, r3, #31
 8006988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800698c:	4618      	mov	r0, r3
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40021000 	.word	0x40021000
 8006994:	08015584 	.word	0x08015584

08006998 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	220f      	movs	r2, #15
 80069a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80069a8:	4b12      	ldr	r3, [pc, #72]	@ (80069f4 <HAL_RCC_GetClockConfig+0x5c>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 0203 	and.w	r2, r3, #3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80069b4:	4b0f      	ldr	r3, [pc, #60]	@ (80069f4 <HAL_RCC_GetClockConfig+0x5c>)
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80069c0:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <HAL_RCC_GetClockConfig+0x5c>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80069cc:	4b09      	ldr	r3, [pc, #36]	@ (80069f4 <HAL_RCC_GetClockConfig+0x5c>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	08db      	lsrs	r3, r3, #3
 80069d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80069da:	4b07      	ldr	r3, [pc, #28]	@ (80069f8 <HAL_RCC_GetClockConfig+0x60>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0207 	and.w	r2, r3, #7
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	601a      	str	r2, [r3, #0]
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40021000 	.word	0x40021000
 80069f8:	40022000 	.word	0x40022000

080069fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006a04:	2300      	movs	r3, #0
 8006a06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006a08:	4b2a      	ldr	r3, [pc, #168]	@ (8006ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006a14:	f7ff f9bc 	bl	8005d90 <HAL_PWREx_GetVoltageRange>
 8006a18:	6178      	str	r0, [r7, #20]
 8006a1a:	e014      	b.n	8006a46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a1c:	4b25      	ldr	r3, [pc, #148]	@ (8006ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a20:	4a24      	ldr	r2, [pc, #144]	@ (8006ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a28:	4b22      	ldr	r3, [pc, #136]	@ (8006ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006a34:	f7ff f9ac 	bl	8005d90 <HAL_PWREx_GetVoltageRange>
 8006a38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a44:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a4c:	d10b      	bne.n	8006a66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b80      	cmp	r3, #128	@ 0x80
 8006a52:	d919      	bls.n	8006a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2ba0      	cmp	r3, #160	@ 0xa0
 8006a58:	d902      	bls.n	8006a60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	e013      	b.n	8006a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a60:	2301      	movs	r3, #1
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	e010      	b.n	8006a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b80      	cmp	r3, #128	@ 0x80
 8006a6a:	d902      	bls.n	8006a72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	613b      	str	r3, [r7, #16]
 8006a70:	e00a      	b.n	8006a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b80      	cmp	r3, #128	@ 0x80
 8006a76:	d102      	bne.n	8006a7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a78:	2302      	movs	r3, #2
 8006a7a:	613b      	str	r3, [r7, #16]
 8006a7c:	e004      	b.n	8006a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b70      	cmp	r3, #112	@ 0x70
 8006a82:	d101      	bne.n	8006a88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a84:	2301      	movs	r3, #1
 8006a86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006a88:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f023 0207 	bic.w	r2, r3, #7
 8006a90:	4909      	ldr	r1, [pc, #36]	@ (8006ab8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006a98:	4b07      	ldr	r3, [pc, #28]	@ (8006ab8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0307 	and.w	r3, r3, #7
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d001      	beq.n	8006aaa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	40022000 	.word	0x40022000

08006abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ac8:	2300      	movs	r3, #0
 8006aca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d041      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006adc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ae0:	d02a      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006ae2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ae6:	d824      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ae8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006aec:	d008      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006aee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006af2:	d81e      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00a      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006af8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006afc:	d010      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006afe:	e018      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006b00:	4b86      	ldr	r3, [pc, #536]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	4a85      	ldr	r2, [pc, #532]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b0c:	e015      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3304      	adds	r3, #4
 8006b12:	2100      	movs	r1, #0
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 fabb 	bl	8007090 <RCCEx_PLLSAI1_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b1e:	e00c      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3320      	adds	r3, #32
 8006b24:	2100      	movs	r1, #0
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fba6 	bl	8007278 <RCCEx_PLLSAI2_Config>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b30:	e003      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	74fb      	strb	r3, [r7, #19]
      break;
 8006b36:	e000      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b3a:	7cfb      	ldrb	r3, [r7, #19]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10b      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b40:	4b76      	ldr	r3, [pc, #472]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b4e:	4973      	ldr	r1, [pc, #460]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006b56:	e001      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b58:	7cfb      	ldrb	r3, [r7, #19]
 8006b5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d041      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b70:	d02a      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006b72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b76:	d824      	bhi.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006b78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b7c:	d008      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006b7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b82:	d81e      	bhi.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00a      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006b88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b8c:	d010      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006b8e:	e018      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006b90:	4b62      	ldr	r3, [pc, #392]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	4a61      	ldr	r2, [pc, #388]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006b9c:	e015      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fa73 	bl	8007090 <RCCEx_PLLSAI1_Config>
 8006baa:	4603      	mov	r3, r0
 8006bac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006bae:	e00c      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3320      	adds	r3, #32
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fb5e 	bl	8007278 <RCCEx_PLLSAI2_Config>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006bc0:	e003      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	74fb      	strb	r3, [r7, #19]
      break;
 8006bc6:	e000      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bca:	7cfb      	ldrb	r3, [r7, #19]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10b      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006bd0:	4b52      	ldr	r3, [pc, #328]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bde:	494f      	ldr	r1, [pc, #316]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006be6:	e001      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	7cfb      	ldrb	r3, [r7, #19]
 8006bea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 80a0 	beq.w	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006bfe:	4b47      	ldr	r3, [pc, #284]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00d      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c14:	4b41      	ldr	r3, [pc, #260]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c18:	4a40      	ldr	r2, [pc, #256]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c20:	4b3e      	ldr	r3, [pc, #248]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c28:	60bb      	str	r3, [r7, #8]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c30:	4b3b      	ldr	r3, [pc, #236]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a3a      	ldr	r2, [pc, #232]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c3c:	f7fc fce8 	bl	8003610 <HAL_GetTick>
 8006c40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c42:	e009      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c44:	f7fc fce4 	bl	8003610 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d902      	bls.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	74fb      	strb	r3, [r7, #19]
        break;
 8006c56:	e005      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c58:	4b31      	ldr	r3, [pc, #196]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0ef      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006c64:	7cfb      	ldrb	r3, [r7, #19]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d15c      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01f      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d019      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c88:	4b24      	ldr	r3, [pc, #144]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c94:	4b21      	ldr	r3, [pc, #132]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c9a:	4a20      	ldr	r2, [pc, #128]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006caa:	4a1c      	ldr	r2, [pc, #112]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cb4:	4a19      	ldr	r2, [pc, #100]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d016      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc6:	f7fc fca3 	bl	8003610 <HAL_GetTick>
 8006cca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ccc:	e00b      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cce:	f7fc fc9f 	bl	8003610 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d902      	bls.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	74fb      	strb	r3, [r7, #19]
            break;
 8006ce4:	e006      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0ec      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006cf4:	7cfb      	ldrb	r3, [r7, #19]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10c      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cfa:	4b08      	ldr	r3, [pc, #32]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d0a:	4904      	ldr	r1, [pc, #16]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006d12:	e009      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d14:	7cfb      	ldrb	r3, [r7, #19]
 8006d16:	74bb      	strb	r3, [r7, #18]
 8006d18:	e006      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006d1a:	bf00      	nop
 8006d1c:	40021000 	.word	0x40021000
 8006d20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d24:	7cfb      	ldrb	r3, [r7, #19]
 8006d26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d28:	7c7b      	ldrb	r3, [r7, #17]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d105      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d2e:	4b9e      	ldr	r3, [pc, #632]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d32:	4a9d      	ldr	r2, [pc, #628]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00a      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d46:	4b98      	ldr	r3, [pc, #608]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d4c:	f023 0203 	bic.w	r2, r3, #3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d54:	4994      	ldr	r1, [pc, #592]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00a      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d68:	4b8f      	ldr	r3, [pc, #572]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d6e:	f023 020c 	bic.w	r2, r3, #12
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d76:	498c      	ldr	r1, [pc, #560]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d8a:	4b87      	ldr	r3, [pc, #540]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d98:	4983      	ldr	r1, [pc, #524]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00a      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006dac:	4b7e      	ldr	r3, [pc, #504]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dba:	497b      	ldr	r1, [pc, #492]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0310 	and.w	r3, r3, #16
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006dce:	4b76      	ldr	r3, [pc, #472]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ddc:	4972      	ldr	r1, [pc, #456]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00a      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006df0:	4b6d      	ldr	r3, [pc, #436]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dfe:	496a      	ldr	r1, [pc, #424]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e12:	4b65      	ldr	r3, [pc, #404]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e20:	4961      	ldr	r1, [pc, #388]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e34:	4b5c      	ldr	r3, [pc, #368]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e42:	4959      	ldr	r1, [pc, #356]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e56:	4b54      	ldr	r3, [pc, #336]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e64:	4950      	ldr	r1, [pc, #320]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e78:	4b4b      	ldr	r3, [pc, #300]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e86:	4948      	ldr	r1, [pc, #288]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e9a:	4b43      	ldr	r3, [pc, #268]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea8:	493f      	ldr	r1, [pc, #252]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d028      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ec2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eca:	4937      	ldr	r1, [pc, #220]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ed6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eda:	d106      	bne.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006edc:	4b32      	ldr	r3, [pc, #200]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	4a31      	ldr	r2, [pc, #196]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ee2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ee6:	60d3      	str	r3, [r2, #12]
 8006ee8:	e011      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ef2:	d10c      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	2101      	movs	r1, #1
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 f8c8 	bl	8007090 <RCCEx_PLLSAI1_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006f04:	7cfb      	ldrb	r3, [r7, #19]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006f0a:	7cfb      	ldrb	r3, [r7, #19]
 8006f0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d028      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f1a:	4b23      	ldr	r3, [pc, #140]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f28:	491f      	ldr	r1, [pc, #124]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f38:	d106      	bne.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f44:	60d3      	str	r3, [r2, #12]
 8006f46:	e011      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f50:	d10c      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3304      	adds	r3, #4
 8006f56:	2101      	movs	r1, #1
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 f899 	bl	8007090 <RCCEx_PLLSAI1_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f62:	7cfb      	ldrb	r3, [r7, #19]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006f68:	7cfb      	ldrb	r3, [r7, #19]
 8006f6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d02b      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f78:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f86:	4908      	ldr	r1, [pc, #32]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f96:	d109      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f98:	4b03      	ldr	r3, [pc, #12]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	4a02      	ldr	r2, [pc, #8]	@ (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fa2:	60d3      	str	r3, [r2, #12]
 8006fa4:	e014      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006fa6:	bf00      	nop
 8006fa8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fb4:	d10c      	bne.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	2101      	movs	r1, #1
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 f867 	bl	8007090 <RCCEx_PLLSAI1_Config>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006fc6:	7cfb      	ldrb	r3, [r7, #19]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006fcc:	7cfb      	ldrb	r3, [r7, #19]
 8006fce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d02f      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fe2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fea:	4928      	ldr	r1, [pc, #160]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ff6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ffa:	d10d      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3304      	adds	r3, #4
 8007000:	2102      	movs	r1, #2
 8007002:	4618      	mov	r0, r3
 8007004:	f000 f844 	bl	8007090 <RCCEx_PLLSAI1_Config>
 8007008:	4603      	mov	r3, r0
 800700a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800700c:	7cfb      	ldrb	r3, [r7, #19]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d014      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007012:	7cfb      	ldrb	r3, [r7, #19]
 8007014:	74bb      	strb	r3, [r7, #18]
 8007016:	e011      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800701c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007020:	d10c      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3320      	adds	r3, #32
 8007026:	2102      	movs	r1, #2
 8007028:	4618      	mov	r0, r3
 800702a:	f000 f925 	bl	8007278 <RCCEx_PLLSAI2_Config>
 800702e:	4603      	mov	r3, r0
 8007030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007032:	7cfb      	ldrb	r3, [r7, #19]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007038:	7cfb      	ldrb	r3, [r7, #19]
 800703a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007048:	4b10      	ldr	r3, [pc, #64]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800704a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800704e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007056:	490d      	ldr	r1, [pc, #52]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007058:	4313      	orrs	r3, r2
 800705a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00b      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800706a:	4b08      	ldr	r3, [pc, #32]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800706c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007070:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800707a:	4904      	ldr	r1, [pc, #16]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800707c:	4313      	orrs	r3, r2
 800707e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007082:	7cbb      	ldrb	r3, [r7, #18]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40021000 	.word	0x40021000

08007090 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800709e:	4b75      	ldr	r3, [pc, #468]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d018      	beq.n	80070dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80070aa:	4b72      	ldr	r3, [pc, #456]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f003 0203 	and.w	r2, r3, #3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d10d      	bne.n	80070d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
       ||
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80070c2:	4b6c      	ldr	r3, [pc, #432]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	091b      	lsrs	r3, r3, #4
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
       ||
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d047      	beq.n	8007166 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	73fb      	strb	r3, [r7, #15]
 80070da:	e044      	b.n	8007166 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d018      	beq.n	8007116 <RCCEx_PLLSAI1_Config+0x86>
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d825      	bhi.n	8007134 <RCCEx_PLLSAI1_Config+0xa4>
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d002      	beq.n	80070f2 <RCCEx_PLLSAI1_Config+0x62>
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d009      	beq.n	8007104 <RCCEx_PLLSAI1_Config+0x74>
 80070f0:	e020      	b.n	8007134 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80070f2:	4b60      	ldr	r3, [pc, #384]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d11d      	bne.n	800713a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007102:	e01a      	b.n	800713a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007104:	4b5b      	ldr	r3, [pc, #364]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800710c:	2b00      	cmp	r3, #0
 800710e:	d116      	bne.n	800713e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007114:	e013      	b.n	800713e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007116:	4b57      	ldr	r3, [pc, #348]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10f      	bne.n	8007142 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007122:	4b54      	ldr	r3, [pc, #336]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007132:	e006      	b.n	8007142 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	73fb      	strb	r3, [r7, #15]
      break;
 8007138:	e004      	b.n	8007144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800713a:	bf00      	nop
 800713c:	e002      	b.n	8007144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800713e:	bf00      	nop
 8007140:	e000      	b.n	8007144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007142:	bf00      	nop
    }

    if(status == HAL_OK)
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10d      	bne.n	8007166 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800714a:	4b4a      	ldr	r3, [pc, #296]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6819      	ldr	r1, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	3b01      	subs	r3, #1
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	430b      	orrs	r3, r1
 8007160:	4944      	ldr	r1, [pc, #272]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007162:	4313      	orrs	r3, r2
 8007164:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d17d      	bne.n	8007268 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800716c:	4b41      	ldr	r3, [pc, #260]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a40      	ldr	r2, [pc, #256]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007172:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007178:	f7fc fa4a 	bl	8003610 <HAL_GetTick>
 800717c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800717e:	e009      	b.n	8007194 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007180:	f7fc fa46 	bl	8003610 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d902      	bls.n	8007194 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	73fb      	strb	r3, [r7, #15]
        break;
 8007192:	e005      	b.n	80071a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007194:	4b37      	ldr	r3, [pc, #220]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1ef      	bne.n	8007180 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d160      	bne.n	8007268 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d111      	bne.n	80071d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071ac:	4b31      	ldr	r3, [pc, #196]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80071b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6892      	ldr	r2, [r2, #8]
 80071bc:	0211      	lsls	r1, r2, #8
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	68d2      	ldr	r2, [r2, #12]
 80071c2:	0912      	lsrs	r2, r2, #4
 80071c4:	0452      	lsls	r2, r2, #17
 80071c6:	430a      	orrs	r2, r1
 80071c8:	492a      	ldr	r1, [pc, #168]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	610b      	str	r3, [r1, #16]
 80071ce:	e027      	b.n	8007220 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d112      	bne.n	80071fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071d6:	4b27      	ldr	r3, [pc, #156]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80071de:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6892      	ldr	r2, [r2, #8]
 80071e6:	0211      	lsls	r1, r2, #8
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	6912      	ldr	r2, [r2, #16]
 80071ec:	0852      	lsrs	r2, r2, #1
 80071ee:	3a01      	subs	r2, #1
 80071f0:	0552      	lsls	r2, r2, #21
 80071f2:	430a      	orrs	r2, r1
 80071f4:	491f      	ldr	r1, [pc, #124]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	610b      	str	r3, [r1, #16]
 80071fa:	e011      	b.n	8007220 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007204:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6892      	ldr	r2, [r2, #8]
 800720c:	0211      	lsls	r1, r2, #8
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6952      	ldr	r2, [r2, #20]
 8007212:	0852      	lsrs	r2, r2, #1
 8007214:	3a01      	subs	r2, #1
 8007216:	0652      	lsls	r2, r2, #25
 8007218:	430a      	orrs	r2, r1
 800721a:	4916      	ldr	r1, [pc, #88]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 800721c:	4313      	orrs	r3, r2
 800721e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007220:	4b14      	ldr	r3, [pc, #80]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a13      	ldr	r2, [pc, #76]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007226:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800722a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800722c:	f7fc f9f0 	bl	8003610 <HAL_GetTick>
 8007230:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007232:	e009      	b.n	8007248 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007234:	f7fc f9ec 	bl	8003610 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b02      	cmp	r3, #2
 8007240:	d902      	bls.n	8007248 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	73fb      	strb	r3, [r7, #15]
          break;
 8007246:	e005      	b.n	8007254 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007248:	4b0a      	ldr	r3, [pc, #40]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d0ef      	beq.n	8007234 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800725a:	4b06      	ldr	r3, [pc, #24]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	4904      	ldr	r1, [pc, #16]	@ (8007274 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007264:	4313      	orrs	r3, r2
 8007266:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007268:	7bfb      	ldrb	r3, [r7, #15]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40021000 	.word	0x40021000

08007278 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007286:	4b6a      	ldr	r3, [pc, #424]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d018      	beq.n	80072c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007292:	4b67      	ldr	r3, [pc, #412]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f003 0203 	and.w	r2, r3, #3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d10d      	bne.n	80072be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
       ||
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80072aa:	4b61      	ldr	r3, [pc, #388]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	091b      	lsrs	r3, r3, #4
 80072b0:	f003 0307 	and.w	r3, r3, #7
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
       ||
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d047      	beq.n	800734e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	73fb      	strb	r3, [r7, #15]
 80072c2:	e044      	b.n	800734e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d018      	beq.n	80072fe <RCCEx_PLLSAI2_Config+0x86>
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d825      	bhi.n	800731c <RCCEx_PLLSAI2_Config+0xa4>
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d002      	beq.n	80072da <RCCEx_PLLSAI2_Config+0x62>
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d009      	beq.n	80072ec <RCCEx_PLLSAI2_Config+0x74>
 80072d8:	e020      	b.n	800731c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80072da:	4b55      	ldr	r3, [pc, #340]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d11d      	bne.n	8007322 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072ea:	e01a      	b.n	8007322 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80072ec:	4b50      	ldr	r3, [pc, #320]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d116      	bne.n	8007326 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072fc:	e013      	b.n	8007326 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80072fe:	4b4c      	ldr	r3, [pc, #304]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10f      	bne.n	800732a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800730a:	4b49      	ldr	r3, [pc, #292]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800731a:	e006      	b.n	800732a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	73fb      	strb	r3, [r7, #15]
      break;
 8007320:	e004      	b.n	800732c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007322:	bf00      	nop
 8007324:	e002      	b.n	800732c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007326:	bf00      	nop
 8007328:	e000      	b.n	800732c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800732a:	bf00      	nop
    }

    if(status == HAL_OK)
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10d      	bne.n	800734e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007332:	4b3f      	ldr	r3, [pc, #252]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6819      	ldr	r1, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	3b01      	subs	r3, #1
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	430b      	orrs	r3, r1
 8007348:	4939      	ldr	r1, [pc, #228]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 800734a:	4313      	orrs	r3, r2
 800734c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d167      	bne.n	8007424 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007354:	4b36      	ldr	r3, [pc, #216]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a35      	ldr	r2, [pc, #212]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 800735a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800735e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007360:	f7fc f956 	bl	8003610 <HAL_GetTick>
 8007364:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007366:	e009      	b.n	800737c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007368:	f7fc f952 	bl	8003610 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d902      	bls.n	800737c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	73fb      	strb	r3, [r7, #15]
        break;
 800737a:	e005      	b.n	8007388 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800737c:	4b2c      	ldr	r3, [pc, #176]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1ef      	bne.n	8007368 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d14a      	bne.n	8007424 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d111      	bne.n	80073b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007394:	4b26      	ldr	r3, [pc, #152]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800739c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6892      	ldr	r2, [r2, #8]
 80073a4:	0211      	lsls	r1, r2, #8
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	68d2      	ldr	r2, [r2, #12]
 80073aa:	0912      	lsrs	r2, r2, #4
 80073ac:	0452      	lsls	r2, r2, #17
 80073ae:	430a      	orrs	r2, r1
 80073b0:	491f      	ldr	r1, [pc, #124]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	614b      	str	r3, [r1, #20]
 80073b6:	e011      	b.n	80073dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80073b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80073c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6892      	ldr	r2, [r2, #8]
 80073c8:	0211      	lsls	r1, r2, #8
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6912      	ldr	r2, [r2, #16]
 80073ce:	0852      	lsrs	r2, r2, #1
 80073d0:	3a01      	subs	r2, #1
 80073d2:	0652      	lsls	r2, r2, #25
 80073d4:	430a      	orrs	r2, r1
 80073d6:	4916      	ldr	r1, [pc, #88]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80073dc:	4b14      	ldr	r3, [pc, #80]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a13      	ldr	r2, [pc, #76]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e8:	f7fc f912 	bl	8003610 <HAL_GetTick>
 80073ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80073ee:	e009      	b.n	8007404 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80073f0:	f7fc f90e 	bl	8003610 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d902      	bls.n	8007404 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	73fb      	strb	r3, [r7, #15]
          break;
 8007402:	e005      	b.n	8007410 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007404:	4b0a      	ldr	r3, [pc, #40]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0ef      	beq.n	80073f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d106      	bne.n	8007424 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007416:	4b06      	ldr	r3, [pc, #24]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007418:	695a      	ldr	r2, [r3, #20]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	4904      	ldr	r1, [pc, #16]	@ (8007430 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007420:	4313      	orrs	r3, r2
 8007422:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	40021000 	.word	0x40021000

08007434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e049      	b.n	80074da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f841 	bl	80074e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3304      	adds	r3, #4
 8007470:	4619      	mov	r1, r3
 8007472:	4610      	mov	r0, r2
 8007474:	f000 f9da 	bl	800782c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
	...

080074f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	d001      	beq.n	8007510 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e04f      	b.n	80075b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0201 	orr.w	r2, r2, #1
 8007526:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a23      	ldr	r2, [pc, #140]	@ (80075bc <HAL_TIM_Base_Start_IT+0xc4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d01d      	beq.n	800756e <HAL_TIM_Base_Start_IT+0x76>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753a:	d018      	beq.n	800756e <HAL_TIM_Base_Start_IT+0x76>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1f      	ldr	r2, [pc, #124]	@ (80075c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d013      	beq.n	800756e <HAL_TIM_Base_Start_IT+0x76>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a1e      	ldr	r2, [pc, #120]	@ (80075c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00e      	beq.n	800756e <HAL_TIM_Base_Start_IT+0x76>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a1c      	ldr	r2, [pc, #112]	@ (80075c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d009      	beq.n	800756e <HAL_TIM_Base_Start_IT+0x76>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a1b      	ldr	r2, [pc, #108]	@ (80075cc <HAL_TIM_Base_Start_IT+0xd4>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d004      	beq.n	800756e <HAL_TIM_Base_Start_IT+0x76>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a19      	ldr	r2, [pc, #100]	@ (80075d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d115      	bne.n	800759a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	4b17      	ldr	r3, [pc, #92]	@ (80075d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007576:	4013      	ands	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b06      	cmp	r3, #6
 800757e:	d015      	beq.n	80075ac <HAL_TIM_Base_Start_IT+0xb4>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007586:	d011      	beq.n	80075ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0201 	orr.w	r2, r2, #1
 8007596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007598:	e008      	b.n	80075ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0201 	orr.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	e000      	b.n	80075ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	40012c00 	.word	0x40012c00
 80075c0:	40000400 	.word	0x40000400
 80075c4:	40000800 	.word	0x40000800
 80075c8:	40000c00 	.word	0x40000c00
 80075cc:	40013400 	.word	0x40013400
 80075d0:	40014000 	.word	0x40014000
 80075d4:	00010007 	.word	0x00010007

080075d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d020      	beq.n	800763c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d01b      	beq.n	800763c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0202 	mvn.w	r2, #2
 800760c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f8e4 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 8007628:	e005      	b.n	8007636 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f8d6 	bl	80077dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f8e7 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f003 0304 	and.w	r3, r3, #4
 8007642:	2b00      	cmp	r3, #0
 8007644:	d020      	beq.n	8007688 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01b      	beq.n	8007688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f06f 0204 	mvn.w	r2, #4
 8007658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2202      	movs	r2, #2
 800765e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f8be 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 8007674:	e005      	b.n	8007682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f8b0 	bl	80077dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f8c1 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f003 0308 	and.w	r3, r3, #8
 800768e:	2b00      	cmp	r3, #0
 8007690:	d020      	beq.n	80076d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f003 0308 	and.w	r3, r3, #8
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01b      	beq.n	80076d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f06f 0208 	mvn.w	r2, #8
 80076a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2204      	movs	r2, #4
 80076aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f898 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 80076c0:	e005      	b.n	80076ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f88a 	bl	80077dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f89b 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f003 0310 	and.w	r3, r3, #16
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d020      	beq.n	8007720 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f003 0310 	and.w	r3, r3, #16
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01b      	beq.n	8007720 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f06f 0210 	mvn.w	r2, #16
 80076f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2208      	movs	r2, #8
 80076f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f872 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 800770c:	e005      	b.n	800771a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f864 	bl	80077dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f875 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00c      	beq.n	8007744 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d007      	beq.n	8007744 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f06f 0201 	mvn.w	r2, #1
 800773c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7f9 fdba 	bl	80012b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00c      	beq.n	8007768 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007754:	2b00      	cmp	r3, #0
 8007756:	d007      	beq.n	8007768 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f906 	bl	8007974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00c      	beq.n	800778c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f8fe 	bl	8007988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00c      	beq.n	80077b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800779c:	2b00      	cmp	r3, #0
 800779e:	d007      	beq.n	80077b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f834 	bl	8007818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f003 0320 	and.w	r3, r3, #32
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00c      	beq.n	80077d4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f003 0320 	and.w	r3, r3, #32
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d007      	beq.n	80077d4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0220 	mvn.w	r2, #32
 80077cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f8c6 	bl	8007960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a40      	ldr	r2, [pc, #256]	@ (8007940 <TIM_Base_SetConfig+0x114>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d013      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800784a:	d00f      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a3d      	ldr	r2, [pc, #244]	@ (8007944 <TIM_Base_SetConfig+0x118>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00b      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a3c      	ldr	r2, [pc, #240]	@ (8007948 <TIM_Base_SetConfig+0x11c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d007      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a3b      	ldr	r2, [pc, #236]	@ (800794c <TIM_Base_SetConfig+0x120>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d003      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a3a      	ldr	r2, [pc, #232]	@ (8007950 <TIM_Base_SetConfig+0x124>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d108      	bne.n	800787e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a2f      	ldr	r2, [pc, #188]	@ (8007940 <TIM_Base_SetConfig+0x114>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d01f      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800788c:	d01b      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a2c      	ldr	r2, [pc, #176]	@ (8007944 <TIM_Base_SetConfig+0x118>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d017      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a2b      	ldr	r2, [pc, #172]	@ (8007948 <TIM_Base_SetConfig+0x11c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d013      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a2a      	ldr	r2, [pc, #168]	@ (800794c <TIM_Base_SetConfig+0x120>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00f      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a29      	ldr	r2, [pc, #164]	@ (8007950 <TIM_Base_SetConfig+0x124>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00b      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a28      	ldr	r2, [pc, #160]	@ (8007954 <TIM_Base_SetConfig+0x128>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d007      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a27      	ldr	r2, [pc, #156]	@ (8007958 <TIM_Base_SetConfig+0x12c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d003      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a26      	ldr	r2, [pc, #152]	@ (800795c <TIM_Base_SetConfig+0x130>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d108      	bne.n	80078d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a10      	ldr	r2, [pc, #64]	@ (8007940 <TIM_Base_SetConfig+0x114>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00f      	beq.n	8007924 <TIM_Base_SetConfig+0xf8>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a12      	ldr	r2, [pc, #72]	@ (8007950 <TIM_Base_SetConfig+0x124>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d00b      	beq.n	8007924 <TIM_Base_SetConfig+0xf8>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a11      	ldr	r2, [pc, #68]	@ (8007954 <TIM_Base_SetConfig+0x128>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d007      	beq.n	8007924 <TIM_Base_SetConfig+0xf8>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a10      	ldr	r2, [pc, #64]	@ (8007958 <TIM_Base_SetConfig+0x12c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d003      	beq.n	8007924 <TIM_Base_SetConfig+0xf8>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a0f      	ldr	r2, [pc, #60]	@ (800795c <TIM_Base_SetConfig+0x130>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d103      	bne.n	800792c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	615a      	str	r2, [r3, #20]
}
 8007932:	bf00      	nop
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	40012c00 	.word	0x40012c00
 8007944:	40000400 	.word	0x40000400
 8007948:	40000800 	.word	0x40000800
 800794c:	40000c00 	.word	0x40000c00
 8007950:	40013400 	.word	0x40013400
 8007954:	40014000 	.word	0x40014000
 8007958:	40014400 	.word	0x40014400
 800795c:	40014800 	.word	0x40014800

08007960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e040      	b.n	8007a30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f83a 	bl	8007a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2224      	movs	r2, #36	@ 0x24
 80079c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f022 0201 	bic.w	r2, r2, #1
 80079d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fc3c 	bl	8008260 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f981 	bl	8007cf0 <UART_SetConfig>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d101      	bne.n	80079f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e01b      	b.n	8007a30 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	689a      	ldr	r2, [r3, #8]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0201 	orr.w	r2, r2, #1
 8007a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fcbb 	bl	80083a4 <UART_CheckIdleState>
 8007a2e:	4603      	mov	r3, r0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	@ 0x28
 8007a50:	af02      	add	r7, sp, #8
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a60:	2b20      	cmp	r3, #32
 8007a62:	d177      	bne.n	8007b54 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <HAL_UART_Transmit+0x24>
 8007a6a:	88fb      	ldrh	r3, [r7, #6]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e070      	b.n	8007b56 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2221      	movs	r2, #33	@ 0x21
 8007a80:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a82:	f7fb fdc5 	bl	8003610 <HAL_GetTick>
 8007a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	88fa      	ldrh	r2, [r7, #6]
 8007a8c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	88fa      	ldrh	r2, [r7, #6]
 8007a94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa0:	d108      	bne.n	8007ab4 <HAL_UART_Transmit+0x68>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d104      	bne.n	8007ab4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	61bb      	str	r3, [r7, #24]
 8007ab2:	e003      	b.n	8007abc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007abc:	e02f      	b.n	8007b1e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2180      	movs	r1, #128	@ 0x80
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 fd13 	bl	80084f4 <UART_WaitOnFlagUntilTimeout>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d004      	beq.n	8007ade <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e03b      	b.n	8007b56 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10b      	bne.n	8007afc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	881a      	ldrh	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007af0:	b292      	uxth	r2, r2
 8007af2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	3302      	adds	r3, #2
 8007af8:	61bb      	str	r3, [r7, #24]
 8007afa:	e007      	b.n	8007b0c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	781a      	ldrb	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	3b01      	subs	r3, #1
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1c9      	bne.n	8007abe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2200      	movs	r2, #0
 8007b32:	2140      	movs	r1, #64	@ 0x40
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 fcdd 	bl	80084f4 <UART_WaitOnFlagUntilTimeout>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d004      	beq.n	8007b4a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2220      	movs	r2, #32
 8007b44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e005      	b.n	8007b56 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	e000      	b.n	8007b56 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007b54:	2302      	movs	r3, #2
  }
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3720      	adds	r7, #32
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b08a      	sub	sp, #40	@ 0x28
 8007b62:	af02      	add	r7, sp, #8
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	603b      	str	r3, [r7, #0]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	f040 80b6 	bne.w	8007ce6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <HAL_UART_Receive+0x28>
 8007b80:	88fb      	ldrh	r3, [r7, #6]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e0ae      	b.n	8007ce8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2222      	movs	r2, #34	@ 0x22
 8007b96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ba0:	f7fb fd36 	bl	8003610 <HAL_GetTick>
 8007ba4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	88fa      	ldrh	r2, [r7, #6]
 8007baa:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	88fa      	ldrh	r2, [r7, #6]
 8007bb2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bbe:	d10e      	bne.n	8007bde <HAL_UART_Receive+0x80>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d105      	bne.n	8007bd4 <HAL_UART_Receive+0x76>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007bce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007bd2:	e02d      	b.n	8007c30 <HAL_UART_Receive+0xd2>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	22ff      	movs	r2, #255	@ 0xff
 8007bd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007bdc:	e028      	b.n	8007c30 <HAL_UART_Receive+0xd2>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10d      	bne.n	8007c02 <HAL_UART_Receive+0xa4>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d104      	bne.n	8007bf8 <HAL_UART_Receive+0x9a>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	22ff      	movs	r2, #255	@ 0xff
 8007bf2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007bf6:	e01b      	b.n	8007c30 <HAL_UART_Receive+0xd2>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	227f      	movs	r2, #127	@ 0x7f
 8007bfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c00:	e016      	b.n	8007c30 <HAL_UART_Receive+0xd2>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c0a:	d10d      	bne.n	8007c28 <HAL_UART_Receive+0xca>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <HAL_UART_Receive+0xc0>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	227f      	movs	r2, #127	@ 0x7f
 8007c18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c1c:	e008      	b.n	8007c30 <HAL_UART_Receive+0xd2>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	223f      	movs	r2, #63	@ 0x3f
 8007c22:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c26:	e003      	b.n	8007c30 <HAL_UART_Receive+0xd2>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c36:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c40:	d108      	bne.n	8007c54 <HAL_UART_Receive+0xf6>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d104      	bne.n	8007c54 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	61bb      	str	r3, [r7, #24]
 8007c52:	e003      	b.n	8007c5c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007c5c:	e037      	b.n	8007cce <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2200      	movs	r2, #0
 8007c66:	2120      	movs	r1, #32
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 fc43 	bl	80084f4 <UART_WaitOnFlagUntilTimeout>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2220      	movs	r2, #32
 8007c78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e033      	b.n	8007ce8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10c      	bne.n	8007ca0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	8a7b      	ldrh	r3, [r7, #18]
 8007c90:	4013      	ands	r3, r2
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	3302      	adds	r3, #2
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	e00d      	b.n	8007cbc <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	8a7b      	ldrh	r3, [r7, #18]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	4013      	ands	r3, r2
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1c1      	bne.n	8007c5e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e000      	b.n	8007ce8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007ce6:	2302      	movs	r3, #2
  }
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3720      	adds	r7, #32
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cf4:	b08a      	sub	sp, #40	@ 0x28
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	4ba4      	ldr	r3, [pc, #656]	@ (8007fb0 <UART_SetConfig+0x2c0>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	6812      	ldr	r2, [r2, #0]
 8007d26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a99      	ldr	r2, [pc, #612]	@ (8007fb4 <UART_SetConfig+0x2c4>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d004      	beq.n	8007d5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a90      	ldr	r2, [pc, #576]	@ (8007fb8 <UART_SetConfig+0x2c8>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d126      	bne.n	8007dc8 <UART_SetConfig+0xd8>
 8007d7a:	4b90      	ldr	r3, [pc, #576]	@ (8007fbc <UART_SetConfig+0x2cc>)
 8007d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d80:	f003 0303 	and.w	r3, r3, #3
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d81b      	bhi.n	8007dc0 <UART_SetConfig+0xd0>
 8007d88:	a201      	add	r2, pc, #4	@ (adr r2, 8007d90 <UART_SetConfig+0xa0>)
 8007d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8e:	bf00      	nop
 8007d90:	08007da1 	.word	0x08007da1
 8007d94:	08007db1 	.word	0x08007db1
 8007d98:	08007da9 	.word	0x08007da9
 8007d9c:	08007db9 	.word	0x08007db9
 8007da0:	2301      	movs	r3, #1
 8007da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007da6:	e116      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007da8:	2302      	movs	r3, #2
 8007daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dae:	e112      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007db0:	2304      	movs	r3, #4
 8007db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007db6:	e10e      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007db8:	2308      	movs	r3, #8
 8007dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dbe:	e10a      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dc6:	e106      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a7c      	ldr	r2, [pc, #496]	@ (8007fc0 <UART_SetConfig+0x2d0>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d138      	bne.n	8007e44 <UART_SetConfig+0x154>
 8007dd2:	4b7a      	ldr	r3, [pc, #488]	@ (8007fbc <UART_SetConfig+0x2cc>)
 8007dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dd8:	f003 030c 	and.w	r3, r3, #12
 8007ddc:	2b0c      	cmp	r3, #12
 8007dde:	d82d      	bhi.n	8007e3c <UART_SetConfig+0x14c>
 8007de0:	a201      	add	r2, pc, #4	@ (adr r2, 8007de8 <UART_SetConfig+0xf8>)
 8007de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de6:	bf00      	nop
 8007de8:	08007e1d 	.word	0x08007e1d
 8007dec:	08007e3d 	.word	0x08007e3d
 8007df0:	08007e3d 	.word	0x08007e3d
 8007df4:	08007e3d 	.word	0x08007e3d
 8007df8:	08007e2d 	.word	0x08007e2d
 8007dfc:	08007e3d 	.word	0x08007e3d
 8007e00:	08007e3d 	.word	0x08007e3d
 8007e04:	08007e3d 	.word	0x08007e3d
 8007e08:	08007e25 	.word	0x08007e25
 8007e0c:	08007e3d 	.word	0x08007e3d
 8007e10:	08007e3d 	.word	0x08007e3d
 8007e14:	08007e3d 	.word	0x08007e3d
 8007e18:	08007e35 	.word	0x08007e35
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e22:	e0d8      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007e24:	2302      	movs	r3, #2
 8007e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e2a:	e0d4      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e32:	e0d0      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007e34:	2308      	movs	r3, #8
 8007e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e3a:	e0cc      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007e3c:	2310      	movs	r3, #16
 8007e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e42:	e0c8      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a5e      	ldr	r2, [pc, #376]	@ (8007fc4 <UART_SetConfig+0x2d4>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d125      	bne.n	8007e9a <UART_SetConfig+0x1aa>
 8007e4e:	4b5b      	ldr	r3, [pc, #364]	@ (8007fbc <UART_SetConfig+0x2cc>)
 8007e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e58:	2b30      	cmp	r3, #48	@ 0x30
 8007e5a:	d016      	beq.n	8007e8a <UART_SetConfig+0x19a>
 8007e5c:	2b30      	cmp	r3, #48	@ 0x30
 8007e5e:	d818      	bhi.n	8007e92 <UART_SetConfig+0x1a2>
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d00a      	beq.n	8007e7a <UART_SetConfig+0x18a>
 8007e64:	2b20      	cmp	r3, #32
 8007e66:	d814      	bhi.n	8007e92 <UART_SetConfig+0x1a2>
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <UART_SetConfig+0x182>
 8007e6c:	2b10      	cmp	r3, #16
 8007e6e:	d008      	beq.n	8007e82 <UART_SetConfig+0x192>
 8007e70:	e00f      	b.n	8007e92 <UART_SetConfig+0x1a2>
 8007e72:	2300      	movs	r3, #0
 8007e74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e78:	e0ad      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e80:	e0a9      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007e82:	2304      	movs	r3, #4
 8007e84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e88:	e0a5      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007e8a:	2308      	movs	r3, #8
 8007e8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e90:	e0a1      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007e92:	2310      	movs	r3, #16
 8007e94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e98:	e09d      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8007fc8 <UART_SetConfig+0x2d8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d125      	bne.n	8007ef0 <UART_SetConfig+0x200>
 8007ea4:	4b45      	ldr	r3, [pc, #276]	@ (8007fbc <UART_SetConfig+0x2cc>)
 8007ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eaa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007eae:	2bc0      	cmp	r3, #192	@ 0xc0
 8007eb0:	d016      	beq.n	8007ee0 <UART_SetConfig+0x1f0>
 8007eb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007eb4:	d818      	bhi.n	8007ee8 <UART_SetConfig+0x1f8>
 8007eb6:	2b80      	cmp	r3, #128	@ 0x80
 8007eb8:	d00a      	beq.n	8007ed0 <UART_SetConfig+0x1e0>
 8007eba:	2b80      	cmp	r3, #128	@ 0x80
 8007ebc:	d814      	bhi.n	8007ee8 <UART_SetConfig+0x1f8>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d002      	beq.n	8007ec8 <UART_SetConfig+0x1d8>
 8007ec2:	2b40      	cmp	r3, #64	@ 0x40
 8007ec4:	d008      	beq.n	8007ed8 <UART_SetConfig+0x1e8>
 8007ec6:	e00f      	b.n	8007ee8 <UART_SetConfig+0x1f8>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ece:	e082      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ed6:	e07e      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007ed8:	2304      	movs	r3, #4
 8007eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ede:	e07a      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007ee0:	2308      	movs	r3, #8
 8007ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ee6:	e076      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007ee8:	2310      	movs	r3, #16
 8007eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eee:	e072      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a35      	ldr	r2, [pc, #212]	@ (8007fcc <UART_SetConfig+0x2dc>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d12a      	bne.n	8007f50 <UART_SetConfig+0x260>
 8007efa:	4b30      	ldr	r3, [pc, #192]	@ (8007fbc <UART_SetConfig+0x2cc>)
 8007efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f08:	d01a      	beq.n	8007f40 <UART_SetConfig+0x250>
 8007f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f0e:	d81b      	bhi.n	8007f48 <UART_SetConfig+0x258>
 8007f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f14:	d00c      	beq.n	8007f30 <UART_SetConfig+0x240>
 8007f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f1a:	d815      	bhi.n	8007f48 <UART_SetConfig+0x258>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <UART_SetConfig+0x238>
 8007f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f24:	d008      	beq.n	8007f38 <UART_SetConfig+0x248>
 8007f26:	e00f      	b.n	8007f48 <UART_SetConfig+0x258>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f2e:	e052      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007f30:	2302      	movs	r3, #2
 8007f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f36:	e04e      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007f38:	2304      	movs	r3, #4
 8007f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f3e:	e04a      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007f40:	2308      	movs	r3, #8
 8007f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f46:	e046      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007f48:	2310      	movs	r3, #16
 8007f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f4e:	e042      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a17      	ldr	r2, [pc, #92]	@ (8007fb4 <UART_SetConfig+0x2c4>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d13a      	bne.n	8007fd0 <UART_SetConfig+0x2e0>
 8007f5a:	4b18      	ldr	r3, [pc, #96]	@ (8007fbc <UART_SetConfig+0x2cc>)
 8007f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f68:	d01a      	beq.n	8007fa0 <UART_SetConfig+0x2b0>
 8007f6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f6e:	d81b      	bhi.n	8007fa8 <UART_SetConfig+0x2b8>
 8007f70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f74:	d00c      	beq.n	8007f90 <UART_SetConfig+0x2a0>
 8007f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f7a:	d815      	bhi.n	8007fa8 <UART_SetConfig+0x2b8>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <UART_SetConfig+0x298>
 8007f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f84:	d008      	beq.n	8007f98 <UART_SetConfig+0x2a8>
 8007f86:	e00f      	b.n	8007fa8 <UART_SetConfig+0x2b8>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f8e:	e022      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007f90:	2302      	movs	r3, #2
 8007f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f96:	e01e      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007f98:	2304      	movs	r3, #4
 8007f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f9e:	e01a      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007fa0:	2308      	movs	r3, #8
 8007fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fa6:	e016      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007fa8:	2310      	movs	r3, #16
 8007faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fae:	e012      	b.n	8007fd6 <UART_SetConfig+0x2e6>
 8007fb0:	efff69f3 	.word	0xefff69f3
 8007fb4:	40008000 	.word	0x40008000
 8007fb8:	40013800 	.word	0x40013800
 8007fbc:	40021000 	.word	0x40021000
 8007fc0:	40004400 	.word	0x40004400
 8007fc4:	40004800 	.word	0x40004800
 8007fc8:	40004c00 	.word	0x40004c00
 8007fcc:	40005000 	.word	0x40005000
 8007fd0:	2310      	movs	r3, #16
 8007fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a9f      	ldr	r2, [pc, #636]	@ (8008258 <UART_SetConfig+0x568>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d17a      	bne.n	80080d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007fe4:	2b08      	cmp	r3, #8
 8007fe6:	d824      	bhi.n	8008032 <UART_SetConfig+0x342>
 8007fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff0 <UART_SetConfig+0x300>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008015 	.word	0x08008015
 8007ff4:	08008033 	.word	0x08008033
 8007ff8:	0800801d 	.word	0x0800801d
 8007ffc:	08008033 	.word	0x08008033
 8008000:	08008023 	.word	0x08008023
 8008004:	08008033 	.word	0x08008033
 8008008:	08008033 	.word	0x08008033
 800800c:	08008033 	.word	0x08008033
 8008010:	0800802b 	.word	0x0800802b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008014:	f7fe fc94 	bl	8006940 <HAL_RCC_GetPCLK1Freq>
 8008018:	61f8      	str	r0, [r7, #28]
        break;
 800801a:	e010      	b.n	800803e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800801c:	4b8f      	ldr	r3, [pc, #572]	@ (800825c <UART_SetConfig+0x56c>)
 800801e:	61fb      	str	r3, [r7, #28]
        break;
 8008020:	e00d      	b.n	800803e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008022:	f7fe fbf5 	bl	8006810 <HAL_RCC_GetSysClockFreq>
 8008026:	61f8      	str	r0, [r7, #28]
        break;
 8008028:	e009      	b.n	800803e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800802a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800802e:	61fb      	str	r3, [r7, #28]
        break;
 8008030:	e005      	b.n	800803e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800803c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 80fb 	beq.w	800823c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	4613      	mov	r3, r2
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	4413      	add	r3, r2
 8008050:	69fa      	ldr	r2, [r7, #28]
 8008052:	429a      	cmp	r2, r3
 8008054:	d305      	bcc.n	8008062 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800805c:	69fa      	ldr	r2, [r7, #28]
 800805e:	429a      	cmp	r2, r3
 8008060:	d903      	bls.n	800806a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008068:	e0e8      	b.n	800823c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	2200      	movs	r2, #0
 800806e:	461c      	mov	r4, r3
 8008070:	4615      	mov	r5, r2
 8008072:	f04f 0200 	mov.w	r2, #0
 8008076:	f04f 0300 	mov.w	r3, #0
 800807a:	022b      	lsls	r3, r5, #8
 800807c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008080:	0222      	lsls	r2, r4, #8
 8008082:	68f9      	ldr	r1, [r7, #12]
 8008084:	6849      	ldr	r1, [r1, #4]
 8008086:	0849      	lsrs	r1, r1, #1
 8008088:	2000      	movs	r0, #0
 800808a:	4688      	mov	r8, r1
 800808c:	4681      	mov	r9, r0
 800808e:	eb12 0a08 	adds.w	sl, r2, r8
 8008092:	eb43 0b09 	adc.w	fp, r3, r9
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	603b      	str	r3, [r7, #0]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080a4:	4650      	mov	r0, sl
 80080a6:	4659      	mov	r1, fp
 80080a8:	f7f8 fdfe 	bl	8000ca8 <__aeabi_uldivmod>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	4613      	mov	r3, r2
 80080b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080ba:	d308      	bcc.n	80080ce <UART_SetConfig+0x3de>
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080c2:	d204      	bcs.n	80080ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	60da      	str	r2, [r3, #12]
 80080cc:	e0b6      	b.n	800823c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80080d4:	e0b2      	b.n	800823c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080de:	d15e      	bne.n	800819e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80080e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80080e4:	2b08      	cmp	r3, #8
 80080e6:	d828      	bhi.n	800813a <UART_SetConfig+0x44a>
 80080e8:	a201      	add	r2, pc, #4	@ (adr r2, 80080f0 <UART_SetConfig+0x400>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008115 	.word	0x08008115
 80080f4:	0800811d 	.word	0x0800811d
 80080f8:	08008125 	.word	0x08008125
 80080fc:	0800813b 	.word	0x0800813b
 8008100:	0800812b 	.word	0x0800812b
 8008104:	0800813b 	.word	0x0800813b
 8008108:	0800813b 	.word	0x0800813b
 800810c:	0800813b 	.word	0x0800813b
 8008110:	08008133 	.word	0x08008133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008114:	f7fe fc14 	bl	8006940 <HAL_RCC_GetPCLK1Freq>
 8008118:	61f8      	str	r0, [r7, #28]
        break;
 800811a:	e014      	b.n	8008146 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800811c:	f7fe fc26 	bl	800696c <HAL_RCC_GetPCLK2Freq>
 8008120:	61f8      	str	r0, [r7, #28]
        break;
 8008122:	e010      	b.n	8008146 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008124:	4b4d      	ldr	r3, [pc, #308]	@ (800825c <UART_SetConfig+0x56c>)
 8008126:	61fb      	str	r3, [r7, #28]
        break;
 8008128:	e00d      	b.n	8008146 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800812a:	f7fe fb71 	bl	8006810 <HAL_RCC_GetSysClockFreq>
 800812e:	61f8      	str	r0, [r7, #28]
        break;
 8008130:	e009      	b.n	8008146 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008136:	61fb      	str	r3, [r7, #28]
        break;
 8008138:	e005      	b.n	8008146 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008144:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d077      	beq.n	800823c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	005a      	lsls	r2, r3, #1
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	085b      	lsrs	r3, r3, #1
 8008156:	441a      	add	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008160:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	2b0f      	cmp	r3, #15
 8008166:	d916      	bls.n	8008196 <UART_SetConfig+0x4a6>
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800816e:	d212      	bcs.n	8008196 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	b29b      	uxth	r3, r3
 8008174:	f023 030f 	bic.w	r3, r3, #15
 8008178:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	085b      	lsrs	r3, r3, #1
 800817e:	b29b      	uxth	r3, r3
 8008180:	f003 0307 	and.w	r3, r3, #7
 8008184:	b29a      	uxth	r2, r3
 8008186:	8afb      	ldrh	r3, [r7, #22]
 8008188:	4313      	orrs	r3, r2
 800818a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	8afa      	ldrh	r2, [r7, #22]
 8008192:	60da      	str	r2, [r3, #12]
 8008194:	e052      	b.n	800823c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800819c:	e04e      	b.n	800823c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800819e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80081a2:	2b08      	cmp	r3, #8
 80081a4:	d827      	bhi.n	80081f6 <UART_SetConfig+0x506>
 80081a6:	a201      	add	r2, pc, #4	@ (adr r2, 80081ac <UART_SetConfig+0x4bc>)
 80081a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ac:	080081d1 	.word	0x080081d1
 80081b0:	080081d9 	.word	0x080081d9
 80081b4:	080081e1 	.word	0x080081e1
 80081b8:	080081f7 	.word	0x080081f7
 80081bc:	080081e7 	.word	0x080081e7
 80081c0:	080081f7 	.word	0x080081f7
 80081c4:	080081f7 	.word	0x080081f7
 80081c8:	080081f7 	.word	0x080081f7
 80081cc:	080081ef 	.word	0x080081ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081d0:	f7fe fbb6 	bl	8006940 <HAL_RCC_GetPCLK1Freq>
 80081d4:	61f8      	str	r0, [r7, #28]
        break;
 80081d6:	e014      	b.n	8008202 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081d8:	f7fe fbc8 	bl	800696c <HAL_RCC_GetPCLK2Freq>
 80081dc:	61f8      	str	r0, [r7, #28]
        break;
 80081de:	e010      	b.n	8008202 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081e0:	4b1e      	ldr	r3, [pc, #120]	@ (800825c <UART_SetConfig+0x56c>)
 80081e2:	61fb      	str	r3, [r7, #28]
        break;
 80081e4:	e00d      	b.n	8008202 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081e6:	f7fe fb13 	bl	8006810 <HAL_RCC_GetSysClockFreq>
 80081ea:	61f8      	str	r0, [r7, #28]
        break;
 80081ec:	e009      	b.n	8008202 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081f2:	61fb      	str	r3, [r7, #28]
        break;
 80081f4:	e005      	b.n	8008202 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008200:	bf00      	nop
    }

    if (pclk != 0U)
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d019      	beq.n	800823c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	085a      	lsrs	r2, r3, #1
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	441a      	add	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	fbb2 f3f3 	udiv	r3, r2, r3
 800821a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	2b0f      	cmp	r3, #15
 8008220:	d909      	bls.n	8008236 <UART_SetConfig+0x546>
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008228:	d205      	bcs.n	8008236 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	b29a      	uxth	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	60da      	str	r2, [r3, #12]
 8008234:	e002      	b.n	800823c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008248:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800824c:	4618      	mov	r0, r3
 800824e:	3728      	adds	r7, #40	@ 0x28
 8008250:	46bd      	mov	sp, r7
 8008252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008256:	bf00      	nop
 8008258:	40008000 	.word	0x40008000
 800825c:	00f42400 	.word	0x00f42400

08008260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00a      	beq.n	800828a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b0:	f003 0302 	and.w	r3, r3, #2
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00a      	beq.n	80082ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d2:	f003 0304 	and.w	r3, r3, #4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f4:	f003 0310 	and.w	r3, r3, #16
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00a      	beq.n	8008312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01a      	beq.n	8008376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800835e:	d10a      	bne.n	8008376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	605a      	str	r2, [r3, #4]
  }
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b098      	sub	sp, #96	@ 0x60
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083b4:	f7fb f92c 	bl	8003610 <HAL_GetTick>
 80083b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0308 	and.w	r3, r3, #8
 80083c4:	2b08      	cmp	r3, #8
 80083c6:	d12e      	bne.n	8008426 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083d0:	2200      	movs	r2, #0
 80083d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f88c 	bl	80084f4 <UART_WaitOnFlagUntilTimeout>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d021      	beq.n	8008426 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ea:	e853 3f00 	ldrex	r3, [r3]
 80083ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008400:	647b      	str	r3, [r7, #68]	@ 0x44
 8008402:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008404:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008408:	e841 2300 	strex	r3, r2, [r1]
 800840c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800840e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e6      	bne.n	80083e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2220      	movs	r2, #32
 8008418:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e062      	b.n	80084ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0304 	and.w	r3, r3, #4
 8008430:	2b04      	cmp	r3, #4
 8008432:	d149      	bne.n	80084c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008434:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800843c:	2200      	movs	r2, #0
 800843e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f856 	bl	80084f4 <UART_WaitOnFlagUntilTimeout>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d03c      	beq.n	80084c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008456:	e853 3f00 	ldrex	r3, [r3]
 800845a:	623b      	str	r3, [r7, #32]
   return(result);
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	461a      	mov	r2, r3
 800846a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800846c:	633b      	str	r3, [r7, #48]	@ 0x30
 800846e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008470:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008474:	e841 2300 	strex	r3, r2, [r1]
 8008478:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800847a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1e6      	bne.n	800844e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3308      	adds	r3, #8
 8008486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 0301 	bic.w	r3, r3, #1
 8008496:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084a0:	61fa      	str	r2, [r7, #28]
 80084a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	69b9      	ldr	r1, [r7, #24]
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	617b      	str	r3, [r7, #20]
   return(result);
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e5      	bne.n	8008480 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2220      	movs	r2, #32
 80084b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e011      	b.n	80084ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2220      	movs	r2, #32
 80084cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2220      	movs	r2, #32
 80084d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3758      	adds	r7, #88	@ 0x58
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	4613      	mov	r3, r2
 8008502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008504:	e049      	b.n	800859a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850c:	d045      	beq.n	800859a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800850e:	f7fb f87f 	bl	8003610 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	429a      	cmp	r2, r3
 800851c:	d302      	bcc.n	8008524 <UART_WaitOnFlagUntilTimeout+0x30>
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e048      	b.n	80085ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	2b00      	cmp	r3, #0
 8008534:	d031      	beq.n	800859a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	f003 0308 	and.w	r3, r3, #8
 8008540:	2b08      	cmp	r3, #8
 8008542:	d110      	bne.n	8008566 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2208      	movs	r2, #8
 800854a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 f838 	bl	80085c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2208      	movs	r2, #8
 8008556:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e029      	b.n	80085ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008574:	d111      	bne.n	800859a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800857e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 f81e 	bl	80085c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2220      	movs	r2, #32
 800858a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e00f      	b.n	80085ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69da      	ldr	r2, [r3, #28]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	4013      	ands	r3, r2
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	bf0c      	ite	eq
 80085aa:	2301      	moveq	r3, #1
 80085ac:	2300      	movne	r3, #0
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	461a      	mov	r2, r3
 80085b2:	79fb      	ldrb	r3, [r7, #7]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d0a6      	beq.n	8008506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b095      	sub	sp, #84	@ 0x54
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d2:	e853 3f00 	ldrex	r3, [r3]
 80085d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80085ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e6      	bne.n	80085ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3308      	adds	r3, #8
 8008602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	e853 3f00 	ldrex	r3, [r3]
 800860a:	61fb      	str	r3, [r7, #28]
   return(result);
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	f023 0301 	bic.w	r3, r3, #1
 8008612:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3308      	adds	r3, #8
 800861a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800861c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800861e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008620:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008624:	e841 2300 	strex	r3, r2, [r1]
 8008628:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e5      	bne.n	80085fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008634:	2b01      	cmp	r3, #1
 8008636:	d118      	bne.n	800866a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	60bb      	str	r3, [r7, #8]
   return(result);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f023 0310 	bic.w	r3, r3, #16
 800864c:	647b      	str	r3, [r7, #68]	@ 0x44
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008656:	61bb      	str	r3, [r7, #24]
 8008658:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865a:	6979      	ldr	r1, [r7, #20]
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	e841 2300 	strex	r3, r2, [r1]
 8008662:	613b      	str	r3, [r7, #16]
   return(result);
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e6      	bne.n	8008638 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800867e:	bf00      	nop
 8008680:	3754      	adds	r7, #84	@ 0x54
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800868a:	b480      	push	{r7}
 800868c:	b085      	sub	sp, #20
 800868e:	af00      	add	r7, sp, #0
 8008690:	4603      	mov	r3, r0
 8008692:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008694:	2300      	movs	r3, #0
 8008696:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800869c:	2b84      	cmp	r3, #132	@ 0x84
 800869e:	d005      	beq.n	80086ac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80086a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4413      	add	r3, r2
 80086a8:	3303      	adds	r3, #3
 80086aa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80086ac:	68fb      	ldr	r3, [r7, #12]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086c0:	f3ef 8305 	mrs	r3, IPSR
 80086c4:	607b      	str	r3, [r7, #4]
  return(result);
 80086c6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	bf14      	ite	ne
 80086cc:	2301      	movne	r3, #1
 80086ce:	2300      	moveq	r3, #0
 80086d0:	b2db      	uxtb	r3, r3
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80086e2:	f001 fdab 	bl	800a23c <vTaskStartScheduler>
  
  return osOK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	bd80      	pop	{r7, pc}

080086ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80086ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ee:	b089      	sub	sp, #36	@ 0x24
 80086f0:	af04      	add	r7, sp, #16
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d020      	beq.n	8008740 <osThreadCreate+0x54>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d01c      	beq.n	8008740 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685c      	ldr	r4, [r3, #4]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	691e      	ldr	r6, [r3, #16]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008718:	4618      	mov	r0, r3
 800871a:	f7ff ffb6 	bl	800868a <makeFreeRtosPriority>
 800871e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008728:	9202      	str	r2, [sp, #8]
 800872a:	9301      	str	r3, [sp, #4]
 800872c:	9100      	str	r1, [sp, #0]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	4632      	mov	r2, r6
 8008732:	4629      	mov	r1, r5
 8008734:	4620      	mov	r0, r4
 8008736:	f001 fbb3 	bl	8009ea0 <xTaskCreateStatic>
 800873a:	4603      	mov	r3, r0
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	e01c      	b.n	800877a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685c      	ldr	r4, [r3, #4]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800874c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff ff98 	bl	800868a <makeFreeRtosPriority>
 800875a:	4602      	mov	r2, r0
 800875c:	f107 030c 	add.w	r3, r7, #12
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	9200      	str	r2, [sp, #0]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	4632      	mov	r2, r6
 8008768:	4629      	mov	r1, r5
 800876a:	4620      	mov	r0, r4
 800876c:	f001 fbf8 	bl	8009f60 <xTaskCreate>
 8008770:	4603      	mov	r3, r0
 8008772:	2b01      	cmp	r3, #1
 8008774:	d001      	beq.n	800877a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008776:	2300      	movs	r3, #0
 8008778:	e000      	b.n	800877c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800877a:	68fb      	ldr	r3, [r7, #12]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008784 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
  taskYIELD();
 8008788:	4b06      	ldr	r3, [pc, #24]	@ (80087a4 <osThreadYield+0x20>)
 800878a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	f3bf 8f6f 	isb	sy
  
  return osOK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	e000ed04 	.word	0xe000ed04

080087a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <osDelay+0x16>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	e000      	b.n	80087c0 <osDelay+0x18>
 80087be:	2301      	movs	r3, #1
 80087c0:	4618      	mov	r0, r3
 80087c2:	f001 fd05 	bl	800a1d0 <vTaskDelay>
  
  return osOK;
 80087c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d007      	beq.n	80087f0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	4619      	mov	r1, r3
 80087e6:	2001      	movs	r0, #1
 80087e8:	f000 fef3 	bl	80095d2 <xQueueCreateMutexStatic>
 80087ec:	4603      	mov	r3, r0
 80087ee:	e003      	b.n	80087f8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80087f0:	2001      	movs	r0, #1
 80087f2:	f000 fed6 	bl	80095a2 <xQueueCreateMutex>
 80087f6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800880a:	2300      	movs	r3, #0
 800880c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <osMutexWait+0x18>
    return osErrorParameter;
 8008814:	2380      	movs	r3, #128	@ 0x80
 8008816:	e03a      	b.n	800888e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008822:	d103      	bne.n	800882c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008824:	f04f 33ff 	mov.w	r3, #4294967295
 8008828:	60fb      	str	r3, [r7, #12]
 800882a:	e009      	b.n	8008840 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d006      	beq.n	8008840 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <osMutexWait+0x40>
      ticks = 1;
 800883c:	2301      	movs	r3, #1
 800883e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008840:	f7ff ff3b 	bl	80086ba <inHandlerMode>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d017      	beq.n	800887a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800884a:	f107 0308 	add.w	r3, r7, #8
 800884e:	461a      	mov	r2, r3
 8008850:	2100      	movs	r1, #0
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f001 f97a 	bl	8009b4c <xQueueReceiveFromISR>
 8008858:	4603      	mov	r3, r0
 800885a:	2b01      	cmp	r3, #1
 800885c:	d001      	beq.n	8008862 <osMutexWait+0x62>
      return osErrorOS;
 800885e:	23ff      	movs	r3, #255	@ 0xff
 8008860:	e015      	b.n	800888e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d011      	beq.n	800888c <osMutexWait+0x8c>
 8008868:	4b0b      	ldr	r3, [pc, #44]	@ (8008898 <osMutexWait+0x98>)
 800886a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	e008      	b.n	800888c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800887a:	68f9      	ldr	r1, [r7, #12]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 f855 	bl	800992c <xQueueSemaphoreTake>
 8008882:	4603      	mov	r3, r0
 8008884:	2b01      	cmp	r3, #1
 8008886:	d001      	beq.n	800888c <osMutexWait+0x8c>
    return osErrorOS;
 8008888:	23ff      	movs	r3, #255	@ 0xff
 800888a:	e000      	b.n	800888e <osMutexWait+0x8e>
  }
  
  return osOK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80088ac:	f7ff ff05 	bl	80086ba <inHandlerMode>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d016      	beq.n	80088e4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80088b6:	f107 0308 	add.w	r3, r7, #8
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 ffa5 	bl	800980c <xQueueGiveFromISR>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d001      	beq.n	80088cc <osMutexRelease+0x30>
      return osErrorOS;
 80088c8:	23ff      	movs	r3, #255	@ 0xff
 80088ca:	e017      	b.n	80088fc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d013      	beq.n	80088fa <osMutexRelease+0x5e>
 80088d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008904 <osMutexRelease+0x68>)
 80088d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	e00a      	b.n	80088fa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80088e4:	2300      	movs	r3, #0
 80088e6:	2200      	movs	r2, #0
 80088e8:	2100      	movs	r1, #0
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fe8c 	bl	8009608 <xQueueGenericSend>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d001      	beq.n	80088fa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80088f6:	23ff      	movs	r3, #255	@ 0xff
 80088f8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80088fa:	68fb      	ldr	r3, [r7, #12]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	e000ed04 	.word	0xe000ed04

08008908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08a      	sub	sp, #40	@ 0x28
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008910:	2300      	movs	r3, #0
 8008912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008914:	f001 fcf4 	bl	800a300 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008918:	4b5c      	ldr	r3, [pc, #368]	@ (8008a8c <pvPortMalloc+0x184>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008920:	f000 f924 	bl	8008b6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008924:	4b5a      	ldr	r3, [pc, #360]	@ (8008a90 <pvPortMalloc+0x188>)
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4013      	ands	r3, r2
 800892c:	2b00      	cmp	r3, #0
 800892e:	f040 8095 	bne.w	8008a5c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01e      	beq.n	8008976 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008938:	2208      	movs	r2, #8
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4413      	add	r3, r2
 800893e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	2b00      	cmp	r3, #0
 8008948:	d015      	beq.n	8008976 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f023 0307 	bic.w	r3, r3, #7
 8008950:	3308      	adds	r3, #8
 8008952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00b      	beq.n	8008976 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	e7fd      	b.n	8008972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d06f      	beq.n	8008a5c <pvPortMalloc+0x154>
 800897c:	4b45      	ldr	r3, [pc, #276]	@ (8008a94 <pvPortMalloc+0x18c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	429a      	cmp	r2, r3
 8008984:	d86a      	bhi.n	8008a5c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008986:	4b44      	ldr	r3, [pc, #272]	@ (8008a98 <pvPortMalloc+0x190>)
 8008988:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800898a:	4b43      	ldr	r3, [pc, #268]	@ (8008a98 <pvPortMalloc+0x190>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008990:	e004      	b.n	800899c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008994:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800899c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d903      	bls.n	80089ae <pvPortMalloc+0xa6>
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1f1      	bne.n	8008992 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089ae:	4b37      	ldr	r3, [pc, #220]	@ (8008a8c <pvPortMalloc+0x184>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d051      	beq.n	8008a5c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2208      	movs	r2, #8
 80089be:	4413      	add	r3, r2
 80089c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	1ad2      	subs	r2, r2, r3
 80089d2:	2308      	movs	r3, #8
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d920      	bls.n	8008a1c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4413      	add	r3, r2
 80089e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	f003 0307 	and.w	r3, r3, #7
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00b      	beq.n	8008a04 <pvPortMalloc+0xfc>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	613b      	str	r3, [r7, #16]
}
 80089fe:	bf00      	nop
 8008a00:	bf00      	nop
 8008a02:	e7fd      	b.n	8008a00 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	1ad2      	subs	r2, r2, r3
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a16:	69b8      	ldr	r0, [r7, #24]
 8008a18:	f000 f90a 	bl	8008c30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8008a94 <pvPortMalloc+0x18c>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	4a1b      	ldr	r2, [pc, #108]	@ (8008a94 <pvPortMalloc+0x18c>)
 8008a28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8008a94 <pvPortMalloc+0x18c>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8008a9c <pvPortMalloc+0x194>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d203      	bcs.n	8008a3e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a36:	4b17      	ldr	r3, [pc, #92]	@ (8008a94 <pvPortMalloc+0x18c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a18      	ldr	r2, [pc, #96]	@ (8008a9c <pvPortMalloc+0x194>)
 8008a3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	4b13      	ldr	r3, [pc, #76]	@ (8008a90 <pvPortMalloc+0x188>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	431a      	orrs	r2, r3
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4e:	2200      	movs	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a52:	4b13      	ldr	r3, [pc, #76]	@ (8008aa0 <pvPortMalloc+0x198>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3301      	adds	r3, #1
 8008a58:	4a11      	ldr	r2, [pc, #68]	@ (8008aa0 <pvPortMalloc+0x198>)
 8008a5a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a5c:	f001 fc5e 	bl	800a31c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f003 0307 	and.w	r3, r3, #7
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00b      	beq.n	8008a82 <pvPortMalloc+0x17a>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	60fb      	str	r3, [r7, #12]
}
 8008a7c:	bf00      	nop
 8008a7e:	bf00      	nop
 8008a80:	e7fd      	b.n	8008a7e <pvPortMalloc+0x176>
	return pvReturn;
 8008a82:	69fb      	ldr	r3, [r7, #28]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3728      	adds	r7, #40	@ 0x28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20004860 	.word	0x20004860
 8008a90:	20004874 	.word	0x20004874
 8008a94:	20004864 	.word	0x20004864
 8008a98:	20004858 	.word	0x20004858
 8008a9c:	20004868 	.word	0x20004868
 8008aa0:	2000486c 	.word	0x2000486c

08008aa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d04f      	beq.n	8008b56 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ab6:	2308      	movs	r3, #8
 8008ab8:	425b      	negs	r3, r3
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	4413      	add	r3, r2
 8008abe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	4b25      	ldr	r3, [pc, #148]	@ (8008b60 <vPortFree+0xbc>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4013      	ands	r3, r2
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10b      	bne.n	8008aea <vPortFree+0x46>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	60fb      	str	r3, [r7, #12]
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop
 8008ae8:	e7fd      	b.n	8008ae6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00b      	beq.n	8008b0a <vPortFree+0x66>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	60bb      	str	r3, [r7, #8]
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop
 8008b08:	e7fd      	b.n	8008b06 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	4b14      	ldr	r3, [pc, #80]	@ (8008b60 <vPortFree+0xbc>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4013      	ands	r3, r2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01e      	beq.n	8008b56 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d11a      	bne.n	8008b56 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	4b0e      	ldr	r3, [pc, #56]	@ (8008b60 <vPortFree+0xbc>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	43db      	mvns	r3, r3
 8008b2a:	401a      	ands	r2, r3
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b30:	f001 fbe6 	bl	800a300 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	4b0a      	ldr	r3, [pc, #40]	@ (8008b64 <vPortFree+0xc0>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	4a09      	ldr	r2, [pc, #36]	@ (8008b64 <vPortFree+0xc0>)
 8008b40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b42:	6938      	ldr	r0, [r7, #16]
 8008b44:	f000 f874 	bl	8008c30 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b48:	4b07      	ldr	r3, [pc, #28]	@ (8008b68 <vPortFree+0xc4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	4a06      	ldr	r2, [pc, #24]	@ (8008b68 <vPortFree+0xc4>)
 8008b50:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b52:	f001 fbe3 	bl	800a31c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b56:	bf00      	nop
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20004874 	.word	0x20004874
 8008b64:	20004864 	.word	0x20004864
 8008b68:	20004870 	.word	0x20004870

08008b6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b72:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008b76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b78:	4b27      	ldr	r3, [pc, #156]	@ (8008c18 <prvHeapInit+0xac>)
 8008b7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f003 0307 	and.w	r3, r3, #7
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00c      	beq.n	8008ba0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3307      	adds	r3, #7
 8008b8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 0307 	bic.w	r3, r3, #7
 8008b92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8008c18 <prvHeapInit+0xac>)
 8008b9c:	4413      	add	r3, r2
 8008b9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8008c1c <prvHeapInit+0xb0>)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008baa:	4b1c      	ldr	r3, [pc, #112]	@ (8008c1c <prvHeapInit+0xb0>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bb8:	2208      	movs	r2, #8
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	1a9b      	subs	r3, r3, r2
 8008bbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f023 0307 	bic.w	r3, r3, #7
 8008bc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4a15      	ldr	r2, [pc, #84]	@ (8008c20 <prvHeapInit+0xb4>)
 8008bcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bce:	4b14      	ldr	r3, [pc, #80]	@ (8008c20 <prvHeapInit+0xb4>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bd6:	4b12      	ldr	r3, [pc, #72]	@ (8008c20 <prvHeapInit+0xb4>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	1ad2      	subs	r2, r2, r3
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bec:	4b0c      	ldr	r3, [pc, #48]	@ (8008c20 <prvHeapInit+0xb4>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8008c24 <prvHeapInit+0xb8>)
 8008bfa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	4a09      	ldr	r2, [pc, #36]	@ (8008c28 <prvHeapInit+0xbc>)
 8008c02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c04:	4b09      	ldr	r3, [pc, #36]	@ (8008c2c <prvHeapInit+0xc0>)
 8008c06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c0a:	601a      	str	r2, [r3, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	20000c58 	.word	0x20000c58
 8008c1c:	20004858 	.word	0x20004858
 8008c20:	20004860 	.word	0x20004860
 8008c24:	20004868 	.word	0x20004868
 8008c28:	20004864 	.word	0x20004864
 8008c2c:	20004874 	.word	0x20004874

08008c30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c38:	4b28      	ldr	r3, [pc, #160]	@ (8008cdc <prvInsertBlockIntoFreeList+0xac>)
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	e002      	b.n	8008c44 <prvInsertBlockIntoFreeList+0x14>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d8f7      	bhi.n	8008c3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	4413      	add	r3, r2
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d108      	bne.n	8008c72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	441a      	add	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	441a      	add	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d118      	bne.n	8008cb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	4b15      	ldr	r3, [pc, #84]	@ (8008ce0 <prvInsertBlockIntoFreeList+0xb0>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d00d      	beq.n	8008cae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	441a      	add	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	e008      	b.n	8008cc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cae:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce0 <prvInsertBlockIntoFreeList+0xb0>)
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	e003      	b.n	8008cc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d002      	beq.n	8008cce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cce:	bf00      	nop
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	20004858 	.word	0x20004858
 8008ce0:	20004860 	.word	0x20004860

08008ce4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f103 0208 	add.w	r2, r3, #8
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f103 0208 	add.w	r2, r3, #8
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f103 0208 	add.w	r2, r3, #8
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d32:	bf00      	nop
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b085      	sub	sp, #20
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	601a      	str	r2, [r3, #0]
}
 8008d7a:	bf00      	nop
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d86:	b480      	push	{r7}
 8008d88:	b085      	sub	sp, #20
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9c:	d103      	bne.n	8008da6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	e00c      	b.n	8008dc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3308      	adds	r3, #8
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	e002      	b.n	8008db4 <vListInsert+0x2e>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	60fb      	str	r3, [r7, #12]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d2f6      	bcs.n	8008dae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	601a      	str	r2, [r3, #0]
}
 8008dec:	bf00      	nop
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	6892      	ldr	r2, [r2, #8]
 8008e0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	6852      	ldr	r2, [r2, #4]
 8008e18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d103      	bne.n	8008e2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689a      	ldr	r2, [r3, #8]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	1e5a      	subs	r2, r3, #1
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3b04      	subs	r3, #4
 8008e5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3b04      	subs	r3, #4
 8008e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f023 0201 	bic.w	r2, r3, #1
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3b04      	subs	r3, #4
 8008e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8008eb0 <pxPortInitialiseStack+0x64>)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3b14      	subs	r3, #20
 8008e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3b04      	subs	r3, #4
 8008e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f06f 0202 	mvn.w	r2, #2
 8008e9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	3b20      	subs	r3, #32
 8008ea0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3714      	adds	r7, #20
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	08008eb5 	.word	0x08008eb5

08008eb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ebe:	4b13      	ldr	r3, [pc, #76]	@ (8008f0c <prvTaskExitError+0x58>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec6:	d00b      	beq.n	8008ee0 <prvTaskExitError+0x2c>
	__asm volatile
 8008ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ecc:	f383 8811 	msr	BASEPRI, r3
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	60fb      	str	r3, [r7, #12]
}
 8008eda:	bf00      	nop
 8008edc:	bf00      	nop
 8008ede:	e7fd      	b.n	8008edc <prvTaskExitError+0x28>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	60bb      	str	r3, [r7, #8]
}
 8008ef2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ef4:	bf00      	nop
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0fc      	beq.n	8008ef6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008efc:	bf00      	nop
 8008efe:	bf00      	nop
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20000010 	.word	0x20000010

08008f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f10:	4b07      	ldr	r3, [pc, #28]	@ (8008f30 <pxCurrentTCBConst2>)
 8008f12:	6819      	ldr	r1, [r3, #0]
 8008f14:	6808      	ldr	r0, [r1, #0]
 8008f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1a:	f380 8809 	msr	PSP, r0
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f04f 0000 	mov.w	r0, #0
 8008f26:	f380 8811 	msr	BASEPRI, r0
 8008f2a:	4770      	bx	lr
 8008f2c:	f3af 8000 	nop.w

08008f30 <pxCurrentTCBConst2>:
 8008f30:	20004880 	.word	0x20004880
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f34:	bf00      	nop
 8008f36:	bf00      	nop

08008f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f38:	4808      	ldr	r0, [pc, #32]	@ (8008f5c <prvPortStartFirstTask+0x24>)
 8008f3a:	6800      	ldr	r0, [r0, #0]
 8008f3c:	6800      	ldr	r0, [r0, #0]
 8008f3e:	f380 8808 	msr	MSP, r0
 8008f42:	f04f 0000 	mov.w	r0, #0
 8008f46:	f380 8814 	msr	CONTROL, r0
 8008f4a:	b662      	cpsie	i
 8008f4c:	b661      	cpsie	f
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	df00      	svc	0
 8008f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f5a:	bf00      	nop
 8008f5c:	e000ed08 	.word	0xe000ed08

08008f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f66:	4b47      	ldr	r3, [pc, #284]	@ (8009084 <xPortStartScheduler+0x124>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a47      	ldr	r2, [pc, #284]	@ (8009088 <xPortStartScheduler+0x128>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d10b      	bne.n	8008f88 <xPortStartScheduler+0x28>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	60fb      	str	r3, [r7, #12]
}
 8008f82:	bf00      	nop
 8008f84:	bf00      	nop
 8008f86:	e7fd      	b.n	8008f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f88:	4b3e      	ldr	r3, [pc, #248]	@ (8009084 <xPortStartScheduler+0x124>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a3f      	ldr	r2, [pc, #252]	@ (800908c <xPortStartScheduler+0x12c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d10b      	bne.n	8008faa <xPortStartScheduler+0x4a>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	613b      	str	r3, [r7, #16]
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	e7fd      	b.n	8008fa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008faa:	4b39      	ldr	r3, [pc, #228]	@ (8009090 <xPortStartScheduler+0x130>)
 8008fac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	22ff      	movs	r2, #255	@ 0xff
 8008fba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	4b31      	ldr	r3, [pc, #196]	@ (8009094 <xPortStartScheduler+0x134>)
 8008fd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008fd2:	4b31      	ldr	r3, [pc, #196]	@ (8009098 <xPortStartScheduler+0x138>)
 8008fd4:	2207      	movs	r2, #7
 8008fd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fd8:	e009      	b.n	8008fee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008fda:	4b2f      	ldr	r3, [pc, #188]	@ (8009098 <xPortStartScheduler+0x138>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8009098 <xPortStartScheduler+0x138>)
 8008fe2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fe4:	78fb      	ldrb	r3, [r7, #3]
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	005b      	lsls	r3, r3, #1
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fee:	78fb      	ldrb	r3, [r7, #3]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ff6:	2b80      	cmp	r3, #128	@ 0x80
 8008ff8:	d0ef      	beq.n	8008fda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ffa:	4b27      	ldr	r3, [pc, #156]	@ (8009098 <xPortStartScheduler+0x138>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f1c3 0307 	rsb	r3, r3, #7
 8009002:	2b04      	cmp	r3, #4
 8009004:	d00b      	beq.n	800901e <xPortStartScheduler+0xbe>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	60bb      	str	r3, [r7, #8]
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	e7fd      	b.n	800901a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800901e:	4b1e      	ldr	r3, [pc, #120]	@ (8009098 <xPortStartScheduler+0x138>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	021b      	lsls	r3, r3, #8
 8009024:	4a1c      	ldr	r2, [pc, #112]	@ (8009098 <xPortStartScheduler+0x138>)
 8009026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009028:	4b1b      	ldr	r3, [pc, #108]	@ (8009098 <xPortStartScheduler+0x138>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009030:	4a19      	ldr	r2, [pc, #100]	@ (8009098 <xPortStartScheduler+0x138>)
 8009032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	b2da      	uxtb	r2, r3
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800903c:	4b17      	ldr	r3, [pc, #92]	@ (800909c <xPortStartScheduler+0x13c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a16      	ldr	r2, [pc, #88]	@ (800909c <xPortStartScheduler+0x13c>)
 8009042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009048:	4b14      	ldr	r3, [pc, #80]	@ (800909c <xPortStartScheduler+0x13c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a13      	ldr	r2, [pc, #76]	@ (800909c <xPortStartScheduler+0x13c>)
 800904e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009054:	f000 f8da 	bl	800920c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009058:	4b11      	ldr	r3, [pc, #68]	@ (80090a0 <xPortStartScheduler+0x140>)
 800905a:	2200      	movs	r2, #0
 800905c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800905e:	f000 f8f9 	bl	8009254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009062:	4b10      	ldr	r3, [pc, #64]	@ (80090a4 <xPortStartScheduler+0x144>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a0f      	ldr	r2, [pc, #60]	@ (80090a4 <xPortStartScheduler+0x144>)
 8009068:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800906c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800906e:	f7ff ff63 	bl	8008f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009072:	f001 faab 	bl	800a5cc <vTaskSwitchContext>
	prvTaskExitError();
 8009076:	f7ff ff1d 	bl	8008eb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	e000ed00 	.word	0xe000ed00
 8009088:	410fc271 	.word	0x410fc271
 800908c:	410fc270 	.word	0x410fc270
 8009090:	e000e400 	.word	0xe000e400
 8009094:	20004878 	.word	0x20004878
 8009098:	2000487c 	.word	0x2000487c
 800909c:	e000ed20 	.word	0xe000ed20
 80090a0:	20000010 	.word	0x20000010
 80090a4:	e000ef34 	.word	0xe000ef34

080090a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	607b      	str	r3, [r7, #4]
}
 80090c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090c2:	4b10      	ldr	r3, [pc, #64]	@ (8009104 <vPortEnterCritical+0x5c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3301      	adds	r3, #1
 80090c8:	4a0e      	ldr	r2, [pc, #56]	@ (8009104 <vPortEnterCritical+0x5c>)
 80090ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009104 <vPortEnterCritical+0x5c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d110      	bne.n	80090f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009108 <vPortEnterCritical+0x60>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00b      	beq.n	80090f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	603b      	str	r3, [r7, #0]
}
 80090f0:	bf00      	nop
 80090f2:	bf00      	nop
 80090f4:	e7fd      	b.n	80090f2 <vPortEnterCritical+0x4a>
	}
}
 80090f6:	bf00      	nop
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20000010 	.word	0x20000010
 8009108:	e000ed04 	.word	0xe000ed04

0800910c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009112:	4b12      	ldr	r3, [pc, #72]	@ (800915c <vPortExitCritical+0x50>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10b      	bne.n	8009132 <vPortExitCritical+0x26>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	607b      	str	r3, [r7, #4]
}
 800912c:	bf00      	nop
 800912e:	bf00      	nop
 8009130:	e7fd      	b.n	800912e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009132:	4b0a      	ldr	r3, [pc, #40]	@ (800915c <vPortExitCritical+0x50>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3b01      	subs	r3, #1
 8009138:	4a08      	ldr	r2, [pc, #32]	@ (800915c <vPortExitCritical+0x50>)
 800913a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800913c:	4b07      	ldr	r3, [pc, #28]	@ (800915c <vPortExitCritical+0x50>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d105      	bne.n	8009150 <vPortExitCritical+0x44>
 8009144:	2300      	movs	r3, #0
 8009146:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800914e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	20000010 	.word	0x20000010

08009160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009160:	f3ef 8009 	mrs	r0, PSP
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	4b15      	ldr	r3, [pc, #84]	@ (80091c0 <pxCurrentTCBConst>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	f01e 0f10 	tst.w	lr, #16
 8009170:	bf08      	it	eq
 8009172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917a:	6010      	str	r0, [r2, #0]
 800917c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009184:	f380 8811 	msr	BASEPRI, r0
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f001 fa1c 	bl	800a5cc <vTaskSwitchContext>
 8009194:	f04f 0000 	mov.w	r0, #0
 8009198:	f380 8811 	msr	BASEPRI, r0
 800919c:	bc09      	pop	{r0, r3}
 800919e:	6819      	ldr	r1, [r3, #0]
 80091a0:	6808      	ldr	r0, [r1, #0]
 80091a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a6:	f01e 0f10 	tst.w	lr, #16
 80091aa:	bf08      	it	eq
 80091ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091b0:	f380 8809 	msr	PSP, r0
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	f3af 8000 	nop.w

080091c0 <pxCurrentTCBConst>:
 80091c0:	20004880 	.word	0x20004880
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop

080091c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	607b      	str	r3, [r7, #4]
}
 80091e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091e2:	f001 f939 	bl	800a458 <xTaskIncrementTick>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d003      	beq.n	80091f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091ec:	4b06      	ldr	r3, [pc, #24]	@ (8009208 <SysTick_Handler+0x40>)
 80091ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	2300      	movs	r3, #0
 80091f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	f383 8811 	msr	BASEPRI, r3
}
 80091fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	e000ed04 	.word	0xe000ed04

0800920c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009210:	4b0b      	ldr	r3, [pc, #44]	@ (8009240 <vPortSetupTimerInterrupt+0x34>)
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009216:	4b0b      	ldr	r3, [pc, #44]	@ (8009244 <vPortSetupTimerInterrupt+0x38>)
 8009218:	2200      	movs	r2, #0
 800921a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800921c:	4b0a      	ldr	r3, [pc, #40]	@ (8009248 <vPortSetupTimerInterrupt+0x3c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a0a      	ldr	r2, [pc, #40]	@ (800924c <vPortSetupTimerInterrupt+0x40>)
 8009222:	fba2 2303 	umull	r2, r3, r2, r3
 8009226:	099b      	lsrs	r3, r3, #6
 8009228:	4a09      	ldr	r2, [pc, #36]	@ (8009250 <vPortSetupTimerInterrupt+0x44>)
 800922a:	3b01      	subs	r3, #1
 800922c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800922e:	4b04      	ldr	r3, [pc, #16]	@ (8009240 <vPortSetupTimerInterrupt+0x34>)
 8009230:	2207      	movs	r2, #7
 8009232:	601a      	str	r2, [r3, #0]
}
 8009234:	bf00      	nop
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	e000e010 	.word	0xe000e010
 8009244:	e000e018 	.word	0xe000e018
 8009248:	20000004 	.word	0x20000004
 800924c:	10624dd3 	.word	0x10624dd3
 8009250:	e000e014 	.word	0xe000e014

08009254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009254:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009264 <vPortEnableVFP+0x10>
 8009258:	6801      	ldr	r1, [r0, #0]
 800925a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800925e:	6001      	str	r1, [r0, #0]
 8009260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009262:	bf00      	nop
 8009264:	e000ed88 	.word	0xe000ed88

08009268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800926e:	f3ef 8305 	mrs	r3, IPSR
 8009272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b0f      	cmp	r3, #15
 8009278:	d915      	bls.n	80092a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800927a:	4a18      	ldr	r2, [pc, #96]	@ (80092dc <vPortValidateInterruptPriority+0x74>)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4413      	add	r3, r2
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009284:	4b16      	ldr	r3, [pc, #88]	@ (80092e0 <vPortValidateInterruptPriority+0x78>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	7afa      	ldrb	r2, [r7, #11]
 800928a:	429a      	cmp	r2, r3
 800928c:	d20b      	bcs.n	80092a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	607b      	str	r3, [r7, #4]
}
 80092a0:	bf00      	nop
 80092a2:	bf00      	nop
 80092a4:	e7fd      	b.n	80092a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80092a6:	4b0f      	ldr	r3, [pc, #60]	@ (80092e4 <vPortValidateInterruptPriority+0x7c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80092ae:	4b0e      	ldr	r3, [pc, #56]	@ (80092e8 <vPortValidateInterruptPriority+0x80>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d90b      	bls.n	80092ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	603b      	str	r3, [r7, #0]
}
 80092c8:	bf00      	nop
 80092ca:	bf00      	nop
 80092cc:	e7fd      	b.n	80092ca <vPortValidateInterruptPriority+0x62>
	}
 80092ce:	bf00      	nop
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	e000e3f0 	.word	0xe000e3f0
 80092e0:	20004878 	.word	0x20004878
 80092e4:	e000ed0c 	.word	0xe000ed0c
 80092e8:	2000487c 	.word	0x2000487c

080092ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10b      	bne.n	8009318 <xQueueGenericReset+0x2c>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	60bb      	str	r3, [r7, #8]
}
 8009312:	bf00      	nop
 8009314:	bf00      	nop
 8009316:	e7fd      	b.n	8009314 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009318:	f7ff fec6 	bl	80090a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009324:	68f9      	ldr	r1, [r7, #12]
 8009326:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009328:	fb01 f303 	mul.w	r3, r1, r3
 800932c:	441a      	add	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009348:	3b01      	subs	r3, #1
 800934a:	68f9      	ldr	r1, [r7, #12]
 800934c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800934e:	fb01 f303 	mul.w	r3, r1, r3
 8009352:	441a      	add	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	22ff      	movs	r2, #255	@ 0xff
 800935c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	22ff      	movs	r2, #255	@ 0xff
 8009364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d114      	bne.n	8009398 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d01a      	beq.n	80093ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3310      	adds	r3, #16
 800937a:	4618      	mov	r0, r3
 800937c:	f001 f9a8 	bl	800a6d0 <xTaskRemoveFromEventList>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d012      	beq.n	80093ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009386:	4b0d      	ldr	r3, [pc, #52]	@ (80093bc <xQueueGenericReset+0xd0>)
 8009388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	e009      	b.n	80093ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3310      	adds	r3, #16
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff fca1 	bl	8008ce4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3324      	adds	r3, #36	@ 0x24
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff fc9c 	bl	8008ce4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093ac:	f7ff feae 	bl	800910c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093b0:	2301      	movs	r3, #1
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	e000ed04 	.word	0xe000ed04

080093c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08e      	sub	sp, #56	@ 0x38
 80093c4:	af02      	add	r7, sp, #8
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
 80093cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10b      	bne.n	80093ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80093e6:	bf00      	nop
 80093e8:	bf00      	nop
 80093ea:	e7fd      	b.n	80093e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10b      	bne.n	800940a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009404:	bf00      	nop
 8009406:	bf00      	nop
 8009408:	e7fd      	b.n	8009406 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <xQueueGenericCreateStatic+0x56>
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <xQueueGenericCreateStatic+0x5a>
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <xQueueGenericCreateStatic+0x5c>
 800941a:	2300      	movs	r3, #0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10b      	bne.n	8009438 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	623b      	str	r3, [r7, #32]
}
 8009432:	bf00      	nop
 8009434:	bf00      	nop
 8009436:	e7fd      	b.n	8009434 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d102      	bne.n	8009444 <xQueueGenericCreateStatic+0x84>
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <xQueueGenericCreateStatic+0x88>
 8009444:	2301      	movs	r3, #1
 8009446:	e000      	b.n	800944a <xQueueGenericCreateStatic+0x8a>
 8009448:	2300      	movs	r3, #0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10b      	bne.n	8009466 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	61fb      	str	r3, [r7, #28]
}
 8009460:	bf00      	nop
 8009462:	bf00      	nop
 8009464:	e7fd      	b.n	8009462 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009466:	2348      	movs	r3, #72	@ 0x48
 8009468:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b48      	cmp	r3, #72	@ 0x48
 800946e:	d00b      	beq.n	8009488 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	61bb      	str	r3, [r7, #24]
}
 8009482:	bf00      	nop
 8009484:	bf00      	nop
 8009486:	e7fd      	b.n	8009484 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009488:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800948e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00d      	beq.n	80094b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800949c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80094a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	68b9      	ldr	r1, [r7, #8]
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f000 f840 	bl	8009530 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3730      	adds	r7, #48	@ 0x30
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b08a      	sub	sp, #40	@ 0x28
 80094be:	af02      	add	r7, sp, #8
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	4613      	mov	r3, r2
 80094c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10b      	bne.n	80094e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	613b      	str	r3, [r7, #16]
}
 80094e0:	bf00      	nop
 80094e2:	bf00      	nop
 80094e4:	e7fd      	b.n	80094e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	fb02 f303 	mul.w	r3, r2, r3
 80094ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	3348      	adds	r3, #72	@ 0x48
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7ff fa07 	bl	8008908 <pvPortMalloc>
 80094fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d011      	beq.n	8009526 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	3348      	adds	r3, #72	@ 0x48
 800950a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009514:	79fa      	ldrb	r2, [r7, #7]
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	4613      	mov	r3, r2
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	68b9      	ldr	r1, [r7, #8]
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 f805 	bl	8009530 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009526:	69bb      	ldr	r3, [r7, #24]
	}
 8009528:	4618      	mov	r0, r3
 800952a:	3720      	adds	r7, #32
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
 800953c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d103      	bne.n	800954c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	e002      	b.n	8009552 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800955e:	2101      	movs	r1, #1
 8009560:	69b8      	ldr	r0, [r7, #24]
 8009562:	f7ff fec3 	bl	80092ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800956e:	b580      	push	{r7, lr}
 8009570:	b082      	sub	sp, #8
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00e      	beq.n	800959a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800958e:	2300      	movs	r3, #0
 8009590:	2200      	movs	r2, #0
 8009592:	2100      	movs	r1, #0
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f837 	bl	8009608 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b086      	sub	sp, #24
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	4603      	mov	r3, r0
 80095aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80095ac:	2301      	movs	r3, #1
 80095ae:	617b      	str	r3, [r7, #20]
 80095b0:	2300      	movs	r3, #0
 80095b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	461a      	mov	r2, r3
 80095b8:	6939      	ldr	r1, [r7, #16]
 80095ba:	6978      	ldr	r0, [r7, #20]
 80095bc:	f7ff ff7d 	bl	80094ba <xQueueGenericCreate>
 80095c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7ff ffd3 	bl	800956e <prvInitialiseMutex>

		return xNewQueue;
 80095c8:	68fb      	ldr	r3, [r7, #12]
	}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3718      	adds	r7, #24
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b088      	sub	sp, #32
 80095d6:	af02      	add	r7, sp, #8
 80095d8:	4603      	mov	r3, r0
 80095da:	6039      	str	r1, [r7, #0]
 80095dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80095de:	2301      	movs	r3, #1
 80095e0:	617b      	str	r3, [r7, #20]
 80095e2:	2300      	movs	r3, #0
 80095e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2200      	movs	r2, #0
 80095ee:	6939      	ldr	r1, [r7, #16]
 80095f0:	6978      	ldr	r0, [r7, #20]
 80095f2:	f7ff fee5 	bl	80093c0 <xQueueGenericCreateStatic>
 80095f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7ff ffb8 	bl	800956e <prvInitialiseMutex>

		return xNewQueue;
 80095fe:	68fb      	ldr	r3, [r7, #12]
	}
 8009600:	4618      	mov	r0, r3
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b08e      	sub	sp, #56	@ 0x38
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
 8009614:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009616:	2300      	movs	r3, #0
 8009618:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800961e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10b      	bne.n	800963c <xQueueGenericSend+0x34>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009636:	bf00      	nop
 8009638:	bf00      	nop
 800963a:	e7fd      	b.n	8009638 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d103      	bne.n	800964a <xQueueGenericSend+0x42>
 8009642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <xQueueGenericSend+0x46>
 800964a:	2301      	movs	r3, #1
 800964c:	e000      	b.n	8009650 <xQueueGenericSend+0x48>
 800964e:	2300      	movs	r3, #0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10b      	bne.n	800966c <xQueueGenericSend+0x64>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009666:	bf00      	nop
 8009668:	bf00      	nop
 800966a:	e7fd      	b.n	8009668 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b02      	cmp	r3, #2
 8009670:	d103      	bne.n	800967a <xQueueGenericSend+0x72>
 8009672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009676:	2b01      	cmp	r3, #1
 8009678:	d101      	bne.n	800967e <xQueueGenericSend+0x76>
 800967a:	2301      	movs	r3, #1
 800967c:	e000      	b.n	8009680 <xQueueGenericSend+0x78>
 800967e:	2300      	movs	r3, #0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10b      	bne.n	800969c <xQueueGenericSend+0x94>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	623b      	str	r3, [r7, #32]
}
 8009696:	bf00      	nop
 8009698:	bf00      	nop
 800969a:	e7fd      	b.n	8009698 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800969c:	f001 f9d8 	bl	800aa50 <xTaskGetSchedulerState>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d102      	bne.n	80096ac <xQueueGenericSend+0xa4>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <xQueueGenericSend+0xa8>
 80096ac:	2301      	movs	r3, #1
 80096ae:	e000      	b.n	80096b2 <xQueueGenericSend+0xaa>
 80096b0:	2300      	movs	r3, #0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10b      	bne.n	80096ce <xQueueGenericSend+0xc6>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	61fb      	str	r3, [r7, #28]
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	e7fd      	b.n	80096ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096ce:	f7ff fceb 	bl	80090a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096da:	429a      	cmp	r2, r3
 80096dc:	d302      	bcc.n	80096e4 <xQueueGenericSend+0xdc>
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d129      	bne.n	8009738 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096e4:	683a      	ldr	r2, [r7, #0]
 80096e6:	68b9      	ldr	r1, [r7, #8]
 80096e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096ea:	f000 fac9 	bl	8009c80 <prvCopyDataToQueue>
 80096ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d010      	beq.n	800971a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fa:	3324      	adds	r3, #36	@ 0x24
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 ffe7 	bl	800a6d0 <xTaskRemoveFromEventList>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d013      	beq.n	8009730 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009708:	4b3f      	ldr	r3, [pc, #252]	@ (8009808 <xQueueGenericSend+0x200>)
 800970a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800970e:	601a      	str	r2, [r3, #0]
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	e00a      	b.n	8009730 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800971a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971c:	2b00      	cmp	r3, #0
 800971e:	d007      	beq.n	8009730 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009720:	4b39      	ldr	r3, [pc, #228]	@ (8009808 <xQueueGenericSend+0x200>)
 8009722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009726:	601a      	str	r2, [r3, #0]
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009730:	f7ff fcec 	bl	800910c <vPortExitCritical>
				return pdPASS;
 8009734:	2301      	movs	r3, #1
 8009736:	e063      	b.n	8009800 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d103      	bne.n	8009746 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800973e:	f7ff fce5 	bl	800910c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009742:	2300      	movs	r3, #0
 8009744:	e05c      	b.n	8009800 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009748:	2b00      	cmp	r3, #0
 800974a:	d106      	bne.n	800975a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800974c:	f107 0314 	add.w	r3, r7, #20
 8009750:	4618      	mov	r0, r3
 8009752:	f001 f821 	bl	800a798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009756:	2301      	movs	r3, #1
 8009758:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800975a:	f7ff fcd7 	bl	800910c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800975e:	f000 fdcf 	bl	800a300 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009762:	f7ff fca1 	bl	80090a8 <vPortEnterCritical>
 8009766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009768:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800976c:	b25b      	sxtb	r3, r3
 800976e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009772:	d103      	bne.n	800977c <xQueueGenericSend+0x174>
 8009774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800977c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009782:	b25b      	sxtb	r3, r3
 8009784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009788:	d103      	bne.n	8009792 <xQueueGenericSend+0x18a>
 800978a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009792:	f7ff fcbb 	bl	800910c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009796:	1d3a      	adds	r2, r7, #4
 8009798:	f107 0314 	add.w	r3, r7, #20
 800979c:	4611      	mov	r1, r2
 800979e:	4618      	mov	r0, r3
 80097a0:	f001 f810 	bl	800a7c4 <xTaskCheckForTimeOut>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d124      	bne.n	80097f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80097aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097ac:	f000 fb60 	bl	8009e70 <prvIsQueueFull>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d018      	beq.n	80097e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80097b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b8:	3310      	adds	r3, #16
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 ff60 	bl	800a684 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80097c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097c6:	f000 faeb 	bl	8009da0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80097ca:	f000 fda7 	bl	800a31c <xTaskResumeAll>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f47f af7c 	bne.w	80096ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80097d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009808 <xQueueGenericSend+0x200>)
 80097d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097dc:	601a      	str	r2, [r3, #0]
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	e772      	b.n	80096ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80097e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097ea:	f000 fad9 	bl	8009da0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097ee:	f000 fd95 	bl	800a31c <xTaskResumeAll>
 80097f2:	e76c      	b.n	80096ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80097f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097f6:	f000 fad3 	bl	8009da0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097fa:	f000 fd8f 	bl	800a31c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80097fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009800:	4618      	mov	r0, r3
 8009802:	3738      	adds	r7, #56	@ 0x38
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	e000ed04 	.word	0xe000ed04

0800980c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08e      	sub	sp, #56	@ 0x38
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800981a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10b      	bne.n	8009838 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	623b      	str	r3, [r7, #32]
}
 8009832:	bf00      	nop
 8009834:	bf00      	nop
 8009836:	e7fd      	b.n	8009834 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00b      	beq.n	8009858 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	61fb      	str	r3, [r7, #28]
}
 8009852:	bf00      	nop
 8009854:	bf00      	nop
 8009856:	e7fd      	b.n	8009854 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d103      	bne.n	8009868 <xQueueGiveFromISR+0x5c>
 8009860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d101      	bne.n	800986c <xQueueGiveFromISR+0x60>
 8009868:	2301      	movs	r3, #1
 800986a:	e000      	b.n	800986e <xQueueGiveFromISR+0x62>
 800986c:	2300      	movs	r3, #0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10b      	bne.n	800988a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	61bb      	str	r3, [r7, #24]
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop
 8009888:	e7fd      	b.n	8009886 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800988a:	f7ff fced 	bl	8009268 <vPortValidateInterruptPriority>
	__asm volatile
 800988e:	f3ef 8211 	mrs	r2, BASEPRI
 8009892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	617a      	str	r2, [r7, #20]
 80098a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80098a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d22b      	bcs.n	8009912 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80098ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80098c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80098cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80098d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d4:	d112      	bne.n	80098fc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d016      	beq.n	800990c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	3324      	adds	r3, #36	@ 0x24
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fef4 	bl	800a6d0 <xTaskRemoveFromEventList>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00e      	beq.n	800990c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2201      	movs	r2, #1
 80098f8:	601a      	str	r2, [r3, #0]
 80098fa:	e007      	b.n	800990c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009900:	3301      	adds	r3, #1
 8009902:	b2db      	uxtb	r3, r3
 8009904:	b25a      	sxtb	r2, r3
 8009906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800990c:	2301      	movs	r3, #1
 800990e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009910:	e001      	b.n	8009916 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009912:	2300      	movs	r3, #0
 8009914:	637b      	str	r3, [r7, #52]	@ 0x34
 8009916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009918:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f383 8811 	msr	BASEPRI, r3
}
 8009920:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009924:	4618      	mov	r0, r3
 8009926:	3738      	adds	r7, #56	@ 0x38
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08e      	sub	sp, #56	@ 0x38
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009936:	2300      	movs	r3, #0
 8009938:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800993e:	2300      	movs	r3, #0
 8009940:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10b      	bne.n	8009960 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	623b      	str	r3, [r7, #32]
}
 800995a:	bf00      	nop
 800995c:	bf00      	nop
 800995e:	e7fd      	b.n	800995c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00b      	beq.n	8009980 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996c:	f383 8811 	msr	BASEPRI, r3
 8009970:	f3bf 8f6f 	isb	sy
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	61fb      	str	r3, [r7, #28]
}
 800997a:	bf00      	nop
 800997c:	bf00      	nop
 800997e:	e7fd      	b.n	800997c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009980:	f001 f866 	bl	800aa50 <xTaskGetSchedulerState>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d102      	bne.n	8009990 <xQueueSemaphoreTake+0x64>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <xQueueSemaphoreTake+0x68>
 8009990:	2301      	movs	r3, #1
 8009992:	e000      	b.n	8009996 <xQueueSemaphoreTake+0x6a>
 8009994:	2300      	movs	r3, #0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10b      	bne.n	80099b2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	61bb      	str	r3, [r7, #24]
}
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	e7fd      	b.n	80099ae <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099b2:	f7ff fb79 	bl	80090a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80099b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80099bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d024      	beq.n	8009a0c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80099c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c4:	1e5a      	subs	r2, r3, #1
 80099c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d104      	bne.n	80099dc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80099d2:	f001 f9e9 	bl	800ada8 <pvTaskIncrementMutexHeldCount>
 80099d6:	4602      	mov	r2, r0
 80099d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00f      	beq.n	8009a04 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e6:	3310      	adds	r3, #16
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 fe71 	bl	800a6d0 <xTaskRemoveFromEventList>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d007      	beq.n	8009a04 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80099f4:	4b54      	ldr	r3, [pc, #336]	@ (8009b48 <xQueueSemaphoreTake+0x21c>)
 80099f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a04:	f7ff fb82 	bl	800910c <vPortExitCritical>
				return pdPASS;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e098      	b.n	8009b3e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d112      	bne.n	8009a38 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00b      	beq.n	8009a30 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	617b      	str	r3, [r7, #20]
}
 8009a2a:	bf00      	nop
 8009a2c:	bf00      	nop
 8009a2e:	e7fd      	b.n	8009a2c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a30:	f7ff fb6c 	bl	800910c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a34:	2300      	movs	r3, #0
 8009a36:	e082      	b.n	8009b3e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d106      	bne.n	8009a4c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a3e:	f107 030c 	add.w	r3, r7, #12
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 fea8 	bl	800a798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a4c:	f7ff fb5e 	bl	800910c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a50:	f000 fc56 	bl	800a300 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a54:	f7ff fb28 	bl	80090a8 <vPortEnterCritical>
 8009a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a5e:	b25b      	sxtb	r3, r3
 8009a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a64:	d103      	bne.n	8009a6e <xQueueSemaphoreTake+0x142>
 8009a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a74:	b25b      	sxtb	r3, r3
 8009a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a7a:	d103      	bne.n	8009a84 <xQueueSemaphoreTake+0x158>
 8009a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a84:	f7ff fb42 	bl	800910c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a88:	463a      	mov	r2, r7
 8009a8a:	f107 030c 	add.w	r3, r7, #12
 8009a8e:	4611      	mov	r1, r2
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fe97 	bl	800a7c4 <xTaskCheckForTimeOut>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d132      	bne.n	8009b02 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a9e:	f000 f9d1 	bl	8009e44 <prvIsQueueEmpty>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d026      	beq.n	8009af6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d109      	bne.n	8009ac4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009ab0:	f7ff fafa 	bl	80090a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 ffe7 	bl	800aa8c <xTaskPriorityInherit>
 8009abe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009ac0:	f7ff fb24 	bl	800910c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac6:	3324      	adds	r3, #36	@ 0x24
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	4611      	mov	r1, r2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 fdd9 	bl	800a684 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009ad2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009ad4:	f000 f964 	bl	8009da0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ad8:	f000 fc20 	bl	800a31c <xTaskResumeAll>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f47f af67 	bne.w	80099b2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009ae4:	4b18      	ldr	r3, [pc, #96]	@ (8009b48 <xQueueSemaphoreTake+0x21c>)
 8009ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	e75d      	b.n	80099b2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009af6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009af8:	f000 f952 	bl	8009da0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009afc:	f000 fc0e 	bl	800a31c <xTaskResumeAll>
 8009b00:	e757      	b.n	80099b2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009b02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b04:	f000 f94c 	bl	8009da0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b08:	f000 fc08 	bl	800a31c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b0e:	f000 f999 	bl	8009e44 <prvIsQueueEmpty>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f43f af4c 	beq.w	80099b2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00d      	beq.n	8009b3c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009b20:	f7ff fac2 	bl	80090a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009b24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b26:	f000 f893 	bl	8009c50 <prvGetDisinheritPriorityAfterTimeout>
 8009b2a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b32:	4618      	mov	r0, r3
 8009b34:	f001 f8a8 	bl	800ac88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009b38:	f7ff fae8 	bl	800910c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3738      	adds	r7, #56	@ 0x38
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b08e      	sub	sp, #56	@ 0x38
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10b      	bne.n	8009b7a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	623b      	str	r3, [r7, #32]
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop
 8009b78:	e7fd      	b.n	8009b76 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d103      	bne.n	8009b88 <xQueueReceiveFromISR+0x3c>
 8009b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <xQueueReceiveFromISR+0x40>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e000      	b.n	8009b8e <xQueueReceiveFromISR+0x42>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10b      	bne.n	8009baa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	61fb      	str	r3, [r7, #28]
}
 8009ba4:	bf00      	nop
 8009ba6:	bf00      	nop
 8009ba8:	e7fd      	b.n	8009ba6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009baa:	f7ff fb5d 	bl	8009268 <vPortValidateInterruptPriority>
	__asm volatile
 8009bae:	f3ef 8211 	mrs	r2, BASEPRI
 8009bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	61ba      	str	r2, [r7, #24]
 8009bc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009bc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d02f      	beq.n	8009c36 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009be0:	68b9      	ldr	r1, [r7, #8]
 8009be2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009be4:	f000 f8b6 	bl	8009d54 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bea:	1e5a      	subs	r2, r3, #1
 8009bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf8:	d112      	bne.n	8009c20 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d016      	beq.n	8009c30 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c04:	3310      	adds	r3, #16
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 fd62 	bl	800a6d0 <xTaskRemoveFromEventList>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00e      	beq.n	8009c30 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00b      	beq.n	8009c30 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]
 8009c1e:	e007      	b.n	8009c30 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c24:	3301      	adds	r3, #1
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	b25a      	sxtb	r2, r3
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009c30:	2301      	movs	r3, #1
 8009c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c34:	e001      	b.n	8009c3a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009c36:	2300      	movs	r3, #0
 8009c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	f383 8811 	msr	BASEPRI, r3
}
 8009c44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3738      	adds	r7, #56	@ 0x38
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d006      	beq.n	8009c6e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f1c3 0307 	rsb	r3, r3, #7
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	e001      	b.n	8009c72 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009c72:	68fb      	ldr	r3, [r7, #12]
	}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10d      	bne.n	8009cba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d14d      	bne.n	8009d42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 ff64 	bl	800ab78 <xTaskPriorityDisinherit>
 8009cb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	609a      	str	r2, [r3, #8]
 8009cb8:	e043      	b.n	8009d42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d119      	bne.n	8009cf4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6858      	ldr	r0, [r3, #4]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc8:	461a      	mov	r2, r3
 8009cca:	68b9      	ldr	r1, [r7, #8]
 8009ccc:	f006 ff1b 	bl	8010b06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd8:	441a      	add	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d32b      	bcc.n	8009d42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	605a      	str	r2, [r3, #4]
 8009cf2:	e026      	b.n	8009d42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	68d8      	ldr	r0, [r3, #12]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	68b9      	ldr	r1, [r7, #8]
 8009d00:	f006 ff01 	bl	8010b06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	68da      	ldr	r2, [r3, #12]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d0c:	425b      	negs	r3, r3
 8009d0e:	441a      	add	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	68da      	ldr	r2, [r3, #12]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d207      	bcs.n	8009d30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d28:	425b      	negs	r3, r3
 8009d2a:	441a      	add	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d105      	bne.n	8009d42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d002      	beq.n	8009d42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	1c5a      	adds	r2, r3, #1
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009d4a:	697b      	ldr	r3, [r7, #20]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3718      	adds	r7, #24
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d018      	beq.n	8009d98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68da      	ldr	r2, [r3, #12]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d6e:	441a      	add	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68da      	ldr	r2, [r3, #12]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d303      	bcc.n	8009d88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68d9      	ldr	r1, [r3, #12]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d90:	461a      	mov	r2, r3
 8009d92:	6838      	ldr	r0, [r7, #0]
 8009d94:	f006 feb7 	bl	8010b06 <memcpy>
	}
}
 8009d98:	bf00      	nop
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009da8:	f7ff f97e 	bl	80090a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009db2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009db4:	e011      	b.n	8009dda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d012      	beq.n	8009de4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3324      	adds	r3, #36	@ 0x24
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 fc84 	bl	800a6d0 <xTaskRemoveFromEventList>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009dce:	f000 fd5d 	bl	800a88c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	dce9      	bgt.n	8009db6 <prvUnlockQueue+0x16>
 8009de2:	e000      	b.n	8009de6 <prvUnlockQueue+0x46>
					break;
 8009de4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	22ff      	movs	r2, #255	@ 0xff
 8009dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009dee:	f7ff f98d 	bl	800910c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009df2:	f7ff f959 	bl	80090a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009dfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009dfe:	e011      	b.n	8009e24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d012      	beq.n	8009e2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3310      	adds	r3, #16
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 fc5f 	bl	800a6d0 <xTaskRemoveFromEventList>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e18:	f000 fd38 	bl	800a88c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	dce9      	bgt.n	8009e00 <prvUnlockQueue+0x60>
 8009e2c:	e000      	b.n	8009e30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	22ff      	movs	r2, #255	@ 0xff
 8009e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009e38:	f7ff f968 	bl	800910c <vPortExitCritical>
}
 8009e3c:	bf00      	nop
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e4c:	f7ff f92c 	bl	80090a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d102      	bne.n	8009e5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	60fb      	str	r3, [r7, #12]
 8009e5c:	e001      	b.n	8009e62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e62:	f7ff f953 	bl	800910c <vPortExitCritical>

	return xReturn;
 8009e66:	68fb      	ldr	r3, [r7, #12]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e78:	f7ff f916 	bl	80090a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d102      	bne.n	8009e8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	60fb      	str	r3, [r7, #12]
 8009e8c:	e001      	b.n	8009e92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e92:	f7ff f93b 	bl	800910c <vPortExitCritical>

	return xReturn;
 8009e96:	68fb      	ldr	r3, [r7, #12]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08e      	sub	sp, #56	@ 0x38
 8009ea4:	af04      	add	r7, sp, #16
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10b      	bne.n	8009ecc <xTaskCreateStatic+0x2c>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	623b      	str	r3, [r7, #32]
}
 8009ec6:	bf00      	nop
 8009ec8:	bf00      	nop
 8009eca:	e7fd      	b.n	8009ec8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10b      	bne.n	8009eea <xTaskCreateStatic+0x4a>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	61fb      	str	r3, [r7, #28]
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	e7fd      	b.n	8009ee6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009eea:	2354      	movs	r3, #84	@ 0x54
 8009eec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	2b54      	cmp	r3, #84	@ 0x54
 8009ef2:	d00b      	beq.n	8009f0c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	61bb      	str	r3, [r7, #24]
}
 8009f06:	bf00      	nop
 8009f08:	bf00      	nop
 8009f0a:	e7fd      	b.n	8009f08 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01e      	beq.n	8009f52 <xTaskCreateStatic+0xb2>
 8009f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d01b      	beq.n	8009f52 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f26:	2202      	movs	r2, #2
 8009f28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9303      	str	r3, [sp, #12]
 8009f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f32:	9302      	str	r3, [sp, #8]
 8009f34:	f107 0314 	add.w	r3, r7, #20
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	68b9      	ldr	r1, [r7, #8]
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 f850 	bl	8009fea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009f4c:	f000 f8d6 	bl	800a0fc <prvAddNewTaskToReadyList>
 8009f50:	e001      	b.n	8009f56 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009f52:	2300      	movs	r3, #0
 8009f54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f56:	697b      	ldr	r3, [r7, #20]
	}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3728      	adds	r7, #40	@ 0x28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08c      	sub	sp, #48	@ 0x30
 8009f64:	af04      	add	r7, sp, #16
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f70:	88fb      	ldrh	r3, [r7, #6]
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fe fcc7 	bl	8008908 <pvPortMalloc>
 8009f7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00e      	beq.n	8009fa0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f82:	2054      	movs	r0, #84	@ 0x54
 8009f84:	f7fe fcc0 	bl	8008908 <pvPortMalloc>
 8009f88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	697a      	ldr	r2, [r7, #20]
 8009f94:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f96:	e005      	b.n	8009fa4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f98:	6978      	ldr	r0, [r7, #20]
 8009f9a:	f7fe fd83 	bl	8008aa4 <vPortFree>
 8009f9e:	e001      	b.n	8009fa4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d017      	beq.n	8009fda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fb2:	88fa      	ldrh	r2, [r7, #6]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	9303      	str	r3, [sp, #12]
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	9302      	str	r3, [sp, #8]
 8009fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fbe:	9301      	str	r3, [sp, #4]
 8009fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	68b9      	ldr	r1, [r7, #8]
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f000 f80e 	bl	8009fea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fce:	69f8      	ldr	r0, [r7, #28]
 8009fd0:	f000 f894 	bl	800a0fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	61bb      	str	r3, [r7, #24]
 8009fd8:	e002      	b.n	8009fe0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fda:	f04f 33ff 	mov.w	r3, #4294967295
 8009fde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fe0:	69bb      	ldr	r3, [r7, #24]
	}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3720      	adds	r7, #32
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b088      	sub	sp, #32
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
 8009ff6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a002:	3b01      	subs	r3, #1
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	f023 0307 	bic.w	r3, r3, #7
 800a010:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	f003 0307 	and.w	r3, r3, #7
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00b      	beq.n	800a034 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	617b      	str	r3, [r7, #20]
}
 800a02e:	bf00      	nop
 800a030:	bf00      	nop
 800a032:	e7fd      	b.n	800a030 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d01f      	beq.n	800a07a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a03a:	2300      	movs	r3, #0
 800a03c:	61fb      	str	r3, [r7, #28]
 800a03e:	e012      	b.n	800a066 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a040:	68ba      	ldr	r2, [r7, #8]
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	4413      	add	r3, r2
 800a046:	7819      	ldrb	r1, [r3, #0]
 800a048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	4413      	add	r3, r2
 800a04e:	3334      	adds	r3, #52	@ 0x34
 800a050:	460a      	mov	r2, r1
 800a052:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	4413      	add	r3, r2
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d006      	beq.n	800a06e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	3301      	adds	r3, #1
 800a064:	61fb      	str	r3, [r7, #28]
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	2b0f      	cmp	r3, #15
 800a06a:	d9e9      	bls.n	800a040 <prvInitialiseNewTask+0x56>
 800a06c:	e000      	b.n	800a070 <prvInitialiseNewTask+0x86>
			{
				break;
 800a06e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a072:	2200      	movs	r2, #0
 800a074:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a078:	e003      	b.n	800a082 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a084:	2b06      	cmp	r3, #6
 800a086:	d901      	bls.n	800a08c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a088:	2306      	movs	r3, #6
 800a08a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a090:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a096:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09a:	2200      	movs	r2, #0
 800a09c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a0:	3304      	adds	r3, #4
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe fe3e 	bl	8008d24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0aa:	3318      	adds	r3, #24
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe fe39 	bl	8008d24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ba:	f1c3 0207 	rsb	r2, r3, #7
 800a0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0c6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0d6:	683a      	ldr	r2, [r7, #0]
 800a0d8:	68f9      	ldr	r1, [r7, #12]
 800a0da:	69b8      	ldr	r0, [r7, #24]
 800a0dc:	f7fe feb6 	bl	8008e4c <pxPortInitialiseStack>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0f2:	bf00      	nop
 800a0f4:	3720      	adds	r7, #32
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a104:	f7fe ffd0 	bl	80090a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a108:	4b2a      	ldr	r3, [pc, #168]	@ (800a1b4 <prvAddNewTaskToReadyList+0xb8>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3301      	adds	r3, #1
 800a10e:	4a29      	ldr	r2, [pc, #164]	@ (800a1b4 <prvAddNewTaskToReadyList+0xb8>)
 800a110:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a112:	4b29      	ldr	r3, [pc, #164]	@ (800a1b8 <prvAddNewTaskToReadyList+0xbc>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d109      	bne.n	800a12e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a11a:	4a27      	ldr	r2, [pc, #156]	@ (800a1b8 <prvAddNewTaskToReadyList+0xbc>)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a120:	4b24      	ldr	r3, [pc, #144]	@ (800a1b4 <prvAddNewTaskToReadyList+0xb8>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d110      	bne.n	800a14a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a128:	f000 fbd4 	bl	800a8d4 <prvInitialiseTaskLists>
 800a12c:	e00d      	b.n	800a14a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a12e:	4b23      	ldr	r3, [pc, #140]	@ (800a1bc <prvAddNewTaskToReadyList+0xc0>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d109      	bne.n	800a14a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a136:	4b20      	ldr	r3, [pc, #128]	@ (800a1b8 <prvAddNewTaskToReadyList+0xbc>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a140:	429a      	cmp	r2, r3
 800a142:	d802      	bhi.n	800a14a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a144:	4a1c      	ldr	r2, [pc, #112]	@ (800a1b8 <prvAddNewTaskToReadyList+0xbc>)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a14a:	4b1d      	ldr	r3, [pc, #116]	@ (800a1c0 <prvAddNewTaskToReadyList+0xc4>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3301      	adds	r3, #1
 800a150:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c0 <prvAddNewTaskToReadyList+0xc4>)
 800a152:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a158:	2201      	movs	r2, #1
 800a15a:	409a      	lsls	r2, r3
 800a15c:	4b19      	ldr	r3, [pc, #100]	@ (800a1c4 <prvAddNewTaskToReadyList+0xc8>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4313      	orrs	r3, r2
 800a162:	4a18      	ldr	r2, [pc, #96]	@ (800a1c4 <prvAddNewTaskToReadyList+0xc8>)
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a16a:	4613      	mov	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4a15      	ldr	r2, [pc, #84]	@ (800a1c8 <prvAddNewTaskToReadyList+0xcc>)
 800a174:	441a      	add	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	3304      	adds	r3, #4
 800a17a:	4619      	mov	r1, r3
 800a17c:	4610      	mov	r0, r2
 800a17e:	f7fe fdde 	bl	8008d3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a182:	f7fe ffc3 	bl	800910c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a186:	4b0d      	ldr	r3, [pc, #52]	@ (800a1bc <prvAddNewTaskToReadyList+0xc0>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00e      	beq.n	800a1ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a18e:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b8 <prvAddNewTaskToReadyList+0xbc>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a198:	429a      	cmp	r2, r3
 800a19a:	d207      	bcs.n	800a1ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a19c:	4b0b      	ldr	r3, [pc, #44]	@ (800a1cc <prvAddNewTaskToReadyList+0xd0>)
 800a19e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1ac:	bf00      	nop
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	20004980 	.word	0x20004980
 800a1b8:	20004880 	.word	0x20004880
 800a1bc:	2000498c 	.word	0x2000498c
 800a1c0:	2000499c 	.word	0x2000499c
 800a1c4:	20004988 	.word	0x20004988
 800a1c8:	20004884 	.word	0x20004884
 800a1cc:	e000ed04 	.word	0xe000ed04

0800a1d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d018      	beq.n	800a214 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1e2:	4b14      	ldr	r3, [pc, #80]	@ (800a234 <vTaskDelay+0x64>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00b      	beq.n	800a202 <vTaskDelay+0x32>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	60bb      	str	r3, [r7, #8]
}
 800a1fc:	bf00      	nop
 800a1fe:	bf00      	nop
 800a200:	e7fd      	b.n	800a1fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a202:	f000 f87d 	bl	800a300 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a206:	2100      	movs	r1, #0
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fde1 	bl	800add0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a20e:	f000 f885 	bl	800a31c <xTaskResumeAll>
 800a212:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d107      	bne.n	800a22a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a21a:	4b07      	ldr	r3, [pc, #28]	@ (800a238 <vTaskDelay+0x68>)
 800a21c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a22a:	bf00      	nop
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	200049a8 	.word	0x200049a8
 800a238:	e000ed04 	.word	0xe000ed04

0800a23c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08a      	sub	sp, #40	@ 0x28
 800a240:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a242:	2300      	movs	r3, #0
 800a244:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a246:	2300      	movs	r3, #0
 800a248:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a24a:	463a      	mov	r2, r7
 800a24c:	1d39      	adds	r1, r7, #4
 800a24e:	f107 0308 	add.w	r3, r7, #8
 800a252:	4618      	mov	r0, r3
 800a254:	f7f6 fef4 	bl	8001040 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	9202      	str	r2, [sp, #8]
 800a260:	9301      	str	r3, [sp, #4]
 800a262:	2300      	movs	r3, #0
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	2300      	movs	r3, #0
 800a268:	460a      	mov	r2, r1
 800a26a:	491f      	ldr	r1, [pc, #124]	@ (800a2e8 <vTaskStartScheduler+0xac>)
 800a26c:	481f      	ldr	r0, [pc, #124]	@ (800a2ec <vTaskStartScheduler+0xb0>)
 800a26e:	f7ff fe17 	bl	8009ea0 <xTaskCreateStatic>
 800a272:	4603      	mov	r3, r0
 800a274:	4a1e      	ldr	r2, [pc, #120]	@ (800a2f0 <vTaskStartScheduler+0xb4>)
 800a276:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a278:	4b1d      	ldr	r3, [pc, #116]	@ (800a2f0 <vTaskStartScheduler+0xb4>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a280:	2301      	movs	r3, #1
 800a282:	617b      	str	r3, [r7, #20]
 800a284:	e001      	b.n	800a28a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a286:	2300      	movs	r3, #0
 800a288:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d116      	bne.n	800a2be <vTaskStartScheduler+0x82>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	613b      	str	r3, [r7, #16]
}
 800a2a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2a4:	4b13      	ldr	r3, [pc, #76]	@ (800a2f4 <vTaskStartScheduler+0xb8>)
 800a2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2ac:	4b12      	ldr	r3, [pc, #72]	@ (800a2f8 <vTaskStartScheduler+0xbc>)
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2b2:	4b12      	ldr	r3, [pc, #72]	@ (800a2fc <vTaskStartScheduler+0xc0>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2b8:	f7fe fe52 	bl	8008f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2bc:	e00f      	b.n	800a2de <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c4:	d10b      	bne.n	800a2de <vTaskStartScheduler+0xa2>
	__asm volatile
 800a2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	60fb      	str	r3, [r7, #12]
}
 800a2d8:	bf00      	nop
 800a2da:	bf00      	nop
 800a2dc:	e7fd      	b.n	800a2da <vTaskStartScheduler+0x9e>
}
 800a2de:	bf00      	nop
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	08014278 	.word	0x08014278
 800a2ec:	0800a8a5 	.word	0x0800a8a5
 800a2f0:	200049a4 	.word	0x200049a4
 800a2f4:	200049a0 	.word	0x200049a0
 800a2f8:	2000498c 	.word	0x2000498c
 800a2fc:	20004984 	.word	0x20004984

0800a300 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a300:	b480      	push	{r7}
 800a302:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a304:	4b04      	ldr	r3, [pc, #16]	@ (800a318 <vTaskSuspendAll+0x18>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3301      	adds	r3, #1
 800a30a:	4a03      	ldr	r2, [pc, #12]	@ (800a318 <vTaskSuspendAll+0x18>)
 800a30c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a30e:	bf00      	nop
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	200049a8 	.word	0x200049a8

0800a31c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a322:	2300      	movs	r3, #0
 800a324:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a326:	2300      	movs	r3, #0
 800a328:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a32a:	4b42      	ldr	r3, [pc, #264]	@ (800a434 <xTaskResumeAll+0x118>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10b      	bne.n	800a34a <xTaskResumeAll+0x2e>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	603b      	str	r3, [r7, #0]
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	e7fd      	b.n	800a346 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a34a:	f7fe fead 	bl	80090a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a34e:	4b39      	ldr	r3, [pc, #228]	@ (800a434 <xTaskResumeAll+0x118>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3b01      	subs	r3, #1
 800a354:	4a37      	ldr	r2, [pc, #220]	@ (800a434 <xTaskResumeAll+0x118>)
 800a356:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a358:	4b36      	ldr	r3, [pc, #216]	@ (800a434 <xTaskResumeAll+0x118>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d161      	bne.n	800a424 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a360:	4b35      	ldr	r3, [pc, #212]	@ (800a438 <xTaskResumeAll+0x11c>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d05d      	beq.n	800a424 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a368:	e02e      	b.n	800a3c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a36a:	4b34      	ldr	r3, [pc, #208]	@ (800a43c <xTaskResumeAll+0x120>)
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3318      	adds	r3, #24
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe fd3e 	bl	8008df8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3304      	adds	r3, #4
 800a380:	4618      	mov	r0, r3
 800a382:	f7fe fd39 	bl	8008df8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a38a:	2201      	movs	r2, #1
 800a38c:	409a      	lsls	r2, r3
 800a38e:	4b2c      	ldr	r3, [pc, #176]	@ (800a440 <xTaskResumeAll+0x124>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4313      	orrs	r3, r2
 800a394:	4a2a      	ldr	r2, [pc, #168]	@ (800a440 <xTaskResumeAll+0x124>)
 800a396:	6013      	str	r3, [r2, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a39c:	4613      	mov	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4a27      	ldr	r2, [pc, #156]	@ (800a444 <xTaskResumeAll+0x128>)
 800a3a6:	441a      	add	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	f7fe fcc5 	bl	8008d3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b8:	4b23      	ldr	r3, [pc, #140]	@ (800a448 <xTaskResumeAll+0x12c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d302      	bcc.n	800a3c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a3c2:	4b22      	ldr	r3, [pc, #136]	@ (800a44c <xTaskResumeAll+0x130>)
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3c8:	4b1c      	ldr	r3, [pc, #112]	@ (800a43c <xTaskResumeAll+0x120>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1cc      	bne.n	800a36a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d001      	beq.n	800a3da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3d6:	f000 fb1b 	bl	800aa10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a3da:	4b1d      	ldr	r3, [pc, #116]	@ (800a450 <xTaskResumeAll+0x134>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d010      	beq.n	800a408 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3e6:	f000 f837 	bl	800a458 <xTaskIncrementTick>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a3f0:	4b16      	ldr	r3, [pc, #88]	@ (800a44c <xTaskResumeAll+0x130>)
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1f1      	bne.n	800a3e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a402:	4b13      	ldr	r3, [pc, #76]	@ (800a450 <xTaskResumeAll+0x134>)
 800a404:	2200      	movs	r2, #0
 800a406:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a408:	4b10      	ldr	r3, [pc, #64]	@ (800a44c <xTaskResumeAll+0x130>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d009      	beq.n	800a424 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a410:	2301      	movs	r3, #1
 800a412:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a414:	4b0f      	ldr	r3, [pc, #60]	@ (800a454 <xTaskResumeAll+0x138>)
 800a416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a41a:	601a      	str	r2, [r3, #0]
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a424:	f7fe fe72 	bl	800910c <vPortExitCritical>

	return xAlreadyYielded;
 800a428:	68bb      	ldr	r3, [r7, #8]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	200049a8 	.word	0x200049a8
 800a438:	20004980 	.word	0x20004980
 800a43c:	20004940 	.word	0x20004940
 800a440:	20004988 	.word	0x20004988
 800a444:	20004884 	.word	0x20004884
 800a448:	20004880 	.word	0x20004880
 800a44c:	20004994 	.word	0x20004994
 800a450:	20004990 	.word	0x20004990
 800a454:	e000ed04 	.word	0xe000ed04

0800a458 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a45e:	2300      	movs	r3, #0
 800a460:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a462:	4b4f      	ldr	r3, [pc, #316]	@ (800a5a0 <xTaskIncrementTick+0x148>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f040 808f 	bne.w	800a58a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a46c:	4b4d      	ldr	r3, [pc, #308]	@ (800a5a4 <xTaskIncrementTick+0x14c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3301      	adds	r3, #1
 800a472:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a474:	4a4b      	ldr	r2, [pc, #300]	@ (800a5a4 <xTaskIncrementTick+0x14c>)
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d121      	bne.n	800a4c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a480:	4b49      	ldr	r3, [pc, #292]	@ (800a5a8 <xTaskIncrementTick+0x150>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00b      	beq.n	800a4a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	603b      	str	r3, [r7, #0]
}
 800a49c:	bf00      	nop
 800a49e:	bf00      	nop
 800a4a0:	e7fd      	b.n	800a49e <xTaskIncrementTick+0x46>
 800a4a2:	4b41      	ldr	r3, [pc, #260]	@ (800a5a8 <xTaskIncrementTick+0x150>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	60fb      	str	r3, [r7, #12]
 800a4a8:	4b40      	ldr	r3, [pc, #256]	@ (800a5ac <xTaskIncrementTick+0x154>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a3e      	ldr	r2, [pc, #248]	@ (800a5a8 <xTaskIncrementTick+0x150>)
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	4a3e      	ldr	r2, [pc, #248]	@ (800a5ac <xTaskIncrementTick+0x154>)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	4b3e      	ldr	r3, [pc, #248]	@ (800a5b0 <xTaskIncrementTick+0x158>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	4a3c      	ldr	r2, [pc, #240]	@ (800a5b0 <xTaskIncrementTick+0x158>)
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	f000 faa6 	bl	800aa10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4c4:	4b3b      	ldr	r3, [pc, #236]	@ (800a5b4 <xTaskIncrementTick+0x15c>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d348      	bcc.n	800a560 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ce:	4b36      	ldr	r3, [pc, #216]	@ (800a5a8 <xTaskIncrementTick+0x150>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d104      	bne.n	800a4e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4d8:	4b36      	ldr	r3, [pc, #216]	@ (800a5b4 <xTaskIncrementTick+0x15c>)
 800a4da:	f04f 32ff 	mov.w	r2, #4294967295
 800a4de:	601a      	str	r2, [r3, #0]
					break;
 800a4e0:	e03e      	b.n	800a560 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e2:	4b31      	ldr	r3, [pc, #196]	@ (800a5a8 <xTaskIncrementTick+0x150>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d203      	bcs.n	800a502 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4fa:	4a2e      	ldr	r2, [pc, #184]	@ (800a5b4 <xTaskIncrementTick+0x15c>)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a500:	e02e      	b.n	800a560 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	3304      	adds	r3, #4
 800a506:	4618      	mov	r0, r3
 800a508:	f7fe fc76 	bl	8008df8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a510:	2b00      	cmp	r3, #0
 800a512:	d004      	beq.n	800a51e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	3318      	adds	r3, #24
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fe fc6d 	bl	8008df8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a522:	2201      	movs	r2, #1
 800a524:	409a      	lsls	r2, r3
 800a526:	4b24      	ldr	r3, [pc, #144]	@ (800a5b8 <xTaskIncrementTick+0x160>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	4a22      	ldr	r2, [pc, #136]	@ (800a5b8 <xTaskIncrementTick+0x160>)
 800a52e:	6013      	str	r3, [r2, #0]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a534:	4613      	mov	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4413      	add	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4a1f      	ldr	r2, [pc, #124]	@ (800a5bc <xTaskIncrementTick+0x164>)
 800a53e:	441a      	add	r2, r3
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	3304      	adds	r3, #4
 800a544:	4619      	mov	r1, r3
 800a546:	4610      	mov	r0, r2
 800a548:	f7fe fbf9 	bl	8008d3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a550:	4b1b      	ldr	r3, [pc, #108]	@ (800a5c0 <xTaskIncrementTick+0x168>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a556:	429a      	cmp	r2, r3
 800a558:	d3b9      	bcc.n	800a4ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a55a:	2301      	movs	r3, #1
 800a55c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a55e:	e7b6      	b.n	800a4ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a560:	4b17      	ldr	r3, [pc, #92]	@ (800a5c0 <xTaskIncrementTick+0x168>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a566:	4915      	ldr	r1, [pc, #84]	@ (800a5bc <xTaskIncrementTick+0x164>)
 800a568:	4613      	mov	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	440b      	add	r3, r1
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d901      	bls.n	800a57c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a578:	2301      	movs	r3, #1
 800a57a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a57c:	4b11      	ldr	r3, [pc, #68]	@ (800a5c4 <xTaskIncrementTick+0x16c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d007      	beq.n	800a594 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a584:	2301      	movs	r3, #1
 800a586:	617b      	str	r3, [r7, #20]
 800a588:	e004      	b.n	800a594 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a58a:	4b0f      	ldr	r3, [pc, #60]	@ (800a5c8 <xTaskIncrementTick+0x170>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3301      	adds	r3, #1
 800a590:	4a0d      	ldr	r2, [pc, #52]	@ (800a5c8 <xTaskIncrementTick+0x170>)
 800a592:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a594:	697b      	ldr	r3, [r7, #20]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3718      	adds	r7, #24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	200049a8 	.word	0x200049a8
 800a5a4:	20004984 	.word	0x20004984
 800a5a8:	20004938 	.word	0x20004938
 800a5ac:	2000493c 	.word	0x2000493c
 800a5b0:	20004998 	.word	0x20004998
 800a5b4:	200049a0 	.word	0x200049a0
 800a5b8:	20004988 	.word	0x20004988
 800a5bc:	20004884 	.word	0x20004884
 800a5c0:	20004880 	.word	0x20004880
 800a5c4:	20004994 	.word	0x20004994
 800a5c8:	20004990 	.word	0x20004990

0800a5cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5d2:	4b27      	ldr	r3, [pc, #156]	@ (800a670 <vTaskSwitchContext+0xa4>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d003      	beq.n	800a5e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5da:	4b26      	ldr	r3, [pc, #152]	@ (800a674 <vTaskSwitchContext+0xa8>)
 800a5dc:	2201      	movs	r2, #1
 800a5de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5e0:	e040      	b.n	800a664 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a5e2:	4b24      	ldr	r3, [pc, #144]	@ (800a674 <vTaskSwitchContext+0xa8>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5e8:	4b23      	ldr	r3, [pc, #140]	@ (800a678 <vTaskSwitchContext+0xac>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	fab3 f383 	clz	r3, r3
 800a5f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a5f6:	7afb      	ldrb	r3, [r7, #11]
 800a5f8:	f1c3 031f 	rsb	r3, r3, #31
 800a5fc:	617b      	str	r3, [r7, #20]
 800a5fe:	491f      	ldr	r1, [pc, #124]	@ (800a67c <vTaskSwitchContext+0xb0>)
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	4613      	mov	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	440b      	add	r3, r1
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10b      	bne.n	800a62a <vTaskSwitchContext+0x5e>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	607b      	str	r3, [r7, #4]
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop
 800a628:	e7fd      	b.n	800a626 <vTaskSwitchContext+0x5a>
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4a11      	ldr	r2, [pc, #68]	@ (800a67c <vTaskSwitchContext+0xb0>)
 800a636:	4413      	add	r3, r2
 800a638:	613b      	str	r3, [r7, #16]
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	605a      	str	r2, [r3, #4]
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	3308      	adds	r3, #8
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d104      	bne.n	800a65a <vTaskSwitchContext+0x8e>
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	605a      	str	r2, [r3, #4]
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	4a07      	ldr	r2, [pc, #28]	@ (800a680 <vTaskSwitchContext+0xb4>)
 800a662:	6013      	str	r3, [r2, #0]
}
 800a664:	bf00      	nop
 800a666:	371c      	adds	r7, #28
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	200049a8 	.word	0x200049a8
 800a674:	20004994 	.word	0x20004994
 800a678:	20004988 	.word	0x20004988
 800a67c:	20004884 	.word	0x20004884
 800a680:	20004880 	.word	0x20004880

0800a684 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10b      	bne.n	800a6ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	60fb      	str	r3, [r7, #12]
}
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
 800a6aa:	e7fd      	b.n	800a6a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6ac:	4b07      	ldr	r3, [pc, #28]	@ (800a6cc <vTaskPlaceOnEventList+0x48>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	3318      	adds	r3, #24
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7fe fb66 	bl	8008d86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	6838      	ldr	r0, [r7, #0]
 800a6be:	f000 fb87 	bl	800add0 <prvAddCurrentTaskToDelayedList>
}
 800a6c2:	bf00      	nop
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	20004880 	.word	0x20004880

0800a6d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10b      	bne.n	800a6fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	60fb      	str	r3, [r7, #12]
}
 800a6f8:	bf00      	nop
 800a6fa:	bf00      	nop
 800a6fc:	e7fd      	b.n	800a6fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	3318      	adds	r3, #24
 800a702:	4618      	mov	r0, r3
 800a704:	f7fe fb78 	bl	8008df8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a708:	4b1d      	ldr	r3, [pc, #116]	@ (800a780 <xTaskRemoveFromEventList+0xb0>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d11c      	bne.n	800a74a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	3304      	adds	r3, #4
 800a714:	4618      	mov	r0, r3
 800a716:	f7fe fb6f 	bl	8008df8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a71e:	2201      	movs	r2, #1
 800a720:	409a      	lsls	r2, r3
 800a722:	4b18      	ldr	r3, [pc, #96]	@ (800a784 <xTaskRemoveFromEventList+0xb4>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4313      	orrs	r3, r2
 800a728:	4a16      	ldr	r2, [pc, #88]	@ (800a784 <xTaskRemoveFromEventList+0xb4>)
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a730:	4613      	mov	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4a13      	ldr	r2, [pc, #76]	@ (800a788 <xTaskRemoveFromEventList+0xb8>)
 800a73a:	441a      	add	r2, r3
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	3304      	adds	r3, #4
 800a740:	4619      	mov	r1, r3
 800a742:	4610      	mov	r0, r2
 800a744:	f7fe fafb 	bl	8008d3e <vListInsertEnd>
 800a748:	e005      	b.n	800a756 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	3318      	adds	r3, #24
 800a74e:	4619      	mov	r1, r3
 800a750:	480e      	ldr	r0, [pc, #56]	@ (800a78c <xTaskRemoveFromEventList+0xbc>)
 800a752:	f7fe faf4 	bl	8008d3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a75a:	4b0d      	ldr	r3, [pc, #52]	@ (800a790 <xTaskRemoveFromEventList+0xc0>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a760:	429a      	cmp	r2, r3
 800a762:	d905      	bls.n	800a770 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a764:	2301      	movs	r3, #1
 800a766:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a768:	4b0a      	ldr	r3, [pc, #40]	@ (800a794 <xTaskRemoveFromEventList+0xc4>)
 800a76a:	2201      	movs	r2, #1
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	e001      	b.n	800a774 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a770:	2300      	movs	r3, #0
 800a772:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a774:	697b      	ldr	r3, [r7, #20]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	200049a8 	.word	0x200049a8
 800a784:	20004988 	.word	0x20004988
 800a788:	20004884 	.word	0x20004884
 800a78c:	20004940 	.word	0x20004940
 800a790:	20004880 	.word	0x20004880
 800a794:	20004994 	.word	0x20004994

0800a798 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7a0:	4b06      	ldr	r3, [pc, #24]	@ (800a7bc <vTaskInternalSetTimeOutState+0x24>)
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7a8:	4b05      	ldr	r3, [pc, #20]	@ (800a7c0 <vTaskInternalSetTimeOutState+0x28>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	605a      	str	r2, [r3, #4]
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	20004998 	.word	0x20004998
 800a7c0:	20004984 	.word	0x20004984

0800a7c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b088      	sub	sp, #32
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10b      	bne.n	800a7ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a7d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d8:	f383 8811 	msr	BASEPRI, r3
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	f3bf 8f4f 	dsb	sy
 800a7e4:	613b      	str	r3, [r7, #16]
}
 800a7e6:	bf00      	nop
 800a7e8:	bf00      	nop
 800a7ea:	e7fd      	b.n	800a7e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10b      	bne.n	800a80a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	60fb      	str	r3, [r7, #12]
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop
 800a808:	e7fd      	b.n	800a806 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a80a:	f7fe fc4d 	bl	80090a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a80e:	4b1d      	ldr	r3, [pc, #116]	@ (800a884 <xTaskCheckForTimeOut+0xc0>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	69ba      	ldr	r2, [r7, #24]
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a826:	d102      	bne.n	800a82e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a828:	2300      	movs	r3, #0
 800a82a:	61fb      	str	r3, [r7, #28]
 800a82c:	e023      	b.n	800a876 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	4b15      	ldr	r3, [pc, #84]	@ (800a888 <xTaskCheckForTimeOut+0xc4>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	429a      	cmp	r2, r3
 800a838:	d007      	beq.n	800a84a <xTaskCheckForTimeOut+0x86>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	69ba      	ldr	r2, [r7, #24]
 800a840:	429a      	cmp	r2, r3
 800a842:	d302      	bcc.n	800a84a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a844:	2301      	movs	r3, #1
 800a846:	61fb      	str	r3, [r7, #28]
 800a848:	e015      	b.n	800a876 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	429a      	cmp	r2, r3
 800a852:	d20b      	bcs.n	800a86c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	1ad2      	subs	r2, r2, r3
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f7ff ff99 	bl	800a798 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a866:	2300      	movs	r3, #0
 800a868:	61fb      	str	r3, [r7, #28]
 800a86a:	e004      	b.n	800a876 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	2200      	movs	r2, #0
 800a870:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a872:	2301      	movs	r3, #1
 800a874:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a876:	f7fe fc49 	bl	800910c <vPortExitCritical>

	return xReturn;
 800a87a:	69fb      	ldr	r3, [r7, #28]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3720      	adds	r7, #32
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	20004984 	.word	0x20004984
 800a888:	20004998 	.word	0x20004998

0800a88c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a88c:	b480      	push	{r7}
 800a88e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a890:	4b03      	ldr	r3, [pc, #12]	@ (800a8a0 <vTaskMissedYield+0x14>)
 800a892:	2201      	movs	r2, #1
 800a894:	601a      	str	r2, [r3, #0]
}
 800a896:	bf00      	nop
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr
 800a8a0:	20004994 	.word	0x20004994

0800a8a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8ac:	f000 f852 	bl	800a954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8b0:	4b06      	ldr	r3, [pc, #24]	@ (800a8cc <prvIdleTask+0x28>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d9f9      	bls.n	800a8ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8b8:	4b05      	ldr	r3, [pc, #20]	@ (800a8d0 <prvIdleTask+0x2c>)
 800a8ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8be:	601a      	str	r2, [r3, #0]
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8c8:	e7f0      	b.n	800a8ac <prvIdleTask+0x8>
 800a8ca:	bf00      	nop
 800a8cc:	20004884 	.word	0x20004884
 800a8d0:	e000ed04 	.word	0xe000ed04

0800a8d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8da:	2300      	movs	r3, #0
 800a8dc:	607b      	str	r3, [r7, #4]
 800a8de:	e00c      	b.n	800a8fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4413      	add	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4a12      	ldr	r2, [pc, #72]	@ (800a934 <prvInitialiseTaskLists+0x60>)
 800a8ec:	4413      	add	r3, r2
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fe f9f8 	bl	8008ce4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	607b      	str	r3, [r7, #4]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b06      	cmp	r3, #6
 800a8fe:	d9ef      	bls.n	800a8e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a900:	480d      	ldr	r0, [pc, #52]	@ (800a938 <prvInitialiseTaskLists+0x64>)
 800a902:	f7fe f9ef 	bl	8008ce4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a906:	480d      	ldr	r0, [pc, #52]	@ (800a93c <prvInitialiseTaskLists+0x68>)
 800a908:	f7fe f9ec 	bl	8008ce4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a90c:	480c      	ldr	r0, [pc, #48]	@ (800a940 <prvInitialiseTaskLists+0x6c>)
 800a90e:	f7fe f9e9 	bl	8008ce4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a912:	480c      	ldr	r0, [pc, #48]	@ (800a944 <prvInitialiseTaskLists+0x70>)
 800a914:	f7fe f9e6 	bl	8008ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a918:	480b      	ldr	r0, [pc, #44]	@ (800a948 <prvInitialiseTaskLists+0x74>)
 800a91a:	f7fe f9e3 	bl	8008ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a91e:	4b0b      	ldr	r3, [pc, #44]	@ (800a94c <prvInitialiseTaskLists+0x78>)
 800a920:	4a05      	ldr	r2, [pc, #20]	@ (800a938 <prvInitialiseTaskLists+0x64>)
 800a922:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a924:	4b0a      	ldr	r3, [pc, #40]	@ (800a950 <prvInitialiseTaskLists+0x7c>)
 800a926:	4a05      	ldr	r2, [pc, #20]	@ (800a93c <prvInitialiseTaskLists+0x68>)
 800a928:	601a      	str	r2, [r3, #0]
}
 800a92a:	bf00      	nop
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20004884 	.word	0x20004884
 800a938:	20004910 	.word	0x20004910
 800a93c:	20004924 	.word	0x20004924
 800a940:	20004940 	.word	0x20004940
 800a944:	20004954 	.word	0x20004954
 800a948:	2000496c 	.word	0x2000496c
 800a94c:	20004938 	.word	0x20004938
 800a950:	2000493c 	.word	0x2000493c

0800a954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a95a:	e019      	b.n	800a990 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a95c:	f7fe fba4 	bl	80090a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a960:	4b10      	ldr	r3, [pc, #64]	@ (800a9a4 <prvCheckTasksWaitingTermination+0x50>)
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3304      	adds	r3, #4
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fe fa43 	bl	8008df8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a972:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a8 <prvCheckTasksWaitingTermination+0x54>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	3b01      	subs	r3, #1
 800a978:	4a0b      	ldr	r2, [pc, #44]	@ (800a9a8 <prvCheckTasksWaitingTermination+0x54>)
 800a97a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a97c:	4b0b      	ldr	r3, [pc, #44]	@ (800a9ac <prvCheckTasksWaitingTermination+0x58>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	3b01      	subs	r3, #1
 800a982:	4a0a      	ldr	r2, [pc, #40]	@ (800a9ac <prvCheckTasksWaitingTermination+0x58>)
 800a984:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a986:	f7fe fbc1 	bl	800910c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 f810 	bl	800a9b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a990:	4b06      	ldr	r3, [pc, #24]	@ (800a9ac <prvCheckTasksWaitingTermination+0x58>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1e1      	bne.n	800a95c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a998:	bf00      	nop
 800a99a:	bf00      	nop
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	20004954 	.word	0x20004954
 800a9a8:	20004980 	.word	0x20004980
 800a9ac:	20004968 	.word	0x20004968

0800a9b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d108      	bne.n	800a9d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fe f86c 	bl	8008aa4 <vPortFree>
				vPortFree( pxTCB );
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7fe f869 	bl	8008aa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9d2:	e019      	b.n	800aa08 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d103      	bne.n	800a9e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7fe f860 	bl	8008aa4 <vPortFree>
	}
 800a9e4:	e010      	b.n	800aa08 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d00b      	beq.n	800aa08 <prvDeleteTCB+0x58>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	60fb      	str	r3, [r7, #12]
}
 800aa02:	bf00      	nop
 800aa04:	bf00      	nop
 800aa06:	e7fd      	b.n	800aa04 <prvDeleteTCB+0x54>
	}
 800aa08:	bf00      	nop
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa16:	4b0c      	ldr	r3, [pc, #48]	@ (800aa48 <prvResetNextTaskUnblockTime+0x38>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d104      	bne.n	800aa2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa20:	4b0a      	ldr	r3, [pc, #40]	@ (800aa4c <prvResetNextTaskUnblockTime+0x3c>)
 800aa22:	f04f 32ff 	mov.w	r2, #4294967295
 800aa26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa28:	e008      	b.n	800aa3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa2a:	4b07      	ldr	r3, [pc, #28]	@ (800aa48 <prvResetNextTaskUnblockTime+0x38>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	4a04      	ldr	r2, [pc, #16]	@ (800aa4c <prvResetNextTaskUnblockTime+0x3c>)
 800aa3a:	6013      	str	r3, [r2, #0]
}
 800aa3c:	bf00      	nop
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr
 800aa48:	20004938 	.word	0x20004938
 800aa4c:	200049a0 	.word	0x200049a0

0800aa50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa56:	4b0b      	ldr	r3, [pc, #44]	@ (800aa84 <xTaskGetSchedulerState+0x34>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d102      	bne.n	800aa64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	607b      	str	r3, [r7, #4]
 800aa62:	e008      	b.n	800aa76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa64:	4b08      	ldr	r3, [pc, #32]	@ (800aa88 <xTaskGetSchedulerState+0x38>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d102      	bne.n	800aa72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	607b      	str	r3, [r7, #4]
 800aa70:	e001      	b.n	800aa76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa72:	2300      	movs	r3, #0
 800aa74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa76:	687b      	ldr	r3, [r7, #4]
	}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr
 800aa84:	2000498c 	.word	0x2000498c
 800aa88:	200049a8 	.word	0x200049a8

0800aa8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d05e      	beq.n	800ab60 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaa6:	4b31      	ldr	r3, [pc, #196]	@ (800ab6c <xTaskPriorityInherit+0xe0>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d24e      	bcs.n	800ab4e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	db06      	blt.n	800aac6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aab8:	4b2c      	ldr	r3, [pc, #176]	@ (800ab6c <xTaskPriorityInherit+0xe0>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aabe:	f1c3 0207 	rsb	r2, r3, #7
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	6959      	ldr	r1, [r3, #20]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4a26      	ldr	r2, [pc, #152]	@ (800ab70 <xTaskPriorityInherit+0xe4>)
 800aad8:	4413      	add	r3, r2
 800aada:	4299      	cmp	r1, r3
 800aadc:	d12f      	bne.n	800ab3e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	3304      	adds	r3, #4
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe f988 	bl	8008df8 <uxListRemove>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10a      	bne.n	800ab04 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf8:	43da      	mvns	r2, r3
 800aafa:	4b1e      	ldr	r3, [pc, #120]	@ (800ab74 <xTaskPriorityInherit+0xe8>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4013      	ands	r3, r2
 800ab00:	4a1c      	ldr	r2, [pc, #112]	@ (800ab74 <xTaskPriorityInherit+0xe8>)
 800ab02:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab04:	4b19      	ldr	r3, [pc, #100]	@ (800ab6c <xTaskPriorityInherit+0xe0>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab12:	2201      	movs	r2, #1
 800ab14:	409a      	lsls	r2, r3
 800ab16:	4b17      	ldr	r3, [pc, #92]	@ (800ab74 <xTaskPriorityInherit+0xe8>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	4a15      	ldr	r2, [pc, #84]	@ (800ab74 <xTaskPriorityInherit+0xe8>)
 800ab1e:	6013      	str	r3, [r2, #0]
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab24:	4613      	mov	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4a10      	ldr	r2, [pc, #64]	@ (800ab70 <xTaskPriorityInherit+0xe4>)
 800ab2e:	441a      	add	r2, r3
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	3304      	adds	r3, #4
 800ab34:	4619      	mov	r1, r3
 800ab36:	4610      	mov	r0, r2
 800ab38:	f7fe f901 	bl	8008d3e <vListInsertEnd>
 800ab3c:	e004      	b.n	800ab48 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ab6c <xTaskPriorityInherit+0xe0>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	60fb      	str	r3, [r7, #12]
 800ab4c:	e008      	b.n	800ab60 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab52:	4b06      	ldr	r3, [pc, #24]	@ (800ab6c <xTaskPriorityInherit+0xe0>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d201      	bcs.n	800ab60 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab60:	68fb      	ldr	r3, [r7, #12]
	}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20004880 	.word	0x20004880
 800ab70:	20004884 	.word	0x20004884
 800ab74:	20004988 	.word	0x20004988

0800ab78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab84:	2300      	movs	r3, #0
 800ab86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d070      	beq.n	800ac70 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab8e:	4b3b      	ldr	r3, [pc, #236]	@ (800ac7c <xTaskPriorityDisinherit+0x104>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d00b      	beq.n	800abb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ab98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	60fb      	str	r3, [r7, #12]
}
 800abaa:	bf00      	nop
 800abac:	bf00      	nop
 800abae:	e7fd      	b.n	800abac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10b      	bne.n	800abd0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800abb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	60bb      	str	r3, [r7, #8]
}
 800abca:	bf00      	nop
 800abcc:	bf00      	nop
 800abce:	e7fd      	b.n	800abcc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abd4:	1e5a      	subs	r2, r3, #1
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d044      	beq.n	800ac70 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abea:	2b00      	cmp	r3, #0
 800abec:	d140      	bne.n	800ac70 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fe f900 	bl	8008df8 <uxListRemove>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d115      	bne.n	800ac2a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac02:	491f      	ldr	r1, [pc, #124]	@ (800ac80 <xTaskPriorityDisinherit+0x108>)
 800ac04:	4613      	mov	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4413      	add	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	440b      	add	r3, r1
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10a      	bne.n	800ac2a <xTaskPriorityDisinherit+0xb2>
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac18:	2201      	movs	r2, #1
 800ac1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac1e:	43da      	mvns	r2, r3
 800ac20:	4b18      	ldr	r3, [pc, #96]	@ (800ac84 <xTaskPriorityDisinherit+0x10c>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4013      	ands	r3, r2
 800ac26:	4a17      	ldr	r2, [pc, #92]	@ (800ac84 <xTaskPriorityDisinherit+0x10c>)
 800ac28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac36:	f1c3 0207 	rsb	r2, r3, #7
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac42:	2201      	movs	r2, #1
 800ac44:	409a      	lsls	r2, r3
 800ac46:	4b0f      	ldr	r3, [pc, #60]	@ (800ac84 <xTaskPriorityDisinherit+0x10c>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	4a0d      	ldr	r2, [pc, #52]	@ (800ac84 <xTaskPriorityDisinherit+0x10c>)
 800ac4e:	6013      	str	r3, [r2, #0]
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac54:	4613      	mov	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4a08      	ldr	r2, [pc, #32]	@ (800ac80 <xTaskPriorityDisinherit+0x108>)
 800ac5e:	441a      	add	r2, r3
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	3304      	adds	r3, #4
 800ac64:	4619      	mov	r1, r3
 800ac66:	4610      	mov	r0, r2
 800ac68:	f7fe f869 	bl	8008d3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac70:	697b      	ldr	r3, [r7, #20]
	}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3718      	adds	r7, #24
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	20004880 	.word	0x20004880
 800ac80:	20004884 	.word	0x20004884
 800ac84:	20004988 	.word	0x20004988

0800ac88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b088      	sub	sp, #32
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ac96:	2301      	movs	r3, #1
 800ac98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d079      	beq.n	800ad94 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10b      	bne.n	800acc0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	60fb      	str	r3, [r7, #12]
}
 800acba:	bf00      	nop
 800acbc:	bf00      	nop
 800acbe:	e7fd      	b.n	800acbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acc4:	683a      	ldr	r2, [r7, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d902      	bls.n	800acd0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	61fb      	str	r3, [r7, #28]
 800acce:	e002      	b.n	800acd6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acd4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acda:	69fa      	ldr	r2, [r7, #28]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d059      	beq.n	800ad94 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d154      	bne.n	800ad94 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800acea:	4b2c      	ldr	r3, [pc, #176]	@ (800ad9c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	69ba      	ldr	r2, [r7, #24]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d10b      	bne.n	800ad0c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800acf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	60bb      	str	r3, [r7, #8]
}
 800ad06:	bf00      	nop
 800ad08:	bf00      	nop
 800ad0a:	e7fd      	b.n	800ad08 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	69fa      	ldr	r2, [r7, #28]
 800ad16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	db04      	blt.n	800ad2a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	f1c3 0207 	rsb	r2, r3, #7
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	6959      	ldr	r1, [r3, #20]
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	4613      	mov	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4413      	add	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4a19      	ldr	r2, [pc, #100]	@ (800ada0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ad3a:	4413      	add	r3, r2
 800ad3c:	4299      	cmp	r1, r3
 800ad3e:	d129      	bne.n	800ad94 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	3304      	adds	r3, #4
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fe f857 	bl	8008df8 <uxListRemove>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10a      	bne.n	800ad66 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad54:	2201      	movs	r2, #1
 800ad56:	fa02 f303 	lsl.w	r3, r2, r3
 800ad5a:	43da      	mvns	r2, r3
 800ad5c:	4b11      	ldr	r3, [pc, #68]	@ (800ada4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4013      	ands	r3, r2
 800ad62:	4a10      	ldr	r2, [pc, #64]	@ (800ada4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ad64:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	409a      	lsls	r2, r3
 800ad6e:	4b0d      	ldr	r3, [pc, #52]	@ (800ada4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	4a0b      	ldr	r2, [pc, #44]	@ (800ada4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800ad76:	6013      	str	r3, [r2, #0]
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4a06      	ldr	r2, [pc, #24]	@ (800ada0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ad86:	441a      	add	r2, r3
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	4610      	mov	r0, r2
 800ad90:	f7fd ffd5 	bl	8008d3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad94:	bf00      	nop
 800ad96:	3720      	adds	r7, #32
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	20004880 	.word	0x20004880
 800ada0:	20004884 	.word	0x20004884
 800ada4:	20004988 	.word	0x20004988

0800ada8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ada8:	b480      	push	{r7}
 800adaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800adac:	4b07      	ldr	r3, [pc, #28]	@ (800adcc <pvTaskIncrementMutexHeldCount+0x24>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d004      	beq.n	800adbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800adb4:	4b05      	ldr	r3, [pc, #20]	@ (800adcc <pvTaskIncrementMutexHeldCount+0x24>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800adba:	3201      	adds	r2, #1
 800adbc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800adbe:	4b03      	ldr	r3, [pc, #12]	@ (800adcc <pvTaskIncrementMutexHeldCount+0x24>)
 800adc0:	681b      	ldr	r3, [r3, #0]
	}
 800adc2:	4618      	mov	r0, r3
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	20004880 	.word	0x20004880

0800add0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800adda:	4b29      	ldr	r3, [pc, #164]	@ (800ae80 <prvAddCurrentTaskToDelayedList+0xb0>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ade0:	4b28      	ldr	r3, [pc, #160]	@ (800ae84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3304      	adds	r3, #4
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe f806 	bl	8008df8 <uxListRemove>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d10b      	bne.n	800ae0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800adf2:	4b24      	ldr	r3, [pc, #144]	@ (800ae84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adf8:	2201      	movs	r2, #1
 800adfa:	fa02 f303 	lsl.w	r3, r2, r3
 800adfe:	43da      	mvns	r2, r3
 800ae00:	4b21      	ldr	r3, [pc, #132]	@ (800ae88 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4013      	ands	r3, r2
 800ae06:	4a20      	ldr	r2, [pc, #128]	@ (800ae88 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae10:	d10a      	bne.n	800ae28 <prvAddCurrentTaskToDelayedList+0x58>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d007      	beq.n	800ae28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae18:	4b1a      	ldr	r3, [pc, #104]	@ (800ae84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	3304      	adds	r3, #4
 800ae1e:	4619      	mov	r1, r3
 800ae20:	481a      	ldr	r0, [pc, #104]	@ (800ae8c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ae22:	f7fd ff8c 	bl	8008d3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae26:	e026      	b.n	800ae76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae30:	4b14      	ldr	r3, [pc, #80]	@ (800ae84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d209      	bcs.n	800ae54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae40:	4b13      	ldr	r3, [pc, #76]	@ (800ae90 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	4b0f      	ldr	r3, [pc, #60]	@ (800ae84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3304      	adds	r3, #4
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	f7fd ff9a 	bl	8008d86 <vListInsert>
}
 800ae52:	e010      	b.n	800ae76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae54:	4b0f      	ldr	r3, [pc, #60]	@ (800ae94 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	4b0a      	ldr	r3, [pc, #40]	@ (800ae84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	4619      	mov	r1, r3
 800ae60:	4610      	mov	r0, r2
 800ae62:	f7fd ff90 	bl	8008d86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae66:	4b0c      	ldr	r3, [pc, #48]	@ (800ae98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d202      	bcs.n	800ae76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ae70:	4a09      	ldr	r2, [pc, #36]	@ (800ae98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	6013      	str	r3, [r2, #0]
}
 800ae76:	bf00      	nop
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	20004984 	.word	0x20004984
 800ae84:	20004880 	.word	0x20004880
 800ae88:	20004988 	.word	0x20004988
 800ae8c:	2000496c 	.word	0x2000496c
 800ae90:	2000493c 	.word	0x2000493c
 800ae94:	20004938 	.word	0x20004938
 800ae98:	200049a0 	.word	0x200049a0

0800ae9c <minute_part>:
static uint8_t gnssCmd[CMD_SZ];

/* Private functions ---------------------------------------------------------*/

/* Public functions ----------------------------------------------------------*/
int16_t minute_part(float64_t mod){
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	ed87 0b00 	vstr	d0, [r7]
	int16_t minute_whole_part;
	minute_whole_part = (int16_t) mod;
 800aea6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aeaa:	f7f5 fe65 	bl	8000b78 <__aeabi_d2iz>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	81fb      	strh	r3, [r7, #14]
	return minute_whole_part;
 800aeb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
	...

0800aec0 <seconds>:
float64_t seconds(float64_t mod, int16_t minute){
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b086      	sub	sp, #24
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	ed87 0b02 	vstr	d0, [r7, #8]
 800aeca:	4603      	mov	r3, r0
 800aecc:	80fb      	strh	r3, [r7, #6]
	float64_t seconds;
	seconds = (mod-minute)*60.0;
 800aece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7f5 fb36 	bl	8000544 <__aeabi_i2d>
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aee0:	f7f5 f9e2 	bl	80002a8 <__aeabi_dsub>
 800aee4:	4602      	mov	r2, r0
 800aee6:	460b      	mov	r3, r1
 800aee8:	4610      	mov	r0, r2
 800aeea:	4619      	mov	r1, r3
 800aeec:	f04f 0200 	mov.w	r2, #0
 800aef0:	4b08      	ldr	r3, [pc, #32]	@ (800af14 <seconds+0x54>)
 800aef2:	f7f5 fb91 	bl	8000618 <__aeabi_dmul>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return seconds;
 800aefe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800af02:	ec43 2b17 	vmov	d7, r2, r3
}
 800af06:	eeb0 0a47 	vmov.f32	s0, s14
 800af0a:	eef0 0a67 	vmov.f32	s1, s15
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	404e0000 	.word	0x404e0000

0800af18 <GNSS_DATA_SendCommand>:
/* Sends a command to the GNSS module. */
void GNSS_DATA_SendCommand(uint8_t *pCommand)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  int32_t status;

  if (pCommand[0] != 36U) /* An NMEA command must begin with '$' */
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b24      	cmp	r3, #36	@ 0x24
 800af26:	d003      	beq.n	800af30 <GNSS_DATA_SendCommand+0x18>
  {
    PRINT_INFO("Invalid command (an NMEA command begins with '$').\n\r");
 800af28:	480d      	ldr	r0, [pc, #52]	@ (800af60 <GNSS_DATA_SendCommand+0x48>)
 800af2a:	f7f7 fa91 	bl	8002450 <GNSS_PRINT>
    {
      status = GNSS_Wrapper_Send(gnssCmd, (uint16_t)(strlen((char *)gnssCmd)));
    }
    while(status != 0);
  }
}
 800af2e:	e012      	b.n	800af56 <GNSS_DATA_SendCommand+0x3e>
    (void)snprintf((char *)gnssCmd, CMD_SZ, "%s\r\n", (char *)pCommand);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a0c      	ldr	r2, [pc, #48]	@ (800af64 <GNSS_DATA_SendCommand+0x4c>)
 800af34:	215a      	movs	r1, #90	@ 0x5a
 800af36:	480c      	ldr	r0, [pc, #48]	@ (800af68 <GNSS_DATA_SendCommand+0x50>)
 800af38:	f005 fca6 	bl	8010888 <sniprintf>
      status = GNSS_Wrapper_Send(gnssCmd, (uint16_t)(strlen((char *)gnssCmd)));
 800af3c:	480a      	ldr	r0, [pc, #40]	@ (800af68 <GNSS_DATA_SendCommand+0x50>)
 800af3e:	f7f5 f9a7 	bl	8000290 <strlen>
 800af42:	4603      	mov	r3, r0
 800af44:	b29b      	uxth	r3, r3
 800af46:	4619      	mov	r1, r3
 800af48:	4807      	ldr	r0, [pc, #28]	@ (800af68 <GNSS_DATA_SendCommand+0x50>)
 800af4a:	f7f7 fb79 	bl	8002640 <GNSS_Wrapper_Send>
 800af4e:	60f8      	str	r0, [r7, #12]
    while(status != 0);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1f2      	bne.n	800af3c <GNSS_DATA_SendCommand+0x24>
}
 800af56:	bf00      	nop
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	08014280 	.word	0x08014280
 800af64:	080142b8 	.word	0x080142b8
 800af68:	20005cb0 	.word	0x20005cb0
 800af6c:	00000000 	.word	0x00000000

0800af70 <GNSS_DATA_GetValidInfo>:

/* Puts to console data of correctly parsed GPGGA sentence */
void GNSS_DATA_GetValidInfo(GNSSParser_Data_t *pGNSSParser_Data)
{
 800af70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af72:	b08f      	sub	sp, #60	@ 0x3c
 800af74:	af08      	add	r7, sp, #32
 800af76:	6078      	str	r0, [r7, #4]

  if(pGNSSParser_Data->gpgga_data.valid > INVALID)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 80f5 	beq.w	800b16e <GNSS_DATA_GetValidInfo+0x1fe>
  {
    float64_t lat_mod = fmod(pGNSSParser_Data->gpgga_data.xyz.lat, 100.0);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	ed93 7b06 	vldr	d7, [r3, #24]
 800af8a:	ed9f 1b81 	vldr	d1, [pc, #516]	@ 800b190 <GNSS_DATA_GetValidInfo+0x220>
 800af8e:	eeb0 0a47 	vmov.f32	s0, s14
 800af92:	eef0 0a67 	vmov.f32	s1, s15
 800af96:	f008 f9d1 	bl	801333c <fmod>
 800af9a:	ed87 0b04 	vstr	d0, [r7, #16]
    float64_t lon_mod = fmod(pGNSSParser_Data->gpgga_data.xyz.lon, 100.0);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	ed93 7b08 	vldr	d7, [r3, #32]
 800afa4:	ed9f 1b7a 	vldr	d1, [pc, #488]	@ 800b190 <GNSS_DATA_GetValidInfo+0x220>
 800afa8:	eeb0 0a47 	vmov.f32	s0, s14
 800afac:	eef0 0a67 	vmov.f32	s1, s15
 800afb0:	f008 f9c4 	bl	801333c <fmod>
 800afb4:	ed87 0b02 	vstr	d0, [r7, #8]

    (void)snprintf((char *)msg, MSG_SZ, "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
                   pGNSSParser_Data->gpgga_data.utc.hh,
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    (void)snprintf((char *)msg, MSG_SZ, "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800afbe:	4619      	mov	r1, r3
                   pGNSSParser_Data->gpgga_data.utc.mm,
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
    (void)snprintf((char *)msg, MSG_SZ, "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800afc6:	461a      	mov	r2, r3
                   pGNSSParser_Data->gpgga_data.utc.ss);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
    (void)snprintf((char *)msg, MSG_SZ, "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	9200      	str	r2, [sp, #0]
 800afd2:	460b      	mov	r3, r1
 800afd4:	4a70      	ldr	r2, [pc, #448]	@ (800b198 <GNSS_DATA_GetValidInfo+0x228>)
 800afd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800afda:	4870      	ldr	r0, [pc, #448]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800afdc:	f005 fc54 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800afe0:	486e      	ldr	r0, [pc, #440]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800afe2:	f7f7 fa35 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
                   (pGNSSParser_Data->gpgga_data.xyz.lat - lat_mod) / 100.0,
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800afec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aff0:	f7f5 f95a 	bl	80002a8 <__aeabi_dsub>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	4610      	mov	r0, r2
 800affa:	4619      	mov	r1, r3
    (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
 800affc:	f04f 0200 	mov.w	r2, #0
 800b000:	4b67      	ldr	r3, [pc, #412]	@ (800b1a0 <GNSS_DATA_GetValidInfo+0x230>)
 800b002:	f7f5 fc33 	bl	800086c <__aeabi_ddiv>
 800b006:	4602      	mov	r2, r0
 800b008:	460b      	mov	r3, r1
 800b00a:	4614      	mov	r4, r2
 800b00c:	461d      	mov	r5, r3
                   minute_part(lat_mod),
 800b00e:	ed97 0b04 	vldr	d0, [r7, #16]
 800b012:	f7ff ff43 	bl	800ae9c <minute_part>
 800b016:	4603      	mov	r3, r0
    (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
 800b018:	461e      	mov	r6, r3
 800b01a:	ed97 0b04 	vldr	d0, [r7, #16]
 800b01e:	f7ff ff3d 	bl	800ae9c <minute_part>
 800b022:	4603      	mov	r3, r0
 800b024:	4618      	mov	r0, r3
 800b026:	ed97 0b04 	vldr	d0, [r7, #16]
 800b02a:	f7ff ff49 	bl	800aec0 <seconds>
 800b02e:	eeb0 7a40 	vmov.f32	s14, s0
 800b032:	eef0 7a60 	vmov.f32	s15, s1
				   seconds(lat_mod,minute_part(lat_mod)),
                   pGNSSParser_Data->gpgga_data.xyz.ns);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
    (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
 800b03c:	9306      	str	r3, [sp, #24]
 800b03e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b042:	9602      	str	r6, [sp, #8]
 800b044:	e9cd 4500 	strd	r4, r5, [sp]
 800b048:	4a56      	ldr	r2, [pc, #344]	@ (800b1a4 <GNSS_DATA_GetValidInfo+0x234>)
 800b04a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b04e:	4853      	ldr	r0, [pc, #332]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b050:	f005 fc1a 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b054:	4851      	ldr	r0, [pc, #324]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b056:	f7f7 f9fb 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
                   (pGNSSParser_Data->gpgga_data.xyz.lon - lon_mod) / 100.0,
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800b060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b064:	f7f5 f920 	bl	80002a8 <__aeabi_dsub>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	4610      	mov	r0, r2
 800b06e:	4619      	mov	r1, r3
    (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
 800b070:	f04f 0200 	mov.w	r2, #0
 800b074:	4b4a      	ldr	r3, [pc, #296]	@ (800b1a0 <GNSS_DATA_GetValidInfo+0x230>)
 800b076:	f7f5 fbf9 	bl	800086c <__aeabi_ddiv>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	4614      	mov	r4, r2
 800b080:	461d      	mov	r5, r3
				   minute_part(lon_mod),
 800b082:	ed97 0b02 	vldr	d0, [r7, #8]
 800b086:	f7ff ff09 	bl	800ae9c <minute_part>
 800b08a:	4603      	mov	r3, r0
    (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
 800b08c:	461e      	mov	r6, r3
 800b08e:	ed97 0b02 	vldr	d0, [r7, #8]
 800b092:	f7ff ff03 	bl	800ae9c <minute_part>
 800b096:	4603      	mov	r3, r0
 800b098:	4618      	mov	r0, r3
 800b09a:	ed97 0b02 	vldr	d0, [r7, #8]
 800b09e:	f7ff ff0f 	bl	800aec0 <seconds>
 800b0a2:	eeb0 7a40 	vmov.f32	s14, s0
 800b0a6:	eef0 7a60 	vmov.f32	s15, s1
				   seconds(lon_mod,minute_part(lon_mod)),
                   pGNSSParser_Data->gpgga_data.xyz.ew);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
    (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
 800b0b0:	9306      	str	r3, [sp, #24]
 800b0b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b0b6:	9602      	str	r6, [sp, #8]
 800b0b8:	e9cd 4500 	strd	r4, r5, [sp]
 800b0bc:	4a3a      	ldr	r2, [pc, #232]	@ (800b1a8 <GNSS_DATA_GetValidInfo+0x238>)
 800b0be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b0c2:	4836      	ldr	r0, [pc, #216]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b0c4:	f005 fbe0 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b0c8:	4834      	ldr	r0, [pc, #208]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b0ca:	f7f7 f9c1 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ, "Satellites locked:\t[ %d ]\n\r",
                   pGNSSParser_Data->gpgga_data.sats);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
    (void)snprintf((char *)msg, MSG_SZ, "Satellites locked:\t[ %d ]\n\r",
 800b0d4:	4a35      	ldr	r2, [pc, #212]	@ (800b1ac <GNSS_DATA_GetValidInfo+0x23c>)
 800b0d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b0da:	4830      	ldr	r0, [pc, #192]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b0dc:	f005 fbd4 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b0e0:	482e      	ldr	r0, [pc, #184]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b0e2:	f7f7 f9b5 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ, "HDOP:\t\t\t[ %.1f ]\n\r",
                   pGNSSParser_Data->gpgga_data.acc);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    (void)snprintf((char *)msg, MSG_SZ, "HDOP:\t\t\t[ %.1f ]\n\r",
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7f5 fa3c 	bl	8000568 <__aeabi_f2d>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	e9cd 2300 	strd	r2, r3, [sp]
 800b0f8:	4a2d      	ldr	r2, [pc, #180]	@ (800b1b0 <GNSS_DATA_GetValidInfo+0x240>)
 800b0fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b0fe:	4827      	ldr	r0, [pc, #156]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b100:	f005 fbc2 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b104:	4825      	ldr	r0, [pc, #148]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b106:	f7f7 f9a3 	bl	8002450 <GNSS_PRINT>
    

    (void)snprintf((char *)msg, MSG_SZ, "Altitude:\t\t[ %.2f%c ]\n\r",
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
                   pGNSSParser_Data->gpgga_data.xyz.alt,
                   (pGNSSParser_Data->gpgga_data.xyz.mis + 32U));
 800b110:	6879      	ldr	r1, [r7, #4]
 800b112:	f891 1032 	ldrb.w	r1, [r1, #50]	@ 0x32
    (void)snprintf((char *)msg, MSG_SZ, "Altitude:\t\t[ %.2f%c ]\n\r",
 800b116:	3120      	adds	r1, #32
 800b118:	9102      	str	r1, [sp, #8]
 800b11a:	e9cd 2300 	strd	r2, r3, [sp]
 800b11e:	4a25      	ldr	r2, [pc, #148]	@ (800b1b4 <GNSS_DATA_GetValidInfo+0x244>)
 800b120:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b124:	481d      	ldr	r0, [pc, #116]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b126:	f005 fbaf 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b12a:	481c      	ldr	r0, [pc, #112]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b12c:	f7f7 f990 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ, "Geoid infos:\t\t[ %d%c ]\n\r",
                   pGNSSParser_Data->gpgga_data.geoid.height,
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
    (void)snprintf((char *)msg, MSG_SZ, "Geoid infos:\t\t[ %d%c ]\n\r",
 800b136:	461a      	mov	r2, r3
                   pGNSSParser_Data->gpgga_data.geoid.mis);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
    (void)snprintf((char *)msg, MSG_SZ, "Geoid infos:\t\t[ %d%c ]\n\r",
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	4613      	mov	r3, r2
 800b142:	4a1d      	ldr	r2, [pc, #116]	@ (800b1b8 <GNSS_DATA_GetValidInfo+0x248>)
 800b144:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b148:	4814      	ldr	r0, [pc, #80]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b14a:	f005 fb9d 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b14e:	4813      	ldr	r0, [pc, #76]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b150:	f7f7 f97e 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ, "Diff update:\t\t[ %d ]\n\r",
                   pGNSSParser_Data->gpgga_data.update);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
    (void)snprintf((char *)msg, MSG_SZ, "Diff update:\t\t[ %d ]\n\r",
 800b15a:	4a18      	ldr	r2, [pc, #96]	@ (800b1bc <GNSS_DATA_GetValidInfo+0x24c>)
 800b15c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b160:	480e      	ldr	r0, [pc, #56]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b162:	f005 fb91 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b166:	480d      	ldr	r0, [pc, #52]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b168:	f7f7 f972 	bl	8002450 <GNSS_PRINT>
 800b16c:	e008      	b.n	800b180 <GNSS_DATA_GetValidInfo+0x210>

  }
  else
  {
    (void)snprintf((char *)msg, MSG_SZ,  "Last position wasn't valid.\n\n\r");
 800b16e:	4a14      	ldr	r2, [pc, #80]	@ (800b1c0 <GNSS_DATA_GetValidInfo+0x250>)
 800b170:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b174:	4809      	ldr	r0, [pc, #36]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b176:	f005 fb87 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b17a:	4808      	ldr	r0, [pc, #32]	@ (800b19c <GNSS_DATA_GetValidInfo+0x22c>)
 800b17c:	f7f7 f968 	bl	8002450 <GNSS_PRINT>
  }

  PRINT_INFO("\n\n\r>");
 800b180:	4810      	ldr	r0, [pc, #64]	@ (800b1c4 <GNSS_DATA_GetValidInfo+0x254>)
 800b182:	f7f7 f965 	bl	8002450 <GNSS_PRINT>
}
 800b186:	bf00      	nop
 800b188:	371c      	adds	r7, #28
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b18e:	bf00      	nop
 800b190:	00000000 	.word	0x00000000
 800b194:	40590000 	.word	0x40590000
 800b198:	080142c0 	.word	0x080142c0
 800b19c:	20005bb0 	.word	0x20005bb0
 800b1a0:	40590000 	.word	0x40590000
 800b1a4:	080142dc 	.word	0x080142dc
 800b1a8:	08014300 	.word	0x08014300
 800b1ac:	08014324 	.word	0x08014324
 800b1b0:	08014340 	.word	0x08014340
 800b1b4:	08014354 	.word	0x08014354
 800b1b8:	0801436c 	.word	0x0801436c
 800b1bc:	08014388 	.word	0x08014388
 800b1c0:	080143a0 	.word	0x080143a0
 800b1c4:	080143c0 	.word	0x080143c0

0800b1c8 <GNSS_DATA_TrackGotPos>:

/* Puts to console the tracking data using the result of parsed GPGGA sentence */
int32_t GNSS_DATA_TrackGotPos(GNSSParser_Data_t *pGNSSParser_Data, uint32_t how_many, uint32_t time)
{
 800b1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ca:	b09b      	sub	sp, #108	@ 0x6c
 800b1cc:	af10      	add	r7, sp, #64	@ 0x40
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
  int32_t tracked = 0;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	627b      	str	r3, [r7, #36]	@ 0x24
  for(uint16_t i = 0; i < (uint16_t)how_many; i++)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b1dc:	e11e      	b.n	800b41c <GNSS_DATA_TrackGotPos+0x254>
  {
    if(pGNSSParser_Data->gpgga_data.valid == INVALID)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f000 8120 	beq.w	800b42a <GNSS_DATA_TrackGotPos+0x262>
    {
      break;
    }

    tracked++;
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	627b      	str	r3, [r7, #36]	@ 0x24

    (void)snprintf((char *)msg, MSG_SZ,  "Position %d just get.\r\n", i + 1U);
 800b1f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	4a92      	ldr	r2, [pc, #584]	@ (800b440 <GNSS_DATA_TrackGotPos+0x278>)
 800b1f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b1fa:	4892      	ldr	r0, [pc, #584]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b1fc:	f005 fb44 	bl	8010888 <sniprintf>

    PRINT_INFO((char *)msg);
 800b200:	4890      	ldr	r0, [pc, #576]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b202:	f7f7 f925 	bl	8002450 <GNSS_PRINT>
    if(pGNSSParser_Data->debug == DEBUG_ON)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	f040 80dc 	bne.w	800b3c8 <GNSS_DATA_TrackGotPos+0x200>
    {
      float64_t lat_mod = fmod(pGNSSParser_Data->gpgga_data.xyz.lat, 100.0);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	ed93 7b06 	vldr	d7, [r3, #24]
 800b216:	ed9f 1b88 	vldr	d1, [pc, #544]	@ 800b438 <GNSS_DATA_TrackGotPos+0x270>
 800b21a:	eeb0 0a47 	vmov.f32	s0, s14
 800b21e:	eef0 0a67 	vmov.f32	s1, s15
 800b222:	f008 f88b 	bl	801333c <fmod>
 800b226:	ed87 0b06 	vstr	d0, [r7, #24]
      float64_t lon_mod = fmod(pGNSSParser_Data->gpgga_data.xyz.lon, 100.0);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	ed93 7b08 	vldr	d7, [r3, #32]
 800b230:	ed9f 1b81 	vldr	d1, [pc, #516]	@ 800b438 <GNSS_DATA_TrackGotPos+0x270>
 800b234:	eeb0 0a47 	vmov.f32	s0, s14
 800b238:	eef0 0a67 	vmov.f32	s1, s15
 800b23c:	f008 f87e 	bl	801333c <fmod>
 800b240:	ed87 0b04 	vstr	d0, [r7, #16]

      PRINT_INFO("Debug ON.\r\n");
 800b244:	4880      	ldr	r0, [pc, #512]	@ (800b448 <GNSS_DATA_TrackGotPos+0x280>)
 800b246:	f7f7 f903 	bl	8002450 <GNSS_PRINT>

      (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
                     pGNSSParser_Data->gpgga_data.utc.hh,
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
      (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800b250:	4619      	mov	r1, r3
                     pGNSSParser_Data->gpgga_data.utc.mm,
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
      (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800b258:	461a      	mov	r2, r3
                     pGNSSParser_Data->gpgga_data.utc.ss);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
      (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800b260:	9301      	str	r3, [sp, #4]
 800b262:	9200      	str	r2, [sp, #0]
 800b264:	460b      	mov	r3, r1
 800b266:	4a79      	ldr	r2, [pc, #484]	@ (800b44c <GNSS_DATA_TrackGotPos+0x284>)
 800b268:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b26c:	4875      	ldr	r0, [pc, #468]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b26e:	f005 fb0b 	bl	8010888 <sniprintf>
      PRINT_INFO((char *)msg);
 800b272:	4874      	ldr	r0, [pc, #464]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b274:	f7f7 f8ec 	bl	8002450 <GNSS_PRINT>

      (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %c ]\n\r",
                     (pGNSSParser_Data->gpgga_data.xyz.lat - lat_mod) / 100.0,
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800b27e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b282:	f7f5 f811 	bl	80002a8 <__aeabi_dsub>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	4610      	mov	r0, r2
 800b28c:	4619      	mov	r1, r3
      (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %c ]\n\r",
 800b28e:	f04f 0200 	mov.w	r2, #0
 800b292:	4b6f      	ldr	r3, [pc, #444]	@ (800b450 <GNSS_DATA_TrackGotPos+0x288>)
 800b294:	f7f5 faea 	bl	800086c <__aeabi_ddiv>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	4614      	mov	r4, r2
 800b29e:	461d      	mov	r5, r3
                     (int16_t)lat_mod,
 800b2a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b2a4:	f7f5 fc68 	bl	8000b78 <__aeabi_d2iz>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	b21b      	sxth	r3, r3
      (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %c ]\n\r",
 800b2ac:	461a      	mov	r2, r3
                     pGNSSParser_Data->gpgga_data.xyz.ns);       
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
      (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %c ]\n\r",
 800b2b4:	9303      	str	r3, [sp, #12]
 800b2b6:	9202      	str	r2, [sp, #8]
 800b2b8:	e9cd 4500 	strd	r4, r5, [sp]
 800b2bc:	4a65      	ldr	r2, [pc, #404]	@ (800b454 <GNSS_DATA_TrackGotPos+0x28c>)
 800b2be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b2c2:	4860      	ldr	r0, [pc, #384]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b2c4:	f005 fae0 	bl	8010888 <sniprintf>
      PRINT_INFO((char *)msg);
 800b2c8:	485e      	ldr	r0, [pc, #376]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b2ca:	f7f7 f8c1 	bl	8002450 <GNSS_PRINT>

      (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %c ]\n\r",
                     (pGNSSParser_Data->gpgga_data.xyz.lon - lon_mod) / 100.0,
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800b2d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b2d8:	f7f4 ffe6 	bl	80002a8 <__aeabi_dsub>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	4619      	mov	r1, r3
      (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %c ]\n\r",
 800b2e4:	f04f 0200 	mov.w	r2, #0
 800b2e8:	4b59      	ldr	r3, [pc, #356]	@ (800b450 <GNSS_DATA_TrackGotPos+0x288>)
 800b2ea:	f7f5 fabf 	bl	800086c <__aeabi_ddiv>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4614      	mov	r4, r2
 800b2f4:	461d      	mov	r5, r3
                     (int16_t)lon_mod,
 800b2f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b2fa:	f7f5 fc3d 	bl	8000b78 <__aeabi_d2iz>
 800b2fe:	4603      	mov	r3, r0
 800b300:	b21b      	sxth	r3, r3
      (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %c ]\n\r",
 800b302:	461a      	mov	r2, r3
                     pGNSSParser_Data->gpgga_data.xyz.ew);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
      (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %c ]\n\r",
 800b30a:	9303      	str	r3, [sp, #12]
 800b30c:	9202      	str	r2, [sp, #8]
 800b30e:	e9cd 4500 	strd	r4, r5, [sp]
 800b312:	4a51      	ldr	r2, [pc, #324]	@ (800b458 <GNSS_DATA_TrackGotPos+0x290>)
 800b314:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b318:	484a      	ldr	r0, [pc, #296]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b31a:	f005 fab5 	bl	8010888 <sniprintf>
      PRINT_INFO((char *)msg);
 800b31e:	4849      	ldr	r0, [pc, #292]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b320:	f7f7 f896 	bl	8002450 <GNSS_PRINT>

      (void)snprintf((char *)msg, MSG_SZ, "Satellites locked:\t[ %d ]\n\r",
                     pGNSSParser_Data->gpgga_data.sats);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
      (void)snprintf((char *)msg, MSG_SZ, "Satellites locked:\t[ %d ]\n\r",
 800b32a:	4a4c      	ldr	r2, [pc, #304]	@ (800b45c <GNSS_DATA_TrackGotPos+0x294>)
 800b32c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b330:	4844      	ldr	r0, [pc, #272]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b332:	f005 faa9 	bl	8010888 <sniprintf>
      PRINT_INFO((char *)msg);
 800b336:	4843      	ldr	r0, [pc, #268]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b338:	f7f7 f88a 	bl	8002450 <GNSS_PRINT>

      (void)snprintf((char *)msg, MSG_SZ, "HDOP:\t\t\t[ %.1f ]\n\r",
                     pGNSSParser_Data->gpgga_data.acc);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      (void)snprintf((char *)msg, MSG_SZ, "HDOP:\t\t\t[ %.1f ]\n\r",
 800b340:	4618      	mov	r0, r3
 800b342:	f7f5 f911 	bl	8000568 <__aeabi_f2d>
 800b346:	4602      	mov	r2, r0
 800b348:	460b      	mov	r3, r1
 800b34a:	e9cd 2300 	strd	r2, r3, [sp]
 800b34e:	4a44      	ldr	r2, [pc, #272]	@ (800b460 <GNSS_DATA_TrackGotPos+0x298>)
 800b350:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b354:	483b      	ldr	r0, [pc, #236]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b356:	f005 fa97 	bl	8010888 <sniprintf>
      PRINT_INFO((char *)msg);
 800b35a:	483a      	ldr	r0, [pc, #232]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b35c:	f7f7 f878 	bl	8002450 <GNSS_PRINT>

      (void)snprintf((char *)msg, MSG_SZ, "Altitude:\t\t[ %.2f%c ]\n\r",
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
                     pGNSSParser_Data->gpgga_data.xyz.alt,
                     (pGNSSParser_Data->gpgga_data.xyz.mis + 32U));
 800b366:	68f9      	ldr	r1, [r7, #12]
 800b368:	f891 1032 	ldrb.w	r1, [r1, #50]	@ 0x32
      (void)snprintf((char *)msg, MSG_SZ, "Altitude:\t\t[ %.2f%c ]\n\r",
 800b36c:	3120      	adds	r1, #32
 800b36e:	9102      	str	r1, [sp, #8]
 800b370:	e9cd 2300 	strd	r2, r3, [sp]
 800b374:	4a3b      	ldr	r2, [pc, #236]	@ (800b464 <GNSS_DATA_TrackGotPos+0x29c>)
 800b376:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b37a:	4832      	ldr	r0, [pc, #200]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b37c:	f005 fa84 	bl	8010888 <sniprintf>
      PRINT_INFO((char *)msg);
 800b380:	4830      	ldr	r0, [pc, #192]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b382:	f7f7 f865 	bl	8002450 <GNSS_PRINT>

      (void)snprintf((char *)msg, MSG_SZ, "Geoid infos:\t\t[ %d%c ]\n\r",
                     pGNSSParser_Data->gpgga_data.geoid.height,
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
      (void)snprintf((char *)msg, MSG_SZ, "Geoid infos:\t\t[ %d%c ]\n\r",
 800b38c:	461a      	mov	r2, r3
                     pGNSSParser_Data->gpgga_data.geoid.mis);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
      (void)snprintf((char *)msg, MSG_SZ, "Geoid infos:\t\t[ %d%c ]\n\r",
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	4613      	mov	r3, r2
 800b398:	4a33      	ldr	r2, [pc, #204]	@ (800b468 <GNSS_DATA_TrackGotPos+0x2a0>)
 800b39a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b39e:	4829      	ldr	r0, [pc, #164]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b3a0:	f005 fa72 	bl	8010888 <sniprintf>
      PRINT_INFO((char *)msg);
 800b3a4:	4827      	ldr	r0, [pc, #156]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b3a6:	f7f7 f853 	bl	8002450 <GNSS_PRINT>

      (void)snprintf((char*)msg, MSG_SZ, "Diff update:\t\t[ %d ]\n\r",
                     pGNSSParser_Data->gpgga_data.update);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
      (void)snprintf((char*)msg, MSG_SZ, "Diff update:\t\t[ %d ]\n\r",
 800b3b0:	4a2e      	ldr	r2, [pc, #184]	@ (800b46c <GNSS_DATA_TrackGotPos+0x2a4>)
 800b3b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b3b6:	4823      	ldr	r0, [pc, #140]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b3b8:	f005 fa66 	bl	8010888 <sniprintf>
      PRINT_INFO((char *)msg);
 800b3bc:	4821      	ldr	r0, [pc, #132]	@ (800b444 <GNSS_DATA_TrackGotPos+0x27c>)
 800b3be:	f7f7 f847 	bl	8002450 <GNSS_PRINT>

      PRINT_INFO("\n\n\r");
 800b3c2:	482b      	ldr	r0, [pc, #172]	@ (800b470 <GNSS_DATA_TrackGotPos+0x2a8>)
 800b3c4:	f7f7 f844 	bl	8002450 <GNSS_PRINT>
    }
    NMEA_Copy_Data(&stored_positions[i], pGNSSParser_Data->gpgga_data);
 800b3c8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	00db      	lsls	r3, r3, #3
 800b3ce:	4413      	add	r3, r2
 800b3d0:	00db      	lsls	r3, r3, #3
 800b3d2:	4a28      	ldr	r2, [pc, #160]	@ (800b474 <GNSS_DATA_TrackGotPos+0x2ac>)
 800b3d4:	eb03 0c02 	add.w	ip, r3, r2
 800b3d8:	68fe      	ldr	r6, [r7, #12]
 800b3da:	466d      	mov	r5, sp
 800b3dc:	f106 0410 	add.w	r4, r6, #16
 800b3e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b3e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b3e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b3ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b3f0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800b3f4:	f106 0308 	add.w	r3, r6, #8
 800b3f8:	cb0c      	ldmia	r3, {r2, r3}
 800b3fa:	4660      	mov	r0, ip
 800b3fc:	f003 fc70 	bl	800ece0 <NMEA_Copy_Data>
    if(time != 0U)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d007      	beq.n	800b416 <GNSS_DATA_TrackGotPos+0x24e>
    {
      (void)OS_Delay(time * 1000U);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b40c:	fb02 f303 	mul.w	r3, r2, r3
 800b410:	4618      	mov	r0, r3
 800b412:	f7fd f9c9 	bl	80087a8 <osDelay>
  for(uint16_t i = 0; i < (uint16_t)how_many; i++)
 800b416:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b418:	3301      	adds	r3, #1
 800b41a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	b29b      	uxth	r3, r3
 800b420:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b422:	429a      	cmp	r2, r3
 800b424:	f4ff aedb 	bcc.w	800b1de <GNSS_DATA_TrackGotPos+0x16>
 800b428:	e000      	b.n	800b42c <GNSS_DATA_TrackGotPos+0x264>
      break;
 800b42a:	bf00      	nop
    }
  }
  return tracked;
 800b42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b42e:	4618      	mov	r0, r3
 800b430:	372c      	adds	r7, #44	@ 0x2c
 800b432:	46bd      	mov	sp, r7
 800b434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b436:	bf00      	nop
 800b438:	00000000 	.word	0x00000000
 800b43c:	40590000 	.word	0x40590000
 800b440:	080143c8 	.word	0x080143c8
 800b444:	20005bb0 	.word	0x20005bb0
 800b448:	080143e0 	.word	0x080143e0
 800b44c:	080142c0 	.word	0x080142c0
 800b450:	40590000 	.word	0x40590000
 800b454:	080143ec 	.word	0x080143ec
 800b458:	0801440c 	.word	0x0801440c
 800b45c:	08014324 	.word	0x08014324
 800b460:	08014340 	.word	0x08014340
 800b464:	08014354 	.word	0x08014354
 800b468:	0801436c 	.word	0x0801436c
 800b46c:	08014388 	.word	0x08014388
 800b470:	0801442c 	.word	0x0801442c
 800b474:	200049b0 	.word	0x200049b0

0800b478 <GNSS_DATA_PrintTrackedPositions>:

/*  Puts to console all the position got by a tracking position process */
void GNSS_DATA_PrintTrackedPositions(uint32_t how_many)
{
 800b478:	b5b0      	push	{r4, r5, r7, lr}
 800b47a:	b08c      	sub	sp, #48	@ 0x30
 800b47c:	af04      	add	r7, sp, #16
 800b47e:	6078      	str	r0, [r7, #4]
  for(uint16_t i = 0; i < (uint16_t)how_many; i++)
 800b480:	2300      	movs	r3, #0
 800b482:	83fb      	strh	r3, [r7, #30]
 800b484:	e152      	b.n	800b72c <GNSS_DATA_PrintTrackedPositions+0x2b4>
  {
    float64_t lat_mod = fmod(stored_positions[i].xyz.lat, 100.0);
 800b486:	8bfa      	ldrh	r2, [r7, #30]
 800b488:	49b1      	ldr	r1, [pc, #708]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b48a:	4613      	mov	r3, r2
 800b48c:	00db      	lsls	r3, r3, #3
 800b48e:	4413      	add	r3, r2
 800b490:	00db      	lsls	r3, r3, #3
 800b492:	440b      	add	r3, r1
 800b494:	3310      	adds	r3, #16
 800b496:	ed93 7b00 	vldr	d7, [r3]
 800b49a:	ed9f 1bab 	vldr	d1, [pc, #684]	@ 800b748 <GNSS_DATA_PrintTrackedPositions+0x2d0>
 800b49e:	eeb0 0a47 	vmov.f32	s0, s14
 800b4a2:	eef0 0a67 	vmov.f32	s1, s15
 800b4a6:	f007 ff49 	bl	801333c <fmod>
 800b4aa:	ed87 0b04 	vstr	d0, [r7, #16]
    float64_t lon_mod = fmod(stored_positions[i].xyz.lon, 100.0);
 800b4ae:	8bfa      	ldrh	r2, [r7, #30]
 800b4b0:	49a7      	ldr	r1, [pc, #668]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	00db      	lsls	r3, r3, #3
 800b4b6:	4413      	add	r3, r2
 800b4b8:	00db      	lsls	r3, r3, #3
 800b4ba:	440b      	add	r3, r1
 800b4bc:	3318      	adds	r3, #24
 800b4be:	ed93 7b00 	vldr	d7, [r3]
 800b4c2:	ed9f 1ba1 	vldr	d1, [pc, #644]	@ 800b748 <GNSS_DATA_PrintTrackedPositions+0x2d0>
 800b4c6:	eeb0 0a47 	vmov.f32	s0, s14
 800b4ca:	eef0 0a67 	vmov.f32	s1, s15
 800b4ce:	f007 ff35 	bl	801333c <fmod>
 800b4d2:	ed87 0b02 	vstr	d0, [r7, #8]

    (void)snprintf((char *)msg, MSG_SZ,  "Position n. %d:\r\n", i + 1U);
 800b4d6:	8bfb      	ldrh	r3, [r7, #30]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	4a9e      	ldr	r2, [pc, #632]	@ (800b754 <GNSS_DATA_PrintTrackedPositions+0x2dc>)
 800b4dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b4e0:	489d      	ldr	r0, [pc, #628]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b4e2:	f005 f9d1 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b4e6:	489c      	ldr	r0, [pc, #624]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b4e8:	f7f6 ffb2 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
                   stored_positions[i].utc.hh, stored_positions[i].utc.mm, stored_positions[i].utc.ss);
 800b4ec:	8bfa      	ldrh	r2, [r7, #30]
 800b4ee:	4998      	ldr	r1, [pc, #608]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	00db      	lsls	r3, r3, #3
 800b4f4:	4413      	add	r3, r2
 800b4f6:	00db      	lsls	r3, r3, #3
 800b4f8:	440b      	add	r3, r1
 800b4fa:	3304      	adds	r3, #4
 800b4fc:	f9b3 3000 	ldrsh.w	r3, [r3]
    (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800b500:	461c      	mov	r4, r3
                   stored_positions[i].utc.hh, stored_positions[i].utc.mm, stored_positions[i].utc.ss);
 800b502:	8bfa      	ldrh	r2, [r7, #30]
 800b504:	4992      	ldr	r1, [pc, #584]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b506:	4613      	mov	r3, r2
 800b508:	00db      	lsls	r3, r3, #3
 800b50a:	4413      	add	r3, r2
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	440b      	add	r3, r1
 800b510:	3306      	adds	r3, #6
 800b512:	f9b3 3000 	ldrsh.w	r3, [r3]
    (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800b516:	4618      	mov	r0, r3
                   stored_positions[i].utc.hh, stored_positions[i].utc.mm, stored_positions[i].utc.ss);
 800b518:	8bfa      	ldrh	r2, [r7, #30]
 800b51a:	498d      	ldr	r1, [pc, #564]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b51c:	4613      	mov	r3, r2
 800b51e:	00db      	lsls	r3, r3, #3
 800b520:	4413      	add	r3, r2
 800b522:	00db      	lsls	r3, r3, #3
 800b524:	440b      	add	r3, r1
 800b526:	3308      	adds	r3, #8
 800b528:	f9b3 3000 	ldrsh.w	r3, [r3]
    (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800b52c:	9301      	str	r3, [sp, #4]
 800b52e:	9000      	str	r0, [sp, #0]
 800b530:	4623      	mov	r3, r4
 800b532:	4a8a      	ldr	r2, [pc, #552]	@ (800b75c <GNSS_DATA_PrintTrackedPositions+0x2e4>)
 800b534:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b538:	4887      	ldr	r0, [pc, #540]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b53a:	f005 f9a5 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b53e:	4886      	ldr	r0, [pc, #536]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b540:	f7f6 ff86 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ,  "Latitude:\t\t[ %.0f' %d'' %c ]\n\r",
                   (stored_positions[i].xyz.lat - lat_mod) / 100.0,
 800b544:	8bfa      	ldrh	r2, [r7, #30]
 800b546:	4982      	ldr	r1, [pc, #520]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b548:	4613      	mov	r3, r2
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	4413      	add	r3, r2
 800b54e:	00db      	lsls	r3, r3, #3
 800b550:	440b      	add	r3, r1
 800b552:	3310      	adds	r3, #16
 800b554:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b558:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b55c:	f7f4 fea4 	bl	80002a8 <__aeabi_dsub>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	4610      	mov	r0, r2
 800b566:	4619      	mov	r1, r3
    (void)snprintf((char *)msg, MSG_SZ,  "Latitude:\t\t[ %.0f' %d'' %c ]\n\r",
 800b568:	f04f 0200 	mov.w	r2, #0
 800b56c:	4b7c      	ldr	r3, [pc, #496]	@ (800b760 <GNSS_DATA_PrintTrackedPositions+0x2e8>)
 800b56e:	f7f5 f97d 	bl	800086c <__aeabi_ddiv>
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	4614      	mov	r4, r2
 800b578:	461d      	mov	r5, r3
                   (int16_t)lat_mod,
 800b57a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b57e:	f7f5 fafb 	bl	8000b78 <__aeabi_d2iz>
 800b582:	4603      	mov	r3, r0
 800b584:	b21b      	sxth	r3, r3
    (void)snprintf((char *)msg, MSG_SZ,  "Latitude:\t\t[ %.0f' %d'' %c ]\n\r",
 800b586:	4618      	mov	r0, r3
                   stored_positions[i].xyz.ns);
 800b588:	8bfa      	ldrh	r2, [r7, #30]
 800b58a:	4971      	ldr	r1, [pc, #452]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b58c:	4613      	mov	r3, r2
 800b58e:	00db      	lsls	r3, r3, #3
 800b590:	4413      	add	r3, r2
 800b592:	00db      	lsls	r3, r3, #3
 800b594:	440b      	add	r3, r1
 800b596:	3328      	adds	r3, #40	@ 0x28
 800b598:	781b      	ldrb	r3, [r3, #0]
    (void)snprintf((char *)msg, MSG_SZ,  "Latitude:\t\t[ %.0f' %d'' %c ]\n\r",
 800b59a:	9303      	str	r3, [sp, #12]
 800b59c:	9002      	str	r0, [sp, #8]
 800b59e:	e9cd 4500 	strd	r4, r5, [sp]
 800b5a2:	4a70      	ldr	r2, [pc, #448]	@ (800b764 <GNSS_DATA_PrintTrackedPositions+0x2ec>)
 800b5a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b5a8:	486b      	ldr	r0, [pc, #428]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b5aa:	f005 f96d 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b5ae:	486a      	ldr	r0, [pc, #424]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b5b0:	f7f6 ff4e 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ,  "Longitude:\t\t[ %.0f' %d'' %c ]\n\r",
                   (stored_positions[i].xyz.lon - lon_mod) / 100.0,
 800b5b4:	8bfa      	ldrh	r2, [r7, #30]
 800b5b6:	4966      	ldr	r1, [pc, #408]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	00db      	lsls	r3, r3, #3
 800b5bc:	4413      	add	r3, r2
 800b5be:	00db      	lsls	r3, r3, #3
 800b5c0:	440b      	add	r3, r1
 800b5c2:	3318      	adds	r3, #24
 800b5c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5cc:	f7f4 fe6c 	bl	80002a8 <__aeabi_dsub>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	4619      	mov	r1, r3
    (void)snprintf((char *)msg, MSG_SZ,  "Longitude:\t\t[ %.0f' %d'' %c ]\n\r",
 800b5d8:	f04f 0200 	mov.w	r2, #0
 800b5dc:	4b60      	ldr	r3, [pc, #384]	@ (800b760 <GNSS_DATA_PrintTrackedPositions+0x2e8>)
 800b5de:	f7f5 f945 	bl	800086c <__aeabi_ddiv>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	4614      	mov	r4, r2
 800b5e8:	461d      	mov	r5, r3
                   (int16_t)lon_mod,
 800b5ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b5ee:	f7f5 fac3 	bl	8000b78 <__aeabi_d2iz>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	b21b      	sxth	r3, r3
    (void)snprintf((char *)msg, MSG_SZ,  "Longitude:\t\t[ %.0f' %d'' %c ]\n\r",
 800b5f6:	4618      	mov	r0, r3
                   stored_positions[i].xyz.ew);
 800b5f8:	8bfa      	ldrh	r2, [r7, #30]
 800b5fa:	4955      	ldr	r1, [pc, #340]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	00db      	lsls	r3, r3, #3
 800b600:	4413      	add	r3, r2
 800b602:	00db      	lsls	r3, r3, #3
 800b604:	440b      	add	r3, r1
 800b606:	3329      	adds	r3, #41	@ 0x29
 800b608:	781b      	ldrb	r3, [r3, #0]
    (void)snprintf((char *)msg, MSG_SZ,  "Longitude:\t\t[ %.0f' %d'' %c ]\n\r",
 800b60a:	9303      	str	r3, [sp, #12]
 800b60c:	9002      	str	r0, [sp, #8]
 800b60e:	e9cd 4500 	strd	r4, r5, [sp]
 800b612:	4a55      	ldr	r2, [pc, #340]	@ (800b768 <GNSS_DATA_PrintTrackedPositions+0x2f0>)
 800b614:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b618:	484f      	ldr	r0, [pc, #316]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b61a:	f005 f935 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b61e:	484e      	ldr	r0, [pc, #312]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b620:	f7f6 ff16 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ,  "Satellites locked:\t[ %d ]\n\r",
                   stored_positions[i].sats);
 800b624:	8bfa      	ldrh	r2, [r7, #30]
 800b626:	494a      	ldr	r1, [pc, #296]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b628:	4613      	mov	r3, r2
 800b62a:	00db      	lsls	r3, r3, #3
 800b62c:	4413      	add	r3, r2
 800b62e:	00db      	lsls	r3, r3, #3
 800b630:	440b      	add	r3, r1
 800b632:	3334      	adds	r3, #52	@ 0x34
 800b634:	f9b3 3000 	ldrsh.w	r3, [r3]
    (void)snprintf((char *)msg, MSG_SZ,  "Satellites locked:\t[ %d ]\n\r",
 800b638:	4a4c      	ldr	r2, [pc, #304]	@ (800b76c <GNSS_DATA_PrintTrackedPositions+0x2f4>)
 800b63a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b63e:	4846      	ldr	r0, [pc, #280]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b640:	f005 f922 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b644:	4844      	ldr	r0, [pc, #272]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b646:	f7f6 ff03 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ,  "HDOP:\t\t\t[ %.1f ]\n\r",
                   stored_positions[i].acc);
 800b64a:	8bfa      	ldrh	r2, [r7, #30]
 800b64c:	4940      	ldr	r1, [pc, #256]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b64e:	4613      	mov	r3, r2
 800b650:	00db      	lsls	r3, r3, #3
 800b652:	4413      	add	r3, r2
 800b654:	00db      	lsls	r3, r3, #3
 800b656:	440b      	add	r3, r1
 800b658:	3330      	adds	r3, #48	@ 0x30
 800b65a:	681b      	ldr	r3, [r3, #0]
    (void)snprintf((char *)msg, MSG_SZ,  "HDOP:\t\t\t[ %.1f ]\n\r",
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7f4 ff83 	bl	8000568 <__aeabi_f2d>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	e9cd 2300 	strd	r2, r3, [sp]
 800b66a:	4a41      	ldr	r2, [pc, #260]	@ (800b770 <GNSS_DATA_PrintTrackedPositions+0x2f8>)
 800b66c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b670:	4839      	ldr	r0, [pc, #228]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b672:	f005 f909 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b676:	4838      	ldr	r0, [pc, #224]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b678:	f7f6 feea 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ,  "Altitude:\t\t[ %.2f%c ]\n\r",
 800b67c:	8bfa      	ldrh	r2, [r7, #30]
 800b67e:	4934      	ldr	r1, [pc, #208]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b680:	4613      	mov	r3, r2
 800b682:	00db      	lsls	r3, r3, #3
 800b684:	4413      	add	r3, r2
 800b686:	00db      	lsls	r3, r3, #3
 800b688:	440b      	add	r3, r1
 800b68a:	3320      	adds	r3, #32
 800b68c:	e9d3 0100 	ldrd	r0, r1, [r3]
                   stored_positions[i].xyz.alt,
                   (stored_positions[i].xyz.mis + 32U));
 800b690:	8bfa      	ldrh	r2, [r7, #30]
 800b692:	4c2f      	ldr	r4, [pc, #188]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b694:	4613      	mov	r3, r2
 800b696:	00db      	lsls	r3, r3, #3
 800b698:	4413      	add	r3, r2
 800b69a:	00db      	lsls	r3, r3, #3
 800b69c:	4423      	add	r3, r4
 800b69e:	332a      	adds	r3, #42	@ 0x2a
 800b6a0:	781b      	ldrb	r3, [r3, #0]
    (void)snprintf((char *)msg, MSG_SZ,  "Altitude:\t\t[ %.2f%c ]\n\r",
 800b6a2:	3320      	adds	r3, #32
 800b6a4:	9302      	str	r3, [sp, #8]
 800b6a6:	e9cd 0100 	strd	r0, r1, [sp]
 800b6aa:	4a32      	ldr	r2, [pc, #200]	@ (800b774 <GNSS_DATA_PrintTrackedPositions+0x2fc>)
 800b6ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b6b0:	4829      	ldr	r0, [pc, #164]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b6b2:	f005 f8e9 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b6b6:	4828      	ldr	r0, [pc, #160]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b6b8:	f7f6 feca 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ,  "Geoid infos:\t\t[ %d%c ]\n\r",
                   stored_positions[i].geoid.height,
 800b6bc:	8bfa      	ldrh	r2, [r7, #30]
 800b6be:	4924      	ldr	r1, [pc, #144]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	00db      	lsls	r3, r3, #3
 800b6c4:	4413      	add	r3, r2
 800b6c6:	00db      	lsls	r3, r3, #3
 800b6c8:	440b      	add	r3, r1
 800b6ca:	3338      	adds	r3, #56	@ 0x38
 800b6cc:	f9b3 3000 	ldrsh.w	r3, [r3]
    (void)snprintf((char *)msg, MSG_SZ,  "Geoid infos:\t\t[ %d%c ]\n\r",
 800b6d0:	4618      	mov	r0, r3
                   stored_positions[i].geoid.mis);
 800b6d2:	8bfa      	ldrh	r2, [r7, #30]
 800b6d4:	491e      	ldr	r1, [pc, #120]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	00db      	lsls	r3, r3, #3
 800b6da:	4413      	add	r3, r2
 800b6dc:	00db      	lsls	r3, r3, #3
 800b6de:	440b      	add	r3, r1
 800b6e0:	333a      	adds	r3, #58	@ 0x3a
 800b6e2:	781b      	ldrb	r3, [r3, #0]
    (void)snprintf((char *)msg, MSG_SZ,  "Geoid infos:\t\t[ %d%c ]\n\r",
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	4a23      	ldr	r2, [pc, #140]	@ (800b778 <GNSS_DATA_PrintTrackedPositions+0x300>)
 800b6ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b6ee:	481a      	ldr	r0, [pc, #104]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b6f0:	f005 f8ca 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b6f4:	4818      	ldr	r0, [pc, #96]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b6f6:	f7f6 feab 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ,  "Diff update:\t\t[ %d ]\n\r",
                   stored_positions[i].update);
 800b6fa:	8bfa      	ldrh	r2, [r7, #30]
 800b6fc:	4914      	ldr	r1, [pc, #80]	@ (800b750 <GNSS_DATA_PrintTrackedPositions+0x2d8>)
 800b6fe:	4613      	mov	r3, r2
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	4413      	add	r3, r2
 800b704:	00db      	lsls	r3, r3, #3
 800b706:	440b      	add	r3, r1
 800b708:	333c      	adds	r3, #60	@ 0x3c
 800b70a:	f9b3 3000 	ldrsh.w	r3, [r3]
    (void)snprintf((char *)msg, MSG_SZ,  "Diff update:\t\t[ %d ]\n\r",
 800b70e:	4a1b      	ldr	r2, [pc, #108]	@ (800b77c <GNSS_DATA_PrintTrackedPositions+0x304>)
 800b710:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b714:	4810      	ldr	r0, [pc, #64]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b716:	f005 f8b7 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800b71a:	480f      	ldr	r0, [pc, #60]	@ (800b758 <GNSS_DATA_PrintTrackedPositions+0x2e0>)
 800b71c:	f7f6 fe98 	bl	8002450 <GNSS_PRINT>

    PRINT_INFO("\r\n\n>");
 800b720:	4817      	ldr	r0, [pc, #92]	@ (800b780 <GNSS_DATA_PrintTrackedPositions+0x308>)
 800b722:	f7f6 fe95 	bl	8002450 <GNSS_PRINT>
  for(uint16_t i = 0; i < (uint16_t)how_many; i++)
 800b726:	8bfb      	ldrh	r3, [r7, #30]
 800b728:	3301      	adds	r3, #1
 800b72a:	83fb      	strh	r3, [r7, #30]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	b29b      	uxth	r3, r3
 800b730:	8bfa      	ldrh	r2, [r7, #30]
 800b732:	429a      	cmp	r2, r3
 800b734:	f4ff aea7 	bcc.w	800b486 <GNSS_DATA_PrintTrackedPositions+0xe>
  }
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	3720      	adds	r7, #32
 800b73e:	46bd      	mov	sp, r7
 800b740:	bdb0      	pop	{r4, r5, r7, pc}
 800b742:	bf00      	nop
 800b744:	f3af 8000 	nop.w
 800b748:	00000000 	.word	0x00000000
 800b74c:	40590000 	.word	0x40590000
 800b750:	200049b0 	.word	0x200049b0
 800b754:	08014430 	.word	0x08014430
 800b758:	20005bb0 	.word	0x20005bb0
 800b75c:	080142c0 	.word	0x080142c0
 800b760:	40590000 	.word	0x40590000
 800b764:	080143ec 	.word	0x080143ec
 800b768:	0801440c 	.word	0x0801440c
 800b76c:	08014324 	.word	0x08014324
 800b770:	08014340 	.word	0x08014340
 800b774:	08014354 	.word	0x08014354
 800b778:	0801436c 	.word	0x0801436c
 800b77c:	08014388 	.word	0x08014388
 800b780:	08014444 	.word	0x08014444
 800b784:	00000000 	.word	0x00000000

0800b788 <GNSS_DATA_GetGNSInfo>:

/* Puts to console the info about Fix data for single or combined satellite navigation system. */
void GNSS_DATA_GetGNSInfo(GNSSParser_Data_t *pGNSSParser_Data)
{
 800b788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b78a:	b08f      	sub	sp, #60	@ 0x3c
 800b78c:	af08      	add	r7, sp, #32
 800b78e:	6078      	str	r0, [r7, #4]
  PRINT_INFO("\r\n");
 800b790:	48a5      	ldr	r0, [pc, #660]	@ (800ba28 <GNSS_DATA_GetGNSInfo+0x2a0>)
 800b792:	f7f6 fe5d 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ,  "Constellation:\t\t[ %s ]\n",
                 pGNSSParser_Data->gns_data.constellation);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3350      	adds	r3, #80	@ 0x50
  (void)snprintf((char *)msg, MSG_SZ,  "Constellation:\t\t[ %s ]\n",
 800b79a:	4aa4      	ldr	r2, [pc, #656]	@ (800ba2c <GNSS_DATA_GetGNSInfo+0x2a4>)
 800b79c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b7a0:	48a3      	ldr	r0, [pc, #652]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b7a2:	f005 f871 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800b7a6:	48a2      	ldr	r0, [pc, #648]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b7a8:	f7f6 fe52 	bl	8002450 <GNSS_PRINT>

  if (strcmp((char*)pGNSSParser_Data->gns_data.constellation, "$GPGNS") == 0)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	3350      	adds	r3, #80	@ 0x50
 800b7b0:	49a0      	ldr	r1, [pc, #640]	@ (800ba34 <GNSS_DATA_GetGNSInfo+0x2ac>)
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7f4 fd0c 	bl	80001d0 <strcmp>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d103      	bne.n	800b7c6 <GNSS_DATA_GetGNSInfo+0x3e>
  {
    PRINT_INFO("-- only GPS constellation is enabled\n\r");  
 800b7be:	489e      	ldr	r0, [pc, #632]	@ (800ba38 <GNSS_DATA_GetGNSInfo+0x2b0>)
 800b7c0:	f7f6 fe46 	bl	8002450 <GNSS_PRINT>
 800b7c4:	e03f      	b.n	800b846 <GNSS_DATA_GetGNSInfo+0xbe>
  }
  else if (strcmp((char*)pGNSSParser_Data->gns_data.constellation, "$GLGNS") == 0)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	3350      	adds	r3, #80	@ 0x50
 800b7ca:	499c      	ldr	r1, [pc, #624]	@ (800ba3c <GNSS_DATA_GetGNSInfo+0x2b4>)
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7f4 fcff 	bl	80001d0 <strcmp>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d103      	bne.n	800b7e0 <GNSS_DATA_GetGNSInfo+0x58>
  {
    PRINT_INFO("-- only GLONASS constellation is enabled\n\r");
 800b7d8:	4899      	ldr	r0, [pc, #612]	@ (800ba40 <GNSS_DATA_GetGNSInfo+0x2b8>)
 800b7da:	f7f6 fe39 	bl	8002450 <GNSS_PRINT>
 800b7de:	e032      	b.n	800b846 <GNSS_DATA_GetGNSInfo+0xbe>
  }
  else if (strcmp((char*)pGNSSParser_Data->gns_data.constellation, "$GAGNS") == 0)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	3350      	adds	r3, #80	@ 0x50
 800b7e4:	4997      	ldr	r1, [pc, #604]	@ (800ba44 <GNSS_DATA_GetGNSInfo+0x2bc>)
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7f4 fcf2 	bl	80001d0 <strcmp>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d103      	bne.n	800b7fa <GNSS_DATA_GetGNSInfo+0x72>
  {
    PRINT_INFO("-- only GALILEO constellation is enabled\n\r");
 800b7f2:	4895      	ldr	r0, [pc, #596]	@ (800ba48 <GNSS_DATA_GetGNSInfo+0x2c0>)
 800b7f4:	f7f6 fe2c 	bl	8002450 <GNSS_PRINT>
 800b7f8:	e025      	b.n	800b846 <GNSS_DATA_GetGNSInfo+0xbe>
  }
  else if (strcmp((char*)pGNSSParser_Data->gns_data.constellation, "$BDGNS") == 0)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3350      	adds	r3, #80	@ 0x50
 800b7fe:	4993      	ldr	r1, [pc, #588]	@ (800ba4c <GNSS_DATA_GetGNSInfo+0x2c4>)
 800b800:	4618      	mov	r0, r3
 800b802:	f7f4 fce5 	bl	80001d0 <strcmp>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d103      	bne.n	800b814 <GNSS_DATA_GetGNSInfo+0x8c>
  {
    PRINT_INFO("-- only BEIDOU constellation is enabled\n\r");    
 800b80c:	4890      	ldr	r0, [pc, #576]	@ (800ba50 <GNSS_DATA_GetGNSInfo+0x2c8>)
 800b80e:	f7f6 fe1f 	bl	8002450 <GNSS_PRINT>
 800b812:	e018      	b.n	800b846 <GNSS_DATA_GetGNSInfo+0xbe>
  }
  else if (strcmp((char*)pGNSSParser_Data->gns_data.constellation, "$QZGNS") == 0)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	3350      	adds	r3, #80	@ 0x50
 800b818:	498e      	ldr	r1, [pc, #568]	@ (800ba54 <GNSS_DATA_GetGNSInfo+0x2cc>)
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7f4 fcd8 	bl	80001d0 <strcmp>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d103      	bne.n	800b82e <GNSS_DATA_GetGNSInfo+0xa6>
  {
    PRINT_INFO("-- only QZSS constellation is enabled\n\r");
 800b826:	488c      	ldr	r0, [pc, #560]	@ (800ba58 <GNSS_DATA_GetGNSInfo+0x2d0>)
 800b828:	f7f6 fe12 	bl	8002450 <GNSS_PRINT>
 800b82c:	e00b      	b.n	800b846 <GNSS_DATA_GetGNSInfo+0xbe>
  }
  else if (strcmp((char*)pGNSSParser_Data->gns_data.constellation, "$GNGSV") == 0)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3350      	adds	r3, #80	@ 0x50
 800b832:	498a      	ldr	r1, [pc, #552]	@ (800ba5c <GNSS_DATA_GetGNSInfo+0x2d4>)
 800b834:	4618      	mov	r0, r3
 800b836:	f7f4 fccb 	bl	80001d0 <strcmp>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d102      	bne.n	800b846 <GNSS_DATA_GetGNSInfo+0xbe>
  {
    PRINT_INFO("-- message to report all satellites for all enabled constellations\n\r");   
 800b840:	4887      	ldr	r0, [pc, #540]	@ (800ba60 <GNSS_DATA_GetGNSInfo+0x2d8>)
 800b842:	f7f6 fe05 	bl	8002450 <GNSS_PRINT>
  else
  {
    /* nothing to do */
  }

  float64_t lat_mod = fmod(pGNSSParser_Data->gns_data.xyz.lat, 100.0);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 800b84c:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 800ba20 <GNSS_DATA_GetGNSInfo+0x298>
 800b850:	eeb0 0a47 	vmov.f32	s0, s14
 800b854:	eef0 0a67 	vmov.f32	s1, s15
 800b858:	f007 fd70 	bl	801333c <fmod>
 800b85c:	ed87 0b04 	vstr	d0, [r7, #16]
  float64_t lon_mod = fmod(pGNSSParser_Data->gns_data.xyz.lon, 100.0);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	ed93 7b22 	vldr	d7, [r3, #136]	@ 0x88
 800b866:	ed9f 1b6e 	vldr	d1, [pc, #440]	@ 800ba20 <GNSS_DATA_GetGNSInfo+0x298>
 800b86a:	eeb0 0a47 	vmov.f32	s0, s14
 800b86e:	eef0 0a67 	vmov.f32	s1, s15
 800b872:	f007 fd63 	bl	801333c <fmod>
 800b876:	ed87 0b02 	vstr	d0, [r7, #8]
  (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
                 pGNSSParser_Data->gns_data.utc.hh,
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
  (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800b880:	4619      	mov	r1, r3
                 pGNSSParser_Data->gns_data.utc.mm,
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	@ 0x76
  (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800b888:	461a      	mov	r2, r3
                 pGNSSParser_Data->gns_data.utc.ss);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	@ 0x78
  (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800b890:	9301      	str	r3, [sp, #4]
 800b892:	9200      	str	r2, [sp, #0]
 800b894:	460b      	mov	r3, r1
 800b896:	4a73      	ldr	r2, [pc, #460]	@ (800ba64 <GNSS_DATA_GetGNSInfo+0x2dc>)
 800b898:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b89c:	4864      	ldr	r0, [pc, #400]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b89e:	f004 fff3 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800b8a2:	4863      	ldr	r0, [pc, #396]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b8a4:	f7f6 fdd4 	bl	8002450 <GNSS_PRINT>
  (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
                 (pGNSSParser_Data->gns_data.xyz.lat - lat_mod) / 100.0,
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800b8ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b8b2:	f7f4 fcf9 	bl	80002a8 <__aeabi_dsub>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	4610      	mov	r0, r2
 800b8bc:	4619      	mov	r1, r3
  (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
 800b8be:	f04f 0200 	mov.w	r2, #0
 800b8c2:	4b69      	ldr	r3, [pc, #420]	@ (800ba68 <GNSS_DATA_GetGNSInfo+0x2e0>)
 800b8c4:	f7f4 ffd2 	bl	800086c <__aeabi_ddiv>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	4614      	mov	r4, r2
 800b8ce:	461d      	mov	r5, r3
                 minute_part(lat_mod),
 800b8d0:	ed97 0b04 	vldr	d0, [r7, #16]
 800b8d4:	f7ff fae2 	bl	800ae9c <minute_part>
 800b8d8:	4603      	mov	r3, r0
  (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
 800b8da:	461e      	mov	r6, r3
 800b8dc:	ed97 0b04 	vldr	d0, [r7, #16]
 800b8e0:	f7ff fadc 	bl	800ae9c <minute_part>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	ed97 0b04 	vldr	d0, [r7, #16]
 800b8ec:	f7ff fae8 	bl	800aec0 <seconds>
 800b8f0:	eeb0 7a40 	vmov.f32	s14, s0
 800b8f4:	eef0 7a60 	vmov.f32	s15, s1
				 seconds(lat_mod,minute_part(lat_mod)),
                 pGNSSParser_Data->gns_data.xyz.ns);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
  (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
 800b8fe:	9306      	str	r3, [sp, #24]
 800b900:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b904:	9602      	str	r6, [sp, #8]
 800b906:	e9cd 4500 	strd	r4, r5, [sp]
 800b90a:	4a58      	ldr	r2, [pc, #352]	@ (800ba6c <GNSS_DATA_GetGNSInfo+0x2e4>)
 800b90c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b910:	4847      	ldr	r0, [pc, #284]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b912:	f004 ffb9 	bl	8010888 <sniprintf>

  PRINT_INFO((char *)msg);
 800b916:	4846      	ldr	r0, [pc, #280]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b918:	f7f6 fd9a 	bl	8002450 <GNSS_PRINT>
  (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
                 (pGNSSParser_Data->gns_data.xyz.lon - lon_mod) / 100.0,
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 800b922:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b926:	f7f4 fcbf 	bl	80002a8 <__aeabi_dsub>
 800b92a:	4602      	mov	r2, r0
 800b92c:	460b      	mov	r3, r1
 800b92e:	4610      	mov	r0, r2
 800b930:	4619      	mov	r1, r3
  (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
 800b932:	f04f 0200 	mov.w	r2, #0
 800b936:	4b4c      	ldr	r3, [pc, #304]	@ (800ba68 <GNSS_DATA_GetGNSInfo+0x2e0>)
 800b938:	f7f4 ff98 	bl	800086c <__aeabi_ddiv>
 800b93c:	4602      	mov	r2, r0
 800b93e:	460b      	mov	r3, r1
 800b940:	4614      	mov	r4, r2
 800b942:	461d      	mov	r5, r3
                 minute_part(lon_mod),
 800b944:	ed97 0b02 	vldr	d0, [r7, #8]
 800b948:	f7ff faa8 	bl	800ae9c <minute_part>
 800b94c:	4603      	mov	r3, r0
  (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
 800b94e:	461e      	mov	r6, r3
 800b950:	ed97 0b02 	vldr	d0, [r7, #8]
 800b954:	f7ff faa2 	bl	800ae9c <minute_part>
 800b958:	4603      	mov	r3, r0
 800b95a:	4618      	mov	r0, r3
 800b95c:	ed97 0b02 	vldr	d0, [r7, #8]
 800b960:	f7ff faae 	bl	800aec0 <seconds>
 800b964:	eeb0 7a40 	vmov.f32	s14, s0
 800b968:	eef0 7a60 	vmov.f32	s15, s1
				 seconds(lon_mod,minute_part(lon_mod)),
                 pGNSSParser_Data->gns_data.xyz.ew);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
  (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %f\" %c ]\n\r",
 800b972:	9306      	str	r3, [sp, #24]
 800b974:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b978:	9602      	str	r6, [sp, #8]
 800b97a:	e9cd 4500 	strd	r4, r5, [sp]
 800b97e:	4a3c      	ldr	r2, [pc, #240]	@ (800ba70 <GNSS_DATA_GetGNSInfo+0x2e8>)
 800b980:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b984:	482a      	ldr	r0, [pc, #168]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b986:	f004 ff7f 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800b98a:	4829      	ldr	r0, [pc, #164]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b98c:	f7f6 fd60 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Satellites locked:\t[ %d ]\n\r",
                 pGNSSParser_Data->gns_data.sats);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	@ 0xa2
  (void)snprintf((char *)msg, MSG_SZ, "Satellites locked:\t[ %d ]\n\r",
 800b996:	4a37      	ldr	r2, [pc, #220]	@ (800ba74 <GNSS_DATA_GetGNSInfo+0x2ec>)
 800b998:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b99c:	4824      	ldr	r0, [pc, #144]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b99e:	f004 ff73 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800b9a2:	4823      	ldr	r0, [pc, #140]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b9a4:	f7f6 fd54 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "HDOP:\t\t\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gns_data.hdop);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
  (void)snprintf((char *)msg, MSG_SZ, "HDOP:\t\t\t[ %.01f ]\n\r",
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7f4 fdda 	bl	8000568 <__aeabi_f2d>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	e9cd 2300 	strd	r2, r3, [sp]
 800b9bc:	4a2e      	ldr	r2, [pc, #184]	@ (800ba78 <GNSS_DATA_GetGNSInfo+0x2f0>)
 800b9be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b9c2:	481b      	ldr	r0, [pc, #108]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b9c4:	f004 ff60 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800b9c8:	4819      	ldr	r0, [pc, #100]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b9ca:	f7f6 fd41 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Altitude:\t\t[ %.01f ]\n\r",
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800b9d4:	e9cd 2300 	strd	r2, r3, [sp]
 800b9d8:	4a28      	ldr	r2, [pc, #160]	@ (800ba7c <GNSS_DATA_GetGNSInfo+0x2f4>)
 800b9da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b9de:	4814      	ldr	r0, [pc, #80]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b9e0:	f004 ff52 	bl	8010888 <sniprintf>
                 pGNSSParser_Data->gns_data.xyz.alt);
  PRINT_INFO((char *)msg);
 800b9e4:	4812      	ldr	r0, [pc, #72]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800b9e6:	f7f6 fd33 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Geoid infos:\t\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gns_data.geo_sep);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
  (void)snprintf((char *)msg, MSG_SZ, "Geoid infos:\t\t[ %.01f ]\n\r",
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7f4 fdb9 	bl	8000568 <__aeabi_f2d>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	e9cd 2300 	strd	r2, r3, [sp]
 800b9fe:	4a20      	ldr	r2, [pc, #128]	@ (800ba80 <GNSS_DATA_GetGNSInfo+0x2f8>)
 800ba00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ba04:	480a      	ldr	r0, [pc, #40]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800ba06:	f004 ff3f 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800ba0a:	4809      	ldr	r0, [pc, #36]	@ (800ba30 <GNSS_DATA_GetGNSInfo+0x2a8>)
 800ba0c:	f7f6 fd20 	bl	8002450 <GNSS_PRINT>
    
  PRINT_INFO("\n\n\r>");
 800ba10:	481c      	ldr	r0, [pc, #112]	@ (800ba84 <GNSS_DATA_GetGNSInfo+0x2fc>)
 800ba12:	f7f6 fd1d 	bl	8002450 <GNSS_PRINT>
}
 800ba16:	bf00      	nop
 800ba18:	371c      	adds	r7, #28
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	00000000 	.word	0x00000000
 800ba24:	40590000 	.word	0x40590000
 800ba28:	0801444c 	.word	0x0801444c
 800ba2c:	08014450 	.word	0x08014450
 800ba30:	20005bb0 	.word	0x20005bb0
 800ba34:	08014468 	.word	0x08014468
 800ba38:	08014470 	.word	0x08014470
 800ba3c:	08014498 	.word	0x08014498
 800ba40:	080144a0 	.word	0x080144a0
 800ba44:	080144cc 	.word	0x080144cc
 800ba48:	080144d4 	.word	0x080144d4
 800ba4c:	08014500 	.word	0x08014500
 800ba50:	08014508 	.word	0x08014508
 800ba54:	08014534 	.word	0x08014534
 800ba58:	0801453c 	.word	0x0801453c
 800ba5c:	08014564 	.word	0x08014564
 800ba60:	0801456c 	.word	0x0801456c
 800ba64:	080142c0 	.word	0x080142c0
 800ba68:	40590000 	.word	0x40590000
 800ba6c:	080142dc 	.word	0x080142dc
 800ba70:	08014300 	.word	0x08014300
 800ba74:	08014324 	.word	0x08014324
 800ba78:	080145b4 	.word	0x080145b4
 800ba7c:	080145c8 	.word	0x080145c8
 800ba80:	080145e0 	.word	0x080145e0
 800ba84:	080143c0 	.word	0x080143c0

0800ba88 <GNSS_DATA_GetGPGSTInfo>:


/* Puts to console the info about GPS Pseudorange Noise Statistics */
void GNSS_DATA_GetGPGSTInfo(GNSSParser_Data_t *pGNSSParser_Data)
{  
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af02      	add	r7, sp, #8
 800ba8e:	6078      	str	r0, [r7, #4]
  PRINT_INFO("\r\n");
 800ba90:	4852      	ldr	r0, [pc, #328]	@ (800bbdc <GNSS_DATA_GetGPGSTInfo+0x154>)
 800ba92:	f7f6 fcdd 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
                 pGNSSParser_Data->gpgst_data.utc.hh,
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	@ 0xbc
  (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800ba9c:	4619      	mov	r1, r3
                 pGNSSParser_Data->gpgst_data.utc.mm,
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	@ 0xbe
  (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800baa4:	461a      	mov	r2, r3
                 pGNSSParser_Data->gpgst_data.utc.ss);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
  (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t[ %02d:%02d:%02d ]\n\r",
 800baac:	9301      	str	r3, [sp, #4]
 800baae:	9200      	str	r2, [sp, #0]
 800bab0:	460b      	mov	r3, r1
 800bab2:	4a4b      	ldr	r2, [pc, #300]	@ (800bbe0 <GNSS_DATA_GetGPGSTInfo+0x158>)
 800bab4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bab8:	484a      	ldr	r0, [pc, #296]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800baba:	f004 fee5 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800babe:	4849      	ldr	r0, [pc, #292]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bac0:	f7f6 fcc6 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "EHPE:\t\t\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gpgst_data.EHPE);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
  (void)snprintf((char *)msg, MSG_SZ, "EHPE:\t\t\t[ %.01f ]\n\r",
 800baca:	4618      	mov	r0, r3
 800bacc:	f7f4 fd4c 	bl	8000568 <__aeabi_f2d>
 800bad0:	4602      	mov	r2, r0
 800bad2:	460b      	mov	r3, r1
 800bad4:	e9cd 2300 	strd	r2, r3, [sp]
 800bad8:	4a43      	ldr	r2, [pc, #268]	@ (800bbe8 <GNSS_DATA_GetGPGSTInfo+0x160>)
 800bada:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bade:	4841      	ldr	r0, [pc, #260]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bae0:	f004 fed2 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bae4:	483f      	ldr	r0, [pc, #252]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bae6:	f7f6 fcb3 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Semi-major Dev:\t\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gpgst_data.semi_major_dev);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
  (void)snprintf((char *)msg, MSG_SZ, "Semi-major Dev:\t\t[ %.01f ]\n\r",
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7f4 fd39 	bl	8000568 <__aeabi_f2d>
 800baf6:	4602      	mov	r2, r0
 800baf8:	460b      	mov	r3, r1
 800bafa:	e9cd 2300 	strd	r2, r3, [sp]
 800bafe:	4a3b      	ldr	r2, [pc, #236]	@ (800bbec <GNSS_DATA_GetGPGSTInfo+0x164>)
 800bb00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bb04:	4837      	ldr	r0, [pc, #220]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bb06:	f004 febf 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bb0a:	4836      	ldr	r0, [pc, #216]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bb0c:	f7f6 fca0 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Semi-minor Dev:\t\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gpgst_data.semi_minor_dev);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  (void)snprintf((char *)msg, MSG_SZ, "Semi-minor Dev:\t\t[ %.01f ]\n\r",
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7f4 fd26 	bl	8000568 <__aeabi_f2d>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	e9cd 2300 	strd	r2, r3, [sp]
 800bb24:	4a32      	ldr	r2, [pc, #200]	@ (800bbf0 <GNSS_DATA_GetGPGSTInfo+0x168>)
 800bb26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bb2a:	482e      	ldr	r0, [pc, #184]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bb2c:	f004 feac 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bb30:	482c      	ldr	r0, [pc, #176]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bb32:	f7f6 fc8d 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Semi-maior Angle:\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gpgst_data.semi_major_angle);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  (void)snprintf((char *)msg, MSG_SZ, "Semi-maior Angle:\t[ %.01f ]\n\r",
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7f4 fd13 	bl	8000568 <__aeabi_f2d>
 800bb42:	4602      	mov	r2, r0
 800bb44:	460b      	mov	r3, r1
 800bb46:	e9cd 2300 	strd	r2, r3, [sp]
 800bb4a:	4a2a      	ldr	r2, [pc, #168]	@ (800bbf4 <GNSS_DATA_GetGPGSTInfo+0x16c>)
 800bb4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bb50:	4824      	ldr	r0, [pc, #144]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bb52:	f004 fe99 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bb56:	4823      	ldr	r0, [pc, #140]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bb58:	f7f6 fc7a 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Lat Err Dev:\t\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gpgst_data.lat_err_dev);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  (void)snprintf((char *)msg, MSG_SZ, "Lat Err Dev:\t\t[ %.01f ]\n\r",
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7f4 fd00 	bl	8000568 <__aeabi_f2d>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	e9cd 2300 	strd	r2, r3, [sp]
 800bb70:	4a21      	ldr	r2, [pc, #132]	@ (800bbf8 <GNSS_DATA_GetGPGSTInfo+0x170>)
 800bb72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bb76:	481b      	ldr	r0, [pc, #108]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bb78:	f004 fe86 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bb7c:	4819      	ldr	r0, [pc, #100]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bb7e:	f7f6 fc67 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Lon Err Dev:\t\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gpgst_data.lon_err_dev);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
  (void)snprintf((char *)msg, MSG_SZ, "Lon Err Dev:\t\t[ %.01f ]\n\r",
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7f4 fced 	bl	8000568 <__aeabi_f2d>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	460b      	mov	r3, r1
 800bb92:	e9cd 2300 	strd	r2, r3, [sp]
 800bb96:	4a19      	ldr	r2, [pc, #100]	@ (800bbfc <GNSS_DATA_GetGPGSTInfo+0x174>)
 800bb98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bb9c:	4811      	ldr	r0, [pc, #68]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bb9e:	f004 fe73 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bba2:	4810      	ldr	r0, [pc, #64]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bba4:	f7f6 fc54 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Alt Err Dev:\t\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gpgst_data.alt_err_dev);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
  (void)snprintf((char *)msg, MSG_SZ, "Alt Err Dev:\t\t[ %.01f ]\n\r",
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7f4 fcda 	bl	8000568 <__aeabi_f2d>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	e9cd 2300 	strd	r2, r3, [sp]
 800bbbc:	4a10      	ldr	r2, [pc, #64]	@ (800bc00 <GNSS_DATA_GetGPGSTInfo+0x178>)
 800bbbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bbc2:	4808      	ldr	r0, [pc, #32]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bbc4:	f004 fe60 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bbc8:	4806      	ldr	r0, [pc, #24]	@ (800bbe4 <GNSS_DATA_GetGPGSTInfo+0x15c>)
 800bbca:	f7f6 fc41 	bl	8002450 <GNSS_PRINT>

  PRINT_INFO("\n\n\r>");
 800bbce:	480d      	ldr	r0, [pc, #52]	@ (800bc04 <GNSS_DATA_GetGPGSTInfo+0x17c>)
 800bbd0:	f7f6 fc3e 	bl	8002450 <GNSS_PRINT>

  return;
 800bbd4:	bf00      	nop
}
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	0801444c 	.word	0x0801444c
 800bbe0:	080142c0 	.word	0x080142c0
 800bbe4:	20005bb0 	.word	0x20005bb0
 800bbe8:	080145fc 	.word	0x080145fc
 800bbec:	08014610 	.word	0x08014610
 800bbf0:	08014630 	.word	0x08014630
 800bbf4:	08014650 	.word	0x08014650
 800bbf8:	08014670 	.word	0x08014670
 800bbfc:	0801468c 	.word	0x0801468c
 800bc00:	080146a8 	.word	0x080146a8
 800bc04:	080143c0 	.word	0x080143c0

0800bc08 <GNSS_DATA_GetGPRMCInfo>:

/* Puts to console the info about Recommended Minimum Specific GPS/Transit data got by the most recent reception process. */
void GNSS_DATA_GetGPRMCInfo(GNSSParser_Data_t *pGNSSParser_Data)
{
 800bc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc0a:	b08f      	sub	sp, #60	@ 0x3c
 800bc0c:	af08      	add	r7, sp, #32
 800bc0e:	6078      	str	r0, [r7, #4]
  PRINT_INFO("\r\n");
 800bc10:	48bf      	ldr	r0, [pc, #764]	@ (800bf10 <GNSS_DATA_GetGPRMCInfo+0x308>)
 800bc12:	f7f6 fc1d 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t\t[ %02d:%02d:%02d ]\n\r",
                 pGNSSParser_Data->gprmc_data.utc.hh,
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	@ 0xec
  (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t\t[ %02d:%02d:%02d ]\n\r",
 800bc1c:	4619      	mov	r1, r3
                 pGNSSParser_Data->gprmc_data.utc.mm,
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	@ 0xee
  (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t\t[ %02d:%02d:%02d ]\n\r",
 800bc24:	461a      	mov	r2, r3
                 pGNSSParser_Data->gprmc_data.utc.ss);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f9b3 30f0 	ldrsh.w	r3, [r3, #240]	@ 0xf0
  (void)snprintf((char *)msg, MSG_SZ,  "UTC:\t\t\t\t[ %02d:%02d:%02d ]\n\r",
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	9200      	str	r2, [sp, #0]
 800bc30:	460b      	mov	r3, r1
 800bc32:	4ab8      	ldr	r2, [pc, #736]	@ (800bf14 <GNSS_DATA_GetGPRMCInfo+0x30c>)
 800bc34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bc38:	48b7      	ldr	r0, [pc, #732]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bc3a:	f004 fe25 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bc3e:	48b6      	ldr	r0, [pc, #728]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bc40:	f7f6 fc06 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Status:\t\t\t\t[ %c ]\t\t",
                 pGNSSParser_Data->gprmc_data.status);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
  (void)snprintf((char *)msg, MSG_SZ, "Status:\t\t\t\t[ %c ]\t\t",
 800bc4a:	4ab4      	ldr	r2, [pc, #720]	@ (800bf1c <GNSS_DATA_GetGPRMCInfo+0x314>)
 800bc4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bc50:	48b1      	ldr	r0, [pc, #708]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bc52:	f004 fe19 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bc56:	48b0      	ldr	r0, [pc, #704]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bc58:	f7f6 fbfa 	bl	8002450 <GNSS_PRINT>
  if (pGNSSParser_Data->gprmc_data.status == (uint8_t)'A')
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 800bc62:	2b41      	cmp	r3, #65	@ 0x41
 800bc64:	d103      	bne.n	800bc6e <GNSS_DATA_GetGPRMCInfo+0x66>
  {
    PRINT_INFO("-- Valid (reported in 2D and 3D fix conditions)\n\r");
 800bc66:	48ae      	ldr	r0, [pc, #696]	@ (800bf20 <GNSS_DATA_GetGPRMCInfo+0x318>)
 800bc68:	f7f6 fbf2 	bl	8002450 <GNSS_PRINT>
 800bc6c:	e00b      	b.n	800bc86 <GNSS_DATA_GetGPRMCInfo+0x7e>
  }
  else if (pGNSSParser_Data->gprmc_data.status == (uint8_t)'V')
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 800bc74:	2b56      	cmp	r3, #86	@ 0x56
 800bc76:	d103      	bne.n	800bc80 <GNSS_DATA_GetGPRMCInfo+0x78>
  {
    PRINT_INFO("-- Warning (reported in NO FIX conditions)\n\r");
 800bc78:	48aa      	ldr	r0, [pc, #680]	@ (800bf24 <GNSS_DATA_GetGPRMCInfo+0x31c>)
 800bc7a:	f7f6 fbe9 	bl	8002450 <GNSS_PRINT>
 800bc7e:	e002      	b.n	800bc86 <GNSS_DATA_GetGPRMCInfo+0x7e>
  }
  else
  {
    PRINT_INFO("-- Unknown status\n\r");
 800bc80:	48a9      	ldr	r0, [pc, #676]	@ (800bf28 <GNSS_DATA_GetGPRMCInfo+0x320>)
 800bc82:	f7f6 fbe5 	bl	8002450 <GNSS_PRINT>
  }

  float64_t lat_mod = fmod(pGNSSParser_Data->gprmc_data.xyz.lat, 100.0);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	ed93 7b3e 	vldr	d7, [r3, #248]	@ 0xf8
 800bc8c:	ed9f 1b9e 	vldr	d1, [pc, #632]	@ 800bf08 <GNSS_DATA_GetGPRMCInfo+0x300>
 800bc90:	eeb0 0a47 	vmov.f32	s0, s14
 800bc94:	eef0 0a67 	vmov.f32	s1, s15
 800bc98:	f007 fb50 	bl	801333c <fmod>
 800bc9c:	ed87 0b04 	vstr	d0, [r7, #16]
  float64_t lon_mod = fmod(pGNSSParser_Data->gprmc_data.xyz.lon, 100.0);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	ed93 7b40 	vldr	d7, [r3, #256]	@ 0x100
 800bca6:	ed9f 1b98 	vldr	d1, [pc, #608]	@ 800bf08 <GNSS_DATA_GetGPRMCInfo+0x300>
 800bcaa:	eeb0 0a47 	vmov.f32	s0, s14
 800bcae:	eef0 0a67 	vmov.f32	s1, s15
 800bcb2:	f007 fb43 	bl	801333c <fmod>
 800bcb6:	ed87 0b02 	vstr	d0, [r7, #8]

  (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t\t[ %.0f' %02d'' %f\" %c ]\n\r",
                 (pGNSSParser_Data->gprmc_data.xyz.lat - lat_mod) / 100.0,
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	@ 0xf8
 800bcc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bcc4:	f7f4 faf0 	bl	80002a8 <__aeabi_dsub>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	460b      	mov	r3, r1
 800bccc:	4610      	mov	r0, r2
 800bcce:	4619      	mov	r1, r3
  (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t\t[ %.0f' %02d'' %f\" %c ]\n\r",
 800bcd0:	f04f 0200 	mov.w	r2, #0
 800bcd4:	4b95      	ldr	r3, [pc, #596]	@ (800bf2c <GNSS_DATA_GetGPRMCInfo+0x324>)
 800bcd6:	f7f4 fdc9 	bl	800086c <__aeabi_ddiv>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4614      	mov	r4, r2
 800bce0:	461d      	mov	r5, r3
                 minute_part(lat_mod),
 800bce2:	ed97 0b04 	vldr	d0, [r7, #16]
 800bce6:	f7ff f8d9 	bl	800ae9c <minute_part>
 800bcea:	4603      	mov	r3, r0
  (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t\t[ %.0f' %02d'' %f\" %c ]\n\r",
 800bcec:	461e      	mov	r6, r3
 800bcee:	ed97 0b04 	vldr	d0, [r7, #16]
 800bcf2:	f7ff f8d3 	bl	800ae9c <minute_part>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	ed97 0b04 	vldr	d0, [r7, #16]
 800bcfe:	f7ff f8df 	bl	800aec0 <seconds>
 800bd02:	eeb0 7a40 	vmov.f32	s14, s0
 800bd06:	eef0 7a60 	vmov.f32	s15, s1
				 seconds(lat_mod,minute_part(lat_mod)),
                 pGNSSParser_Data->gprmc_data.xyz.ns);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
  (void)snprintf((char *)msg, MSG_SZ, "Latitude:\t\t\t[ %.0f' %02d'' %f\" %c ]\n\r",
 800bd10:	9306      	str	r3, [sp, #24]
 800bd12:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bd16:	9602      	str	r6, [sp, #8]
 800bd18:	e9cd 4500 	strd	r4, r5, [sp]
 800bd1c:	4a84      	ldr	r2, [pc, #528]	@ (800bf30 <GNSS_DATA_GetGPRMCInfo+0x328>)
 800bd1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bd22:	487d      	ldr	r0, [pc, #500]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bd24:	f004 fdb0 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bd28:	487b      	ldr	r0, [pc, #492]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bd2a:	f7f6 fb91 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t\t[ %.0f' %02d'' %f\" %c ]\n\r",
                 (pGNSSParser_Data->gprmc_data.xyz.lon - lon_mod) / 100.0,
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800bd34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd38:	f7f4 fab6 	bl	80002a8 <__aeabi_dsub>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4610      	mov	r0, r2
 800bd42:	4619      	mov	r1, r3
  (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t\t[ %.0f' %02d'' %f\" %c ]\n\r",
 800bd44:	f04f 0200 	mov.w	r2, #0
 800bd48:	4b78      	ldr	r3, [pc, #480]	@ (800bf2c <GNSS_DATA_GetGPRMCInfo+0x324>)
 800bd4a:	f7f4 fd8f 	bl	800086c <__aeabi_ddiv>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	460b      	mov	r3, r1
 800bd52:	4614      	mov	r4, r2
 800bd54:	461d      	mov	r5, r3
                 minute_part(lon_mod),
 800bd56:	ed97 0b02 	vldr	d0, [r7, #8]
 800bd5a:	f7ff f89f 	bl	800ae9c <minute_part>
 800bd5e:	4603      	mov	r3, r0
  (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t\t[ %.0f' %02d'' %f\" %c ]\n\r",
 800bd60:	461e      	mov	r6, r3
 800bd62:	ed97 0b02 	vldr	d0, [r7, #8]
 800bd66:	f7ff f899 	bl	800ae9c <minute_part>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	ed97 0b02 	vldr	d0, [r7, #8]
 800bd72:	f7ff f8a5 	bl	800aec0 <seconds>
 800bd76:	eeb0 7a40 	vmov.f32	s14, s0
 800bd7a:	eef0 7a60 	vmov.f32	s15, s1
				 seconds(lon_mod,minute_part(lon_mod)),
                 pGNSSParser_Data->gprmc_data.xyz.ew);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
  (void)snprintf((char *)msg, MSG_SZ, "Longitude:\t\t\t[ %.0f' %02d'' %f\" %c ]\n\r",
 800bd84:	9306      	str	r3, [sp, #24]
 800bd86:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bd8a:	9602      	str	r6, [sp, #8]
 800bd8c:	e9cd 4500 	strd	r4, r5, [sp]
 800bd90:	4a68      	ldr	r2, [pc, #416]	@ (800bf34 <GNSS_DATA_GetGPRMCInfo+0x32c>)
 800bd92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bd96:	4860      	ldr	r0, [pc, #384]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bd98:	f004 fd76 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bd9c:	485e      	ldr	r0, [pc, #376]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bd9e:	f7f6 fb57 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Speed over ground (knots):\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gprmc_data.speed);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
  (void)snprintf((char *)msg, MSG_SZ, "Speed over ground (knots):\t[ %.01f ]\n\r",
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7f4 fbdd 	bl	8000568 <__aeabi_f2d>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	e9cd 2300 	strd	r2, r3, [sp]
 800bdb6:	4a60      	ldr	r2, [pc, #384]	@ (800bf38 <GNSS_DATA_GetGPRMCInfo+0x330>)
 800bdb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bdbc:	4856      	ldr	r0, [pc, #344]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bdbe:	f004 fd63 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bdc2:	4855      	ldr	r0, [pc, #340]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bdc4:	f7f6 fb44 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Trackgood:\t\t\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gprmc_data.trackgood);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
  (void)snprintf((char *)msg, MSG_SZ, "Trackgood:\t\t\t[ %.01f ]\n\r",
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7f4 fbca 	bl	8000568 <__aeabi_f2d>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	e9cd 2300 	strd	r2, r3, [sp]
 800bddc:	4a57      	ldr	r2, [pc, #348]	@ (800bf3c <GNSS_DATA_GetGPRMCInfo+0x334>)
 800bdde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bde2:	484d      	ldr	r0, [pc, #308]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bde4:	f004 fd50 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bde8:	484b      	ldr	r0, [pc, #300]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bdea:	f7f6 fb31 	bl	8002450 <GNSS_PRINT>
/*
  (void)snprintf((char *)msg, MSG_SZ, "Date (ddmmyy):\t\t\t[ %ld ]\n\r",
                 pGNSSParser_Data->gprmc_data.date);
*/ /* Replaced by the following implementation for compatibility with AC6 and gcc compilers */
  (void)snprintf((char *)msg, MSG_SZ, "Date (ddmmyy):\t\t\t[ %02d%02d%02d ]\n\r",
                 (int16_t)((pGNSSParser_Data->gprmc_data.date/10000)),
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bdf4:	4a52      	ldr	r2, [pc, #328]	@ (800bf40 <GNSS_DATA_GetGPRMCInfo+0x338>)
 800bdf6:	fb82 1203 	smull	r1, r2, r2, r3
 800bdfa:	1312      	asrs	r2, r2, #12
 800bdfc:	17db      	asrs	r3, r3, #31
 800bdfe:	1ad3      	subs	r3, r2, r3
 800be00:	b21b      	sxth	r3, r3
  (void)snprintf((char *)msg, MSG_SZ, "Date (ddmmyy):\t\t\t[ %02d%02d%02d ]\n\r",
 800be02:	461d      	mov	r5, r3
                 (int16_t)((pGNSSParser_Data->gprmc_data.date/100) - (100*(pGNSSParser_Data->gprmc_data.date/10000))),
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800be0a:	4a4e      	ldr	r2, [pc, #312]	@ (800bf44 <GNSS_DATA_GetGPRMCInfo+0x33c>)
 800be0c:	fb82 1203 	smull	r1, r2, r2, r3
 800be10:	1152      	asrs	r2, r2, #5
 800be12:	17db      	asrs	r3, r3, #31
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	b29a      	uxth	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800be1e:	4948      	ldr	r1, [pc, #288]	@ (800bf40 <GNSS_DATA_GetGPRMCInfo+0x338>)
 800be20:	fb81 0103 	smull	r0, r1, r1, r3
 800be24:	1309      	asrs	r1, r1, #12
 800be26:	17db      	asrs	r3, r3, #31
 800be28:	1acb      	subs	r3, r1, r3
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	4619      	mov	r1, r3
 800be2e:	0089      	lsls	r1, r1, #2
 800be30:	440b      	add	r3, r1
 800be32:	4619      	mov	r1, r3
 800be34:	0088      	lsls	r0, r1, #2
 800be36:	4619      	mov	r1, r3
 800be38:	4603      	mov	r3, r0
 800be3a:	440b      	add	r3, r1
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	b29b      	uxth	r3, r3
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	b29b      	uxth	r3, r3
 800be44:	b21b      	sxth	r3, r3
  (void)snprintf((char *)msg, MSG_SZ, "Date (ddmmyy):\t\t\t[ %02d%02d%02d ]\n\r",
 800be46:	4618      	mov	r0, r3
                 (int16_t)(pGNSSParser_Data->gprmc_data.date - (100*(pGNSSParser_Data->gprmc_data.date/100))));
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800be4e:	b29a      	uxth	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800be56:	493b      	ldr	r1, [pc, #236]	@ (800bf44 <GNSS_DATA_GetGPRMCInfo+0x33c>)
 800be58:	fb81 4103 	smull	r4, r1, r1, r3
 800be5c:	1149      	asrs	r1, r1, #5
 800be5e:	17db      	asrs	r3, r3, #31
 800be60:	1acb      	subs	r3, r1, r3
 800be62:	b29b      	uxth	r3, r3
 800be64:	4619      	mov	r1, r3
 800be66:	0089      	lsls	r1, r1, #2
 800be68:	440b      	add	r3, r1
 800be6a:	4619      	mov	r1, r3
 800be6c:	008c      	lsls	r4, r1, #2
 800be6e:	4619      	mov	r1, r3
 800be70:	4623      	mov	r3, r4
 800be72:	440b      	add	r3, r1
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	b29b      	uxth	r3, r3
 800be78:	1ad3      	subs	r3, r2, r3
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	b21b      	sxth	r3, r3
  (void)snprintf((char *)msg, MSG_SZ, "Date (ddmmyy):\t\t\t[ %02d%02d%02d ]\n\r",
 800be7e:	9301      	str	r3, [sp, #4]
 800be80:	9000      	str	r0, [sp, #0]
 800be82:	462b      	mov	r3, r5
 800be84:	4a30      	ldr	r2, [pc, #192]	@ (800bf48 <GNSS_DATA_GetGPRMCInfo+0x340>)
 800be86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800be8a:	4823      	ldr	r0, [pc, #140]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800be8c:	f004 fcfc 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800be90:	4821      	ldr	r0, [pc, #132]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800be92:	f7f6 fadd 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Magnetic Variation:\t\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gprmc_data.mag_var);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
  (void)snprintf((char *)msg, MSG_SZ, "Magnetic Variation:\t\t[ %.01f ]\n\r",
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7f4 fb63 	bl	8000568 <__aeabi_f2d>
 800bea2:	4602      	mov	r2, r0
 800bea4:	460b      	mov	r3, r1
 800bea6:	e9cd 2300 	strd	r2, r3, [sp]
 800beaa:	4a28      	ldr	r2, [pc, #160]	@ (800bf4c <GNSS_DATA_GetGPRMCInfo+0x344>)
 800beac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800beb0:	4819      	ldr	r0, [pc, #100]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800beb2:	f004 fce9 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800beb6:	4818      	ldr	r0, [pc, #96]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800beb8:	f7f6 faca 	bl	8002450 <GNSS_PRINT>

  if ((pGNSSParser_Data->gprmc_data.mag_var_dir != (uint8_t)'E') &&
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800bec2:	2b45      	cmp	r3, #69	@ 0x45
 800bec4:	d00b      	beq.n	800bede <GNSS_DATA_GetGPRMCInfo+0x2d6>
      (pGNSSParser_Data->gprmc_data.mag_var_dir != (uint8_t)'W')) {
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
  if ((pGNSSParser_Data->gprmc_data.mag_var_dir != (uint8_t)'E') &&
 800becc:	2b57      	cmp	r3, #87	@ 0x57
 800bece:	d006      	beq.n	800bede <GNSS_DATA_GetGPRMCInfo+0x2d6>
    (void)snprintf((char *)msg, MSG_SZ, "Magnetic Var. Direction:\t[ - ]\n\r");
 800bed0:	4a1f      	ldr	r2, [pc, #124]	@ (800bf50 <GNSS_DATA_GetGPRMCInfo+0x348>)
 800bed2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bed6:	4810      	ldr	r0, [pc, #64]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bed8:	f004 fcd6 	bl	8010888 <sniprintf>
 800bedc:	e008      	b.n	800bef0 <GNSS_DATA_GetGPRMCInfo+0x2e8>
  }
  else {
    (void)snprintf((char *)msg, MSG_SZ, "Magnetic Var. Direction:\t[ %c ]\n\r",
                   pGNSSParser_Data->gprmc_data.mag_var_dir);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
    (void)snprintf((char *)msg, MSG_SZ, "Magnetic Var. Direction:\t[ %c ]\n\r",
 800bee4:	4a1b      	ldr	r2, [pc, #108]	@ (800bf54 <GNSS_DATA_GetGPRMCInfo+0x34c>)
 800bee6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800beea:	480b      	ldr	r0, [pc, #44]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800beec:	f004 fccc 	bl	8010888 <sniprintf>
  }
  PRINT_INFO((char *)msg);
 800bef0:	4809      	ldr	r0, [pc, #36]	@ (800bf18 <GNSS_DATA_GetGPRMCInfo+0x310>)
 800bef2:	f7f6 faad 	bl	8002450 <GNSS_PRINT>

  PRINT_INFO("\n\n\r>");
 800bef6:	4818      	ldr	r0, [pc, #96]	@ (800bf58 <GNSS_DATA_GetGPRMCInfo+0x350>)
 800bef8:	f7f6 faaa 	bl	8002450 <GNSS_PRINT>

  return;
 800befc:	bf00      	nop
}
 800befe:	371c      	adds	r7, #28
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf04:	f3af 8000 	nop.w
 800bf08:	00000000 	.word	0x00000000
 800bf0c:	40590000 	.word	0x40590000
 800bf10:	0801444c 	.word	0x0801444c
 800bf14:	080146c4 	.word	0x080146c4
 800bf18:	20005bb0 	.word	0x20005bb0
 800bf1c:	080146e4 	.word	0x080146e4
 800bf20:	080146f8 	.word	0x080146f8
 800bf24:	0801472c 	.word	0x0801472c
 800bf28:	0801475c 	.word	0x0801475c
 800bf2c:	40590000 	.word	0x40590000
 800bf30:	08014770 	.word	0x08014770
 800bf34:	08014798 	.word	0x08014798
 800bf38:	080147c0 	.word	0x080147c0
 800bf3c:	080147e8 	.word	0x080147e8
 800bf40:	68db8bad 	.word	0x68db8bad
 800bf44:	51eb851f 	.word	0x51eb851f
 800bf48:	08014804 	.word	0x08014804
 800bf4c:	08014828 	.word	0x08014828
 800bf50:	0801484c 	.word	0x0801484c
 800bf54:	08014870 	.word	0x08014870
 800bf58:	080143c0 	.word	0x080143c0

0800bf5c <GNSS_DATA_GetGSAInfo>:

/* Puts to console the info about GSA satellites got by the most recent reception process. */
void GNSS_DATA_GetGSAInfo(GNSSParser_Data_t *pGNSSParser_Data)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af02      	add	r7, sp, #8
 800bf62:	6078      	str	r0, [r7, #4]
  PRINT_INFO("\r\n");
 800bf64:	487d      	ldr	r0, [pc, #500]	@ (800c15c <GNSS_DATA_GetGSAInfo+0x200>)
 800bf66:	f7f6 fa73 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ,  "Constellation:\t\t[ %s ]\t",
                 pGNSSParser_Data->gsa_data.constellation);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
  (void)snprintf((char *)msg, MSG_SZ,  "Constellation:\t\t[ %s ]\t",
 800bf70:	4a7b      	ldr	r2, [pc, #492]	@ (800c160 <GNSS_DATA_GetGSAInfo+0x204>)
 800bf72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bf76:	487b      	ldr	r0, [pc, #492]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800bf78:	f004 fc86 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800bf7c:	4879      	ldr	r0, [pc, #484]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800bf7e:	f7f6 fa67 	bl	8002450 <GNSS_PRINT>

  if (strcmp((char*)pGNSSParser_Data->gsa_data.constellation, "$GPGSA") == 0)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800bf88:	4977      	ldr	r1, [pc, #476]	@ (800c168 <GNSS_DATA_GetGSAInfo+0x20c>)
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7f4 f920 	bl	80001d0 <strcmp>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d103      	bne.n	800bf9e <GNSS_DATA_GetGSAInfo+0x42>
  {
    PRINT_INFO("-- only GPS constellation is enabled\n\r");    
 800bf96:	4875      	ldr	r0, [pc, #468]	@ (800c16c <GNSS_DATA_GetGSAInfo+0x210>)
 800bf98:	f7f6 fa5a 	bl	8002450 <GNSS_PRINT>
 800bf9c:	e036      	b.n	800c00c <GNSS_DATA_GetGSAInfo+0xb0>
  }
  else if (strcmp((char*)pGNSSParser_Data->gsa_data.constellation, "$GLGSA") == 0)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800bfa4:	4972      	ldr	r1, [pc, #456]	@ (800c170 <GNSS_DATA_GetGSAInfo+0x214>)
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7f4 f912 	bl	80001d0 <strcmp>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d103      	bne.n	800bfba <GNSS_DATA_GetGSAInfo+0x5e>
  {
    PRINT_INFO("-- only GLONASS constellation is enabled\n\r");
 800bfb2:	4870      	ldr	r0, [pc, #448]	@ (800c174 <GNSS_DATA_GetGSAInfo+0x218>)
 800bfb4:	f7f6 fa4c 	bl	8002450 <GNSS_PRINT>
 800bfb8:	e028      	b.n	800c00c <GNSS_DATA_GetGSAInfo+0xb0>
  }
  else if (strcmp((char*)pGNSSParser_Data->gsa_data.constellation, "$GAGSA") == 0)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800bfc0:	496d      	ldr	r1, [pc, #436]	@ (800c178 <GNSS_DATA_GetGSAInfo+0x21c>)
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7f4 f904 	bl	80001d0 <strcmp>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d103      	bne.n	800bfd6 <GNSS_DATA_GetGSAInfo+0x7a>
  {
    PRINT_INFO("-- only GALILEO constellation is enabled\n\r");
 800bfce:	486b      	ldr	r0, [pc, #428]	@ (800c17c <GNSS_DATA_GetGSAInfo+0x220>)
 800bfd0:	f7f6 fa3e 	bl	8002450 <GNSS_PRINT>
 800bfd4:	e01a      	b.n	800c00c <GNSS_DATA_GetGSAInfo+0xb0>
  }
  else if (strcmp((char*)pGNSSParser_Data->gsa_data.constellation, "$BDGSA") == 0)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800bfdc:	4968      	ldr	r1, [pc, #416]	@ (800c180 <GNSS_DATA_GetGSAInfo+0x224>)
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7f4 f8f6 	bl	80001d0 <strcmp>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d103      	bne.n	800bff2 <GNSS_DATA_GetGSAInfo+0x96>
  {
    PRINT_INFO("-- only BEIDOU constellation is enabled\n\r");
 800bfea:	4866      	ldr	r0, [pc, #408]	@ (800c184 <GNSS_DATA_GetGSAInfo+0x228>)
 800bfec:	f7f6 fa30 	bl	8002450 <GNSS_PRINT>
 800bff0:	e00c      	b.n	800c00c <GNSS_DATA_GetGSAInfo+0xb0>
  }
  else if (strcmp((char*)pGNSSParser_Data->gsa_data.constellation, "$GNGSA") == 0)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800bff8:	4963      	ldr	r1, [pc, #396]	@ (800c188 <GNSS_DATA_GetGSAInfo+0x22c>)
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7f4 f8e8 	bl	80001d0 <strcmp>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d102      	bne.n	800c00c <GNSS_DATA_GetGSAInfo+0xb0>
  {
     PRINT_INFO("-- more than one constellation is enabled\n\r");   
 800c006:	4861      	ldr	r0, [pc, #388]	@ (800c18c <GNSS_DATA_GetGSAInfo+0x230>)
 800c008:	f7f6 fa22 	bl	8002450 <GNSS_PRINT>
  {
    /* nothing to do */
  }

  (void)snprintf((char *)msg, MSG_SZ,  "Operating Mode:\t\t[ %c ]\t\t",
                 pGNSSParser_Data->gsa_data.operating_mode);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
  (void)snprintf((char *)msg, MSG_SZ,  "Operating Mode:\t\t[ %c ]\t\t",
 800c012:	4a5f      	ldr	r2, [pc, #380]	@ (800c190 <GNSS_DATA_GetGSAInfo+0x234>)
 800c014:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c018:	4852      	ldr	r0, [pc, #328]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800c01a:	f004 fc35 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800c01e:	4851      	ldr	r0, [pc, #324]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800c020:	f7f6 fa16 	bl	8002450 <GNSS_PRINT>

  if (pGNSSParser_Data->gsa_data.operating_mode == (uint8_t)'A')
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 800c02a:	2b41      	cmp	r3, #65	@ 0x41
 800c02c:	d103      	bne.n	800c036 <GNSS_DATA_GetGSAInfo+0xda>
  {
    PRINT_INFO("-- Auto (2D/3D)\n\r");
 800c02e:	4859      	ldr	r0, [pc, #356]	@ (800c194 <GNSS_DATA_GetGSAInfo+0x238>)
 800c030:	f7f6 fa0e 	bl	8002450 <GNSS_PRINT>
 800c034:	e00b      	b.n	800c04e <GNSS_DATA_GetGSAInfo+0xf2>
  }
  else if (pGNSSParser_Data->gsa_data.operating_mode == (uint8_t)'M')
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 800c03c:	2b4d      	cmp	r3, #77	@ 0x4d
 800c03e:	d103      	bne.n	800c048 <GNSS_DATA_GetGSAInfo+0xec>
  {
    PRINT_INFO("-- Manual\n\r");
 800c040:	4855      	ldr	r0, [pc, #340]	@ (800c198 <GNSS_DATA_GetGSAInfo+0x23c>)
 800c042:	f7f6 fa05 	bl	8002450 <GNSS_PRINT>
 800c046:	e002      	b.n	800c04e <GNSS_DATA_GetGSAInfo+0xf2>
  }
  else
  {
    PRINT_INFO("-- Unknown op mode\n\r");
 800c048:	4854      	ldr	r0, [pc, #336]	@ (800c19c <GNSS_DATA_GetGSAInfo+0x240>)
 800c04a:	f7f6 fa01 	bl	8002450 <GNSS_PRINT>
  }

  (void)snprintf((char *)msg, MSG_SZ, "Current Mode:\t\t[ %d ]\t\t",
                 pGNSSParser_Data->gsa_data.current_mode);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	@ 0x152
  (void)snprintf((char *)msg, MSG_SZ, "Current Mode:\t\t[ %d ]\t\t",
 800c054:	4a52      	ldr	r2, [pc, #328]	@ (800c1a0 <GNSS_DATA_GetGSAInfo+0x244>)
 800c056:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c05a:	4842      	ldr	r0, [pc, #264]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800c05c:	f004 fc14 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800c060:	4840      	ldr	r0, [pc, #256]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800c062:	f7f6 f9f5 	bl	8002450 <GNSS_PRINT>

  if (pGNSSParser_Data->gsa_data.current_mode == 1)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	@ 0x152
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d103      	bne.n	800c078 <GNSS_DATA_GetGSAInfo+0x11c>
  {
    PRINT_INFO("-- no fix available\n\r");
 800c070:	484c      	ldr	r0, [pc, #304]	@ (800c1a4 <GNSS_DATA_GetGSAInfo+0x248>)
 800c072:	f7f6 f9ed 	bl	8002450 <GNSS_PRINT>
 800c076:	e010      	b.n	800c09a <GNSS_DATA_GetGSAInfo+0x13e>
  }
  else if (pGNSSParser_Data->gsa_data.current_mode == 2)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	@ 0x152
 800c07e:	2b02      	cmp	r3, #2
 800c080:	d103      	bne.n	800c08a <GNSS_DATA_GetGSAInfo+0x12e>
  {
    PRINT_INFO("-- 2D\n\r");
 800c082:	4849      	ldr	r0, [pc, #292]	@ (800c1a8 <GNSS_DATA_GetGSAInfo+0x24c>)
 800c084:	f7f6 f9e4 	bl	8002450 <GNSS_PRINT>
 800c088:	e007      	b.n	800c09a <GNSS_DATA_GetGSAInfo+0x13e>
  }
  else if (pGNSSParser_Data->gsa_data.current_mode == 3)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	@ 0x152
 800c090:	2b03      	cmp	r3, #3
 800c092:	d102      	bne.n	800c09a <GNSS_DATA_GetGSAInfo+0x13e>
  {
    PRINT_INFO("-- 3D\n\r");
 800c094:	4845      	ldr	r0, [pc, #276]	@ (800c1ac <GNSS_DATA_GetGSAInfo+0x250>)
 800c096:	f7f6 f9db 	bl	8002450 <GNSS_PRINT>
  else
  {
    /* nothing to do */
  }

  int16_t *sat_prn = (int16_t*)(pGNSSParser_Data->gsa_data.sat_prn);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c0a0:	60bb      	str	r3, [r7, #8]
  for (uint8_t i=0; i<12U; i++)
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	73fb      	strb	r3, [r7, #15]
 800c0a6:	e015      	b.n	800c0d4 <GNSS_DATA_GetGSAInfo+0x178>
  {  
    (void)snprintf((char *)msg, MSG_SZ, "SatPRN%02d:\t\t[ %d ]\n\r", i+1U,
 800c0a8:	7bfb      	ldrb	r3, [r7, #15]
 800c0aa:	1c59      	adds	r1, r3, #1
                   (*(&sat_prn[i])));
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	f9b3 3000 	ldrsh.w	r3, [r3]
    (void)snprintf((char *)msg, MSG_SZ, "SatPRN%02d:\t\t[ %d ]\n\r", i+1U,
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	4a3c      	ldr	r2, [pc, #240]	@ (800c1b0 <GNSS_DATA_GetGSAInfo+0x254>)
 800c0be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c0c2:	4828      	ldr	r0, [pc, #160]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800c0c4:	f004 fbe0 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800c0c8:	4826      	ldr	r0, [pc, #152]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800c0ca:	f7f6 f9c1 	bl	8002450 <GNSS_PRINT>
  for (uint8_t i=0; i<12U; i++)
 800c0ce:	7bfb      	ldrb	r3, [r7, #15]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	73fb      	strb	r3, [r7, #15]
 800c0d4:	7bfb      	ldrb	r3, [r7, #15]
 800c0d6:	2b0b      	cmp	r3, #11
 800c0d8:	d9e6      	bls.n	800c0a8 <GNSS_DATA_GetGSAInfo+0x14c>
  }

  (void)snprintf((char *)msg, MSG_SZ, "PDOP:\t\t\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gsa_data.pdop);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
  (void)snprintf((char *)msg, MSG_SZ, "PDOP:\t\t\t[ %.01f ]\n\r",
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7f4 fa41 	bl	8000568 <__aeabi_f2d>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	e9cd 2300 	strd	r2, r3, [sp]
 800c0ee:	4a31      	ldr	r2, [pc, #196]	@ (800c1b4 <GNSS_DATA_GetGSAInfo+0x258>)
 800c0f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c0f4:	481b      	ldr	r0, [pc, #108]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800c0f6:	f004 fbc7 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800c0fa:	481a      	ldr	r0, [pc, #104]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800c0fc:	f7f6 f9a8 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "HDOP:\t\t\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gsa_data.hdop);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
  (void)snprintf((char *)msg, MSG_SZ, "HDOP:\t\t\t[ %.01f ]\n\r",
 800c106:	4618      	mov	r0, r3
 800c108:	f7f4 fa2e 	bl	8000568 <__aeabi_f2d>
 800c10c:	4602      	mov	r2, r0
 800c10e:	460b      	mov	r3, r1
 800c110:	e9cd 2300 	strd	r2, r3, [sp]
 800c114:	4a28      	ldr	r2, [pc, #160]	@ (800c1b8 <GNSS_DATA_GetGSAInfo+0x25c>)
 800c116:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c11a:	4812      	ldr	r0, [pc, #72]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800c11c:	f004 fbb4 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800c120:	4810      	ldr	r0, [pc, #64]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800c122:	f7f6 f995 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "VDOP:\t\t\t[ %.01f ]\n\r",
                 pGNSSParser_Data->gsa_data.vdop);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
  (void)snprintf((char *)msg, MSG_SZ, "VDOP:\t\t\t[ %.01f ]\n\r",
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7f4 fa1b 	bl	8000568 <__aeabi_f2d>
 800c132:	4602      	mov	r2, r0
 800c134:	460b      	mov	r3, r1
 800c136:	e9cd 2300 	strd	r2, r3, [sp]
 800c13a:	4a20      	ldr	r2, [pc, #128]	@ (800c1bc <GNSS_DATA_GetGSAInfo+0x260>)
 800c13c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c140:	4808      	ldr	r0, [pc, #32]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800c142:	f004 fba1 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800c146:	4807      	ldr	r0, [pc, #28]	@ (800c164 <GNSS_DATA_GetGSAInfo+0x208>)
 800c148:	f7f6 f982 	bl	8002450 <GNSS_PRINT>

  PRINT_INFO("\n\n\r>");
 800c14c:	481c      	ldr	r0, [pc, #112]	@ (800c1c0 <GNSS_DATA_GetGSAInfo+0x264>)
 800c14e:	f7f6 f97f 	bl	8002450 <GNSS_PRINT>

  return;
 800c152:	bf00      	nop
}
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	0801444c 	.word	0x0801444c
 800c160:	08014894 	.word	0x08014894
 800c164:	20005bb0 	.word	0x20005bb0
 800c168:	080148ac 	.word	0x080148ac
 800c16c:	08014470 	.word	0x08014470
 800c170:	080148b4 	.word	0x080148b4
 800c174:	080144a0 	.word	0x080144a0
 800c178:	080148bc 	.word	0x080148bc
 800c17c:	080144d4 	.word	0x080144d4
 800c180:	080148c4 	.word	0x080148c4
 800c184:	08014508 	.word	0x08014508
 800c188:	080148cc 	.word	0x080148cc
 800c18c:	080148d4 	.word	0x080148d4
 800c190:	08014900 	.word	0x08014900
 800c194:	0801491c 	.word	0x0801491c
 800c198:	08014930 	.word	0x08014930
 800c19c:	0801493c 	.word	0x0801493c
 800c1a0:	08014954 	.word	0x08014954
 800c1a4:	0801496c 	.word	0x0801496c
 800c1a8:	08014984 	.word	0x08014984
 800c1ac:	0801498c 	.word	0x0801498c
 800c1b0:	08014994 	.word	0x08014994
 800c1b4:	080149ac 	.word	0x080149ac
 800c1b8:	080145b4 	.word	0x080145b4
 800c1bc:	080149c0 	.word	0x080149c0
 800c1c0:	080143c0 	.word	0x080143c0

0800c1c4 <GNSS_DATA_GetGSVInfo>:

/* Puts to console the info about GSV satellites got by the most recent reception process. */
void GNSS_DATA_GetGSVInfo(GNSSParser_Data_t *pGNSSParser_Data)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b088      	sub	sp, #32
 800c1c8:	af02      	add	r7, sp, #8
 800c1ca:	6078      	str	r0, [r7, #4]
  int16_t i;
  int16_t tot_sats = pGNSSParser_Data->gsv_data.tot_sats;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8b3 31b8 	ldrh.w	r3, [r3, #440]	@ 0x1b8
 800c1d2:	82bb      	strh	r3, [r7, #20]
  int16_t current_sats = pGNSSParser_Data->gsv_data.current_sats;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8b3 31ba 	ldrh.w	r3, [r3, #442]	@ 0x1ba
 800c1da:	827b      	strh	r3, [r7, #18]
  int16_t amount = pGNSSParser_Data->gsv_data.amount;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8b3 31b4 	ldrh.w	r3, [r3, #436]	@ 0x1b4
 800c1e2:	823b      	strh	r3, [r7, #16]
  int16_t number = pGNSSParser_Data->gsv_data.number;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8b3 31b6 	ldrh.w	r3, [r3, #438]	@ 0x1b6
 800c1ea:	81fb      	strh	r3, [r7, #14]
  
  uint8_t degree_ext_ASCII_char = 248;
 800c1ec:	23f8      	movs	r3, #248	@ 0xf8
 800c1ee:	737b      	strb	r3, [r7, #13]
  
  PRINT_INFO("\r\n");
 800c1f0:	4886      	ldr	r0, [pc, #536]	@ (800c40c <GNSS_DATA_GetGSVInfo+0x248>)
 800c1f2:	f7f6 f92d 	bl	8002450 <GNSS_PRINT>
  
  (void)snprintf((char *)msg, MSG_SZ,  "Constellation:\t\t[ %s ]\t",
                 pGNSSParser_Data->gsv_data.constellation);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
  (void)snprintf((char *)msg, MSG_SZ,  "Constellation:\t\t[ %s ]\t",
 800c1fc:	4a84      	ldr	r2, [pc, #528]	@ (800c410 <GNSS_DATA_GetGSVInfo+0x24c>)
 800c1fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c202:	4884      	ldr	r0, [pc, #528]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c204:	f004 fb40 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800c208:	4882      	ldr	r0, [pc, #520]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c20a:	f7f6 f921 	bl	8002450 <GNSS_PRINT>
  
  if (strcmp((char*)pGNSSParser_Data->gsv_data.constellation, "$GPGSV") == 0)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800c214:	4980      	ldr	r1, [pc, #512]	@ (800c418 <GNSS_DATA_GetGSVInfo+0x254>)
 800c216:	4618      	mov	r0, r3
 800c218:	f7f3 ffda 	bl	80001d0 <strcmp>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d103      	bne.n	800c22a <GNSS_DATA_GetGSVInfo+0x66>
  {
    PRINT_INFO("-- message to report all GPS satellites\n\r");    
 800c222:	487e      	ldr	r0, [pc, #504]	@ (800c41c <GNSS_DATA_GetGSVInfo+0x258>)
 800c224:	f7f6 f914 	bl	8002450 <GNSS_PRINT>
 800c228:	e044      	b.n	800c2b4 <GNSS_DATA_GetGSVInfo+0xf0>
  }
  else if (strcmp((char*)pGNSSParser_Data->gsv_data.constellation, "$GLGSV") == 0)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800c230:	497b      	ldr	r1, [pc, #492]	@ (800c420 <GNSS_DATA_GetGSVInfo+0x25c>)
 800c232:	4618      	mov	r0, r3
 800c234:	f7f3 ffcc 	bl	80001d0 <strcmp>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d103      	bne.n	800c246 <GNSS_DATA_GetGSVInfo+0x82>
  {
    PRINT_INFO("-- message to report all GLONASS satellites\n\r");
 800c23e:	4879      	ldr	r0, [pc, #484]	@ (800c424 <GNSS_DATA_GetGSVInfo+0x260>)
 800c240:	f7f6 f906 	bl	8002450 <GNSS_PRINT>
 800c244:	e036      	b.n	800c2b4 <GNSS_DATA_GetGSVInfo+0xf0>
  }
  else if (strcmp((char*)pGNSSParser_Data->gsv_data.constellation, "$GAGSV") == 0)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800c24c:	4976      	ldr	r1, [pc, #472]	@ (800c428 <GNSS_DATA_GetGSVInfo+0x264>)
 800c24e:	4618      	mov	r0, r3
 800c250:	f7f3 ffbe 	bl	80001d0 <strcmp>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d103      	bne.n	800c262 <GNSS_DATA_GetGSVInfo+0x9e>
  {
    PRINT_INFO("-- message to report all GALILEO satellites\n\r");
 800c25a:	4874      	ldr	r0, [pc, #464]	@ (800c42c <GNSS_DATA_GetGSVInfo+0x268>)
 800c25c:	f7f6 f8f8 	bl	8002450 <GNSS_PRINT>
 800c260:	e028      	b.n	800c2b4 <GNSS_DATA_GetGSVInfo+0xf0>
  }
  else if (strcmp((char*)pGNSSParser_Data->gsv_data.constellation, "$BDGSV") == 0)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800c268:	4971      	ldr	r1, [pc, #452]	@ (800c430 <GNSS_DATA_GetGSVInfo+0x26c>)
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7f3 ffb0 	bl	80001d0 <strcmp>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d103      	bne.n	800c27e <GNSS_DATA_GetGSVInfo+0xba>
  {
    PRINT_INFO("-- message to report all BEIDOU satellites\n\r");
 800c276:	486f      	ldr	r0, [pc, #444]	@ (800c434 <GNSS_DATA_GetGSVInfo+0x270>)
 800c278:	f7f6 f8ea 	bl	8002450 <GNSS_PRINT>
 800c27c:	e01a      	b.n	800c2b4 <GNSS_DATA_GetGSVInfo+0xf0>
  }
  else if (strcmp((char*)pGNSSParser_Data->gsv_data.constellation, "$QZGSV") == 0)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800c284:	496c      	ldr	r1, [pc, #432]	@ (800c438 <GNSS_DATA_GetGSVInfo+0x274>)
 800c286:	4618      	mov	r0, r3
 800c288:	f7f3 ffa2 	bl	80001d0 <strcmp>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d103      	bne.n	800c29a <GNSS_DATA_GetGSVInfo+0xd6>
  {
    PRINT_INFO("-- message to report all QZSS satellites\n\r");
 800c292:	486a      	ldr	r0, [pc, #424]	@ (800c43c <GNSS_DATA_GetGSVInfo+0x278>)
 800c294:	f7f6 f8dc 	bl	8002450 <GNSS_PRINT>
 800c298:	e00c      	b.n	800c2b4 <GNSS_DATA_GetGSVInfo+0xf0>
  }
  else if (strcmp((char*)pGNSSParser_Data->gsv_data.constellation, "$GNGSV") == 0)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800c2a0:	4967      	ldr	r1, [pc, #412]	@ (800c440 <GNSS_DATA_GetGSVInfo+0x27c>)
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7f3 ff94 	bl	80001d0 <strcmp>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d102      	bne.n	800c2b4 <GNSS_DATA_GetGSVInfo+0xf0>
  {
     PRINT_INFO("-- message to report all satellites for all enabled constellations\n\r");   
 800c2ae:	4865      	ldr	r0, [pc, #404]	@ (800c444 <GNSS_DATA_GetGSVInfo+0x280>)
 800c2b0:	f7f6 f8ce 	bl	8002450 <GNSS_PRINT>
  else
  {
    /* nothing to do */
  }

  (void)snprintf((char *)msg, MSG_SZ, "GSV message:\t\t[ %d of %d ]\n\r", number, amount);
 800c2b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c2b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	4a61      	ldr	r2, [pc, #388]	@ (800c448 <GNSS_DATA_GetGSVInfo+0x284>)
 800c2c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c2c6:	4853      	ldr	r0, [pc, #332]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c2c8:	f004 fade 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800c2cc:	4851      	ldr	r0, [pc, #324]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c2ce:	f7f6 f8bf 	bl	8002450 <GNSS_PRINT>

  (void)snprintf((char *)msg, MSG_SZ, "Num of Satellites:\t[ %d of %d ]\n\r", pGNSSParser_Data->gsv_data.current_sats, tot_sats);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	@ 0x1ba
 800c2d8:	461a      	mov	r2, r3
 800c2da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	4a5a      	ldr	r2, [pc, #360]	@ (800c44c <GNSS_DATA_GetGSVInfo+0x288>)
 800c2e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c2e8:	484a      	ldr	r0, [pc, #296]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c2ea:	f004 facd 	bl	8010888 <sniprintf>
  PRINT_INFO((char *)msg);
 800c2ee:	4849      	ldr	r0, [pc, #292]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c2f0:	f7f6 f8ae 	bl	8002450 <GNSS_PRINT>

  PRINT_INFO("\n\r");
 800c2f4:	4856      	ldr	r0, [pc, #344]	@ (800c450 <GNSS_DATA_GetGSVInfo+0x28c>)
 800c2f6:	f7f6 f8ab 	bl	8002450 <GNSS_PRINT>

  for (i=0; i<current_sats; i++)
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	82fb      	strh	r3, [r7, #22]
 800c2fe:	e078      	b.n	800c3f2 <GNSS_DATA_GetGSVInfo+0x22e>
  {
    (void)snprintf((char *)msg, MSG_SZ, "Sat%02dPRN:\t\t[ %03d ]\n\r", i+1+((number-1)*GSV_MSG_SATS),
 800c300:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c304:	1c5a      	adds	r2, r3, #1
 800c306:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	18d1      	adds	r1, r2, r3
                   pGNSSParser_Data->gsv_data.gsv_sat_i[i].prn);
 800c310:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	3337      	adds	r3, #55	@ 0x37
 800c318:	00db      	lsls	r3, r3, #3
 800c31a:	4413      	add	r3, r2
 800c31c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    (void)snprintf((char *)msg, MSG_SZ, "Sat%02dPRN:\t\t[ %03d ]\n\r", i+1+((number-1)*GSV_MSG_SATS),
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	460b      	mov	r3, r1
 800c324:	4a4b      	ldr	r2, [pc, #300]	@ (800c454 <GNSS_DATA_GetGSVInfo+0x290>)
 800c326:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c32a:	483a      	ldr	r0, [pc, #232]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c32c:	f004 faac 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800c330:	4838      	ldr	r0, [pc, #224]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c332:	f7f6 f88d 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ, "Sat%02dElev (%c):\t\t[ %03d ]\n\r", i+1+((number-1)*GSV_MSG_SATS), degree_ext_ASCII_char,
 800c336:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c340:	3b01      	subs	r3, #1
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	18d0      	adds	r0, r2, r3
 800c346:	7b7a      	ldrb	r2, [r7, #13]
                   pGNSSParser_Data->gsv_data.gsv_sat_i[i].elev);
 800c348:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c34c:	6879      	ldr	r1, [r7, #4]
 800c34e:	3337      	adds	r3, #55	@ 0x37
 800c350:	00db      	lsls	r3, r3, #3
 800c352:	440b      	add	r3, r1
 800c354:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    (void)snprintf((char *)msg, MSG_SZ, "Sat%02dElev (%c):\t\t[ %03d ]\n\r", i+1+((number-1)*GSV_MSG_SATS), degree_ext_ASCII_char,
 800c358:	9301      	str	r3, [sp, #4]
 800c35a:	9200      	str	r2, [sp, #0]
 800c35c:	4603      	mov	r3, r0
 800c35e:	4a3e      	ldr	r2, [pc, #248]	@ (800c458 <GNSS_DATA_GetGSVInfo+0x294>)
 800c360:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c364:	482b      	ldr	r0, [pc, #172]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c366:	f004 fa8f 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800c36a:	482a      	ldr	r0, [pc, #168]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c36c:	f7f6 f870 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ, "Sat%02dAzim (%c):\t\t[ %03d ]\n\r", i+1+((number-1)*GSV_MSG_SATS), degree_ext_ASCII_char,
 800c370:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c374:	1c5a      	adds	r2, r3, #1
 800c376:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	18d0      	adds	r0, r2, r3
 800c380:	7b7a      	ldrb	r2, [r7, #13]
                   pGNSSParser_Data->gsv_data.gsv_sat_i[i].azim);
 800c382:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c386:	6879      	ldr	r1, [r7, #4]
 800c388:	3337      	adds	r3, #55	@ 0x37
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	440b      	add	r3, r1
 800c38e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    (void)snprintf((char *)msg, MSG_SZ, "Sat%02dAzim (%c):\t\t[ %03d ]\n\r", i+1+((number-1)*GSV_MSG_SATS), degree_ext_ASCII_char,
 800c392:	9301      	str	r3, [sp, #4]
 800c394:	9200      	str	r2, [sp, #0]
 800c396:	4603      	mov	r3, r0
 800c398:	4a30      	ldr	r2, [pc, #192]	@ (800c45c <GNSS_DATA_GetGSVInfo+0x298>)
 800c39a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c39e:	481d      	ldr	r0, [pc, #116]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c3a0:	f004 fa72 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800c3a4:	481b      	ldr	r0, [pc, #108]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c3a6:	f7f6 f853 	bl	8002450 <GNSS_PRINT>

    (void)snprintf((char *)msg, MSG_SZ, "Sat%02dCN0 (dB):\t\t[ %03d ]\n\r", i+1+((number-1)*GSV_MSG_SATS),
 800c3aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c3ae:	1c5a      	adds	r2, r3, #1
 800c3b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	18d1      	adds	r1, r2, r3
                   pGNSSParser_Data->gsv_data.gsv_sat_i[i].cn0);
 800c3ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	3337      	adds	r3, #55	@ 0x37
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	4413      	add	r3, r2
 800c3c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    (void)snprintf((char *)msg, MSG_SZ, "Sat%02dCN0 (dB):\t\t[ %03d ]\n\r", i+1+((number-1)*GSV_MSG_SATS),
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	4a24      	ldr	r2, [pc, #144]	@ (800c460 <GNSS_DATA_GetGSVInfo+0x29c>)
 800c3d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c3d4:	480f      	ldr	r0, [pc, #60]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c3d6:	f004 fa57 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800c3da:	480e      	ldr	r0, [pc, #56]	@ (800c414 <GNSS_DATA_GetGSVInfo+0x250>)
 800c3dc:	f7f6 f838 	bl	8002450 <GNSS_PRINT>

    PRINT_INFO("\n\r");
 800c3e0:	481b      	ldr	r0, [pc, #108]	@ (800c450 <GNSS_DATA_GetGSVInfo+0x28c>)
 800c3e2:	f7f6 f835 	bl	8002450 <GNSS_PRINT>
  for (i=0; i<current_sats; i++)
 800c3e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	82fb      	strh	r3, [r7, #22]
 800c3f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c3f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	db80      	blt.n	800c300 <GNSS_DATA_GetGSVInfo+0x13c>
  }

  PRINT_INFO("\r\n>");
 800c3fe:	4819      	ldr	r0, [pc, #100]	@ (800c464 <GNSS_DATA_GetGSVInfo+0x2a0>)
 800c400:	f7f6 f826 	bl	8002450 <GNSS_PRINT>

}
 800c404:	bf00      	nop
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	0801444c 	.word	0x0801444c
 800c410:	08014894 	.word	0x08014894
 800c414:	20005bb0 	.word	0x20005bb0
 800c418:	080149d4 	.word	0x080149d4
 800c41c:	080149dc 	.word	0x080149dc
 800c420:	08014a08 	.word	0x08014a08
 800c424:	08014a10 	.word	0x08014a10
 800c428:	08014a40 	.word	0x08014a40
 800c42c:	08014a48 	.word	0x08014a48
 800c430:	08014a78 	.word	0x08014a78
 800c434:	08014a80 	.word	0x08014a80
 800c438:	08014ab0 	.word	0x08014ab0
 800c43c:	08014ab8 	.word	0x08014ab8
 800c440:	08014564 	.word	0x08014564
 800c444:	0801456c 	.word	0x0801456c
 800c448:	08014ae4 	.word	0x08014ae4
 800c44c:	08014b04 	.word	0x08014b04
 800c450:	08014b28 	.word	0x08014b28
 800c454:	08014b2c 	.word	0x08014b2c
 800c458:	08014b44 	.word	0x08014b44
 800c45c:	08014b64 	.word	0x08014b64
 800c460:	08014b84 	.word	0x08014b84
 800c464:	08014ba4 	.word	0x08014ba4

0800c468 <GNSS_DATA_GetPSTMVerInfo>:

/* Puts to console the info about FW version. */
void GNSS_DATA_GetPSTMVerInfo(GNSSParser_Data_t *pGNSSParser_Data)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  if(strlen((char *)pGNSSParser_Data->pstmver_data.pstmver_string) != 0U )
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d012      	beq.n	800c4a2 <GNSS_DATA_GetPSTMVerInfo+0x3a>
  {
    PRINT_INFO("\r\n");
 800c47c:	4811      	ldr	r0, [pc, #68]	@ (800c4c4 <GNSS_DATA_GetPSTMVerInfo+0x5c>)
 800c47e:	f7f5 ffe7 	bl	8002450 <GNSS_PRINT>
    (void)snprintf((char *)msg, MSG_SZ,  "Version Info:\t\t[ %s ]\t",
                   pGNSSParser_Data->pstmver_data.pstmver_string);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f503 7308 	add.w	r3, r3, #544	@ 0x220
    (void)snprintf((char *)msg, MSG_SZ,  "Version Info:\t\t[ %s ]\t",
 800c488:	4a0f      	ldr	r2, [pc, #60]	@ (800c4c8 <GNSS_DATA_GetPSTMVerInfo+0x60>)
 800c48a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c48e:	480f      	ldr	r0, [pc, #60]	@ (800c4cc <GNSS_DATA_GetPSTMVerInfo+0x64>)
 800c490:	f004 f9fa 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800c494:	480d      	ldr	r0, [pc, #52]	@ (800c4cc <GNSS_DATA_GetPSTMVerInfo+0x64>)
 800c496:	f7f5 ffdb 	bl	8002450 <GNSS_PRINT>

    PRINT_INFO("\n\n\r");
 800c49a:	480d      	ldr	r0, [pc, #52]	@ (800c4d0 <GNSS_DATA_GetPSTMVerInfo+0x68>)
 800c49c:	f7f5 ffd8 	bl	8002450 <GNSS_PRINT>
 800c4a0:	e008      	b.n	800c4b4 <GNSS_DATA_GetPSTMVerInfo+0x4c>
  }
  else
  {
    (void)snprintf((char *)msg, MSG_SZ,  "No version info available.\n\n\r");
 800c4a2:	4a0c      	ldr	r2, [pc, #48]	@ (800c4d4 <GNSS_DATA_GetPSTMVerInfo+0x6c>)
 800c4a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c4a8:	4808      	ldr	r0, [pc, #32]	@ (800c4cc <GNSS_DATA_GetPSTMVerInfo+0x64>)
 800c4aa:	f004 f9ed 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800c4ae:	4807      	ldr	r0, [pc, #28]	@ (800c4cc <GNSS_DATA_GetPSTMVerInfo+0x64>)
 800c4b0:	f7f5 ffce 	bl	8002450 <GNSS_PRINT>
  }

  PRINT_INFO("\n\r>");
 800c4b4:	4808      	ldr	r0, [pc, #32]	@ (800c4d8 <GNSS_DATA_GetPSTMVerInfo+0x70>)
 800c4b6:	f7f5 ffcb 	bl	8002450 <GNSS_PRINT>
}
 800c4ba:	bf00      	nop
 800c4bc:	3708      	adds	r7, #8
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	0801444c 	.word	0x0801444c
 800c4c8:	08014ba8 	.word	0x08014ba8
 800c4cc:	20005bb0 	.word	0x20005bb0
 800c4d0:	0801442c 	.word	0x0801442c
 800c4d4:	08014bc0 	.word	0x08014bc0
 800c4d8:	08014be0 	.word	0x08014be0

0800c4dc <GNSS_DATA_GetMsglistAck>:
  
}

 /* Puts to console the confirmation of an updated message list. */
void GNSS_DATA_GetMsglistAck(const GNSSParser_Data_t *pGNSSParser_Data)
{ 
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  if(pGNSSParser_Data->result == GNSS_OP_OK)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d112      	bne.n	800c514 <GNSS_DATA_GetMsglistAck+0x38>
  {
    OS_Delay(500); /* Seems to mitigate error events in case of I2C */
 800c4ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c4f2:	f7fc f959 	bl	80087a8 <osDelay>
    GNSS_DATA_SendCommand((uint8_t *)"$PSTMSAVEPAR");
 800c4f6:	4809      	ldr	r0, [pc, #36]	@ (800c51c <GNSS_DATA_GetMsglistAck+0x40>)
 800c4f8:	f7fe fd0e 	bl	800af18 <GNSS_DATA_SendCommand>
    (void)snprintf((char *)msg, MSG_SZ,  "Saving NMEA msg configuration...\t");
 800c4fc:	4a08      	ldr	r2, [pc, #32]	@ (800c520 <GNSS_DATA_GetMsglistAck+0x44>)
 800c4fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c502:	4808      	ldr	r0, [pc, #32]	@ (800c524 <GNSS_DATA_GetMsglistAck+0x48>)
 800c504:	f004 f9c0 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800c508:	4806      	ldr	r0, [pc, #24]	@ (800c524 <GNSS_DATA_GetMsglistAck+0x48>)
 800c50a:	f7f5 ffa1 	bl	8002450 <GNSS_PRINT>
    PRINT_INFO("\n\r>");
 800c50e:	4806      	ldr	r0, [pc, #24]	@ (800c528 <GNSS_DATA_GetMsglistAck+0x4c>)
 800c510:	f7f5 ff9e 	bl	8002450 <GNSS_PRINT>
  }
}
 800c514:	bf00      	nop
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	08014c34 	.word	0x08014c34
 800c520:	08015020 	.word	0x08015020
 800c524:	20005bb0 	.word	0x20005bb0
 800c528:	08014be0 	.word	0x08014be0

0800c52c <GNSS_DATA_GetGNSSAck>:

/* Puts to console the confirmation after saving params.
   NOTE: GNSS must be reset for the new saved params to have effect.
*/
void GNSS_DATA_GetGNSSAck(const GNSSParser_Data_t *pGNSSParser_Data)
{ 
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  if(pGNSSParser_Data->result == GNSS_OP_OK)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10d      	bne.n	800c55a <GNSS_DATA_GetGNSSAck+0x2e>
  {
    (void)GNSS_Wrapper_Reset();
 800c53e:	f7f6 f897 	bl	8002670 <GNSS_Wrapper_Reset>
    (void)snprintf((char *)msg, MSG_SZ,  " Resetting...\t");
 800c542:	4a08      	ldr	r2, [pc, #32]	@ (800c564 <GNSS_DATA_GetGNSSAck+0x38>)
 800c544:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800c548:	4807      	ldr	r0, [pc, #28]	@ (800c568 <GNSS_DATA_GetGNSSAck+0x3c>)
 800c54a:	f004 f99d 	bl	8010888 <sniprintf>
    PRINT_INFO((char *)msg);
 800c54e:	4806      	ldr	r0, [pc, #24]	@ (800c568 <GNSS_DATA_GetGNSSAck+0x3c>)
 800c550:	f7f5 ff7e 	bl	8002450 <GNSS_PRINT>
    PRINT_INFO("\n\r>");    
 800c554:	4805      	ldr	r0, [pc, #20]	@ (800c56c <GNSS_DATA_GetGNSSAck+0x40>)
 800c556:	f7f5 ff7b 	bl	8002450 <GNSS_PRINT>
  }
}
 800c55a:	bf00      	nop
 800c55c:	3708      	adds	r7, #8
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	08015044 	.word	0x08015044
 800c568:	20005bb0 	.word	0x20005bb0
 800c56c:	08014be0 	.word	0x08014be0

0800c570 <GNSS_DATA_CfgMessageList>:

/* Configures the message list. */
void GNSS_DATA_CfgMessageList(int lowMask, int highMask)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af04      	add	r7, sp, #16
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
   * 0x80000 $GPGSV Message
   * 0x100000 $GPGLL Message
   */
//  int lowMask = 0x18004F;

  (void)snprintf((char *)gnssCmd, CMD_SZ, "$PSTMCFGMSGL,%d,%d,%x,%x",
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	9302      	str	r3, [sp, #8]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	9301      	str	r3, [sp, #4]
 800c582:	2301      	movs	r3, #1
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	2300      	movs	r3, #0
 800c588:	4a05      	ldr	r2, [pc, #20]	@ (800c5a0 <GNSS_DATA_CfgMessageList+0x30>)
 800c58a:	215a      	movs	r1, #90	@ 0x5a
 800c58c:	4805      	ldr	r0, [pc, #20]	@ (800c5a4 <GNSS_DATA_CfgMessageList+0x34>)
 800c58e:	f004 f97b 	bl	8010888 <sniprintf>
                 0, /*NMEA 0*/
                 1, /*Rate*/
                 lowMask,
                 highMask);

  GNSS_DATA_SendCommand(gnssCmd);
 800c592:	4804      	ldr	r0, [pc, #16]	@ (800c5a4 <GNSS_DATA_CfgMessageList+0x34>)
 800c594:	f7fe fcc0 	bl	800af18 <GNSS_DATA_SendCommand>
}
 800c598:	bf00      	nop
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	08015054 	.word	0x08015054
 800c5a4:	20005cb0 	.word	0x20005cb0

0800c5a8 <GNSS_PARSER_Init>:


/* Exported functions --------------------------------------------------------*/

GNSSParser_Status_t GNSS_PARSER_Init(GNSSParser_Data_t *pGNSSParser_Data)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  GNSSParser_Status_t ret;

  if (pGNSSParser_Data != NULL)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 8086 	beq.w	800c6c4 <GNSS_PARSER_Init+0x11c>
  {
    pGNSSParser_Data->debug = DEBUG_ON;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	701a      	strb	r2, [r3, #0]
    (void)memset((void *)(&pGNSSParser_Data->gpgga_data), 0, sizeof(GPGGA_Info_t));
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	3308      	adds	r3, #8
 800c5c2:	2248      	movs	r2, #72	@ 0x48
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f004 f9f9 	bl	80109be <memset>
    pGNSSParser_Data->gpgga_data.xyz.ew = (uint8_t)' ';
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2220      	movs	r2, #32
 800c5d0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    pGNSSParser_Data->gpgga_data.xyz.ns = (uint8_t)' ';
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2220      	movs	r2, #32
 800c5d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    pGNSSParser_Data->gpgga_data.xyz.mis = (uint8_t)' ';
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2220      	movs	r2, #32
 800c5e0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    
    (void)memset((void *)(&pGNSSParser_Data->gns_data), 0, sizeof(GNS_Info_t));
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	3350      	adds	r3, #80	@ 0x50
 800c5e8:	2268      	movs	r2, #104	@ 0x68
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f004 f9e6 	bl	80109be <memset>
    pGNSSParser_Data->gns_data.xyz.ew = (uint8_t)' ';
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2220      	movs	r2, #32
 800c5f6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
    pGNSSParser_Data->gns_data.xyz.ns = (uint8_t)' ';
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2220      	movs	r2, #32
 800c5fe:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
    
    (void)memset((void *)(&pGNSSParser_Data->gpgst_data), 0, sizeof(GPGST_Info_t));
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	33b8      	adds	r3, #184	@ 0xb8
 800c606:	222c      	movs	r2, #44	@ 0x2c
 800c608:	2100      	movs	r1, #0
 800c60a:	4618      	mov	r0, r3
 800c60c:	f004 f9d7 	bl	80109be <memset>
    
    (void)memset((void *)(&pGNSSParser_Data->gprmc_data), 0, sizeof(GPRMC_Info_t));
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	33e8      	adds	r3, #232	@ 0xe8
 800c614:	2248      	movs	r2, #72	@ 0x48
 800c616:	2100      	movs	r1, #0
 800c618:	4618      	mov	r0, r3
 800c61a:	f004 f9d0 	bl	80109be <memset>
    pGNSSParser_Data->gprmc_data.xyz.ew = (uint8_t)' ';
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2220      	movs	r2, #32
 800c622:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
    pGNSSParser_Data->gprmc_data.xyz.ns = (uint8_t)' ';
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2220      	movs	r2, #32
 800c62a:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    
    (void)memset((void *)(&pGNSSParser_Data->gsa_data), 0, sizeof(GSA_Info_t));
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800c634:	2264      	movs	r2, #100	@ 0x64
 800c636:	2100      	movs	r1, #0
 800c638:	4618      	mov	r0, r3
 800c63a:	f004 f9c0 	bl	80109be <memset>
    (void)memset((void *)(&pGNSSParser_Data->gsv_data), 0, sizeof(GSV_Info_t));
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800c644:	228c      	movs	r2, #140	@ 0x8c
 800c646:	2100      	movs	r1, #0
 800c648:	4618      	mov	r0, r3
 800c64a:	f004 f9b8 	bl	80109be <memset>
    (void)memset((void *)(&pGNSSParser_Data->pstmver_data), 0, sizeof(PSTMVER_Info_t));
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800c654:	2220      	movs	r2, #32
 800c656:	2100      	movs	r1, #0
 800c658:	4618      	mov	r0, r3
 800c65a:	f004 f9b0 	bl	80109be <memset>
    (void)memset((void *)(&pGNSSParser_Data->pstmpass_data), 0, sizeof(PSTMPASSRTN_Info_t));
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800c664:	2281      	movs	r2, #129	@ 0x81
 800c666:	2100      	movs	r1, #0
 800c668:	4618      	mov	r0, r3
 800c66a:	f004 f9a8 	bl	80109be <memset>
    (void)memset((void *)(&pGNSSParser_Data->pstmagps_data), 0, sizeof(PSTMAGPS_Info_t));
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800c674:	220c      	movs	r2, #12
 800c676:	2100      	movs	r1, #0
 800c678:	4618      	mov	r0, r3
 800c67a:	f004 f9a0 	bl	80109be <memset>
    (void)memset((void *)(&pGNSSParser_Data->geofence_data), 0, sizeof(Geofence_Info_t));
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 800c684:	2260      	movs	r2, #96	@ 0x60
 800c686:	2100      	movs	r1, #0
 800c688:	4618      	mov	r0, r3
 800c68a:	f004 f998 	bl	80109be <memset>
    (void)memset((void *)(&pGNSSParser_Data->odo_data), 0, sizeof(Odometer_Info_t));
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 800c694:	2202      	movs	r2, #2
 800c696:	2100      	movs	r1, #0
 800c698:	4618      	mov	r0, r3
 800c69a:	f004 f990 	bl	80109be <memset>
    (void)memset((void *)(&pGNSSParser_Data->datalog_data), 0, sizeof(Datalog_Info_t));
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f203 3332 	addw	r3, r3, #818	@ 0x332
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f004 f988 	bl	80109be <memset>
    (void)memset((void *)(&pGNSSParser_Data->result), 0, sizeof(OpResult_t));
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f004 f980 	bl	80109be <memset>

    ret = GNSS_PARSER_OK;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	73fb      	strb	r3, [r7, #15]
 800c6c2:	e001      	b.n	800c6c8 <GNSS_PARSER_Init+0x120>
  }
  else
  {
    ret = GNSS_PARSER_ERROR;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <GNSS_PARSER_CheckSanity>:

GNSSParser_Status_t GNSS_PARSER_CheckSanity(uint8_t *pSentence, uint64_t len)
{
 800c6d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6d6:	b08b      	sub	sp, #44	@ 0x2c
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	e9c7 2300 	strd	r2, r3, [r7]
  GNSSParser_Status_t ret;
  uint32_t checksum, check = 0U;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	623b      	str	r3, [r7, #32]
  
  if((len > 0U) && (len < 5U))
 800c6e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	d009      	beq.n	800c700 <GNSS_PARSER_CheckSanity+0x2e>
 800c6ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6f0:	2a05      	cmp	r2, #5
 800c6f2:	f173 0300 	sbcs.w	r3, r3, #0
 800c6f6:	d203      	bcs.n	800c700 <GNSS_PARSER_CheckSanity+0x2e>
  {
    ret = GNSS_PARSER_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c6fe:	e046      	b.n	800c78e <GNSS_PARSER_CheckSanity+0xbc>
  }
  else if(len == 0U)
 800c700:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c704:	4313      	orrs	r3, r2
 800c706:	d103      	bne.n	800c710 <GNSS_PARSER_CheckSanity+0x3e>
  {
    ret = GNSS_PARSER_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c70e:	e03e      	b.n	800c78e <GNSS_PARSER_CheckSanity+0xbc>
  }
  else
  {
    checksum = (char2int(pSentence[len-4U]) << 4) | char2int(pSentence[len-3U]);
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	3b04      	subs	r3, #4
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	4413      	add	r3, r2
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	4618      	mov	r0, r3
 800c71c:	f002 fb39 	bl	800ed92 <char2int>
 800c720:	4603      	mov	r3, r0
 800c722:	011e      	lsls	r6, r3, #4
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	3b03      	subs	r3, #3
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	4413      	add	r3, r2
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	4618      	mov	r0, r3
 800c730:	f002 fb2f 	bl	800ed92 <char2int>
 800c734:	4603      	mov	r3, r0
 800c736:	4333      	orrs	r3, r6
 800c738:	617b      	str	r3, [r7, #20]
    
    for(uint64_t c = 1U; c < (len-5U); c++) {
 800c73a:	f04f 0201 	mov.w	r2, #1
 800c73e:	f04f 0300 	mov.w	r3, #0
 800c742:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800c746:	e00f      	b.n	800c768 <GNSS_PARSER_CheckSanity+0x96>
      check = (check ^ pSentence[c]);
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	4413      	add	r3, r2
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	461a      	mov	r2, r3
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	4053      	eors	r3, r2
 800c756:	623b      	str	r3, [r7, #32]
    for(uint64_t c = 1U; c < (len-5U); c++) {
 800c758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c75c:	f112 0801 	adds.w	r8, r2, #1
 800c760:	f143 0900 	adc.w	r9, r3, #0
 800c764:	e9c7 8906 	strd	r8, r9, [r7, #24]
 800c768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c76c:	1f54      	subs	r4, r2, #5
 800c76e:	f143 35ff 	adc.w	r5, r3, #4294967295
 800c772:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c776:	42a2      	cmp	r2, r4
 800c778:	41ab      	sbcs	r3, r5
 800c77a:	d3e5      	bcc.n	800c748 <GNSS_PARSER_CheckSanity+0x76>
    }

    ret = (check == checksum) ? GNSS_PARSER_OK : GNSS_PARSER_ERROR;
 800c77c:	6a3a      	ldr	r2, [r7, #32]
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	429a      	cmp	r2, r3
 800c782:	bf14      	ite	ne
 800c784:	2301      	movne	r3, #1
 800c786:	2300      	moveq	r3, #0
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
    
  return ret;
 800c78e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c792:	4618      	mov	r0, r3
 800c794:	372c      	adds	r7, #44	@ 0x2c
 800c796:	46bd      	mov	sp, r7
 800c798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c79c <GNSS_PARSER_ParseMsg>:

GNSSParser_Status_t GNSS_PARSER_ParseMsg(GNSSParser_Data_t *pGNSSParser_Data, uint8_t msg, uint8_t *pBuffer)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b086      	sub	sp, #24
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	607a      	str	r2, [r7, #4]
 800c7a8:	72fb      	strb	r3, [r7, #11]
  ParseStatus_t status = PARSE_FAIL;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	75fb      	strb	r3, [r7, #23]

  switch(msg) {
 800c7ae:	7afb      	ldrb	r3, [r7, #11]
 800c7b0:	2b0d      	cmp	r3, #13
 800c7b2:	f200 80a7 	bhi.w	800c904 <GNSS_PARSER_ParseMsg+0x168>
 800c7b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c7bc <GNSS_PARSER_ParseMsg+0x20>)
 800c7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7bc:	0800c7f5 	.word	0x0800c7f5
 800c7c0:	0800c807 	.word	0x0800c807
 800c7c4:	0800c819 	.word	0x0800c819
 800c7c8:	0800c82b 	.word	0x0800c82b
 800c7cc:	0800c83d 	.word	0x0800c83d
 800c7d0:	0800c851 	.word	0x0800c851
 800c7d4:	0800c865 	.word	0x0800c865
 800c7d8:	0800c879 	.word	0x0800c879
 800c7dc:	0800c88d 	.word	0x0800c88d
 800c7e0:	0800c8a1 	.word	0x0800c8a1
 800c7e4:	0800c8b5 	.word	0x0800c8b5
 800c7e8:	0800c8c9 	.word	0x0800c8c9
 800c7ec:	0800c8dd 	.word	0x0800c8dd
 800c7f0:	0800c8f1 	.word	0x0800c8f1
  case GPGGA:
    status = NMEA_ParseGPGGA(&pGNSSParser_Data->gpgga_data, pBuffer);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	3308      	adds	r3, #8
 800c7f8:	6879      	ldr	r1, [r7, #4]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f000 fd04 	bl	800d208 <NMEA_ParseGPGGA>
 800c800:	4603      	mov	r3, r0
 800c802:	75fb      	strb	r3, [r7, #23]
    break;
 800c804:	e07f      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  case GNS:
    status = NMEA_ParseGNS(&pGNSSParser_Data->gns_data, pBuffer);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	3350      	adds	r3, #80	@ 0x50
 800c80a:	6879      	ldr	r1, [r7, #4]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 fe09 	bl	800d424 <NMEA_ParseGNS>
 800c812:	4603      	mov	r3, r0
 800c814:	75fb      	strb	r3, [r7, #23]
    break;
 800c816:	e076      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  case GPGST:
    status = NMEA_ParseGPGST(&pGNSSParser_Data->gpgst_data, pBuffer);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	33b8      	adds	r3, #184	@ 0xb8
 800c81c:	6879      	ldr	r1, [r7, #4]
 800c81e:	4618      	mov	r0, r3
 800c820:	f000 ff08 	bl	800d634 <NMEA_ParseGPGST>
 800c824:	4603      	mov	r3, r0
 800c826:	75fb      	strb	r3, [r7, #23]
    break;
 800c828:	e06d      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  case GPRMC:
    status = NMEA_ParseGPRMC(&pGNSSParser_Data->gprmc_data, pBuffer);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	33e8      	adds	r3, #232	@ 0xe8
 800c82e:	6879      	ldr	r1, [r7, #4]
 800c830:	4618      	mov	r0, r3
 800c832:	f000 ffe7 	bl	800d804 <NMEA_ParseGPRMC>
 800c836:	4603      	mov	r3, r0
 800c838:	75fb      	strb	r3, [r7, #23]
    break;
 800c83a:	e064      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  case GSA:
    status = NMEA_ParseGSA(&pGNSSParser_Data->gsa_data, pBuffer);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800c842:	6879      	ldr	r1, [r7, #4]
 800c844:	4618      	mov	r0, r3
 800c846:	f001 f8e1 	bl	800da0c <NMEA_ParseGSA>
 800c84a:	4603      	mov	r3, r0
 800c84c:	75fb      	strb	r3, [r7, #23]
    break;
 800c84e:	e05a      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  case GSV:
    status = NMEA_ParseGSV(&pGNSSParser_Data->gsv_data, pBuffer);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800c856:	6879      	ldr	r1, [r7, #4]
 800c858:	4618      	mov	r0, r3
 800c85a:	f001 f9bd 	bl	800dbd8 <NMEA_ParseGSV>
 800c85e:	4603      	mov	r3, r0
 800c860:	75fb      	strb	r3, [r7, #23]
    break;
 800c862:	e050      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMVER:
    status = NMEA_ParsePSTMVER(&pGNSSParser_Data->pstmver_data, pBuffer);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800c86a:	6879      	ldr	r1, [r7, #4]
 800c86c:	4618      	mov	r0, r3
 800c86e:	f001 faef 	bl	800de50 <NMEA_ParsePSTMVER>
 800c872:	4603      	mov	r3, r0
 800c874:	75fb      	strb	r3, [r7, #23]
    break;
 800c876:	e046      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMPASSRTN:
    status = NMEA_ParsePSTMPASSRTN(&pGNSSParser_Data->pstmpass_data, pBuffer);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800c87e:	6879      	ldr	r1, [r7, #4]
 800c880:	4618      	mov	r0, r3
 800c882:	f002 f823 	bl	800e8cc <NMEA_ParsePSTMPASSRTN>
 800c886:	4603      	mov	r3, r0
 800c888:	75fb      	strb	r3, [r7, #23]
    break;
 800c88a:	e03c      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMAGPSSTATUS:
    status = NMEA_ParsePSTMAGPS(&pGNSSParser_Data->pstmagps_data, pBuffer);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800c892:	6879      	ldr	r1, [r7, #4]
 800c894:	4618      	mov	r0, r3
 800c896:	f002 f8c9 	bl	800ea2c <NMEA_ParsePSTMAGPS>
 800c89a:	4603      	mov	r3, r0
 800c89c:	75fb      	strb	r3, [r7, #23]
    break;
 800c89e:	e032      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMGEOFENCE:
    status = NMEA_ParsePSTMGeofence(&pGNSSParser_Data->geofence_data, pBuffer);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 800c8a6:	6879      	ldr	r1, [r7, #4]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f001 fb5f 	bl	800df6c <NMEA_ParsePSTMGeofence>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	75fb      	strb	r3, [r7, #23]
    break;
 800c8b2:	e028      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMODO:
    status = NMEA_ParsePSTMOdo(&pGNSSParser_Data->odo_data, pBuffer);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f503 734c 	add.w	r3, r3, #816	@ 0x330
 800c8ba:	6879      	ldr	r1, [r7, #4]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f001 fcc9 	bl	800e254 <NMEA_ParsePSTMOdo>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	75fb      	strb	r3, [r7, #23]
    break;
 800c8c6:	e01e      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMDATALOG:
    status = NMEA_ParsePSTMDatalog(&pGNSSParser_Data->datalog_data, pBuffer);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f203 3332 	addw	r3, r3, #818	@ 0x332
 800c8ce:	6879      	ldr	r1, [r7, #4]
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f001 fda1 	bl	800e418 <NMEA_ParsePSTMDatalog>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	75fb      	strb	r3, [r7, #23]
    break;
 800c8da:	e014      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMSGL:
    status = NMEA_ParsePSTMsgl(&pGNSSParser_Data->result, pBuffer);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800c8e2:	6879      	ldr	r1, [r7, #4]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f001 feb9 	bl	800e65c <NMEA_ParsePSTMsgl>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	75fb      	strb	r3, [r7, #23]
    break;
 800c8ee:	e00a      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMSAVEPAR:
    status = NMEA_ParsePSTMSavePar(&pGNSSParser_Data->result, pBuffer);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800c8f6:	6879      	ldr	r1, [r7, #4]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f001 ff4b 	bl	800e794 <NMEA_ParsePSTMSavePar>
 800c8fe:	4603      	mov	r3, r0
 800c900:	75fb      	strb	r3, [r7, #23]
    break;
 800c902:	e000      	b.n	800c906 <GNSS_PARSER_ParseMsg+0x16a>
  default:
    break;
 800c904:	bf00      	nop
  }
    
  return ((status == PARSE_FAIL) ? GNSS_PARSER_ERROR : GNSS_PARSER_OK);
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	bf0c      	ite	eq
 800c90c:	2301      	moveq	r3, #1
 800c90e:	2300      	movne	r3, #0
 800c910:	b2db      	uxtb	r3, r3
}
 800c912:	4618      	mov	r0, r3
 800c914:	3718      	adds	r7, #24
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop

0800c91c <NMEA_CheckGNSMsg>:

/*
 * Function that checks the header of a GNS NMEA sentence.
 */
static int32_t NMEA_CheckGNSMsg(const char header[])
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  int32_t is_gnsmsg = 1;
 800c924:	2301      	movs	r3, #1
 800c926:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$GPGNS") == 0)
 800c928:	4918      	ldr	r1, [pc, #96]	@ (800c98c <NMEA_CheckGNSMsg+0x70>)
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f7f3 fc50 	bl	80001d0 <strcmp>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d101      	bne.n	800c93a <NMEA_CheckGNSMsg+0x1e>
  {
    is_gnsmsg = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GAGNS") == 0)
 800c93a:	4915      	ldr	r1, [pc, #84]	@ (800c990 <NMEA_CheckGNSMsg+0x74>)
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7f3 fc47 	bl	80001d0 <strcmp>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d101      	bne.n	800c94c <NMEA_CheckGNSMsg+0x30>
  {
    is_gnsmsg = 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$BDGNS") == 0)
 800c94c:	4911      	ldr	r1, [pc, #68]	@ (800c994 <NMEA_CheckGNSMsg+0x78>)
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7f3 fc3e 	bl	80001d0 <strcmp>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <NMEA_CheckGNSMsg+0x42>
  {
    is_gnsmsg = 0;
 800c95a:	2300      	movs	r3, #0
 800c95c:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$QZGNS") == 0)
 800c95e:	490e      	ldr	r1, [pc, #56]	@ (800c998 <NMEA_CheckGNSMsg+0x7c>)
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7f3 fc35 	bl	80001d0 <strcmp>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d101      	bne.n	800c970 <NMEA_CheckGNSMsg+0x54>
  {
    is_gnsmsg = 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GNGNS") == 0)
 800c970:	490a      	ldr	r1, [pc, #40]	@ (800c99c <NMEA_CheckGNSMsg+0x80>)
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f7f3 fc2c 	bl	80001d0 <strcmp>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d101      	bne.n	800c982 <NMEA_CheckGNSMsg+0x66>
  {
    is_gnsmsg = 0;
 800c97e:	2300      	movs	r3, #0
 800c980:	60fb      	str	r3, [r7, #12]
  }

  return is_gnsmsg;
 800c982:	68fb      	ldr	r3, [r7, #12]
}
 800c984:	4618      	mov	r0, r3
 800c986:	3710      	adds	r7, #16
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	0801515c 	.word	0x0801515c
 800c990:	08015164 	.word	0x08015164
 800c994:	0801516c 	.word	0x0801516c
 800c998:	08015174 	.word	0x08015174
 800c99c:	0801517c 	.word	0x0801517c

0800c9a0 <NMEA_CheckGSAMsg>:

/*
 * Function that checks the header of a GSA NMEA sentence.
 */
static int32_t NMEA_CheckGSAMsg(const char header[])
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  int32_t is_gsamsg = 1;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$GPGSA") == 0)
 800c9ac:	4918      	ldr	r1, [pc, #96]	@ (800ca10 <NMEA_CheckGSAMsg+0x70>)
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7f3 fc0e 	bl	80001d0 <strcmp>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d101      	bne.n	800c9be <NMEA_CheckGSAMsg+0x1e>
  {
    is_gsamsg = 0;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GLGSA") == 0)
 800c9be:	4915      	ldr	r1, [pc, #84]	@ (800ca14 <NMEA_CheckGSAMsg+0x74>)
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7f3 fc05 	bl	80001d0 <strcmp>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d101      	bne.n	800c9d0 <NMEA_CheckGSAMsg+0x30>
  {
    is_gsamsg = 0;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GAGSA") == 0)
 800c9d0:	4911      	ldr	r1, [pc, #68]	@ (800ca18 <NMEA_CheckGSAMsg+0x78>)
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7f3 fbfc 	bl	80001d0 <strcmp>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d101      	bne.n	800c9e2 <NMEA_CheckGSAMsg+0x42>
  {
    is_gsamsg = 0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$BDGSA") == 0)
 800c9e2:	490e      	ldr	r1, [pc, #56]	@ (800ca1c <NMEA_CheckGSAMsg+0x7c>)
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f7f3 fbf3 	bl	80001d0 <strcmp>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d101      	bne.n	800c9f4 <NMEA_CheckGSAMsg+0x54>
  {
    is_gsamsg = 0;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GNGSA") == 0)
 800c9f4:	490a      	ldr	r1, [pc, #40]	@ (800ca20 <NMEA_CheckGSAMsg+0x80>)
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7f3 fbea 	bl	80001d0 <strcmp>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d101      	bne.n	800ca06 <NMEA_CheckGSAMsg+0x66>
  {
    is_gsamsg = 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	60fb      	str	r3, [r7, #12]
  }

  return is_gsamsg;
 800ca06:	68fb      	ldr	r3, [r7, #12]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	08015184 	.word	0x08015184
 800ca14:	0801518c 	.word	0x0801518c
 800ca18:	08015194 	.word	0x08015194
 800ca1c:	0801519c 	.word	0x0801519c
 800ca20:	080151a4 	.word	0x080151a4

0800ca24 <NMEA_CheckGSVMsg>:

/*
 *  Function that checks the header of a GSV NMEA sentence.
 */
static int32_t NMEA_CheckGSVMsg(const char header[])
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  int32_t is_gsvmsg = 1;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$GPGSV") == 0)
 800ca30:	491d      	ldr	r1, [pc, #116]	@ (800caa8 <NMEA_CheckGSVMsg+0x84>)
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f7f3 fbcc 	bl	80001d0 <strcmp>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <NMEA_CheckGSVMsg+0x1e>
  {
    is_gsvmsg = 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GLGSV") == 0)
 800ca42:	491a      	ldr	r1, [pc, #104]	@ (800caac <NMEA_CheckGSVMsg+0x88>)
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7f3 fbc3 	bl	80001d0 <strcmp>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d101      	bne.n	800ca54 <NMEA_CheckGSVMsg+0x30>
  {
    is_gsvmsg = 0;
 800ca50:	2300      	movs	r3, #0
 800ca52:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GAGSV") == 0)
 800ca54:	4916      	ldr	r1, [pc, #88]	@ (800cab0 <NMEA_CheckGSVMsg+0x8c>)
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7f3 fbba 	bl	80001d0 <strcmp>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d101      	bne.n	800ca66 <NMEA_CheckGSVMsg+0x42>
  {
    is_gsvmsg = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$BDGSV") == 0)
 800ca66:	4913      	ldr	r1, [pc, #76]	@ (800cab4 <NMEA_CheckGSVMsg+0x90>)
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f7f3 fbb1 	bl	80001d0 <strcmp>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d101      	bne.n	800ca78 <NMEA_CheckGSVMsg+0x54>
  {
    is_gsvmsg = 0;
 800ca74:	2300      	movs	r3, #0
 800ca76:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$QZGSV") == 0)
 800ca78:	490f      	ldr	r1, [pc, #60]	@ (800cab8 <NMEA_CheckGSVMsg+0x94>)
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7f3 fba8 	bl	80001d0 <strcmp>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d101      	bne.n	800ca8a <NMEA_CheckGSVMsg+0x66>
  {
    is_gsvmsg = 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GNGSV") == 0)
 800ca8a:	490c      	ldr	r1, [pc, #48]	@ (800cabc <NMEA_CheckGSVMsg+0x98>)
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f7f3 fb9f 	bl	80001d0 <strcmp>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d101      	bne.n	800ca9c <NMEA_CheckGSVMsg+0x78>
  {
    is_gsvmsg = 0;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	60fb      	str	r3, [r7, #12]
  }

  return is_gsvmsg;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	080151ac 	.word	0x080151ac
 800caac:	080151b4 	.word	0x080151b4
 800cab0:	080151bc 	.word	0x080151bc
 800cab4:	080151c4 	.word	0x080151c4
 800cab8:	080151cc 	.word	0x080151cc
 800cabc:	080151d4 	.word	0x080151d4

0800cac0 <NMEA_ResetGSVMsg>:

/*
 *  Helper function to reset GSV fields
 */
static void NMEA_ResetGSVMsg(GSV_Info_t *pGSVInfo)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  (void)memset(pGSVInfo->constellation, 0, (size_t)MAX_STR_LEN);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2220      	movs	r2, #32
 800cacc:	2100      	movs	r1, #0
 800cace:	4618      	mov	r0, r3
 800cad0:	f003 ff75 	bl	80109be <memset>
  pGSVInfo->amount = 0;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	841a      	strh	r2, [r3, #32]
  pGSVInfo->number = 0;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	845a      	strh	r2, [r3, #34]	@ 0x22
  pGSVInfo->current_sats = 0;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	84da      	strh	r2, [r3, #38]	@ 0x26
  pGSVInfo->tot_sats = 0;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	849a      	strh	r2, [r3, #36]	@ 0x24
  for (int8_t i = 0; i < MAX_SAT_NUM; i++)
 800caec:	2300      	movs	r3, #0
 800caee:	73fb      	strb	r3, [r7, #15]
 800caf0:	e010      	b.n	800cb14 <NMEA_ResetGSVMsg+0x54>
  {
    (void)memset(&pGSVInfo->gsv_sat_i[i], 0, sizeof(GSV_SAT_Info_t));
 800caf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caf6:	3305      	adds	r3, #5
 800caf8:	00db      	lsls	r3, r3, #3
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	4413      	add	r3, r2
 800cafe:	2208      	movs	r2, #8
 800cb00:	2100      	movs	r1, #0
 800cb02:	4618      	mov	r0, r3
 800cb04:	f003 ff5b 	bl	80109be <memset>
  for (int8_t i = 0; i < MAX_SAT_NUM; i++)
 800cb08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	3301      	adds	r3, #1
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	73fb      	strb	r3, [r7, #15]
 800cb14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb18:	2b0b      	cmp	r3, #11
 800cb1a:	ddea      	ble.n	800caf2 <NMEA_ResetGSVMsg+0x32>
  }
}
 800cb1c:	bf00      	nop
 800cb1e:	bf00      	nop
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <NMEA_CheckGeofenceMsg>:

/*
 * Function that checks the header of a Geofence message.
 */
static int32_t NMEA_CheckGeofenceMsg(const char header[])
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  int32_t is_geofencemsg = 1;
 800cb30:	2301      	movs	r3, #1
 800cb32:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$PSTMCFGGEOFENCEOK") == 0)
 800cb34:	4921      	ldr	r1, [pc, #132]	@ (800cbbc <NMEA_CheckGeofenceMsg+0x94>)
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7f3 fb4a 	bl	80001d0 <strcmp>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d101      	bne.n	800cb46 <NMEA_CheckGeofenceMsg+0x1e>
  {
    is_geofencemsg = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMCFGGEOFENCEERROR") == 0)
 800cb46:	491e      	ldr	r1, [pc, #120]	@ (800cbc0 <NMEA_CheckGeofenceMsg+0x98>)
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f7f3 fb41 	bl	80001d0 <strcmp>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d101      	bne.n	800cb58 <NMEA_CheckGeofenceMsg+0x30>
  {
    is_geofencemsg = 0;
 800cb54:	2300      	movs	r3, #0
 800cb56:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMGEOFENCECFGOK") == 0)
 800cb58:	491a      	ldr	r1, [pc, #104]	@ (800cbc4 <NMEA_CheckGeofenceMsg+0x9c>)
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7f3 fb38 	bl	80001d0 <strcmp>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d101      	bne.n	800cb6a <NMEA_CheckGeofenceMsg+0x42>
  {
    is_geofencemsg = 0;
 800cb66:	2300      	movs	r3, #0
 800cb68:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMGEOFENCECFGERROR") == 0)
 800cb6a:	4917      	ldr	r1, [pc, #92]	@ (800cbc8 <NMEA_CheckGeofenceMsg+0xa0>)
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f7f3 fb2f 	bl	80001d0 <strcmp>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d101      	bne.n	800cb7c <NMEA_CheckGeofenceMsg+0x54>
  {
    is_geofencemsg = 0;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMGEOFENCESTATUS") == 0)
 800cb7c:	4913      	ldr	r1, [pc, #76]	@ (800cbcc <NMEA_CheckGeofenceMsg+0xa4>)
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f7f3 fb26 	bl	80001d0 <strcmp>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d101      	bne.n	800cb8e <NMEA_CheckGeofenceMsg+0x66>
  {
    is_geofencemsg = 0;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMGEOFENCE") == 0)
 800cb8e:	4910      	ldr	r1, [pc, #64]	@ (800cbd0 <NMEA_CheckGeofenceMsg+0xa8>)
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f7f3 fb1d 	bl	80001d0 <strcmp>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d101      	bne.n	800cba0 <NMEA_CheckGeofenceMsg+0x78>
  {
    is_geofencemsg = 0;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMGEOFENCEREQERROR") == 0)
 800cba0:	490c      	ldr	r1, [pc, #48]	@ (800cbd4 <NMEA_CheckGeofenceMsg+0xac>)
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7f3 fb14 	bl	80001d0 <strcmp>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d101      	bne.n	800cbb2 <NMEA_CheckGeofenceMsg+0x8a>
  {
    is_geofencemsg = 0;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	60fb      	str	r3, [r7, #12]
  }

  return is_geofencemsg;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	080151dc 	.word	0x080151dc
 800cbc0:	080151f0 	.word	0x080151f0
 800cbc4:	08015208 	.word	0x08015208
 800cbc8:	0801521c 	.word	0x0801521c
 800cbcc:	08015234 	.word	0x08015234
 800cbd0:	08015248 	.word	0x08015248
 800cbd4:	08015258 	.word	0x08015258

0800cbd8 <NMEA_CheckOdoMsg>:

/*
 *  Function that checks the header of a Odometer message.
 */
static int32_t NMEA_CheckOdoMsg(const char header[])
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  int32_t is_odomsg = 1;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$PSTMCFGODOOK") == 0)
 800cbe4:	491d      	ldr	r1, [pc, #116]	@ (800cc5c <NMEA_CheckOdoMsg+0x84>)
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7f3 faf2 	bl	80001d0 <strcmp>
 800cbec:	4603      	mov	r3, r0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d101      	bne.n	800cbf6 <NMEA_CheckOdoMsg+0x1e>
  {
    is_odomsg = 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMCFGODOERROR") == 0)
 800cbf6:	491a      	ldr	r1, [pc, #104]	@ (800cc60 <NMEA_CheckOdoMsg+0x88>)
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7f3 fae9 	bl	80001d0 <strcmp>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d101      	bne.n	800cc08 <NMEA_CheckOdoMsg+0x30>
  {
    is_odomsg = 0;
 800cc04:	2300      	movs	r3, #0
 800cc06:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMODOSTARTOK") == 0)
 800cc08:	4916      	ldr	r1, [pc, #88]	@ (800cc64 <NMEA_CheckOdoMsg+0x8c>)
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7f3 fae0 	bl	80001d0 <strcmp>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d101      	bne.n	800cc1a <NMEA_CheckOdoMsg+0x42>
  {
    is_odomsg = 0;
 800cc16:	2300      	movs	r3, #0
 800cc18:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMODOSTARTERROR") == 0)
 800cc1a:	4913      	ldr	r1, [pc, #76]	@ (800cc68 <NMEA_CheckOdoMsg+0x90>)
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f7f3 fad7 	bl	80001d0 <strcmp>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d101      	bne.n	800cc2c <NMEA_CheckOdoMsg+0x54>
  {
    is_odomsg = 0;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMODOSTOPOK") == 0)
 800cc2c:	490f      	ldr	r1, [pc, #60]	@ (800cc6c <NMEA_CheckOdoMsg+0x94>)
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7f3 face 	bl	80001d0 <strcmp>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d101      	bne.n	800cc3e <NMEA_CheckOdoMsg+0x66>
  {
    is_odomsg = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMODOSTOPERROR") == 0)
 800cc3e:	490c      	ldr	r1, [pc, #48]	@ (800cc70 <NMEA_CheckOdoMsg+0x98>)
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f7f3 fac5 	bl	80001d0 <strcmp>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d101      	bne.n	800cc50 <NMEA_CheckOdoMsg+0x78>
  {
    is_odomsg = 0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	60fb      	str	r3, [r7, #12]
  }

  return is_odomsg;
 800cc50:	68fb      	ldr	r3, [r7, #12]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	08015270 	.word	0x08015270
 800cc60:	08015280 	.word	0x08015280
 800cc64:	08015294 	.word	0x08015294
 800cc68:	080152a4 	.word	0x080152a4
 800cc6c:	080152b8 	.word	0x080152b8
 800cc70:	080152c8 	.word	0x080152c8

0800cc74 <NMEA_CheckDatalogMsg>:

/*
 * Function that checks the header of a Datalog message.
 */
static int32_t NMEA_CheckDatalogMsg(const char header[])
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  int32_t is_datalogmsg = 1;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$PSTMCFGLOGOK") == 0)
 800cc80:	492f      	ldr	r1, [pc, #188]	@ (800cd40 <NMEA_CheckDatalogMsg+0xcc>)
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f7f3 faa4 	bl	80001d0 <strcmp>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d101      	bne.n	800cc92 <NMEA_CheckDatalogMsg+0x1e>
  {
    is_datalogmsg = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMCFGLOGERROR") == 0)
 800cc92:	492c      	ldr	r1, [pc, #176]	@ (800cd44 <NMEA_CheckDatalogMsg+0xd0>)
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7f3 fa9b 	bl	80001d0 <strcmp>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d101      	bne.n	800cca4 <NMEA_CheckDatalogMsg+0x30>
  {
    is_datalogmsg = 0;
 800cca0:	2300      	movs	r3, #0
 800cca2:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGCREATEOK") == 0)
 800cca4:	4928      	ldr	r1, [pc, #160]	@ (800cd48 <NMEA_CheckDatalogMsg+0xd4>)
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f7f3 fa92 	bl	80001d0 <strcmp>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <NMEA_CheckDatalogMsg+0x42>
  {
    is_datalogmsg = 0;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGCREATEERROR") == 0)
 800ccb6:	4925      	ldr	r1, [pc, #148]	@ (800cd4c <NMEA_CheckDatalogMsg+0xd8>)
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7f3 fa89 	bl	80001d0 <strcmp>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <NMEA_CheckDatalogMsg+0x54>
  {
    is_datalogmsg = 0;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGSTARTOK") == 0)
 800ccc8:	4921      	ldr	r1, [pc, #132]	@ (800cd50 <NMEA_CheckDatalogMsg+0xdc>)
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f7f3 fa80 	bl	80001d0 <strcmp>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d101      	bne.n	800ccda <NMEA_CheckDatalogMsg+0x66>
  {
    is_datalogmsg = 0;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGSTARTERROR") == 0)
 800ccda:	491e      	ldr	r1, [pc, #120]	@ (800cd54 <NMEA_CheckDatalogMsg+0xe0>)
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7f3 fa77 	bl	80001d0 <strcmp>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <NMEA_CheckDatalogMsg+0x78>
  {
    is_datalogmsg = 0;
 800cce8:	2300      	movs	r3, #0
 800ccea:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGSTOPOK") == 0)
 800ccec:	491a      	ldr	r1, [pc, #104]	@ (800cd58 <NMEA_CheckDatalogMsg+0xe4>)
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7f3 fa6e 	bl	80001d0 <strcmp>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d101      	bne.n	800ccfe <NMEA_CheckDatalogMsg+0x8a>
  {
    is_datalogmsg = 0;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGSTOPERROR") == 0)
 800ccfe:	4917      	ldr	r1, [pc, #92]	@ (800cd5c <NMEA_CheckDatalogMsg+0xe8>)
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f7f3 fa65 	bl	80001d0 <strcmp>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d101      	bne.n	800cd10 <NMEA_CheckDatalogMsg+0x9c>
  {
    is_datalogmsg = 0;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGERASEOK") == 0)
 800cd10:	4913      	ldr	r1, [pc, #76]	@ (800cd60 <NMEA_CheckDatalogMsg+0xec>)
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7f3 fa5c 	bl	80001d0 <strcmp>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <NMEA_CheckDatalogMsg+0xae>
  {
    is_datalogmsg = 0;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGERASEERROR") == 0)
 800cd22:	4910      	ldr	r1, [pc, #64]	@ (800cd64 <NMEA_CheckDatalogMsg+0xf0>)
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f7f3 fa53 	bl	80001d0 <strcmp>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d101      	bne.n	800cd34 <NMEA_CheckDatalogMsg+0xc0>
  {
    is_datalogmsg = 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	60fb      	str	r3, [r7, #12]
  }

  return is_datalogmsg;
 800cd34:	68fb      	ldr	r3, [r7, #12]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	080152dc 	.word	0x080152dc
 800cd44:	080152ec 	.word	0x080152ec
 800cd48:	08015300 	.word	0x08015300
 800cd4c:	08015314 	.word	0x08015314
 800cd50:	08015328 	.word	0x08015328
 800cd54:	08015338 	.word	0x08015338
 800cd58:	0801534c 	.word	0x0801534c
 800cd5c:	0801535c 	.word	0x0801535c
 800cd60:	08015370 	.word	0x08015370
 800cd64:	08015380 	.word	0x08015380

0800cd68 <NMEA_CheckListMsg>:

/*
 * Function that checks the header of a List configuration message.
 */
static int32_t NMEA_CheckListMsg(const char header[])
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  int32_t is_listmsg = 1;
 800cd70:	2301      	movs	r3, #1
 800cd72:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$PSTMCFGMSGLOK") == 0)
 800cd74:	490b      	ldr	r1, [pc, #44]	@ (800cda4 <NMEA_CheckListMsg+0x3c>)
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f7f3 fa2a 	bl	80001d0 <strcmp>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d101      	bne.n	800cd86 <NMEA_CheckListMsg+0x1e>
  {
    is_listmsg = 0;
 800cd82:	2300      	movs	r3, #0
 800cd84:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMCFGMSGLERROR") == 0)
 800cd86:	4908      	ldr	r1, [pc, #32]	@ (800cda8 <NMEA_CheckListMsg+0x40>)
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7f3 fa21 	bl	80001d0 <strcmp>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d101      	bne.n	800cd98 <NMEA_CheckListMsg+0x30>
  {
    is_listmsg = 0;
 800cd94:	2300      	movs	r3, #0
 800cd96:	60fb      	str	r3, [r7, #12]
  }

  return is_listmsg;
 800cd98:	68fb      	ldr	r3, [r7, #12]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	08015394 	.word	0x08015394
 800cda8:	080153a4 	.word	0x080153a4

0800cdac <NMEA_CheckSaveparMsg>:

/*
 * Function that checks the header of a Save param message.
 */
static int32_t NMEA_CheckSaveparMsg(const char header[])
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  int32_t is_savevarmsg = 1;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$PSTMSAVEPAROK") == 0)
 800cdb8:	490b      	ldr	r1, [pc, #44]	@ (800cde8 <NMEA_CheckSaveparMsg+0x3c>)
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7f3 fa08 	bl	80001d0 <strcmp>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <NMEA_CheckSaveparMsg+0x1e>
  {
    is_savevarmsg = 0;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSAVEPARERROR") == 0)
 800cdca:	4908      	ldr	r1, [pc, #32]	@ (800cdec <NMEA_CheckSaveparMsg+0x40>)
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7f3 f9ff 	bl	80001d0 <strcmp>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d101      	bne.n	800cddc <NMEA_CheckSaveparMsg+0x30>
  {
    is_savevarmsg = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	60fb      	str	r3, [r7, #12]
  }

  return is_savevarmsg;
 800cddc:	68fb      	ldr	r3, [r7, #12]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	080153b8 	.word	0x080153b8
 800cdec:	080153c8 	.word	0x080153c8

0800cdf0 <NMEA_CheckPassMsg>:

/*
 * Function that checks the header of a Pass message.
 */
static int32_t NMEA_CheckPassMsg(const char header[])
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  int32_t is_passmsg = 1;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$PSTMSTAGPS8PASSRTN") == 0)
 800cdfc:	490b      	ldr	r1, [pc, #44]	@ (800ce2c <NMEA_CheckPassMsg+0x3c>)
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7f3 f9e6 	bl	80001d0 <strcmp>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d101      	bne.n	800ce0e <NMEA_CheckPassMsg+0x1e>
  {
    is_passmsg = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSTAGPS8PASSGENERROR") == 0)
 800ce0e:	4908      	ldr	r1, [pc, #32]	@ (800ce30 <NMEA_CheckPassMsg+0x40>)
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7f3 f9dd 	bl	80001d0 <strcmp>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d101      	bne.n	800ce20 <NMEA_CheckPassMsg+0x30>
  {
    is_passmsg = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	60fb      	str	r3, [r7, #12]
  }

  return is_passmsg;
 800ce20:	68fb      	ldr	r3, [r7, #12]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	080153dc 	.word	0x080153dc
 800ce30:	080153f0 	.word	0x080153f0

0800ce34 <NMEA_CheckAGPSMsg>:

/*
 * Function that checks the header of an AGPS message.
 */
static int32_t NMEA_CheckAGPSMsg(const char header[])
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  int32_t is_passmsg = 1;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	60fb      	str	r3, [r7, #12]

  /* Status */
  if (strcmp(header, "$PSTMAGPSSTATUS") == 0)
 800ce40:	493c      	ldr	r1, [pc, #240]	@ (800cf34 <NMEA_CheckAGPSMsg+0x100>)
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f7f3 f9c4 	bl	80001d0 <strcmp>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d101      	bne.n	800ce52 <NMEA_CheckAGPSMsg+0x1e>
  {
    is_passmsg = 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	60fb      	str	r3, [r7, #12]
  }
  /* Begin */
  if (strcmp(header, "$PSTMSTAGPSSEEDBEGINOK") == 0)
 800ce52:	4939      	ldr	r1, [pc, #228]	@ (800cf38 <NMEA_CheckAGPSMsg+0x104>)
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7f3 f9bb 	bl	80001d0 <strcmp>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d101      	bne.n	800ce64 <NMEA_CheckAGPSMsg+0x30>
  {
    is_passmsg = 0;
 800ce60:	2300      	movs	r3, #0
 800ce62:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSTAGPSSEEDBEGINERROR") == 0)
 800ce64:	4935      	ldr	r1, [pc, #212]	@ (800cf3c <NMEA_CheckAGPSMsg+0x108>)
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7f3 f9b2 	bl	80001d0 <strcmp>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d101      	bne.n	800ce76 <NMEA_CheckAGPSMsg+0x42>
  {
    is_passmsg = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	60fb      	str	r3, [r7, #12]
  }
  /* Block type */
  if (strcmp(header, "$PSTMSTAGPSBLKTYPEOK") == 0)
 800ce76:	4932      	ldr	r1, [pc, #200]	@ (800cf40 <NMEA_CheckAGPSMsg+0x10c>)
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f7f3 f9a9 	bl	80001d0 <strcmp>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d101      	bne.n	800ce88 <NMEA_CheckAGPSMsg+0x54>
  {
    is_passmsg = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSTAGPSBLKTYPEERROR") == 0)
 800ce88:	492e      	ldr	r1, [pc, #184]	@ (800cf44 <NMEA_CheckAGPSMsg+0x110>)
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7f3 f9a0 	bl	80001d0 <strcmp>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d101      	bne.n	800ce9a <NMEA_CheckAGPSMsg+0x66>
  {
    is_passmsg = 0;
 800ce96:	2300      	movs	r3, #0
 800ce98:	60fb      	str	r3, [r7, #12]
  }
  /* Slot freq */
  if (strcmp(header, "$PSTMSTAGPSSLOTFRQOK") == 0)
 800ce9a:	492b      	ldr	r1, [pc, #172]	@ (800cf48 <NMEA_CheckAGPSMsg+0x114>)
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7f3 f997 	bl	80001d0 <strcmp>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d101      	bne.n	800ceac <NMEA_CheckAGPSMsg+0x78>
  {
    is_passmsg = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSTAGPSSLOTFRQERROR") == 0)
 800ceac:	4927      	ldr	r1, [pc, #156]	@ (800cf4c <NMEA_CheckAGPSMsg+0x118>)
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f7f3 f98e 	bl	80001d0 <strcmp>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d101      	bne.n	800cebe <NMEA_CheckAGPSMsg+0x8a>
  {
    is_passmsg = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	60fb      	str	r3, [r7, #12]
  }
  /* Seed pkt */
  if (strcmp(header, "$PSTMSTAGPSSEEDPKTOK") == 0)
 800cebe:	4924      	ldr	r1, [pc, #144]	@ (800cf50 <NMEA_CheckAGPSMsg+0x11c>)
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7f3 f985 	bl	80001d0 <strcmp>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d101      	bne.n	800ced0 <NMEA_CheckAGPSMsg+0x9c>
  {
    is_passmsg = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSTAGPSSEEDPKTERROR") == 0)
 800ced0:	4920      	ldr	r1, [pc, #128]	@ (800cf54 <NMEA_CheckAGPSMsg+0x120>)
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f7f3 f97c 	bl	80001d0 <strcmp>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <NMEA_CheckAGPSMsg+0xae>
  {
    is_passmsg = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	60fb      	str	r3, [r7, #12]
  }
  /* Propagate */
  if (strcmp(header, "$PSTMSTAGPSSEEDPROPOK") == 0)
 800cee2:	491d      	ldr	r1, [pc, #116]	@ (800cf58 <NMEA_CheckAGPSMsg+0x124>)
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7f3 f973 	bl	80001d0 <strcmp>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d101      	bne.n	800cef4 <NMEA_CheckAGPSMsg+0xc0>
  {
    is_passmsg = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSTAGPSSEEDPROPERROR") == 0)
 800cef4:	4919      	ldr	r1, [pc, #100]	@ (800cf5c <NMEA_CheckAGPSMsg+0x128>)
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7f3 f96a 	bl	80001d0 <strcmp>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d101      	bne.n	800cf06 <NMEA_CheckAGPSMsg+0xd2>
  {
    is_passmsg = 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	60fb      	str	r3, [r7, #12]
  }
  /* Init time */
  if (strcmp(header, "$PSTMINITTIMEOK") == 0)
 800cf06:	4916      	ldr	r1, [pc, #88]	@ (800cf60 <NMEA_CheckAGPSMsg+0x12c>)
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7f3 f961 	bl	80001d0 <strcmp>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d101      	bne.n	800cf18 <NMEA_CheckAGPSMsg+0xe4>
  {
    is_passmsg = 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMINITTIMEERROR") == 0)
 800cf18:	4912      	ldr	r1, [pc, #72]	@ (800cf64 <NMEA_CheckAGPSMsg+0x130>)
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7f3 f958 	bl	80001d0 <strcmp>
 800cf20:	4603      	mov	r3, r0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d101      	bne.n	800cf2a <NMEA_CheckAGPSMsg+0xf6>
  {
    is_passmsg = 0;
 800cf26:	2300      	movs	r3, #0
 800cf28:	60fb      	str	r3, [r7, #12]
  }
  return is_passmsg;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	0801540c 	.word	0x0801540c
 800cf38:	0801541c 	.word	0x0801541c
 800cf3c:	08015434 	.word	0x08015434
 800cf40:	08015450 	.word	0x08015450
 800cf44:	08015468 	.word	0x08015468
 800cf48:	08015480 	.word	0x08015480
 800cf4c:	08015498 	.word	0x08015498
 800cf50:	080154b0 	.word	0x080154b0
 800cf54:	080154c8 	.word	0x080154c8
 800cf58:	080154e0 	.word	0x080154e0
 800cf5c:	080154f8 	.word	0x080154f8
 800cf60:	08015514 	.word	0x08015514
 800cf64:	08015524 	.word	0x08015524

0800cf68 <scan_utc>:
/*
 * Function that scans a string with UTC Info_t and fills all fields of a
 * UTC_Info_t struct
 */
static void scan_utc(uint8_t *pUTCStr, UTC_Info_t *pUTC)
{
 800cf68:	b590      	push	{r4, r7, lr}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
  pUTC->utc = strtol((char *)pUTCStr,NULL,10);
 800cf72:	220a      	movs	r2, #10
 800cf74:	2100      	movs	r1, #0
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f002 fe2c 	bl	800fbd4 <strtol>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	601a      	str	r2, [r3, #0]
  
  pUTC->hh = (pUTC->utc / 10000);
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4a24      	ldr	r2, [pc, #144]	@ (800d018 <scan_utc+0xb0>)
 800cf88:	fb82 1203 	smull	r1, r2, r2, r3
 800cf8c:	1312      	asrs	r2, r2, #12
 800cf8e:	17db      	asrs	r3, r3, #31
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	b21a      	sxth	r2, r3
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	809a      	strh	r2, [r3, #4]
  pUTC->mm = (pUTC->utc - (pUTC->hh * 10000)) / 100;
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	4b1d      	ldr	r3, [pc, #116]	@ (800d01c <scan_utc+0xb4>)
 800cfa6:	fb01 f303 	mul.w	r3, r1, r3
 800cfaa:	4413      	add	r3, r2
 800cfac:	4a1c      	ldr	r2, [pc, #112]	@ (800d020 <scan_utc+0xb8>)
 800cfae:	fb82 1203 	smull	r1, r2, r2, r3
 800cfb2:	1152      	asrs	r2, r2, #5
 800cfb4:	17db      	asrs	r3, r3, #31
 800cfb6:	1ad3      	subs	r3, r2, r3
 800cfb8:	b21a      	sxth	r2, r3
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	80da      	strh	r2, [r3, #6]
  pUTC->ss = pUTC->utc - ((pUTC->hh * 10000) + (pUTC->mm * 100));
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	4619      	mov	r1, r3
 800cfce:	0149      	lsls	r1, r1, #5
 800cfd0:	1ac9      	subs	r1, r1, r3
 800cfd2:	0089      	lsls	r1, r1, #2
 800cfd4:	440b      	add	r3, r1
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	0088      	lsls	r0, r1, #2
 800cfda:	4619      	mov	r1, r3
 800cfdc:	4603      	mov	r3, r0
 800cfde:	440b      	add	r3, r1
 800cfe0:	011b      	lsls	r3, r3, #4
 800cfe2:	b299      	uxth	r1, r3
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	4618      	mov	r0, r3
 800cfee:	0080      	lsls	r0, r0, #2
 800cff0:	4403      	add	r3, r0
 800cff2:	4618      	mov	r0, r3
 800cff4:	0084      	lsls	r4, r0, #2
 800cff6:	4618      	mov	r0, r3
 800cff8:	4623      	mov	r3, r4
 800cffa:	4403      	add	r3, r0
 800cffc:	009b      	lsls	r3, r3, #2
 800cffe:	b29b      	uxth	r3, r3
 800d000:	440b      	add	r3, r1
 800d002:	b29b      	uxth	r3, r3
 800d004:	1ad3      	subs	r3, r2, r3
 800d006:	b29b      	uxth	r3, r3
 800d008:	b21a      	sxth	r2, r3
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	811a      	strh	r2, [r3, #8]
  
  return;
 800d00e:	bf00      	nop
}
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	bd90      	pop	{r4, r7, pc}
 800d016:	bf00      	nop
 800d018:	68db8bad 	.word	0x68db8bad
 800d01c:	ffffd8f0 	.word	0xffffd8f0
 800d020:	51eb851f 	.word	0x51eb851f

0800d024 <nmea_checksum>:

/*
 * Function that executes the 'OR' operation between first two elements of a buffer
 */
static uint32_t nmea_checksum(const uint8_t buf[])
{
 800d024:	b590      	push	{r4, r7, lr}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  return ((char2int(buf[0]) << 4) | (char2int(buf[1])));
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	4618      	mov	r0, r3
 800d032:	f001 feae 	bl	800ed92 <char2int>
 800d036:	4603      	mov	r3, r0
 800d038:	011c      	lsls	r4, r3, #4
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	3301      	adds	r3, #1
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	4618      	mov	r0, r3
 800d042:	f001 fea6 	bl	800ed92 <char2int>
 800d046:	4603      	mov	r3, r0
 800d048:	4323      	orrs	r3, r4
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd90      	pop	{r4, r7, pc}

0800d052 <digit2int>:

/*
 * Function that converts a sequence of digits from a buffer in an integer
 */
static uint32_t digit2int(uint8_t buf[], int32_t offset, Decimal_t d)
{
 800d052:	b580      	push	{r7, lr}
 800d054:	b08a      	sub	sp, #40	@ 0x28
 800d056:	af00      	add	r7, sp, #0
 800d058:	60f8      	str	r0, [r7, #12]
 800d05a:	60b9      	str	r1, [r7, #8]
 800d05c:	4613      	mov	r3, r2
 800d05e:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = (unsigned char)0;
 800d060:	2300      	movs	r3, #0
 800d062:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t hu, hd, hc, hm;

  switch (d)
 800d064:	79fb      	ldrb	r3, [r7, #7]
 800d066:	2b02      	cmp	r3, #2
 800d068:	d049      	beq.n	800d0fe <digit2int+0xac>
 800d06a:	2b02      	cmp	r3, #2
 800d06c:	dc7e      	bgt.n	800d16c <digit2int+0x11a>
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d002      	beq.n	800d078 <digit2int+0x26>
 800d072:	2b01      	cmp	r3, #1
 800d074:	d01b      	beq.n	800d0ae <digit2int+0x5c>
        
    ret = (hm * (unsigned)1000) + (hc * (unsigned)100) + (hd * (unsigned)10) + hu;
    break;
    
  default:
    break;
 800d076:	e079      	b.n	800d16c <digit2int+0x11a>
    hd = char2int(buf[offset]);
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	4413      	add	r3, r2
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	4618      	mov	r0, r3
 800d082:	f001 fe86 	bl	800ed92 <char2int>
 800d086:	61b8      	str	r0, [r7, #24]
    hu = char2int(buf[offset+1]);
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	3301      	adds	r3, #1
 800d08c:	68fa      	ldr	r2, [r7, #12]
 800d08e:	4413      	add	r3, r2
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	4618      	mov	r0, r3
 800d094:	f001 fe7d 	bl	800ed92 <char2int>
 800d098:	6178      	str	r0, [r7, #20]
    ret = (hd * (unsigned)10) + hu;
 800d09a:	69ba      	ldr	r2, [r7, #24]
 800d09c:	4613      	mov	r3, r2
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	4413      	add	r3, r2
 800d0a2:	005b      	lsls	r3, r3, #1
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800d0ac:	e05f      	b.n	800d16e <digit2int+0x11c>
    hc = char2int(buf[offset]);
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f001 fe6b 	bl	800ed92 <char2int>
 800d0bc:	61f8      	str	r0, [r7, #28]
    hd = char2int(buf[offset+1]);
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f001 fe62 	bl	800ed92 <char2int>
 800d0ce:	61b8      	str	r0, [r7, #24]
    hu = char2int(buf[offset+2]);
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	3302      	adds	r3, #2
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f001 fe59 	bl	800ed92 <char2int>
 800d0e0:	6178      	str	r0, [r7, #20]
    ret = (hc * (unsigned)100) + (hd * (unsigned)10) + hu;
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	2264      	movs	r2, #100	@ 0x64
 800d0e6:	fb02 f103 	mul.w	r1, r2, r3
 800d0ea:	69ba      	ldr	r2, [r7, #24]
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	005b      	lsls	r3, r3, #1
 800d0f4:	440b      	add	r3, r1
 800d0f6:	697a      	ldr	r2, [r7, #20]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800d0fc:	e037      	b.n	800d16e <digit2int+0x11c>
    hm = char2int(buf[offset]);
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	4413      	add	r3, r2
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	4618      	mov	r0, r3
 800d108:	f001 fe43 	bl	800ed92 <char2int>
 800d10c:	6238      	str	r0, [r7, #32]
    hc = char2int(buf[offset+1]);
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	3301      	adds	r3, #1
 800d112:	68fa      	ldr	r2, [r7, #12]
 800d114:	4413      	add	r3, r2
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	4618      	mov	r0, r3
 800d11a:	f001 fe3a 	bl	800ed92 <char2int>
 800d11e:	61f8      	str	r0, [r7, #28]
    hd = char2int(buf[offset+2]);
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	3302      	adds	r3, #2
 800d124:	68fa      	ldr	r2, [r7, #12]
 800d126:	4413      	add	r3, r2
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	4618      	mov	r0, r3
 800d12c:	f001 fe31 	bl	800ed92 <char2int>
 800d130:	61b8      	str	r0, [r7, #24]
    hu = char2int(buf[offset+3]);
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	3303      	adds	r3, #3
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	4413      	add	r3, r2
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f001 fe28 	bl	800ed92 <char2int>
 800d142:	6178      	str	r0, [r7, #20]
    ret = (hm * (unsigned)1000) + (hc * (unsigned)100) + (hd * (unsigned)10) + hu;
 800d144:	6a3b      	ldr	r3, [r7, #32]
 800d146:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d14a:	fb03 f202 	mul.w	r2, r3, r2
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	2164      	movs	r1, #100	@ 0x64
 800d152:	fb01 f303 	mul.w	r3, r1, r3
 800d156:	18d1      	adds	r1, r2, r3
 800d158:	69ba      	ldr	r2, [r7, #24]
 800d15a:	4613      	mov	r3, r2
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	4413      	add	r3, r2
 800d160:	005b      	lsls	r3, r3, #1
 800d162:	440b      	add	r3, r1
 800d164:	697a      	ldr	r2, [r7, #20]
 800d166:	4413      	add	r3, r2
 800d168:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800d16a:	e000      	b.n	800d16e <digit2int+0x11c>
    break;
 800d16c:	bf00      	nop
 }

 return ret;
 800d16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d170:	4618      	mov	r0, r3
 800d172:	3728      	adds	r7, #40	@ 0x28
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <scan_timestamp_time>:

/*
 * Function that reads time from a timestamp string
 */
static void scan_timestamp_time(uint8_t buf[], Timestamp_Info_t *pTimestamp)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	6039      	str	r1, [r7, #0]
  /* FORMAT: HHMMSS */
  pTimestamp->hh = digit2int(buf, 0, TENS);
 800d182:	2200      	movs	r2, #0
 800d184:	2100      	movs	r1, #0
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f7ff ff63 	bl	800d052 <digit2int>
 800d18c:	4603      	mov	r3, r0
 800d18e:	b29a      	uxth	r2, r3
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	801a      	strh	r2, [r3, #0]
  pTimestamp->mm = digit2int(buf, 2, TENS);
 800d194:	2200      	movs	r2, #0
 800d196:	2102      	movs	r1, #2
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7ff ff5a 	bl	800d052 <digit2int>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	805a      	strh	r2, [r3, #2]
  pTimestamp->ss = digit2int(buf, 4, TENS);
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	2104      	movs	r1, #4
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff ff51 	bl	800d052 <digit2int>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	b29a      	uxth	r2, r3
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	809a      	strh	r2, [r3, #4]
}
 800d1b8:	bf00      	nop
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <scan_timestamp_date>:

/*
 * Function that reads date from a timestamp string
 */
static void scan_timestamp_date(uint8_t buf[], Timestamp_Info_t *pTimestamp)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  /* FORMAT: YYYYMMDD */
  pTimestamp->year = digit2int(buf, 0, THOUSANDS);
 800d1ca:	2202      	movs	r2, #2
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f7ff ff3f 	bl	800d052 <digit2int>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	80da      	strh	r2, [r3, #6]
  pTimestamp->month = digit2int(buf, 4, TENS);
 800d1dc:	2200      	movs	r2, #0
 800d1de:	2104      	movs	r1, #4
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7ff ff36 	bl	800d052 <digit2int>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	811a      	strh	r2, [r3, #8]
  pTimestamp->day = digit2int(buf, 6, TENS);
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	2106      	movs	r1, #6
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f7ff ff2d 	bl	800d052 <digit2int>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	815a      	strh	r2, [r3, #10]
}
 800d200:	bf00      	nop
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <NMEA_ParseGPGGA>:

ParseStatus_t NMEA_ParseGPGGA(GPGGA_Info_t *pGPGGAInfo, uint8_t NMEA[])
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b08a      	sub	sp, #40	@ 0x28
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 800d212:	2300      	movs	r3, #0
 800d214:	623b      	str	r3, [r7, #32]

  ParseStatus_t status = PARSE_FAIL;
 800d216:	2301      	movs	r3, #1
 800d218:	77fb      	strb	r3, [r7, #31]
  
  if(NMEA != NULL) {
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	f000 80e4 	beq.w	800d3ea <NMEA_ParseGPGGA+0x1e2>

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800d222:	2300      	movs	r3, #0
 800d224:	77bb      	strb	r3, [r7, #30]
 800d226:	e012      	b.n	800d24e <NMEA_ParseGPGGA+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800d228:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800d22c:	4613      	mov	r3, r2
 800d22e:	005b      	lsls	r3, r3, #1
 800d230:	4413      	add	r3, r2
 800d232:	011b      	lsls	r3, r3, #4
 800d234:	4a6f      	ldr	r2, [pc, #444]	@ (800d3f4 <NMEA_ParseGPGGA+0x1ec>)
 800d236:	4413      	add	r3, r2
 800d238:	2230      	movs	r2, #48	@ 0x30
 800d23a:	2100      	movs	r1, #0
 800d23c:	4618      	mov	r0, r3
 800d23e:	f003 fbbe 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800d242:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800d246:	b2db      	uxtb	r3, r3
 800d248:	3301      	adds	r3, #1
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	77bb      	strb	r3, [r7, #30]
 800d24e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800d252:	2b2f      	cmp	r3, #47	@ 0x2f
 800d254:	dde8      	ble.n	800d228 <NMEA_ParseGPGGA+0x20>
    }

    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800d256:	2300      	movs	r3, #0
 800d258:	61bb      	str	r3, [r7, #24]
 800d25a:	2300      	movs	r3, #0
 800d25c:	617b      	str	r3, [r7, #20]
 800d25e:	2300      	movs	r3, #0
 800d260:	613b      	str	r3, [r7, #16]
 800d262:	e047      	b.n	800d2f4 <NMEA_ParseGPGGA+0xec>
    {
      new_field = 0;
 800d264:	2300      	movs	r3, #0
 800d266:	627b      	str	r3, [r7, #36]	@ 0x24

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800d268:	69bb      	ldr	r3, [r7, #24]
 800d26a:	683a      	ldr	r2, [r7, #0]
 800d26c:	4413      	add	r3, r2
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	2b2c      	cmp	r3, #44	@ 0x2c
 800d272:	d005      	beq.n	800d280 <NMEA_ParseGPGGA+0x78>
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	4413      	add	r3, r2
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d27e:	d121      	bne.n	800d2c4 <NMEA_ParseGPGGA+0xbc>
      {
        app[j][k] = (uint8_t)'\0';
 800d280:	495c      	ldr	r1, [pc, #368]	@ (800d3f4 <NMEA_ParseGPGGA+0x1ec>)
 800d282:	697a      	ldr	r2, [r7, #20]
 800d284:	4613      	mov	r3, r2
 800d286:	005b      	lsls	r3, r3, #1
 800d288:	4413      	add	r3, r2
 800d28a:	011b      	lsls	r3, r3, #4
 800d28c:	18ca      	adds	r2, r1, r3
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	4413      	add	r3, r2
 800d292:	2200      	movs	r2, #0
 800d294:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800d296:	2301      	movs	r3, #1
 800d298:	627b      	str	r3, [r7, #36]	@ 0x24

        if (strcmp((char *)app[0], "$GPGGA") == 0 || strcmp((char *)app[0], "$GNGGA") == 0) {
 800d29a:	4957      	ldr	r1, [pc, #348]	@ (800d3f8 <NMEA_ParseGPGGA+0x1f0>)
 800d29c:	4855      	ldr	r0, [pc, #340]	@ (800d3f4 <NMEA_ParseGPGGA+0x1ec>)
 800d29e:	f7f2 ff97 	bl	80001d0 <strcmp>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d006      	beq.n	800d2b6 <NMEA_ParseGPGGA+0xae>
 800d2a8:	4954      	ldr	r1, [pc, #336]	@ (800d3fc <NMEA_ParseGPGGA+0x1f4>)
 800d2aa:	4852      	ldr	r0, [pc, #328]	@ (800d3f4 <NMEA_ParseGPGGA+0x1ec>)
 800d2ac:	f7f2 ff90 	bl	80001d0 <strcmp>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d124      	bne.n	800d300 <NMEA_ParseGPGGA+0xf8>
          j++;
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	617b      	str	r3, [r7, #20]
          k = 0;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	613b      	str	r3, [r7, #16]
          valid_msg = TRUE;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	623b      	str	r3, [r7, #32]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d111      	bne.n	800d2ee <NMEA_ParseGPGGA+0xe6>
      {
        app[j][k] = NMEA[i];
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	683a      	ldr	r2, [r7, #0]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	7818      	ldrb	r0, [r3, #0]
 800d2d2:	4948      	ldr	r1, [pc, #288]	@ (800d3f4 <NMEA_ParseGPGGA+0x1ec>)
 800d2d4:	697a      	ldr	r2, [r7, #20]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	005b      	lsls	r3, r3, #1
 800d2da:	4413      	add	r3, r2
 800d2dc:	011b      	lsls	r3, r3, #4
 800d2de:	18ca      	adds	r2, r1, r3
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	701a      	strb	r2, [r3, #0]
        k++;
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	613b      	str	r3, [r7, #16]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	61bb      	str	r3, [r7, #24]
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	2b0a      	cmp	r3, #10
 800d2fe:	d1b1      	bne.n	800d264 <NMEA_ParseGPGGA+0x5c>
      }
    }

    if (valid_msg == TRUE)
 800d300:	6a3b      	ldr	r3, [r7, #32]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d171      	bne.n	800d3ea <NMEA_ParseGPGGA+0x1e2>
    {
      int32_t valid = strtol((char *)app[6], NULL, BASE);
 800d306:	220a      	movs	r2, #10
 800d308:	2100      	movs	r1, #0
 800d30a:	483d      	ldr	r0, [pc, #244]	@ (800d400 <NMEA_ParseGPGGA+0x1f8>)
 800d30c:	f002 fc62 	bl	800fbd4 <strtol>
 800d310:	60f8      	str	r0, [r7, #12]
      if(valid > INVALID)
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	dd04      	ble.n	800d322 <NMEA_ParseGPGGA+0x11a>
      {
        pGPGGAInfo->valid = (uint8_t)valid;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	b2da      	uxtb	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      scan_utc(app[1], &pGPGGAInfo->utc);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4619      	mov	r1, r3
 800d326:	4837      	ldr	r0, [pc, #220]	@ (800d404 <NMEA_ParseGPGGA+0x1fc>)
 800d328:	f7ff fe1e 	bl	800cf68 <scan_utc>
      pGPGGAInfo->xyz.lat = strtod((char *)app[2], NULL);
 800d32c:	2100      	movs	r1, #0
 800d32e:	4836      	ldr	r0, [pc, #216]	@ (800d408 <NMEA_ParseGPGGA+0x200>)
 800d330:	f002 fb66 	bl	800fa00 <strtod>
 800d334:	eeb0 7a40 	vmov.f32	s14, s0
 800d338:	eef0 7a60 	vmov.f32	s15, s1
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	ed83 7b04 	vstr	d7, [r3, #16]
      pGPGGAInfo->xyz.ns = *((uint8_t*)app[3]);
 800d342:	4b2c      	ldr	r3, [pc, #176]	@ (800d3f4 <NMEA_ParseGPGGA+0x1ec>)
 800d344:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
      pGPGGAInfo->xyz.lon = strtod((char *)app[4], NULL);
 800d34e:	2100      	movs	r1, #0
 800d350:	482e      	ldr	r0, [pc, #184]	@ (800d40c <NMEA_ParseGPGGA+0x204>)
 800d352:	f002 fb55 	bl	800fa00 <strtod>
 800d356:	eeb0 7a40 	vmov.f32	s14, s0
 800d35a:	eef0 7a60 	vmov.f32	s15, s1
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	ed83 7b06 	vstr	d7, [r3, #24]
      pGPGGAInfo->xyz.ew = *((uint8_t*)app[5]);
 800d364:	4b23      	ldr	r3, [pc, #140]	@ (800d3f4 <NMEA_ParseGPGGA+0x1ec>)
 800d366:	f893 20f0 	ldrb.w	r2, [r3, #240]	@ 0xf0
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      pGPGGAInfo->sats = strtol((char *)app[7], NULL, BASE);
 800d370:	220a      	movs	r2, #10
 800d372:	2100      	movs	r1, #0
 800d374:	4826      	ldr	r0, [pc, #152]	@ (800d410 <NMEA_ParseGPGGA+0x208>)
 800d376:	f002 fc2d 	bl	800fbd4 <strtol>
 800d37a:	4603      	mov	r3, r0
 800d37c:	b21a      	sxth	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	869a      	strh	r2, [r3, #52]	@ 0x34
      pGPGGAInfo->acc = strtof((char *)app[8], NULL);
 800d382:	2100      	movs	r1, #0
 800d384:	4823      	ldr	r0, [pc, #140]	@ (800d414 <NMEA_ParseGPGGA+0x20c>)
 800d386:	f002 fb47 	bl	800fa18 <strtof>
 800d38a:	eef0 7a40 	vmov.f32	s15, s0
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
      pGPGGAInfo->xyz.alt = strtof((char *)app[9], NULL);
 800d394:	2100      	movs	r1, #0
 800d396:	4820      	ldr	r0, [pc, #128]	@ (800d418 <NMEA_ParseGPGGA+0x210>)
 800d398:	f002 fb3e 	bl	800fa18 <strtof>
 800d39c:	ee10 3a10 	vmov	r3, s0
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7f3 f8e1 	bl	8000568 <__aeabi_f2d>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	6879      	ldr	r1, [r7, #4]
 800d3ac:	e9c1 2308 	strd	r2, r3, [r1, #32]
      pGPGGAInfo->xyz.mis = *((uint8_t*)app[10]);
 800d3b0:	4b10      	ldr	r3, [pc, #64]	@ (800d3f4 <NMEA_ParseGPGGA+0x1ec>)
 800d3b2:	f893 21e0 	ldrb.w	r2, [r3, #480]	@ 0x1e0
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      pGPGGAInfo->geoid.height = strtol((char *)app[11], NULL, BASE);
 800d3bc:	220a      	movs	r2, #10
 800d3be:	2100      	movs	r1, #0
 800d3c0:	4816      	ldr	r0, [pc, #88]	@ (800d41c <NMEA_ParseGPGGA+0x214>)
 800d3c2:	f002 fc07 	bl	800fbd4 <strtol>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	b21a      	sxth	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	871a      	strh	r2, [r3, #56]	@ 0x38
      pGPGGAInfo->geoid.mis = *((uint8_t*)app[12]);
 800d3ce:	4b09      	ldr	r3, [pc, #36]	@ (800d3f4 <NMEA_ParseGPGGA+0x1ec>)
 800d3d0:	f893 2240 	ldrb.w	r2, [r3, #576]	@ 0x240
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      // This field is reserved
      //pGPGGAInfo->update = strtol((char *)app[13], NULL, BASE);
      pGPGGAInfo->checksum = nmea_checksum(app[15]);
 800d3da:	4811      	ldr	r0, [pc, #68]	@ (800d420 <NMEA_ParseGPGGA+0x218>)
 800d3dc:	f7ff fe22 	bl	800d024 <nmea_checksum>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	641a      	str	r2, [r3, #64]	@ 0x40
      
      status = PARSE_SUCC;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 800d3ea:	7ffb      	ldrb	r3, [r7, #31]
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3728      	adds	r7, #40	@ 0x28
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	20005d0c 	.word	0x20005d0c
 800d3f8:	08015538 	.word	0x08015538
 800d3fc:	08015540 	.word	0x08015540
 800d400:	20005e2c 	.word	0x20005e2c
 800d404:	20005d3c 	.word	0x20005d3c
 800d408:	20005d6c 	.word	0x20005d6c
 800d40c:	20005dcc 	.word	0x20005dcc
 800d410:	20005e5c 	.word	0x20005e5c
 800d414:	20005e8c 	.word	0x20005e8c
 800d418:	20005ebc 	.word	0x20005ebc
 800d41c:	20005f1c 	.word	0x20005f1c
 800d420:	20005fdc 	.word	0x20005fdc

0800d424 <NMEA_ParseGNS>:

ParseStatus_t NMEA_ParseGNS(GNS_Info_t *pGNSInfo, uint8_t NMEA[])
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b088      	sub	sp, #32
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 800d42e:	2300      	movs	r3, #0
 800d430:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 800d432:	2301      	movs	r3, #1
 800d434:	75fb      	strb	r3, [r7, #23]
  
  if(NMEA != NULL) {
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f000 80e4 	beq.w	800d606 <NMEA_ParseGNS+0x1e2>

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800d43e:	2300      	movs	r3, #0
 800d440:	75bb      	strb	r3, [r7, #22]
 800d442:	e012      	b.n	800d46a <NMEA_ParseGNS+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800d444:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800d448:	4613      	mov	r3, r2
 800d44a:	005b      	lsls	r3, r3, #1
 800d44c:	4413      	add	r3, r2
 800d44e:	011b      	lsls	r3, r3, #4
 800d450:	4a6f      	ldr	r2, [pc, #444]	@ (800d610 <NMEA_ParseGNS+0x1ec>)
 800d452:	4413      	add	r3, r2
 800d454:	2230      	movs	r2, #48	@ 0x30
 800d456:	2100      	movs	r1, #0
 800d458:	4618      	mov	r0, r3
 800d45a:	f003 fab0 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800d45e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800d462:	b2db      	uxtb	r3, r3
 800d464:	3301      	adds	r3, #1
 800d466:	b2db      	uxtb	r3, r3
 800d468:	75bb      	strb	r3, [r7, #22]
 800d46a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800d46e:	2b2f      	cmp	r3, #47	@ 0x2f
 800d470:	dde8      	ble.n	800d444 <NMEA_ParseGNS+0x20>
    }

    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800d472:	2300      	movs	r3, #0
 800d474:	613b      	str	r3, [r7, #16]
 800d476:	2300      	movs	r3, #0
 800d478:	60fb      	str	r3, [r7, #12]
 800d47a:	2300      	movs	r3, #0
 800d47c:	60bb      	str	r3, [r7, #8]
 800d47e:	e03f      	b.n	800d500 <NMEA_ParseGNS+0xdc>
    {
      new_field = 0;
 800d480:	2300      	movs	r3, #0
 800d482:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	683a      	ldr	r2, [r7, #0]
 800d488:	4413      	add	r3, r2
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	2b2c      	cmp	r3, #44	@ 0x2c
 800d48e:	d005      	beq.n	800d49c <NMEA_ParseGNS+0x78>
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	683a      	ldr	r2, [r7, #0]
 800d494:	4413      	add	r3, r2
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	2b2a      	cmp	r3, #42	@ 0x2a
 800d49a:	d119      	bne.n	800d4d0 <NMEA_ParseGNS+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 800d49c:	495c      	ldr	r1, [pc, #368]	@ (800d610 <NMEA_ParseGNS+0x1ec>)
 800d49e:	68fa      	ldr	r2, [r7, #12]
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	4413      	add	r3, r2
 800d4a6:	011b      	lsls	r3, r3, #4
 800d4a8:	18ca      	adds	r2, r1, r3
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	61fb      	str	r3, [r7, #28]
        
        if (NMEA_CheckGNSMsg((char *)app[0]) == 0)
 800d4b6:	4856      	ldr	r0, [pc, #344]	@ (800d610 <NMEA_ParseGNS+0x1ec>)
 800d4b8:	f7ff fa30 	bl	800c91c <NMEA_CheckGNSMsg>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d125      	bne.n	800d50e <NMEA_ParseGNS+0xea>
        {
          j++;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	60fb      	str	r3, [r7, #12]
          k = 0;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0) {
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d111      	bne.n	800d4fa <NMEA_ParseGNS+0xd6>
        app[j][k] = NMEA[i];
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	683a      	ldr	r2, [r7, #0]
 800d4da:	4413      	add	r3, r2
 800d4dc:	7818      	ldrb	r0, [r3, #0]
 800d4de:	494c      	ldr	r1, [pc, #304]	@ (800d610 <NMEA_ParseGNS+0x1ec>)
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	005b      	lsls	r3, r3, #1
 800d4e6:	4413      	add	r3, r2
 800d4e8:	011b      	lsls	r3, r3, #4
 800d4ea:	18ca      	adds	r2, r1, r3
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	701a      	strb	r2, [r3, #0]
        k++;
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	60bb      	str	r3, [r7, #8]
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	613b      	str	r3, [r7, #16]
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	683a      	ldr	r2, [r7, #0]
 800d504:	4413      	add	r3, r2
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	2b0a      	cmp	r3, #10
 800d50a:	d1b9      	bne.n	800d480 <NMEA_ParseGNS+0x5c>
 800d50c:	e000      	b.n	800d510 <NMEA_ParseGNS+0xec>
          break;
 800d50e:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	2b01      	cmp	r3, #1
 800d514:	d177      	bne.n	800d606 <NMEA_ParseGNS+0x1e2>
    {
      (void)strncpy((char *)pGNSInfo->constellation, (char *)app[0], MAX_STR_LEN);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2220      	movs	r2, #32
 800d51a:	493d      	ldr	r1, [pc, #244]	@ (800d610 <NMEA_ParseGNS+0x1ec>)
 800d51c:	4618      	mov	r0, r3
 800d51e:	f003 fa68 	bl	80109f2 <strncpy>
      scan_utc(app[1], &pGNSInfo->utc);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	3320      	adds	r3, #32
 800d526:	4619      	mov	r1, r3
 800d528:	483a      	ldr	r0, [pc, #232]	@ (800d614 <NMEA_ParseGNS+0x1f0>)
 800d52a:	f7ff fd1d 	bl	800cf68 <scan_utc>
      pGNSInfo->xyz.lat = strtod((char *)app[2], NULL);
 800d52e:	2100      	movs	r1, #0
 800d530:	4839      	ldr	r0, [pc, #228]	@ (800d618 <NMEA_ParseGNS+0x1f4>)
 800d532:	f002 fa65 	bl	800fa00 <strtod>
 800d536:	eeb0 7a40 	vmov.f32	s14, s0
 800d53a:	eef0 7a60 	vmov.f32	s15, s1
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
      pGNSInfo->xyz.ns = *((uint8_t*)app[3]);
 800d544:	4b32      	ldr	r3, [pc, #200]	@ (800d610 <NMEA_ParseGNS+0x1ec>)
 800d546:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
      pGNSInfo->xyz.lon = strtod((char *)app[4], NULL);
 800d550:	2100      	movs	r1, #0
 800d552:	4832      	ldr	r0, [pc, #200]	@ (800d61c <NMEA_ParseGNS+0x1f8>)
 800d554:	f002 fa54 	bl	800fa00 <strtod>
 800d558:	eeb0 7a40 	vmov.f32	s14, s0
 800d55c:	eef0 7a60 	vmov.f32	s15, s1
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
      pGNSInfo->xyz.ew = *((uint8_t*)app[5]);
 800d566:	4b2a      	ldr	r3, [pc, #168]	@ (800d610 <NMEA_ParseGNS+0x1ec>)
 800d568:	f893 20f0 	ldrb.w	r2, [r3, #240]	@ 0xf0
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
      pGNSInfo->gps_mode = *((uint8_t*)app[6]);
 800d572:	4b27      	ldr	r3, [pc, #156]	@ (800d610 <NMEA_ParseGNS+0x1ec>)
 800d574:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      pGNSInfo->glonass_mode = *((uint8_t*)app[7]);
 800d57e:	4b24      	ldr	r3, [pc, #144]	@ (800d610 <NMEA_ParseGNS+0x1ec>)
 800d580:	f893 2150 	ldrb.w	r2, [r3, #336]	@ 0x150
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      pGNSInfo->sats = strtol((char *)app[8], NULL, BASE);
 800d58a:	220a      	movs	r2, #10
 800d58c:	2100      	movs	r1, #0
 800d58e:	4824      	ldr	r0, [pc, #144]	@ (800d620 <NMEA_ParseGNS+0x1fc>)
 800d590:	f002 fb20 	bl	800fbd4 <strtol>
 800d594:	4603      	mov	r3, r0
 800d596:	b21a      	sxth	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
      pGNSInfo->hdop = strtof((char *)app[9], NULL);
 800d59e:	2100      	movs	r1, #0
 800d5a0:	4820      	ldr	r0, [pc, #128]	@ (800d624 <NMEA_ParseGNS+0x200>)
 800d5a2:	f002 fa39 	bl	800fa18 <strtof>
 800d5a6:	eef0 7a40 	vmov.f32	s15, s0
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
      pGNSInfo->xyz.alt = strtof((char *)app[10], NULL);
 800d5b0:	2100      	movs	r1, #0
 800d5b2:	481d      	ldr	r0, [pc, #116]	@ (800d628 <NMEA_ParseGNS+0x204>)
 800d5b4:	f002 fa30 	bl	800fa18 <strtof>
 800d5b8:	ee10 3a10 	vmov	r3, s0
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7f2 ffd3 	bl	8000568 <__aeabi_f2d>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	6879      	ldr	r1, [r7, #4]
 800d5c8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
      pGNSInfo->geo_sep = strtof((char *)app[11], NULL);
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	4817      	ldr	r0, [pc, #92]	@ (800d62c <NMEA_ParseGNS+0x208>)
 800d5d0:	f002 fa22 	bl	800fa18 <strtof>
 800d5d4:	eef0 7a40 	vmov.f32	s15, s0
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
      pGNSInfo->dgnss_age = *((uint8_t*)app[12]);
 800d5de:	4b0c      	ldr	r3, [pc, #48]	@ (800d610 <NMEA_ParseGNS+0x1ec>)
 800d5e0:	f893 2240 	ldrb.w	r2, [r3, #576]	@ 0x240
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      pGNSInfo->dgnss_ref = *((uint8_t*)app[13]);
 800d5ea:	4b09      	ldr	r3, [pc, #36]	@ (800d610 <NMEA_ParseGNS+0x1ec>)
 800d5ec:	f893 2270 	ldrb.w	r2, [r3, #624]	@ 0x270
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      pGNSInfo->checksum = nmea_checksum(app[14]);
 800d5f6:	480e      	ldr	r0, [pc, #56]	@ (800d630 <NMEA_ParseGNS+0x20c>)
 800d5f8:	f7ff fd14 	bl	800d024 <nmea_checksum>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	661a      	str	r2, [r3, #96]	@ 0x60

      status = PARSE_SUCC;
 800d602:	2300      	movs	r3, #0
 800d604:	75fb      	strb	r3, [r7, #23]
    }
  }

  return status;
 800d606:	7dfb      	ldrb	r3, [r7, #23]
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3720      	adds	r7, #32
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	20005d0c 	.word	0x20005d0c
 800d614:	20005d3c 	.word	0x20005d3c
 800d618:	20005d6c 	.word	0x20005d6c
 800d61c:	20005dcc 	.word	0x20005dcc
 800d620:	20005e8c 	.word	0x20005e8c
 800d624:	20005ebc 	.word	0x20005ebc
 800d628:	20005eec 	.word	0x20005eec
 800d62c:	20005f1c 	.word	0x20005f1c
 800d630:	20005fac 	.word	0x20005fac

0800d634 <NMEA_ParseGPGST>:
  
ParseStatus_t NMEA_ParseGPGST(GPGST_Info_t *pGPGSTInfo, uint8_t NMEA[])
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b088      	sub	sp, #32
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 800d63e:	2300      	movs	r3, #0
 800d640:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 800d642:	2301      	movs	r3, #1
 800d644:	75fb      	strb	r3, [r7, #23]
  
  if(NMEA != NULL) {
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f000 80be 	beq.w	800d7ca <NMEA_ParseGPGST+0x196>
  
    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800d64e:	2300      	movs	r3, #0
 800d650:	75bb      	strb	r3, [r7, #22]
 800d652:	e012      	b.n	800d67a <NMEA_ParseGPGST+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800d654:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800d658:	4613      	mov	r3, r2
 800d65a:	005b      	lsls	r3, r3, #1
 800d65c:	4413      	add	r3, r2
 800d65e:	011b      	lsls	r3, r3, #4
 800d660:	4a5c      	ldr	r2, [pc, #368]	@ (800d7d4 <NMEA_ParseGPGST+0x1a0>)
 800d662:	4413      	add	r3, r2
 800d664:	2230      	movs	r2, #48	@ 0x30
 800d666:	2100      	movs	r1, #0
 800d668:	4618      	mov	r0, r3
 800d66a:	f003 f9a8 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800d66e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800d672:	b2db      	uxtb	r3, r3
 800d674:	3301      	adds	r3, #1
 800d676:	b2db      	uxtb	r3, r3
 800d678:	75bb      	strb	r3, [r7, #22]
 800d67a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800d67e:	2b2f      	cmp	r3, #47	@ 0x2f
 800d680:	dde8      	ble.n	800d654 <NMEA_ParseGPGST+0x20>
    }
    
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800d682:	2300      	movs	r3, #0
 800d684:	613b      	str	r3, [r7, #16]
 800d686:	2300      	movs	r3, #0
 800d688:	60fb      	str	r3, [r7, #12]
 800d68a:	2300      	movs	r3, #0
 800d68c:	60bb      	str	r3, [r7, #8]
 800d68e:	e047      	b.n	800d720 <NMEA_ParseGPGST+0xec>
    {
      new_field = 0;
 800d690:	2300      	movs	r3, #0
 800d692:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	683a      	ldr	r2, [r7, #0]
 800d698:	4413      	add	r3, r2
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b2c      	cmp	r3, #44	@ 0x2c
 800d69e:	d005      	beq.n	800d6ac <NMEA_ParseGPGST+0x78>
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	683a      	ldr	r2, [r7, #0]
 800d6a4:	4413      	add	r3, r2
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6aa:	d121      	bne.n	800d6f0 <NMEA_ParseGPGST+0xbc>
      {
        app[j][k] = (uint8_t)'\0';
 800d6ac:	4949      	ldr	r1, [pc, #292]	@ (800d7d4 <NMEA_ParseGPGST+0x1a0>)
 800d6ae:	68fa      	ldr	r2, [r7, #12]
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	005b      	lsls	r3, r3, #1
 800d6b4:	4413      	add	r3, r2
 800d6b6:	011b      	lsls	r3, r3, #4
 800d6b8:	18ca      	adds	r2, r1, r3
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	4413      	add	r3, r2
 800d6be:	2200      	movs	r2, #0
 800d6c0:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	61fb      	str	r3, [r7, #28]
        
        if (strcmp((char *)app[0], "$GPGST") == 0 || strcmp((char *)app[0], "$GNGST"))
 800d6c6:	4944      	ldr	r1, [pc, #272]	@ (800d7d8 <NMEA_ParseGPGST+0x1a4>)
 800d6c8:	4842      	ldr	r0, [pc, #264]	@ (800d7d4 <NMEA_ParseGPGST+0x1a0>)
 800d6ca:	f7f2 fd81 	bl	80001d0 <strcmp>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d006      	beq.n	800d6e2 <NMEA_ParseGPGST+0xae>
 800d6d4:	4941      	ldr	r1, [pc, #260]	@ (800d7dc <NMEA_ParseGPGST+0x1a8>)
 800d6d6:	483f      	ldr	r0, [pc, #252]	@ (800d7d4 <NMEA_ParseGPGST+0x1a0>)
 800d6d8:	f7f2 fd7a 	bl	80001d0 <strcmp>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d024      	beq.n	800d72c <NMEA_ParseGPGST+0xf8>
        {
          j++;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	60fb      	str	r3, [r7, #12]
          k = 0;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800d6f0:	69fb      	ldr	r3, [r7, #28]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d111      	bne.n	800d71a <NMEA_ParseGPGST+0xe6>
      {
        app[j][k] = NMEA[i];
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	683a      	ldr	r2, [r7, #0]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	7818      	ldrb	r0, [r3, #0]
 800d6fe:	4935      	ldr	r1, [pc, #212]	@ (800d7d4 <NMEA_ParseGPGST+0x1a0>)
 800d700:	68fa      	ldr	r2, [r7, #12]
 800d702:	4613      	mov	r3, r2
 800d704:	005b      	lsls	r3, r3, #1
 800d706:	4413      	add	r3, r2
 800d708:	011b      	lsls	r3, r3, #4
 800d70a:	18ca      	adds	r2, r1, r3
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	4413      	add	r3, r2
 800d710:	4602      	mov	r2, r0
 800d712:	701a      	strb	r2, [r3, #0]
        k++;
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	3301      	adds	r3, #1
 800d718:	60bb      	str	r3, [r7, #8]
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	3301      	adds	r3, #1
 800d71e:	613b      	str	r3, [r7, #16]
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	4413      	add	r3, r2
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	2b0a      	cmp	r3, #10
 800d72a:	d1b1      	bne.n	800d690 <NMEA_ParseGPGST+0x5c>
      }
    }  
    
    if (valid_msg == TRUE)
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	2b01      	cmp	r3, #1
 800d730:	d14b      	bne.n	800d7ca <NMEA_ParseGPGST+0x196>
    {         
      scan_utc(app[1], &pGPGSTInfo->utc);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4619      	mov	r1, r3
 800d736:	482a      	ldr	r0, [pc, #168]	@ (800d7e0 <NMEA_ParseGPGST+0x1ac>)
 800d738:	f7ff fc16 	bl	800cf68 <scan_utc>
      pGPGSTInfo->EHPE = strtof((char *)app[2], NULL);
 800d73c:	2100      	movs	r1, #0
 800d73e:	4829      	ldr	r0, [pc, #164]	@ (800d7e4 <NMEA_ParseGPGST+0x1b0>)
 800d740:	f002 f96a 	bl	800fa18 <strtof>
 800d744:	eef0 7a40 	vmov.f32	s15, s0
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	edc3 7a03 	vstr	s15, [r3, #12]
      pGPGSTInfo->semi_major_dev = strtof((char *)app[3], NULL);
 800d74e:	2100      	movs	r1, #0
 800d750:	4825      	ldr	r0, [pc, #148]	@ (800d7e8 <NMEA_ParseGPGST+0x1b4>)
 800d752:	f002 f961 	bl	800fa18 <strtof>
 800d756:	eef0 7a40 	vmov.f32	s15, s0
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	edc3 7a04 	vstr	s15, [r3, #16]
      pGPGSTInfo->semi_minor_dev = strtof((char *)app[4], NULL);
 800d760:	2100      	movs	r1, #0
 800d762:	4822      	ldr	r0, [pc, #136]	@ (800d7ec <NMEA_ParseGPGST+0x1b8>)
 800d764:	f002 f958 	bl	800fa18 <strtof>
 800d768:	eef0 7a40 	vmov.f32	s15, s0
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	edc3 7a05 	vstr	s15, [r3, #20]
      pGPGSTInfo->semi_major_angle = strtof((char *)app[5], NULL);
 800d772:	2100      	movs	r1, #0
 800d774:	481e      	ldr	r0, [pc, #120]	@ (800d7f0 <NMEA_ParseGPGST+0x1bc>)
 800d776:	f002 f94f 	bl	800fa18 <strtof>
 800d77a:	eef0 7a40 	vmov.f32	s15, s0
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	edc3 7a06 	vstr	s15, [r3, #24]
      pGPGSTInfo->lat_err_dev = strtof((char *)app[6], NULL);
 800d784:	2100      	movs	r1, #0
 800d786:	481b      	ldr	r0, [pc, #108]	@ (800d7f4 <NMEA_ParseGPGST+0x1c0>)
 800d788:	f002 f946 	bl	800fa18 <strtof>
 800d78c:	eef0 7a40 	vmov.f32	s15, s0
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	edc3 7a07 	vstr	s15, [r3, #28]
      pGPGSTInfo->lon_err_dev = strtof((char *)app[7], NULL);
 800d796:	2100      	movs	r1, #0
 800d798:	4817      	ldr	r0, [pc, #92]	@ (800d7f8 <NMEA_ParseGPGST+0x1c4>)
 800d79a:	f002 f93d 	bl	800fa18 <strtof>
 800d79e:	eef0 7a40 	vmov.f32	s15, s0
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	edc3 7a08 	vstr	s15, [r3, #32]
      pGPGSTInfo->alt_err_dev = strtof((char *)app[8], NULL);
 800d7a8:	2100      	movs	r1, #0
 800d7aa:	4814      	ldr	r0, [pc, #80]	@ (800d7fc <NMEA_ParseGPGST+0x1c8>)
 800d7ac:	f002 f934 	bl	800fa18 <strtof>
 800d7b0:	eef0 7a40 	vmov.f32	s15, s0
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
      pGPGSTInfo->checksum = nmea_checksum(app[9]);
 800d7ba:	4811      	ldr	r0, [pc, #68]	@ (800d800 <NMEA_ParseGPGST+0x1cc>)
 800d7bc:	f7ff fc32 	bl	800d024 <nmea_checksum>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	629a      	str	r2, [r3, #40]	@ 0x28

      status = PARSE_SUCC;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	75fb      	strb	r3, [r7, #23]
    }
  }

  return status;
 800d7ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3720      	adds	r7, #32
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	20005d0c 	.word	0x20005d0c
 800d7d8:	08015548 	.word	0x08015548
 800d7dc:	08015550 	.word	0x08015550
 800d7e0:	20005d3c 	.word	0x20005d3c
 800d7e4:	20005d6c 	.word	0x20005d6c
 800d7e8:	20005d9c 	.word	0x20005d9c
 800d7ec:	20005dcc 	.word	0x20005dcc
 800d7f0:	20005dfc 	.word	0x20005dfc
 800d7f4:	20005e2c 	.word	0x20005e2c
 800d7f8:	20005e5c 	.word	0x20005e5c
 800d7fc:	20005e8c 	.word	0x20005e8c
 800d800:	20005ebc 	.word	0x20005ebc

0800d804 <NMEA_ParseGPRMC>:

ParseStatus_t NMEA_ParseGPRMC(GPRMC_Info_t *pGPRMCInfo, uint8_t NMEA[])
{
 800d804:	b590      	push	{r4, r7, lr}
 800d806:	b089      	sub	sp, #36	@ 0x24
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 800d80e:	2300      	movs	r3, #0
 800d810:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 800d812:	2301      	movs	r3, #1
 800d814:	75fb      	strb	r3, [r7, #23]
  
  if(NMEA != NULL)
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f000 80db 	beq.w	800d9d4 <NMEA_ParseGPRMC+0x1d0>
  {
  
    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800d81e:	2300      	movs	r3, #0
 800d820:	75bb      	strb	r3, [r7, #22]
 800d822:	e012      	b.n	800d84a <NMEA_ParseGPRMC+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800d824:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800d828:	4613      	mov	r3, r2
 800d82a:	005b      	lsls	r3, r3, #1
 800d82c:	4413      	add	r3, r2
 800d82e:	011b      	lsls	r3, r3, #4
 800d830:	4a6b      	ldr	r2, [pc, #428]	@ (800d9e0 <NMEA_ParseGPRMC+0x1dc>)
 800d832:	4413      	add	r3, r2
 800d834:	2230      	movs	r2, #48	@ 0x30
 800d836:	2100      	movs	r1, #0
 800d838:	4618      	mov	r0, r3
 800d83a:	f003 f8c0 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800d83e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800d842:	b2db      	uxtb	r3, r3
 800d844:	3301      	adds	r3, #1
 800d846:	b2db      	uxtb	r3, r3
 800d848:	75bb      	strb	r3, [r7, #22]
 800d84a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800d84e:	2b2f      	cmp	r3, #47	@ 0x2f
 800d850:	dde8      	ble.n	800d824 <NMEA_ParseGPRMC+0x20>
    }
    
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800d852:	2300      	movs	r3, #0
 800d854:	613b      	str	r3, [r7, #16]
 800d856:	2300      	movs	r3, #0
 800d858:	60fb      	str	r3, [r7, #12]
 800d85a:	2300      	movs	r3, #0
 800d85c:	60bb      	str	r3, [r7, #8]
 800d85e:	e051      	b.n	800d904 <NMEA_ParseGPRMC+0x100>
    {
      new_field = 0;
 800d860:	2300      	movs	r3, #0
 800d862:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	683a      	ldr	r2, [r7, #0]
 800d868:	4413      	add	r3, r2
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	2b2c      	cmp	r3, #44	@ 0x2c
 800d86e:	d005      	beq.n	800d87c <NMEA_ParseGPRMC+0x78>
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	683a      	ldr	r2, [r7, #0]
 800d874:	4413      	add	r3, r2
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	2b2a      	cmp	r3, #42	@ 0x2a
 800d87a:	d12b      	bne.n	800d8d4 <NMEA_ParseGPRMC+0xd0>
      {
        app[j][k] = (uint8_t)'\0';
 800d87c:	4958      	ldr	r1, [pc, #352]	@ (800d9e0 <NMEA_ParseGPRMC+0x1dc>)
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	4613      	mov	r3, r2
 800d882:	005b      	lsls	r3, r3, #1
 800d884:	4413      	add	r3, r2
 800d886:	011b      	lsls	r3, r3, #4
 800d888:	18ca      	adds	r2, r1, r3
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	4413      	add	r3, r2
 800d88e:	2200      	movs	r2, #0
 800d890:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800d892:	2301      	movs	r3, #1
 800d894:	61fb      	str	r3, [r7, #28]
        
        if (strcmp((char *)app[0], "$GPRMC") == 0 | strcmp((char *)app[0], "$GNRMC") == 0)
 800d896:	4953      	ldr	r1, [pc, #332]	@ (800d9e4 <NMEA_ParseGPRMC+0x1e0>)
 800d898:	4851      	ldr	r0, [pc, #324]	@ (800d9e0 <NMEA_ParseGPRMC+0x1dc>)
 800d89a:	f7f2 fc99 	bl	80001d0 <strcmp>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	bf0c      	ite	eq
 800d8a4:	2301      	moveq	r3, #1
 800d8a6:	2300      	movne	r3, #0
 800d8a8:	b2dc      	uxtb	r4, r3
 800d8aa:	494f      	ldr	r1, [pc, #316]	@ (800d9e8 <NMEA_ParseGPRMC+0x1e4>)
 800d8ac:	484c      	ldr	r0, [pc, #304]	@ (800d9e0 <NMEA_ParseGPRMC+0x1dc>)
 800d8ae:	f7f2 fc8f 	bl	80001d0 <strcmp>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	bf0c      	ite	eq
 800d8b8:	2301      	moveq	r3, #1
 800d8ba:	2300      	movne	r3, #0
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	4323      	orrs	r3, r4
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d025      	beq.n	800d912 <NMEA_ParseGPRMC+0x10e>
        {
          j++;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	60fb      	str	r3, [r7, #12]
          k = 0;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d111      	bne.n	800d8fe <NMEA_ParseGPRMC+0xfa>
      {
        app[j][k] = NMEA[i];
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	683a      	ldr	r2, [r7, #0]
 800d8de:	4413      	add	r3, r2
 800d8e0:	7818      	ldrb	r0, [r3, #0]
 800d8e2:	493f      	ldr	r1, [pc, #252]	@ (800d9e0 <NMEA_ParseGPRMC+0x1dc>)
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	005b      	lsls	r3, r3, #1
 800d8ea:	4413      	add	r3, r2
 800d8ec:	011b      	lsls	r3, r3, #4
 800d8ee:	18ca      	adds	r2, r1, r3
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	701a      	strb	r2, [r3, #0]
        k++;
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	60bb      	str	r3, [r7, #8]
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	3301      	adds	r3, #1
 800d902:	613b      	str	r3, [r7, #16]
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	683a      	ldr	r2, [r7, #0]
 800d908:	4413      	add	r3, r2
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	2b0a      	cmp	r3, #10
 800d90e:	d1a7      	bne.n	800d860 <NMEA_ParseGPRMC+0x5c>
 800d910:	e000      	b.n	800d914 <NMEA_ParseGPRMC+0x110>
          break;
 800d912:	bf00      	nop
      }
    }  
    
    if (valid_msg == TRUE)
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	2b01      	cmp	r3, #1
 800d918:	d15c      	bne.n	800d9d4 <NMEA_ParseGPRMC+0x1d0>
    {      
      scan_utc(app[1],  &pGPRMCInfo->utc);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4619      	mov	r1, r3
 800d91e:	4833      	ldr	r0, [pc, #204]	@ (800d9ec <NMEA_ParseGPRMC+0x1e8>)
 800d920:	f7ff fb22 	bl	800cf68 <scan_utc>
      pGPRMCInfo->status = *((uint8_t*)app[2]);
 800d924:	4b2e      	ldr	r3, [pc, #184]	@ (800d9e0 <NMEA_ParseGPRMC+0x1dc>)
 800d926:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	731a      	strb	r2, [r3, #12]
      pGPRMCInfo->xyz.lat = strtod((char *)app[3], NULL);
 800d92e:	2100      	movs	r1, #0
 800d930:	482f      	ldr	r0, [pc, #188]	@ (800d9f0 <NMEA_ParseGPRMC+0x1ec>)
 800d932:	f002 f865 	bl	800fa00 <strtod>
 800d936:	eeb0 7a40 	vmov.f32	s14, s0
 800d93a:	eef0 7a60 	vmov.f32	s15, s1
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	ed83 7b04 	vstr	d7, [r3, #16]
      pGPRMCInfo->xyz.ns = *((uint8_t*)app[4]);
 800d944:	4b26      	ldr	r3, [pc, #152]	@ (800d9e0 <NMEA_ParseGPRMC+0x1dc>)
 800d946:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
      pGPRMCInfo->xyz.lon = strtod((char *)app[5], NULL);
 800d950:	2100      	movs	r1, #0
 800d952:	4828      	ldr	r0, [pc, #160]	@ (800d9f4 <NMEA_ParseGPRMC+0x1f0>)
 800d954:	f002 f854 	bl	800fa00 <strtod>
 800d958:	eeb0 7a40 	vmov.f32	s14, s0
 800d95c:	eef0 7a60 	vmov.f32	s15, s1
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	ed83 7b06 	vstr	d7, [r3, #24]
      pGPRMCInfo->xyz.ew = *((uint8_t*)app[6]);
 800d966:	4b1e      	ldr	r3, [pc, #120]	@ (800d9e0 <NMEA_ParseGPRMC+0x1dc>)
 800d968:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
      pGPRMCInfo->speed = strtof((char *)app[7], NULL);
 800d972:	2100      	movs	r1, #0
 800d974:	4820      	ldr	r0, [pc, #128]	@ (800d9f8 <NMEA_ParseGPRMC+0x1f4>)
 800d976:	f002 f84f 	bl	800fa18 <strtof>
 800d97a:	eef0 7a40 	vmov.f32	s15, s0
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
      pGPRMCInfo->trackgood = strtof((char *)app[8], NULL);
 800d984:	2100      	movs	r1, #0
 800d986:	481d      	ldr	r0, [pc, #116]	@ (800d9fc <NMEA_ParseGPRMC+0x1f8>)
 800d988:	f002 f846 	bl	800fa18 <strtof>
 800d98c:	eef0 7a40 	vmov.f32	s15, s0
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
      pGPRMCInfo->date = strtol((char *)app[9], NULL, BASE);
 800d996:	220a      	movs	r2, #10
 800d998:	2100      	movs	r1, #0
 800d99a:	4819      	ldr	r0, [pc, #100]	@ (800da00 <NMEA_ParseGPRMC+0x1fc>)
 800d99c:	f002 f91a 	bl	800fbd4 <strtol>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	639a      	str	r2, [r3, #56]	@ 0x38
      pGPRMCInfo->mag_var = strtof((char *)app[10], NULL);
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	4816      	ldr	r0, [pc, #88]	@ (800da04 <NMEA_ParseGPRMC+0x200>)
 800d9aa:	f002 f835 	bl	800fa18 <strtof>
 800d9ae:	eef0 7a40 	vmov.f32	s15, s0
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
      pGPRMCInfo->mag_var_dir = *((uint8_t*)app[11]);
 800d9b8:	4b09      	ldr	r3, [pc, #36]	@ (800d9e0 <NMEA_ParseGPRMC+0x1dc>)
 800d9ba:	f893 2210 	ldrb.w	r2, [r3, #528]	@ 0x210
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      /* WARNING: from received msg, it seems there is another data (app[12]) before the checksum */
      pGPRMCInfo->checksum = nmea_checksum(app[13]);
 800d9c4:	4810      	ldr	r0, [pc, #64]	@ (800da08 <NMEA_ParseGPRMC+0x204>)
 800d9c6:	f7ff fb2d 	bl	800d024 <nmea_checksum>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	645a      	str	r2, [r3, #68]	@ 0x44

      status = PARSE_SUCC;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	75fb      	strb	r3, [r7, #23]
    }
  }

  return status;
 800d9d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3724      	adds	r7, #36	@ 0x24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd90      	pop	{r4, r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	20005d0c 	.word	0x20005d0c
 800d9e4:	08015558 	.word	0x08015558
 800d9e8:	08015560 	.word	0x08015560
 800d9ec:	20005d3c 	.word	0x20005d3c
 800d9f0:	20005d9c 	.word	0x20005d9c
 800d9f4:	20005dfc 	.word	0x20005dfc
 800d9f8:	20005e5c 	.word	0x20005e5c
 800d9fc:	20005e8c 	.word	0x20005e8c
 800da00:	20005ebc 	.word	0x20005ebc
 800da04:	20005eec 	.word	0x20005eec
 800da08:	20005f7c 	.word	0x20005f7c

0800da0c <NMEA_ParseGSA>:
         
ParseStatus_t NMEA_ParseGSA(GSA_Info_t *pGSAInfo, uint8_t NMEA[])
{
 800da0c:	b590      	push	{r4, r7, lr}
 800da0e:	b08b      	sub	sp, #44	@ 0x2c
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 800da16:	2300      	movs	r3, #0
 800da18:	623b      	str	r3, [r7, #32]
  
  ParseStatus_t status = PARSE_FAIL;
 800da1a:	2301      	movs	r3, #1
 800da1c:	77fb      	strb	r3, [r7, #31]
  
  if(NMEA != NULL)
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	f000 80c8 	beq.w	800dbb6 <NMEA_ParseGSA+0x1aa>
  {
  
    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800da26:	2300      	movs	r3, #0
 800da28:	77bb      	strb	r3, [r7, #30]
 800da2a:	e012      	b.n	800da52 <NMEA_ParseGSA+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800da2c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800da30:	4613      	mov	r3, r2
 800da32:	005b      	lsls	r3, r3, #1
 800da34:	4413      	add	r3, r2
 800da36:	011b      	lsls	r3, r3, #4
 800da38:	4a61      	ldr	r2, [pc, #388]	@ (800dbc0 <NMEA_ParseGSA+0x1b4>)
 800da3a:	4413      	add	r3, r2
 800da3c:	2230      	movs	r2, #48	@ 0x30
 800da3e:	2100      	movs	r1, #0
 800da40:	4618      	mov	r0, r3
 800da42:	f002 ffbc 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800da46:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	3301      	adds	r3, #1
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	77bb      	strb	r3, [r7, #30]
 800da52:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800da56:	2b2f      	cmp	r3, #47	@ 0x2f
 800da58:	dde8      	ble.n	800da2c <NMEA_ParseGSA+0x20>
    }
    
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800da5a:	2300      	movs	r3, #0
 800da5c:	61bb      	str	r3, [r7, #24]
 800da5e:	2300      	movs	r3, #0
 800da60:	617b      	str	r3, [r7, #20]
 800da62:	2300      	movs	r3, #0
 800da64:	613b      	str	r3, [r7, #16]
 800da66:	e03f      	b.n	800dae8 <NMEA_ParseGSA+0xdc>
    {
      new_field = 0;
 800da68:	2300      	movs	r3, #0
 800da6a:	627b      	str	r3, [r7, #36]	@ 0x24
      
      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	683a      	ldr	r2, [r7, #0]
 800da70:	4413      	add	r3, r2
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	2b2c      	cmp	r3, #44	@ 0x2c
 800da76:	d005      	beq.n	800da84 <NMEA_ParseGSA+0x78>
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	683a      	ldr	r2, [r7, #0]
 800da7c:	4413      	add	r3, r2
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	2b2a      	cmp	r3, #42	@ 0x2a
 800da82:	d119      	bne.n	800dab8 <NMEA_ParseGSA+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 800da84:	494e      	ldr	r1, [pc, #312]	@ (800dbc0 <NMEA_ParseGSA+0x1b4>)
 800da86:	697a      	ldr	r2, [r7, #20]
 800da88:	4613      	mov	r3, r2
 800da8a:	005b      	lsls	r3, r3, #1
 800da8c:	4413      	add	r3, r2
 800da8e:	011b      	lsls	r3, r3, #4
 800da90:	18ca      	adds	r2, r1, r3
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	4413      	add	r3, r2
 800da96:	2200      	movs	r2, #0
 800da98:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800da9a:	2301      	movs	r3, #1
 800da9c:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (NMEA_CheckGSAMsg((char *)app[0]) == 0)
 800da9e:	4848      	ldr	r0, [pc, #288]	@ (800dbc0 <NMEA_ParseGSA+0x1b4>)
 800daa0:	f7fe ff7e 	bl	800c9a0 <NMEA_CheckGSAMsg>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d125      	bne.n	800daf6 <NMEA_ParseGSA+0xea>
        {
          j++;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	3301      	adds	r3, #1
 800daae:	617b      	str	r3, [r7, #20]
          k = 0;
 800dab0:	2300      	movs	r3, #0
 800dab2:	613b      	str	r3, [r7, #16]
          valid_msg = TRUE;
 800dab4:	2301      	movs	r3, #1
 800dab6:	623b      	str	r3, [r7, #32]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800dab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d111      	bne.n	800dae2 <NMEA_ParseGSA+0xd6>
      {
        app[j][k] = NMEA[i];
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	683a      	ldr	r2, [r7, #0]
 800dac2:	4413      	add	r3, r2
 800dac4:	7818      	ldrb	r0, [r3, #0]
 800dac6:	493e      	ldr	r1, [pc, #248]	@ (800dbc0 <NMEA_ParseGSA+0x1b4>)
 800dac8:	697a      	ldr	r2, [r7, #20]
 800daca:	4613      	mov	r3, r2
 800dacc:	005b      	lsls	r3, r3, #1
 800dace:	4413      	add	r3, r2
 800dad0:	011b      	lsls	r3, r3, #4
 800dad2:	18ca      	adds	r2, r1, r3
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	4413      	add	r3, r2
 800dad8:	4602      	mov	r2, r0
 800dada:	701a      	strb	r2, [r3, #0]
        k++;
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	3301      	adds	r3, #1
 800dae0:	613b      	str	r3, [r7, #16]
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	3301      	adds	r3, #1
 800dae6:	61bb      	str	r3, [r7, #24]
 800dae8:	69bb      	ldr	r3, [r7, #24]
 800daea:	683a      	ldr	r2, [r7, #0]
 800daec:	4413      	add	r3, r2
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	2b0a      	cmp	r3, #10
 800daf2:	d1b9      	bne.n	800da68 <NMEA_ParseGSA+0x5c>
 800daf4:	e000      	b.n	800daf8 <NMEA_ParseGSA+0xec>
          break;
 800daf6:	bf00      	nop
      }
    }  
    
    if (valid_msg == TRUE)
 800daf8:	6a3b      	ldr	r3, [r7, #32]
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d15b      	bne.n	800dbb6 <NMEA_ParseGSA+0x1aa>
    {
      (void)strncpy((char *)pGSAInfo->constellation, (char *)app[0], MAX_STR_LEN);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2220      	movs	r2, #32
 800db02:	492f      	ldr	r1, [pc, #188]	@ (800dbc0 <NMEA_ParseGSA+0x1b4>)
 800db04:	4618      	mov	r0, r3
 800db06:	f002 ff74 	bl	80109f2 <strncpy>
      pGSAInfo->operating_mode = *((uint8_t*)app[1]);
 800db0a:	4b2d      	ldr	r3, [pc, #180]	@ (800dbc0 <NMEA_ParseGSA+0x1b4>)
 800db0c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f883 2020 	strb.w	r2, [r3, #32]
      pGSAInfo->current_mode = strtol((char *)app[2], NULL, BASE);
 800db16:	220a      	movs	r2, #10
 800db18:	2100      	movs	r1, #0
 800db1a:	482a      	ldr	r0, [pc, #168]	@ (800dbc4 <NMEA_ParseGSA+0x1b8>)
 800db1c:	f002 f85a 	bl	800fbd4 <strtol>
 800db20:	4603      	mov	r3, r0
 800db22:	b21a      	sxth	r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	845a      	strh	r2, [r3, #34]	@ 0x22

      int32_t *sat_prn = pGSAInfo->sat_prn;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	3324      	adds	r3, #36	@ 0x24
 800db2c:	60bb      	str	r3, [r7, #8]
      for (int8_t i = 0; i < MAX_SAT_NUM; i++)
 800db2e:	2300      	movs	r3, #0
 800db30:	73fb      	strb	r3, [r7, #15]
 800db32:	e019      	b.n	800db68 <NMEA_ParseGSA+0x15c>
      {
        *(&sat_prn[i]) = strtol((char *)app[3+i], NULL, BASE);
 800db34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db38:	1cda      	adds	r2, r3, #3
 800db3a:	4613      	mov	r3, r2
 800db3c:	005b      	lsls	r3, r3, #1
 800db3e:	4413      	add	r3, r2
 800db40:	011b      	lsls	r3, r3, #4
 800db42:	4a1f      	ldr	r2, [pc, #124]	@ (800dbc0 <NMEA_ParseGSA+0x1b4>)
 800db44:	1898      	adds	r0, r3, r2
 800db46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	18d4      	adds	r4, r2, r3
 800db50:	220a      	movs	r2, #10
 800db52:	2100      	movs	r1, #0
 800db54:	f002 f83e 	bl	800fbd4 <strtol>
 800db58:	4603      	mov	r3, r0
 800db5a:	6023      	str	r3, [r4, #0]
      for (int8_t i = 0; i < MAX_SAT_NUM; i++)
 800db5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db60:	b2db      	uxtb	r3, r3
 800db62:	3301      	adds	r3, #1
 800db64:	b2db      	uxtb	r3, r3
 800db66:	73fb      	strb	r3, [r7, #15]
 800db68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db6c:	2b0b      	cmp	r3, #11
 800db6e:	dde1      	ble.n	800db34 <NMEA_ParseGSA+0x128>
      }

      pGSAInfo->pdop = strtof((char *)app[15], NULL);
 800db70:	2100      	movs	r1, #0
 800db72:	4815      	ldr	r0, [pc, #84]	@ (800dbc8 <NMEA_ParseGSA+0x1bc>)
 800db74:	f001 ff50 	bl	800fa18 <strtof>
 800db78:	eef0 7a40 	vmov.f32	s15, s0
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
      pGSAInfo->hdop = strtof((char *)app[16], NULL);
 800db82:	2100      	movs	r1, #0
 800db84:	4811      	ldr	r0, [pc, #68]	@ (800dbcc <NMEA_ParseGSA+0x1c0>)
 800db86:	f001 ff47 	bl	800fa18 <strtof>
 800db8a:	eef0 7a40 	vmov.f32	s15, s0
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
      pGSAInfo->vdop = strtof((char *)app[17], NULL);
 800db94:	2100      	movs	r1, #0
 800db96:	480e      	ldr	r0, [pc, #56]	@ (800dbd0 <NMEA_ParseGSA+0x1c4>)
 800db98:	f001 ff3e 	bl	800fa18 <strtof>
 800db9c:	eef0 7a40 	vmov.f32	s15, s0
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
      pGSAInfo->checksum = nmea_checksum(app[18]);
 800dba6:	480b      	ldr	r0, [pc, #44]	@ (800dbd4 <NMEA_ParseGSA+0x1c8>)
 800dba8:	f7ff fa3c 	bl	800d024 <nmea_checksum>
 800dbac:	4602      	mov	r2, r0
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	661a      	str	r2, [r3, #96]	@ 0x60

      status = PARSE_SUCC;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 800dbb6:	7ffb      	ldrb	r3, [r7, #31]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	372c      	adds	r7, #44	@ 0x2c
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd90      	pop	{r4, r7, pc}
 800dbc0:	20005d0c 	.word	0x20005d0c
 800dbc4:	20005d6c 	.word	0x20005d6c
 800dbc8:	20005fdc 	.word	0x20005fdc
 800dbcc:	2000600c 	.word	0x2000600c
 800dbd0:	2000603c 	.word	0x2000603c
 800dbd4:	2000606c 	.word	0x2000606c

0800dbd8 <NMEA_ParseGSV>:

ParseStatus_t NMEA_ParseGSV(GSV_Info_t *pGSVInfo, uint8_t NMEA[])
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b08a      	sub	sp, #40	@ 0x28
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  int8_t app_idx;
  int32_t gsv_idx = 0;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	627b      	str	r3, [r7, #36]	@ 0x24
  int32_t new_field;
  BOOL valid_gsv_msg = FALSE;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	61fb      	str	r3, [r7, #28]
  
  ParseStatus_t status = PARSE_FAIL;
 800dbea:	2301      	movs	r3, #1
 800dbec:	76fb      	strb	r3, [r7, #27]

  if(NMEA != NULL)
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f000 811f 	beq.w	800de34 <NMEA_ParseGSV+0x25c>
  {

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	76bb      	strb	r3, [r7, #26]
 800dbfa:	e012      	b.n	800dc22 <NMEA_ParseGSV+0x4a>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800dbfc:	f997 201a 	ldrsb.w	r2, [r7, #26]
 800dc00:	4613      	mov	r3, r2
 800dc02:	005b      	lsls	r3, r3, #1
 800dc04:	4413      	add	r3, r2
 800dc06:	011b      	lsls	r3, r3, #4
 800dc08:	4a8d      	ldr	r2, [pc, #564]	@ (800de40 <NMEA_ParseGSV+0x268>)
 800dc0a:	4413      	add	r3, r2
 800dc0c:	2230      	movs	r2, #48	@ 0x30
 800dc0e:	2100      	movs	r1, #0
 800dc10:	4618      	mov	r0, r3
 800dc12:	f002 fed4 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800dc16:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	76bb      	strb	r3, [r7, #26]
 800dc22:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dc26:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc28:	dde8      	ble.n	800dbfc <NMEA_ParseGSV+0x24>
    }
    
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	617b      	str	r3, [r7, #20]
 800dc2e:	2300      	movs	r3, #0
 800dc30:	613b      	str	r3, [r7, #16]
 800dc32:	2300      	movs	r3, #0
 800dc34:	60fb      	str	r3, [r7, #12]
 800dc36:	e03f      	b.n	800dcb8 <NMEA_ParseGSV+0xe0>
    {
      new_field = 0;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	623b      	str	r3, [r7, #32]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	4413      	add	r3, r2
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	2b2c      	cmp	r3, #44	@ 0x2c
 800dc46:	d005      	beq.n	800dc54 <NMEA_ParseGSV+0x7c>
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc52:	d119      	bne.n	800dc88 <NMEA_ParseGSV+0xb0>
      {
        app[j][k] = (uint8_t)'\0';
 800dc54:	497a      	ldr	r1, [pc, #488]	@ (800de40 <NMEA_ParseGSV+0x268>)
 800dc56:	693a      	ldr	r2, [r7, #16]
 800dc58:	4613      	mov	r3, r2
 800dc5a:	005b      	lsls	r3, r3, #1
 800dc5c:	4413      	add	r3, r2
 800dc5e:	011b      	lsls	r3, r3, #4
 800dc60:	18ca      	adds	r2, r1, r3
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	4413      	add	r3, r2
 800dc66:	2200      	movs	r2, #0
 800dc68:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	623b      	str	r3, [r7, #32]
        
        if (NMEA_CheckGSVMsg((char *)app[0]) == 0)
 800dc6e:	4874      	ldr	r0, [pc, #464]	@ (800de40 <NMEA_ParseGSV+0x268>)
 800dc70:	f7fe fed8 	bl	800ca24 <NMEA_CheckGSVMsg>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d125      	bne.n	800dcc6 <NMEA_ParseGSV+0xee>
        {
          j++;
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	613b      	str	r3, [r7, #16]
          k = 0;
 800dc80:	2300      	movs	r3, #0
 800dc82:	60fb      	str	r3, [r7, #12]
          valid_gsv_msg = TRUE;
 800dc84:	2301      	movs	r3, #1
 800dc86:	61fb      	str	r3, [r7, #28]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800dc88:	6a3b      	ldr	r3, [r7, #32]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d111      	bne.n	800dcb2 <NMEA_ParseGSV+0xda>
      {
        app[j][k] = NMEA[i];
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	683a      	ldr	r2, [r7, #0]
 800dc92:	4413      	add	r3, r2
 800dc94:	7818      	ldrb	r0, [r3, #0]
 800dc96:	496a      	ldr	r1, [pc, #424]	@ (800de40 <NMEA_ParseGSV+0x268>)
 800dc98:	693a      	ldr	r2, [r7, #16]
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	005b      	lsls	r3, r3, #1
 800dc9e:	4413      	add	r3, r2
 800dca0:	011b      	lsls	r3, r3, #4
 800dca2:	18ca      	adds	r2, r1, r3
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	4413      	add	r3, r2
 800dca8:	4602      	mov	r2, r0
 800dcaa:	701a      	strb	r2, [r3, #0]
        k++;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	60fb      	str	r3, [r7, #12]
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	617b      	str	r3, [r7, #20]
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	2b0a      	cmp	r3, #10
 800dcc2:	d1b9      	bne.n	800dc38 <NMEA_ParseGSV+0x60>
 800dcc4:	e000      	b.n	800dcc8 <NMEA_ParseGSV+0xf0>
          break;
 800dcc6:	bf00      	nop
      }
    }

    if (valid_gsv_msg == TRUE)
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	f040 80b2 	bne.w	800de34 <NMEA_ParseGSV+0x25c>
    {
      NMEA_ResetGSVMsg(pGSVInfo);
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7fe fef5 	bl	800cac0 <NMEA_ResetGSVMsg>

      (void)strncpy((char *)pGSVInfo->constellation, (char *)app[0], MAX_STR_LEN);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2220      	movs	r2, #32
 800dcda:	4959      	ldr	r1, [pc, #356]	@ (800de40 <NMEA_ParseGSV+0x268>)
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f002 fe88 	bl	80109f2 <strncpy>
      pGSVInfo->amount = strtol((char *)app[1], NULL, BASE);
 800dce2:	220a      	movs	r2, #10
 800dce4:	2100      	movs	r1, #0
 800dce6:	4857      	ldr	r0, [pc, #348]	@ (800de44 <NMEA_ParseGSV+0x26c>)
 800dce8:	f001 ff74 	bl	800fbd4 <strtol>
 800dcec:	4603      	mov	r3, r0
 800dcee:	b21a      	sxth	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	841a      	strh	r2, [r3, #32]
      pGSVInfo->number = strtol((char *)app[2], NULL, BASE);
 800dcf4:	220a      	movs	r2, #10
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	4853      	ldr	r0, [pc, #332]	@ (800de48 <NMEA_ParseGSV+0x270>)
 800dcfa:	f001 ff6b 	bl	800fbd4 <strtol>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	b21a      	sxth	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	845a      	strh	r2, [r3, #34]	@ 0x22
      pGSVInfo->tot_sats = strtol((char *)app[3], NULL, BASE);
 800dd06:	220a      	movs	r2, #10
 800dd08:	2100      	movs	r1, #0
 800dd0a:	4850      	ldr	r0, [pc, #320]	@ (800de4c <NMEA_ParseGSV+0x274>)
 800dd0c:	f001 ff62 	bl	800fbd4 <strtol>
 800dd10:	4603      	mov	r3, r0
 800dd12:	b21a      	sxth	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	849a      	strh	r2, [r3, #36]	@ 0x24
      app_idx = 4;
 800dd18:	2304      	movs	r3, #4
 800dd1a:	72bb      	strb	r3, [r7, #10]
      for (int8_t i = 1; i <= GSV_MSG_SATS; i++)
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	72fb      	strb	r3, [r7, #11]
 800dd20:	e081      	b.n	800de26 <NMEA_ParseGSV+0x24e>
      {
        pGSVInfo->gsv_sat_i[gsv_idx].prn = strtol((char *)app[app_idx*i], NULL, BASE);
 800dd22:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800dd26:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800dd2a:	fb03 f202 	mul.w	r2, r3, r2
 800dd2e:	4613      	mov	r3, r2
 800dd30:	005b      	lsls	r3, r3, #1
 800dd32:	4413      	add	r3, r2
 800dd34:	011b      	lsls	r3, r3, #4
 800dd36:	4a42      	ldr	r2, [pc, #264]	@ (800de40 <NMEA_ParseGSV+0x268>)
 800dd38:	4413      	add	r3, r2
 800dd3a:	220a      	movs	r2, #10
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f001 ff48 	bl	800fbd4 <strtol>
 800dd44:	4603      	mov	r3, r0
 800dd46:	b219      	sxth	r1, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd4c:	3205      	adds	r2, #5
 800dd4e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
        pGSVInfo->gsv_sat_i[gsv_idx].elev = strtol((char *)app[(app_idx*i)+1], NULL, BASE);
 800dd52:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800dd56:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800dd5a:	fb02 f303 	mul.w	r3, r2, r3
 800dd5e:	1c5a      	adds	r2, r3, #1
 800dd60:	4613      	mov	r3, r2
 800dd62:	005b      	lsls	r3, r3, #1
 800dd64:	4413      	add	r3, r2
 800dd66:	011b      	lsls	r3, r3, #4
 800dd68:	4a35      	ldr	r2, [pc, #212]	@ (800de40 <NMEA_ParseGSV+0x268>)
 800dd6a:	4413      	add	r3, r2
 800dd6c:	220a      	movs	r2, #10
 800dd6e:	2100      	movs	r1, #0
 800dd70:	4618      	mov	r0, r3
 800dd72:	f001 ff2f 	bl	800fbd4 <strtol>
 800dd76:	4603      	mov	r3, r0
 800dd78:	b219      	sxth	r1, r3
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd7e:	3305      	adds	r3, #5
 800dd80:	00db      	lsls	r3, r3, #3
 800dd82:	4413      	add	r3, r2
 800dd84:	460a      	mov	r2, r1
 800dd86:	805a      	strh	r2, [r3, #2]
        pGSVInfo->gsv_sat_i[gsv_idx].azim = strtol((char *)app[(app_idx*i)+2], NULL, BASE);
 800dd88:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800dd8c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800dd90:	fb02 f303 	mul.w	r3, r2, r3
 800dd94:	1c9a      	adds	r2, r3, #2
 800dd96:	4613      	mov	r3, r2
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	4413      	add	r3, r2
 800dd9c:	011b      	lsls	r3, r3, #4
 800dd9e:	4a28      	ldr	r2, [pc, #160]	@ (800de40 <NMEA_ParseGSV+0x268>)
 800dda0:	4413      	add	r3, r2
 800dda2:	220a      	movs	r2, #10
 800dda4:	2100      	movs	r1, #0
 800dda6:	4618      	mov	r0, r3
 800dda8:	f001 ff14 	bl	800fbd4 <strtol>
 800ddac:	4603      	mov	r3, r0
 800ddae:	b219      	sxth	r1, r3
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb4:	3305      	adds	r3, #5
 800ddb6:	00db      	lsls	r3, r3, #3
 800ddb8:	4413      	add	r3, r2
 800ddba:	460a      	mov	r2, r1
 800ddbc:	809a      	strh	r2, [r3, #4]
        pGSVInfo->gsv_sat_i[gsv_idx].cn0 = strtol((char *)app[(app_idx*i)+3], NULL, BASE);
 800ddbe:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800ddc2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800ddc6:	fb02 f303 	mul.w	r3, r2, r3
 800ddca:	1cda      	adds	r2, r3, #3
 800ddcc:	4613      	mov	r3, r2
 800ddce:	005b      	lsls	r3, r3, #1
 800ddd0:	4413      	add	r3, r2
 800ddd2:	011b      	lsls	r3, r3, #4
 800ddd4:	4a1a      	ldr	r2, [pc, #104]	@ (800de40 <NMEA_ParseGSV+0x268>)
 800ddd6:	4413      	add	r3, r2
 800ddd8:	220a      	movs	r2, #10
 800ddda:	2100      	movs	r1, #0
 800dddc:	4618      	mov	r0, r3
 800ddde:	f001 fef9 	bl	800fbd4 <strtol>
 800dde2:	4603      	mov	r3, r0
 800dde4:	b219      	sxth	r1, r3
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddea:	3305      	adds	r3, #5
 800ddec:	00db      	lsls	r3, r3, #3
 800ddee:	4413      	add	r3, r2
 800ddf0:	460a      	mov	r2, r1
 800ddf2:	80da      	strh	r2, [r3, #6]

        if(pGSVInfo->gsv_sat_i[gsv_idx].prn != 0)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddf8:	3205      	adds	r2, #5
 800ddfa:	f933 3032 	ldrsh.w	r3, [r3, r2, lsl #3]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d008      	beq.n	800de14 <NMEA_ParseGSV+0x23c>
        {
          pGSVInfo->current_sats++;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800de08:	b29b      	uxth	r3, r3
 800de0a:	3301      	adds	r3, #1
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	b21a      	sxth	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	84da      	strh	r2, [r3, #38]	@ 0x26
        }
        gsv_idx++;
 800de14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de16:	3301      	adds	r3, #1
 800de18:	627b      	str	r3, [r7, #36]	@ 0x24
      for (int8_t i = 1; i <= GSV_MSG_SATS; i++)
 800de1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	3301      	adds	r3, #1
 800de22:	b2db      	uxtb	r3, r3
 800de24:	72fb      	strb	r3, [r7, #11]
 800de26:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800de2a:	2b04      	cmp	r3, #4
 800de2c:	f77f af79 	ble.w	800dd22 <NMEA_ParseGSV+0x14a>
      }

      status = PARSE_SUCC;
 800de30:	2300      	movs	r3, #0
 800de32:	76fb      	strb	r3, [r7, #27]
    }

  }

  return status;
 800de34:	7efb      	ldrb	r3, [r7, #27]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3728      	adds	r7, #40	@ 0x28
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	20005d0c 	.word	0x20005d0c
 800de44:	20005d3c 	.word	0x20005d3c
 800de48:	20005d6c 	.word	0x20005d6c
 800de4c:	20005d9c 	.word	0x20005d9c

0800de50 <NMEA_ParsePSTMVER>:

ParseStatus_t NMEA_ParsePSTMVER(PSTMVER_Info_t *pPSTMVER, uint8_t NMEA[])
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b088      	sub	sp, #32
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
  int8_t new_field;
  BOOL valid_msg = FALSE;
 800de5a:	2300      	movs	r3, #0
 800de5c:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 800de5e:	2301      	movs	r3, #1
 800de60:	75fb      	strb	r3, [r7, #23]
  
  if(NMEA != NULL)
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d075      	beq.n	800df54 <NMEA_ParsePSTMVER+0x104>
  {
  
    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800de68:	2300      	movs	r3, #0
 800de6a:	75bb      	strb	r3, [r7, #22]
 800de6c:	e012      	b.n	800de94 <NMEA_ParsePSTMVER+0x44>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800de6e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800de72:	4613      	mov	r3, r2
 800de74:	005b      	lsls	r3, r3, #1
 800de76:	4413      	add	r3, r2
 800de78:	011b      	lsls	r3, r3, #4
 800de7a:	4a39      	ldr	r2, [pc, #228]	@ (800df60 <NMEA_ParsePSTMVER+0x110>)
 800de7c:	4413      	add	r3, r2
 800de7e:	2230      	movs	r2, #48	@ 0x30
 800de80:	2100      	movs	r1, #0
 800de82:	4618      	mov	r0, r3
 800de84:	f002 fd9b 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800de88:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	3301      	adds	r3, #1
 800de90:	b2db      	uxtb	r3, r3
 800de92:	75bb      	strb	r3, [r7, #22]
 800de94:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800de98:	2b2f      	cmp	r3, #47	@ 0x2f
 800de9a:	dde8      	ble.n	800de6e <NMEA_ParsePSTMVER+0x1e>
    }
    
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800de9c:	2300      	movs	r3, #0
 800de9e:	613b      	str	r3, [r7, #16]
 800dea0:	2300      	movs	r3, #0
 800dea2:	60fb      	str	r3, [r7, #12]
 800dea4:	2300      	movs	r3, #0
 800dea6:	60bb      	str	r3, [r7, #8]
 800dea8:	e041      	b.n	800df2e <NMEA_ParsePSTMVER+0xde>
    {
      new_field = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	77fb      	strb	r3, [r7, #31]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	683a      	ldr	r2, [r7, #0]
 800deb2:	4413      	add	r3, r2
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	2b2c      	cmp	r3, #44	@ 0x2c
 800deb8:	d005      	beq.n	800dec6 <NMEA_ParsePSTMVER+0x76>
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	683a      	ldr	r2, [r7, #0]
 800debe:	4413      	add	r3, r2
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dec4:	d11a      	bne.n	800defc <NMEA_ParsePSTMVER+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 800dec6:	4926      	ldr	r1, [pc, #152]	@ (800df60 <NMEA_ParsePSTMVER+0x110>)
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	4613      	mov	r3, r2
 800decc:	005b      	lsls	r3, r3, #1
 800dece:	4413      	add	r3, r2
 800ded0:	011b      	lsls	r3, r3, #4
 800ded2:	18ca      	adds	r2, r1, r3
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	4413      	add	r3, r2
 800ded8:	2200      	movs	r2, #0
 800deda:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800dedc:	2301      	movs	r3, #1
 800dede:	77fb      	strb	r3, [r7, #31]
        
        if (strcmp((char *)app[0], "$PSTMVER") == 0)
 800dee0:	4920      	ldr	r1, [pc, #128]	@ (800df64 <NMEA_ParsePSTMVER+0x114>)
 800dee2:	481f      	ldr	r0, [pc, #124]	@ (800df60 <NMEA_ParsePSTMVER+0x110>)
 800dee4:	f7f2 f974 	bl	80001d0 <strcmp>
 800dee8:	4603      	mov	r3, r0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d126      	bne.n	800df3c <NMEA_ParsePSTMVER+0xec>
        {
          j++;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	3301      	adds	r3, #1
 800def2:	60fb      	str	r3, [r7, #12]
          k = 0;
 800def4:	2300      	movs	r3, #0
 800def6:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 800def8:	2301      	movs	r3, #1
 800defa:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800defc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d111      	bne.n	800df28 <NMEA_ParsePSTMVER+0xd8>
      {
        app[j][k] = NMEA[i];
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	683a      	ldr	r2, [r7, #0]
 800df08:	4413      	add	r3, r2
 800df0a:	7818      	ldrb	r0, [r3, #0]
 800df0c:	4914      	ldr	r1, [pc, #80]	@ (800df60 <NMEA_ParsePSTMVER+0x110>)
 800df0e:	68fa      	ldr	r2, [r7, #12]
 800df10:	4613      	mov	r3, r2
 800df12:	005b      	lsls	r3, r3, #1
 800df14:	4413      	add	r3, r2
 800df16:	011b      	lsls	r3, r3, #4
 800df18:	18ca      	adds	r2, r1, r3
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	4413      	add	r3, r2
 800df1e:	4602      	mov	r2, r0
 800df20:	701a      	strb	r2, [r3, #0]
        k++;
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	3301      	adds	r3, #1
 800df26:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	3301      	adds	r3, #1
 800df2c:	613b      	str	r3, [r7, #16]
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	683a      	ldr	r2, [r7, #0]
 800df32:	4413      	add	r3, r2
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	2b0a      	cmp	r3, #10
 800df38:	d1b7      	bne.n	800deaa <NMEA_ParsePSTMVER+0x5a>
 800df3a:	e000      	b.n	800df3e <NMEA_ParsePSTMVER+0xee>
          break;
 800df3c:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d107      	bne.n	800df54 <NMEA_ParsePSTMVER+0x104>
    {
      (void)strncpy((char *)pPSTMVER->pstmver_string, (char *)app[1], MAX_STR_LEN);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2220      	movs	r2, #32
 800df48:	4907      	ldr	r1, [pc, #28]	@ (800df68 <NMEA_ParsePSTMVER+0x118>)
 800df4a:	4618      	mov	r0, r3
 800df4c:	f002 fd51 	bl	80109f2 <strncpy>

      status = PARSE_SUCC;
 800df50:	2300      	movs	r3, #0
 800df52:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800df54:	7dfb      	ldrb	r3, [r7, #23]
}
 800df56:	4618      	mov	r0, r3
 800df58:	3720      	adds	r7, #32
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop
 800df60:	20005d0c 	.word	0x20005d0c
 800df64:	08015568 	.word	0x08015568
 800df68:	20005d3c 	.word	0x20005d3c

0800df6c <NMEA_ParsePSTMGeofence>:

ParseStatus_t NMEA_ParsePSTMGeofence(Geofence_Info_t *pGeofence, uint8_t NMEA[])
{
 800df6c:	b590      	push	{r4, r7, lr}
 800df6e:	b08b      	sub	sp, #44	@ 0x2c
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 800df76:	2300      	movs	r3, #0
 800df78:	623b      	str	r3, [r7, #32]
  
  ParseStatus_t status = PARSE_FAIL;
 800df7a:	2301      	movs	r3, #1
 800df7c:	77fb      	strb	r3, [r7, #31]

  if(NMEA != NULL)
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	f000 8141 	beq.w	800e208 <NMEA_ParsePSTMGeofence+0x29c>
  {

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800df86:	2300      	movs	r3, #0
 800df88:	77bb      	strb	r3, [r7, #30]
 800df8a:	e012      	b.n	800dfb2 <NMEA_ParsePSTMGeofence+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800df8c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800df90:	4613      	mov	r3, r2
 800df92:	005b      	lsls	r3, r3, #1
 800df94:	4413      	add	r3, r2
 800df96:	011b      	lsls	r3, r3, #4
 800df98:	4a9e      	ldr	r2, [pc, #632]	@ (800e214 <NMEA_ParsePSTMGeofence+0x2a8>)
 800df9a:	4413      	add	r3, r2
 800df9c:	2230      	movs	r2, #48	@ 0x30
 800df9e:	2100      	movs	r1, #0
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f002 fd0c 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800dfa6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	3301      	adds	r3, #1
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	77bb      	strb	r3, [r7, #30]
 800dfb2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800dfb6:	2b2f      	cmp	r3, #47	@ 0x2f
 800dfb8:	dde8      	ble.n	800df8c <NMEA_ParsePSTMGeofence+0x20>
    }
    
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800dfba:	2300      	movs	r3, #0
 800dfbc:	61bb      	str	r3, [r7, #24]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	617b      	str	r3, [r7, #20]
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	613b      	str	r3, [r7, #16]
 800dfc6:	e03f      	b.n	800e048 <NMEA_ParsePSTMGeofence+0xdc>
    {
      new_field = 0;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	627b      	str	r3, [r7, #36]	@ 0x24

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	683a      	ldr	r2, [r7, #0]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	2b2c      	cmp	r3, #44	@ 0x2c
 800dfd6:	d005      	beq.n	800dfe4 <NMEA_ParsePSTMGeofence+0x78>
 800dfd8:	69bb      	ldr	r3, [r7, #24]
 800dfda:	683a      	ldr	r2, [r7, #0]
 800dfdc:	4413      	add	r3, r2
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfe2:	d119      	bne.n	800e018 <NMEA_ParsePSTMGeofence+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 800dfe4:	498b      	ldr	r1, [pc, #556]	@ (800e214 <NMEA_ParsePSTMGeofence+0x2a8>)
 800dfe6:	697a      	ldr	r2, [r7, #20]
 800dfe8:	4613      	mov	r3, r2
 800dfea:	005b      	lsls	r3, r3, #1
 800dfec:	4413      	add	r3, r2
 800dfee:	011b      	lsls	r3, r3, #4
 800dff0:	18ca      	adds	r2, r1, r3
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	4413      	add	r3, r2
 800dff6:	2200      	movs	r2, #0
 800dff8:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800dffa:	2301      	movs	r3, #1
 800dffc:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (NMEA_CheckGeofenceMsg((char *)app[0]) == 0)
 800dffe:	4885      	ldr	r0, [pc, #532]	@ (800e214 <NMEA_ParsePSTMGeofence+0x2a8>)
 800e000:	f7fe fd92 	bl	800cb28 <NMEA_CheckGeofenceMsg>
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d125      	bne.n	800e056 <NMEA_ParsePSTMGeofence+0xea>
        {
          j++;
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	3301      	adds	r3, #1
 800e00e:	617b      	str	r3, [r7, #20]
          k = 0;
 800e010:	2300      	movs	r3, #0
 800e012:	613b      	str	r3, [r7, #16]
          valid_msg = TRUE;
 800e014:	2301      	movs	r3, #1
 800e016:	623b      	str	r3, [r7, #32]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800e018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d111      	bne.n	800e042 <NMEA_ParsePSTMGeofence+0xd6>
      {
        app[j][k] = NMEA[i];
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	4413      	add	r3, r2
 800e024:	7818      	ldrb	r0, [r3, #0]
 800e026:	497b      	ldr	r1, [pc, #492]	@ (800e214 <NMEA_ParsePSTMGeofence+0x2a8>)
 800e028:	697a      	ldr	r2, [r7, #20]
 800e02a:	4613      	mov	r3, r2
 800e02c:	005b      	lsls	r3, r3, #1
 800e02e:	4413      	add	r3, r2
 800e030:	011b      	lsls	r3, r3, #4
 800e032:	18ca      	adds	r2, r1, r3
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	4413      	add	r3, r2
 800e038:	4602      	mov	r2, r0
 800e03a:	701a      	strb	r2, [r3, #0]
        k++;
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	3301      	adds	r3, #1
 800e040:	613b      	str	r3, [r7, #16]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800e042:	69bb      	ldr	r3, [r7, #24]
 800e044:	3301      	adds	r3, #1
 800e046:	61bb      	str	r3, [r7, #24]
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	683a      	ldr	r2, [r7, #0]
 800e04c:	4413      	add	r3, r2
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	2b0a      	cmp	r3, #10
 800e052:	d1b9      	bne.n	800dfc8 <NMEA_ParsePSTMGeofence+0x5c>
 800e054:	e000      	b.n	800e058 <NMEA_ParsePSTMGeofence+0xec>
          break;
 800e056:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 800e058:	6a3b      	ldr	r3, [r7, #32]
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	f040 80d4 	bne.w	800e208 <NMEA_ParsePSTMGeofence+0x29c>
    {
      /* Enabling */
      if (strcmp((char *)app[0], "$PSTMCFGGEOFENCEOK") == 0)
 800e060:	496d      	ldr	r1, [pc, #436]	@ (800e218 <NMEA_ParsePSTMGeofence+0x2ac>)
 800e062:	486c      	ldr	r0, [pc, #432]	@ (800e214 <NMEA_ParsePSTMGeofence+0x2a8>)
 800e064:	f7f2 f8b4 	bl	80001d0 <strcmp>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d106      	bne.n	800e07c <NMEA_ParsePSTMGeofence+0x110>
      {
        pGeofence->op = GNSS_FEATURE_EN_MSG;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	701a      	strb	r2, [r3, #0]
        pGeofence->result = GNSS_OP_OK;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	705a      	strb	r2, [r3, #1]
 800e07a:	e0c3      	b.n	800e204 <NMEA_ParsePSTMGeofence+0x298>
      }
      else if (strcmp((char *)app[0], "$PSTMCFGGEOFENCEERROR") == 0)
 800e07c:	4967      	ldr	r1, [pc, #412]	@ (800e21c <NMEA_ParsePSTMGeofence+0x2b0>)
 800e07e:	4865      	ldr	r0, [pc, #404]	@ (800e214 <NMEA_ParsePSTMGeofence+0x2a8>)
 800e080:	f7f2 f8a6 	bl	80001d0 <strcmp>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d106      	bne.n	800e098 <NMEA_ParsePSTMGeofence+0x12c>
      {
        pGeofence->op = GNSS_FEATURE_EN_MSG;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2200      	movs	r2, #0
 800e08e:	701a      	strb	r2, [r3, #0]
        pGeofence->result = GNSS_OP_ERROR;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2201      	movs	r2, #1
 800e094:	705a      	strb	r2, [r3, #1]
 800e096:	e0b5      	b.n	800e204 <NMEA_ParsePSTMGeofence+0x298>
      }
      /* Configuring */
      else if (strcmp((char *)app[0], "$PSTMGEOFENCECFGOK") == 0)
 800e098:	4961      	ldr	r1, [pc, #388]	@ (800e220 <NMEA_ParsePSTMGeofence+0x2b4>)
 800e09a:	485e      	ldr	r0, [pc, #376]	@ (800e214 <NMEA_ParsePSTMGeofence+0x2a8>)
 800e09c:	f7f2 f898 	bl	80001d0 <strcmp>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d106      	bne.n	800e0b4 <NMEA_ParsePSTMGeofence+0x148>
      {
        pGeofence->op = GNSS_GEOFENCE_CFG_MSG;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	701a      	strb	r2, [r3, #0]
        pGeofence->result = GNSS_OP_OK;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	705a      	strb	r2, [r3, #1]
 800e0b2:	e0a7      	b.n	800e204 <NMEA_ParsePSTMGeofence+0x298>
      }
      else if (strcmp((char *)app[0], "$PSTMGEOFENCECFGERROR") == 0)
 800e0b4:	495b      	ldr	r1, [pc, #364]	@ (800e224 <NMEA_ParsePSTMGeofence+0x2b8>)
 800e0b6:	4857      	ldr	r0, [pc, #348]	@ (800e214 <NMEA_ParsePSTMGeofence+0x2a8>)
 800e0b8:	f7f2 f88a 	bl	80001d0 <strcmp>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d106      	bne.n	800e0d0 <NMEA_ParsePSTMGeofence+0x164>
      {
        pGeofence->op = GNSS_GEOFENCE_STATUS_MSG;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2202      	movs	r2, #2
 800e0c6:	701a      	strb	r2, [r3, #0]
        pGeofence->result = GNSS_OP_ERROR;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	705a      	strb	r2, [r3, #1]
 800e0ce:	e099      	b.n	800e204 <NMEA_ParsePSTMGeofence+0x298>
      }
      /* Querying Status */
      else if (strcmp((char *)app[0], "$PSTMGEOFENCESTATUS") == 0)
 800e0d0:	4955      	ldr	r1, [pc, #340]	@ (800e228 <NMEA_ParsePSTMGeofence+0x2bc>)
 800e0d2:	4850      	ldr	r0, [pc, #320]	@ (800e214 <NMEA_ParsePSTMGeofence+0x2a8>)
 800e0d4:	f7f2 f87c 	bl	80001d0 <strcmp>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d12d      	bne.n	800e13a <NMEA_ParsePSTMGeofence+0x1ce>
      {
        pGeofence->op = GNSS_GEOFENCE_STATUS_MSG;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2202      	movs	r2, #2
 800e0e2:	701a      	strb	r2, [r3, #0]
        scan_timestamp_time(app[1], &pGeofence->timestamp);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	3302      	adds	r3, #2
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4850      	ldr	r0, [pc, #320]	@ (800e22c <NMEA_ParsePSTMGeofence+0x2c0>)
 800e0ec:	f7ff f844 	bl	800d178 <scan_timestamp_time>
        scan_timestamp_date(app[2], &pGeofence->timestamp);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	3302      	adds	r3, #2
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	484e      	ldr	r0, [pc, #312]	@ (800e230 <NMEA_ParsePSTMGeofence+0x2c4>)
 800e0f8:	f7ff f862 	bl	800d1c0 <scan_timestamp_date>

        int32_t *geofence_status = pGeofence->status;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	3338      	adds	r3, #56	@ 0x38
 800e100:	60bb      	str	r3, [r7, #8]
        for(uint8_t i = 0; i < MAX_GEOFENCES_NUM; i++)
 800e102:	2300      	movs	r3, #0
 800e104:	73fb      	strb	r3, [r7, #15]
 800e106:	e014      	b.n	800e132 <NMEA_ParsePSTMGeofence+0x1c6>
        {
          *(&geofence_status[i]) = strtol((char *)app[3U+i], NULL, BASE);
 800e108:	7bfb      	ldrb	r3, [r7, #15]
 800e10a:	1cda      	adds	r2, r3, #3
 800e10c:	4613      	mov	r3, r2
 800e10e:	005b      	lsls	r3, r3, #1
 800e110:	4413      	add	r3, r2
 800e112:	011b      	lsls	r3, r3, #4
 800e114:	4a3f      	ldr	r2, [pc, #252]	@ (800e214 <NMEA_ParsePSTMGeofence+0x2a8>)
 800e116:	1898      	adds	r0, r3, r2
 800e118:	7bfb      	ldrb	r3, [r7, #15]
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	68ba      	ldr	r2, [r7, #8]
 800e11e:	18d4      	adds	r4, r2, r3
 800e120:	220a      	movs	r2, #10
 800e122:	2100      	movs	r1, #0
 800e124:	f001 fd56 	bl	800fbd4 <strtol>
 800e128:	4603      	mov	r3, r0
 800e12a:	6023      	str	r3, [r4, #0]
        for(uint8_t i = 0; i < MAX_GEOFENCES_NUM; i++)
 800e12c:	7bfb      	ldrb	r3, [r7, #15]
 800e12e:	3301      	adds	r3, #1
 800e130:	73fb      	strb	r3, [r7, #15]
 800e132:	7bfb      	ldrb	r3, [r7, #15]
 800e134:	2b07      	cmp	r3, #7
 800e136:	d9e7      	bls.n	800e108 <NMEA_ParsePSTMGeofence+0x19c>
 800e138:	e064      	b.n	800e204 <NMEA_ParsePSTMGeofence+0x298>
        }
      }
      /* Alarm Msg */
      else if (strcmp((char *)app[0], "$PSTMGEOFENCE") == 0)
 800e13a:	493e      	ldr	r1, [pc, #248]	@ (800e234 <NMEA_ParsePSTMGeofence+0x2c8>)
 800e13c:	4835      	ldr	r0, [pc, #212]	@ (800e214 <NMEA_ParsePSTMGeofence+0x2a8>)
 800e13e:	f7f2 f847 	bl	80001d0 <strcmp>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d15d      	bne.n	800e204 <NMEA_ParsePSTMGeofence+0x298>
      {
        pGeofence->op = GNSS_GEOFENCE_ALARM_MSG;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2203      	movs	r2, #3
 800e14c:	701a      	strb	r2, [r3, #0]
        scan_timestamp_time(app[1], &pGeofence->timestamp);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	3302      	adds	r3, #2
 800e152:	4619      	mov	r1, r3
 800e154:	4835      	ldr	r0, [pc, #212]	@ (800e22c <NMEA_ParsePSTMGeofence+0x2c0>)
 800e156:	f7ff f80f 	bl	800d178 <scan_timestamp_time>
        scan_timestamp_date(app[2], &pGeofence->timestamp);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	3302      	adds	r3, #2
 800e15e:	4619      	mov	r1, r3
 800e160:	4833      	ldr	r0, [pc, #204]	@ (800e230 <NMEA_ParsePSTMGeofence+0x2c4>)
 800e162:	f7ff f82d 	bl	800d1c0 <scan_timestamp_date>
        pGeofence->idAlarm = strtol((char *)app[3], NULL, BASE);
 800e166:	220a      	movs	r2, #10
 800e168:	2100      	movs	r1, #0
 800e16a:	4833      	ldr	r0, [pc, #204]	@ (800e238 <NMEA_ParsePSTMGeofence+0x2cc>)
 800e16c:	f001 fd32 	bl	800fbd4 <strtol>
 800e170:	4603      	mov	r3, r0
 800e172:	b21a      	sxth	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	81da      	strh	r2, [r3, #14]
        pGeofence->coords.lat = strtod((char *)app[4], NULL);
 800e178:	2100      	movs	r1, #0
 800e17a:	4830      	ldr	r0, [pc, #192]	@ (800e23c <NMEA_ParsePSTMGeofence+0x2d0>)
 800e17c:	f001 fc40 	bl	800fa00 <strtod>
 800e180:	eeb0 7a40 	vmov.f32	s14, s0
 800e184:	eef0 7a60 	vmov.f32	s15, s1
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	ed83 7b04 	vstr	d7, [r3, #16]
        pGeofence->coords.lon = strtod((char *)app[5], NULL);
 800e18e:	2100      	movs	r1, #0
 800e190:	482b      	ldr	r0, [pc, #172]	@ (800e240 <NMEA_ParsePSTMGeofence+0x2d4>)
 800e192:	f001 fc35 	bl	800fa00 <strtod>
 800e196:	eeb0 7a40 	vmov.f32	s14, s0
 800e19a:	eef0 7a60 	vmov.f32	s15, s1
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	ed83 7b06 	vstr	d7, [r3, #24]
        pGeofence->coords.radius = strtod((char *)app[6], NULL);
 800e1a4:	2100      	movs	r1, #0
 800e1a6:	4827      	ldr	r0, [pc, #156]	@ (800e244 <NMEA_ParsePSTMGeofence+0x2d8>)
 800e1a8:	f001 fc2a 	bl	800fa00 <strtod>
 800e1ac:	eeb0 7a40 	vmov.f32	s14, s0
 800e1b0:	eef0 7a60 	vmov.f32	s15, s1
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	ed83 7b08 	vstr	d7, [r3, #32]
        pGeofence->coords.distance = strtod((char *)app[7], NULL);
 800e1ba:	2100      	movs	r1, #0
 800e1bc:	4822      	ldr	r0, [pc, #136]	@ (800e248 <NMEA_ParsePSTMGeofence+0x2dc>)
 800e1be:	f001 fc1f 	bl	800fa00 <strtod>
 800e1c2:	eeb0 7a40 	vmov.f32	s14, s0
 800e1c6:	eef0 7a60 	vmov.f32	s15, s1
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        pGeofence->coords.tolerance = strtod((char *)app[8], NULL);
 800e1d0:	2100      	movs	r1, #0
 800e1d2:	481e      	ldr	r0, [pc, #120]	@ (800e24c <NMEA_ParsePSTMGeofence+0x2e0>)
 800e1d4:	f001 fc14 	bl	800fa00 <strtod>
 800e1d8:	eeb0 7a40 	vmov.f32	s14, s0
 800e1dc:	eef0 7a60 	vmov.f32	s15, s1
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        pGeofence->status[pGeofence->idAlarm] = strtol((char *)app[9], NULL, BASE);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e1ec:	461c      	mov	r4, r3
 800e1ee:	220a      	movs	r2, #10
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	4817      	ldr	r0, [pc, #92]	@ (800e250 <NMEA_ParsePSTMGeofence+0x2e4>)
 800e1f4:	f001 fcee 	bl	800fbd4 <strtol>
 800e1f8:	4601      	mov	r1, r0
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f104 020e 	add.w	r2, r4, #14
 800e200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 800e204:	2300      	movs	r3, #0
 800e206:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 800e208:	7ffb      	ldrb	r3, [r7, #31]
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	372c      	adds	r7, #44	@ 0x2c
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd90      	pop	{r4, r7, pc}
 800e212:	bf00      	nop
 800e214:	20005d0c 	.word	0x20005d0c
 800e218:	080151dc 	.word	0x080151dc
 800e21c:	080151f0 	.word	0x080151f0
 800e220:	08015208 	.word	0x08015208
 800e224:	0801521c 	.word	0x0801521c
 800e228:	08015234 	.word	0x08015234
 800e22c:	20005d3c 	.word	0x20005d3c
 800e230:	20005d6c 	.word	0x20005d6c
 800e234:	08015248 	.word	0x08015248
 800e238:	20005d9c 	.word	0x20005d9c
 800e23c:	20005dcc 	.word	0x20005dcc
 800e240:	20005dfc 	.word	0x20005dfc
 800e244:	20005e2c 	.word	0x20005e2c
 800e248:	20005e5c 	.word	0x20005e5c
 800e24c:	20005e8c 	.word	0x20005e8c
 800e250:	20005ebc 	.word	0x20005ebc

0800e254 <NMEA_ParsePSTMOdo>:

ParseStatus_t NMEA_ParsePSTMOdo(Odometer_Info_t *pOdo, uint8_t NMEA[])
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b088      	sub	sp, #32
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 800e25e:	2300      	movs	r3, #0
 800e260:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 800e262:	2301      	movs	r3, #1
 800e264:	75fb      	strb	r3, [r7, #23]

  if(NMEA != NULL)
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f000 80c1 	beq.w	800e3f0 <NMEA_ParsePSTMOdo+0x19c>
  {

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800e26e:	2300      	movs	r3, #0
 800e270:	75bb      	strb	r3, [r7, #22]
 800e272:	e012      	b.n	800e29a <NMEA_ParsePSTMOdo+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800e274:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800e278:	4613      	mov	r3, r2
 800e27a:	005b      	lsls	r3, r3, #1
 800e27c:	4413      	add	r3, r2
 800e27e:	011b      	lsls	r3, r3, #4
 800e280:	4a5e      	ldr	r2, [pc, #376]	@ (800e3fc <NMEA_ParsePSTMOdo+0x1a8>)
 800e282:	4413      	add	r3, r2
 800e284:	2230      	movs	r2, #48	@ 0x30
 800e286:	2100      	movs	r1, #0
 800e288:	4618      	mov	r0, r3
 800e28a:	f002 fb98 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800e28e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800e292:	b2db      	uxtb	r3, r3
 800e294:	3301      	adds	r3, #1
 800e296:	b2db      	uxtb	r3, r3
 800e298:	75bb      	strb	r3, [r7, #22]
 800e29a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800e29e:	2b2f      	cmp	r3, #47	@ 0x2f
 800e2a0:	dde8      	ble.n	800e274 <NMEA_ParsePSTMOdo+0x20>
    }
    
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	613b      	str	r3, [r7, #16]
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	60fb      	str	r3, [r7, #12]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	60bb      	str	r3, [r7, #8]
 800e2ae:	e03f      	b.n	800e330 <NMEA_ParsePSTMOdo+0xdc>
    {
      new_field = 0;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	683a      	ldr	r2, [r7, #0]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	2b2c      	cmp	r3, #44	@ 0x2c
 800e2be:	d005      	beq.n	800e2cc <NMEA_ParsePSTMOdo+0x78>
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	683a      	ldr	r2, [r7, #0]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2ca:	d119      	bne.n	800e300 <NMEA_ParsePSTMOdo+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 800e2cc:	494b      	ldr	r1, [pc, #300]	@ (800e3fc <NMEA_ParsePSTMOdo+0x1a8>)
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	4413      	add	r3, r2
 800e2d6:	011b      	lsls	r3, r3, #4
 800e2d8:	18ca      	adds	r2, r1, r3
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	4413      	add	r3, r2
 800e2de:	2200      	movs	r2, #0
 800e2e0:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	61fb      	str	r3, [r7, #28]
        
        if (NMEA_CheckOdoMsg((char *)app[0]) == 0)
 800e2e6:	4845      	ldr	r0, [pc, #276]	@ (800e3fc <NMEA_ParsePSTMOdo+0x1a8>)
 800e2e8:	f7fe fc76 	bl	800cbd8 <NMEA_CheckOdoMsg>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d125      	bne.n	800e33e <NMEA_ParsePSTMOdo+0xea>
        {
          j++;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	60fb      	str	r3, [r7, #12]
          k = 0;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d111      	bne.n	800e32a <NMEA_ParsePSTMOdo+0xd6>
      {
        app[j][k] = NMEA[i];
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	683a      	ldr	r2, [r7, #0]
 800e30a:	4413      	add	r3, r2
 800e30c:	7818      	ldrb	r0, [r3, #0]
 800e30e:	493b      	ldr	r1, [pc, #236]	@ (800e3fc <NMEA_ParsePSTMOdo+0x1a8>)
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	4613      	mov	r3, r2
 800e314:	005b      	lsls	r3, r3, #1
 800e316:	4413      	add	r3, r2
 800e318:	011b      	lsls	r3, r3, #4
 800e31a:	18ca      	adds	r2, r1, r3
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	4413      	add	r3, r2
 800e320:	4602      	mov	r2, r0
 800e322:	701a      	strb	r2, [r3, #0]
        k++;
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	3301      	adds	r3, #1
 800e328:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	3301      	adds	r3, #1
 800e32e:	613b      	str	r3, [r7, #16]
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	683a      	ldr	r2, [r7, #0]
 800e334:	4413      	add	r3, r2
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	2b0a      	cmp	r3, #10
 800e33a:	d1b9      	bne.n	800e2b0 <NMEA_ParsePSTMOdo+0x5c>
 800e33c:	e000      	b.n	800e340 <NMEA_ParsePSTMOdo+0xec>
          break;
 800e33e:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	2b01      	cmp	r3, #1
 800e344:	d154      	bne.n	800e3f0 <NMEA_ParsePSTMOdo+0x19c>
    {
      /* Enabling */
      if (strcmp((char *)app[0], "$PSTMCFGODOOK") == 0)
 800e346:	492e      	ldr	r1, [pc, #184]	@ (800e400 <NMEA_ParsePSTMOdo+0x1ac>)
 800e348:	482c      	ldr	r0, [pc, #176]	@ (800e3fc <NMEA_ParsePSTMOdo+0x1a8>)
 800e34a:	f7f1 ff41 	bl	80001d0 <strcmp>
 800e34e:	4603      	mov	r3, r0
 800e350:	2b00      	cmp	r3, #0
 800e352:	d106      	bne.n	800e362 <NMEA_ParsePSTMOdo+0x10e>
      {
        pOdo->op = GNSS_FEATURE_EN_MSG;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	701a      	strb	r2, [r3, #0]
        pOdo->result = GNSS_OP_OK;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	705a      	strb	r2, [r3, #1]
 800e360:	e044      	b.n	800e3ec <NMEA_ParsePSTMOdo+0x198>
      }
      else if (strcmp((char *)app[0], "$PSTMCFGODOERROR") == 0)
 800e362:	4928      	ldr	r1, [pc, #160]	@ (800e404 <NMEA_ParsePSTMOdo+0x1b0>)
 800e364:	4825      	ldr	r0, [pc, #148]	@ (800e3fc <NMEA_ParsePSTMOdo+0x1a8>)
 800e366:	f7f1 ff33 	bl	80001d0 <strcmp>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d106      	bne.n	800e37e <NMEA_ParsePSTMOdo+0x12a>
      {
        pOdo->op = GNSS_FEATURE_EN_MSG;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	701a      	strb	r2, [r3, #0]
        pOdo->result = GNSS_OP_ERROR;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2201      	movs	r2, #1
 800e37a:	705a      	strb	r2, [r3, #1]
 800e37c:	e036      	b.n	800e3ec <NMEA_ParsePSTMOdo+0x198>
      }
      /* Start */
      else if (strcmp((char *)app[0], "$PSTMODOSTARTOK") == 0)
 800e37e:	4922      	ldr	r1, [pc, #136]	@ (800e408 <NMEA_ParsePSTMOdo+0x1b4>)
 800e380:	481e      	ldr	r0, [pc, #120]	@ (800e3fc <NMEA_ParsePSTMOdo+0x1a8>)
 800e382:	f7f1 ff25 	bl	80001d0 <strcmp>
 800e386:	4603      	mov	r3, r0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d106      	bne.n	800e39a <NMEA_ParsePSTMOdo+0x146>
      {
        pOdo->op = GNSS_ODO_START_MSG;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2204      	movs	r2, #4
 800e390:	701a      	strb	r2, [r3, #0]
        pOdo->result = GNSS_OP_OK;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2200      	movs	r2, #0
 800e396:	705a      	strb	r2, [r3, #1]
 800e398:	e028      	b.n	800e3ec <NMEA_ParsePSTMOdo+0x198>
      }
      else if (strcmp((char *)app[0], "$PSTMODOSTARTERROR") == 0)
 800e39a:	491c      	ldr	r1, [pc, #112]	@ (800e40c <NMEA_ParsePSTMOdo+0x1b8>)
 800e39c:	4817      	ldr	r0, [pc, #92]	@ (800e3fc <NMEA_ParsePSTMOdo+0x1a8>)
 800e39e:	f7f1 ff17 	bl	80001d0 <strcmp>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d106      	bne.n	800e3b6 <NMEA_ParsePSTMOdo+0x162>
      {
        pOdo->op = GNSS_ODO_START_MSG;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2204      	movs	r2, #4
 800e3ac:	701a      	strb	r2, [r3, #0]
        pOdo->result = GNSS_OP_ERROR;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	705a      	strb	r2, [r3, #1]
 800e3b4:	e01a      	b.n	800e3ec <NMEA_ParsePSTMOdo+0x198>
      }
      /* Stop */
      else if (strcmp((char *)app[0], "$PSTMODOSTOPOK") == 0)
 800e3b6:	4916      	ldr	r1, [pc, #88]	@ (800e410 <NMEA_ParsePSTMOdo+0x1bc>)
 800e3b8:	4810      	ldr	r0, [pc, #64]	@ (800e3fc <NMEA_ParsePSTMOdo+0x1a8>)
 800e3ba:	f7f1 ff09 	bl	80001d0 <strcmp>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d106      	bne.n	800e3d2 <NMEA_ParsePSTMOdo+0x17e>
      {
        pOdo->op = GNSS_ODO_STOP_MSG;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2205      	movs	r2, #5
 800e3c8:	701a      	strb	r2, [r3, #0]
        pOdo->result = GNSS_OP_OK;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	705a      	strb	r2, [r3, #1]
 800e3d0:	e00c      	b.n	800e3ec <NMEA_ParsePSTMOdo+0x198>
      }
      else if (strcmp((char *)app[0], "$PSTMODOSTOPERROR") == 0)
 800e3d2:	4910      	ldr	r1, [pc, #64]	@ (800e414 <NMEA_ParsePSTMOdo+0x1c0>)
 800e3d4:	4809      	ldr	r0, [pc, #36]	@ (800e3fc <NMEA_ParsePSTMOdo+0x1a8>)
 800e3d6:	f7f1 fefb 	bl	80001d0 <strcmp>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d105      	bne.n	800e3ec <NMEA_ParsePSTMOdo+0x198>
      {
        pOdo->op = GNSS_ODO_STOP_MSG;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2205      	movs	r2, #5
 800e3e4:	701a      	strb	r2, [r3, #0]
        pOdo->result = GNSS_OP_ERROR;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	705a      	strb	r2, [r3, #1]
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800e3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3720      	adds	r7, #32
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	20005d0c 	.word	0x20005d0c
 800e400:	08015270 	.word	0x08015270
 800e404:	08015280 	.word	0x08015280
 800e408:	08015294 	.word	0x08015294
 800e40c:	080152a4 	.word	0x080152a4
 800e410:	080152b8 	.word	0x080152b8
 800e414:	080152c8 	.word	0x080152c8

0800e418 <NMEA_ParsePSTMDatalog>:

ParseStatus_t NMEA_ParsePSTMDatalog(Datalog_Info_t *pDatalog, uint8_t NMEA[])
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b088      	sub	sp, #32
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 800e422:	2300      	movs	r3, #0
 800e424:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 800e426:	2301      	movs	r3, #1
 800e428:	75fb      	strb	r3, [r7, #23]

  if(NMEA != NULL)
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f000 80fa 	beq.w	800e626 <NMEA_ParsePSTMDatalog+0x20e>
  {

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800e432:	2300      	movs	r3, #0
 800e434:	75bb      	strb	r3, [r7, #22]
 800e436:	e012      	b.n	800e45e <NMEA_ParsePSTMDatalog+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800e438:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800e43c:	4613      	mov	r3, r2
 800e43e:	005b      	lsls	r3, r3, #1
 800e440:	4413      	add	r3, r2
 800e442:	011b      	lsls	r3, r3, #4
 800e444:	4a7a      	ldr	r2, [pc, #488]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e446:	4413      	add	r3, r2
 800e448:	2230      	movs	r2, #48	@ 0x30
 800e44a:	2100      	movs	r1, #0
 800e44c:	4618      	mov	r0, r3
 800e44e:	f002 fab6 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800e452:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800e456:	b2db      	uxtb	r3, r3
 800e458:	3301      	adds	r3, #1
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	75bb      	strb	r3, [r7, #22]
 800e45e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800e462:	2b2f      	cmp	r3, #47	@ 0x2f
 800e464:	dde8      	ble.n	800e438 <NMEA_ParsePSTMDatalog+0x20>
    }
    
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800e466:	2300      	movs	r3, #0
 800e468:	613b      	str	r3, [r7, #16]
 800e46a:	2300      	movs	r3, #0
 800e46c:	60fb      	str	r3, [r7, #12]
 800e46e:	2300      	movs	r3, #0
 800e470:	60bb      	str	r3, [r7, #8]
 800e472:	e03f      	b.n	800e4f4 <NMEA_ParsePSTMDatalog+0xdc>
    {
      new_field = 0;
 800e474:	2300      	movs	r3, #0
 800e476:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	683a      	ldr	r2, [r7, #0]
 800e47c:	4413      	add	r3, r2
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	2b2c      	cmp	r3, #44	@ 0x2c
 800e482:	d005      	beq.n	800e490 <NMEA_ParsePSTMDatalog+0x78>
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	683a      	ldr	r2, [r7, #0]
 800e488:	4413      	add	r3, r2
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e48e:	d119      	bne.n	800e4c4 <NMEA_ParsePSTMDatalog+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 800e490:	4967      	ldr	r1, [pc, #412]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e492:	68fa      	ldr	r2, [r7, #12]
 800e494:	4613      	mov	r3, r2
 800e496:	005b      	lsls	r3, r3, #1
 800e498:	4413      	add	r3, r2
 800e49a:	011b      	lsls	r3, r3, #4
 800e49c:	18ca      	adds	r2, r1, r3
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	61fb      	str	r3, [r7, #28]
        
        if (NMEA_CheckDatalogMsg((char *)app[0]) == 0)
 800e4aa:	4861      	ldr	r0, [pc, #388]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e4ac:	f7fe fbe2 	bl	800cc74 <NMEA_CheckDatalogMsg>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d125      	bne.n	800e502 <NMEA_ParsePSTMDatalog+0xea>
        {
          j++;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	60fb      	str	r3, [r7, #12]
          k = 0;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0) {
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d111      	bne.n	800e4ee <NMEA_ParsePSTMDatalog+0xd6>
        app[j][k] = NMEA[i];
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	683a      	ldr	r2, [r7, #0]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	7818      	ldrb	r0, [r3, #0]
 800e4d2:	4957      	ldr	r1, [pc, #348]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e4d4:	68fa      	ldr	r2, [r7, #12]
 800e4d6:	4613      	mov	r3, r2
 800e4d8:	005b      	lsls	r3, r3, #1
 800e4da:	4413      	add	r3, r2
 800e4dc:	011b      	lsls	r3, r3, #4
 800e4de:	18ca      	adds	r2, r1, r3
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	4413      	add	r3, r2
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	701a      	strb	r2, [r3, #0]
        k++;
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	613b      	str	r3, [r7, #16]
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	683a      	ldr	r2, [r7, #0]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	2b0a      	cmp	r3, #10
 800e4fe:	d1b9      	bne.n	800e474 <NMEA_ParsePSTMDatalog+0x5c>
 800e500:	e000      	b.n	800e504 <NMEA_ParsePSTMDatalog+0xec>
          break;
 800e502:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 800e504:	69bb      	ldr	r3, [r7, #24]
 800e506:	2b01      	cmp	r3, #1
 800e508:	f040 808d 	bne.w	800e626 <NMEA_ParsePSTMDatalog+0x20e>
    {
      /* Enabling */
      if (strcmp((char *)app[0], "$PSTMCFGLOGOK") == 0)
 800e50c:	4949      	ldr	r1, [pc, #292]	@ (800e634 <NMEA_ParsePSTMDatalog+0x21c>)
 800e50e:	4848      	ldr	r0, [pc, #288]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e510:	f7f1 fe5e 	bl	80001d0 <strcmp>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d106      	bne.n	800e528 <NMEA_ParsePSTMDatalog+0x110>
      {
        pDatalog->op = GNSS_FEATURE_EN_MSG;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2200      	movs	r2, #0
 800e51e:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_OK;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	705a      	strb	r2, [r3, #1]
 800e526:	e07c      	b.n	800e622 <NMEA_ParsePSTMDatalog+0x20a>
      }
      else if (strcmp((char *)app[0], "$PSTMCFGLOGERROR") == 0)
 800e528:	4943      	ldr	r1, [pc, #268]	@ (800e638 <NMEA_ParsePSTMDatalog+0x220>)
 800e52a:	4841      	ldr	r0, [pc, #260]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e52c:	f7f1 fe50 	bl	80001d0 <strcmp>
 800e530:	4603      	mov	r3, r0
 800e532:	2b00      	cmp	r3, #0
 800e534:	d106      	bne.n	800e544 <NMEA_ParsePSTMDatalog+0x12c>
      {
        pDatalog->op = GNSS_FEATURE_EN_MSG;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_ERROR;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2201      	movs	r2, #1
 800e540:	705a      	strb	r2, [r3, #1]
 800e542:	e06e      	b.n	800e622 <NMEA_ParsePSTMDatalog+0x20a>
      }
      /* Configuring */
      else if (strcmp((char *)app[0], "$PSTMLOGCREATEOK") == 0)
 800e544:	493d      	ldr	r1, [pc, #244]	@ (800e63c <NMEA_ParsePSTMDatalog+0x224>)
 800e546:	483a      	ldr	r0, [pc, #232]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e548:	f7f1 fe42 	bl	80001d0 <strcmp>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d106      	bne.n	800e560 <NMEA_ParsePSTMDatalog+0x148>
      {
        pDatalog->op = GNSS_DATALOG_CFG_MSG;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2206      	movs	r2, #6
 800e556:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_OK;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	705a      	strb	r2, [r3, #1]
 800e55e:	e060      	b.n	800e622 <NMEA_ParsePSTMDatalog+0x20a>
      }
      else if (strcmp((char *)app[0], "$PSTMLOGCREATEERROR") == 0)
 800e560:	4937      	ldr	r1, [pc, #220]	@ (800e640 <NMEA_ParsePSTMDatalog+0x228>)
 800e562:	4833      	ldr	r0, [pc, #204]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e564:	f7f1 fe34 	bl	80001d0 <strcmp>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d106      	bne.n	800e57c <NMEA_ParsePSTMDatalog+0x164>
      {
        pDatalog->op = GNSS_DATALOG_CFG_MSG;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2206      	movs	r2, #6
 800e572:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_ERROR;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	705a      	strb	r2, [r3, #1]
 800e57a:	e052      	b.n	800e622 <NMEA_ParsePSTMDatalog+0x20a>
      }
      /* Start */
      else if (strcmp((char *)app[0], "$PSTMLOGSTARTOK") == 0)
 800e57c:	4931      	ldr	r1, [pc, #196]	@ (800e644 <NMEA_ParsePSTMDatalog+0x22c>)
 800e57e:	482c      	ldr	r0, [pc, #176]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e580:	f7f1 fe26 	bl	80001d0 <strcmp>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d106      	bne.n	800e598 <NMEA_ParsePSTMDatalog+0x180>
      {
        pDatalog->op = GNSS_DATALOG_START_MSG;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2207      	movs	r2, #7
 800e58e:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_OK;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2200      	movs	r2, #0
 800e594:	705a      	strb	r2, [r3, #1]
 800e596:	e044      	b.n	800e622 <NMEA_ParsePSTMDatalog+0x20a>
      }
      else if (strcmp((char *)app[0], "$PSTMLOGSTARTERROR") == 0)
 800e598:	492b      	ldr	r1, [pc, #172]	@ (800e648 <NMEA_ParsePSTMDatalog+0x230>)
 800e59a:	4825      	ldr	r0, [pc, #148]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e59c:	f7f1 fe18 	bl	80001d0 <strcmp>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d106      	bne.n	800e5b4 <NMEA_ParsePSTMDatalog+0x19c>
      {
        pDatalog->op = GNSS_DATALOG_START_MSG;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2207      	movs	r2, #7
 800e5aa:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_ERROR;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	705a      	strb	r2, [r3, #1]
 800e5b2:	e036      	b.n	800e622 <NMEA_ParsePSTMDatalog+0x20a>
      }
      /* Stop */
      else if (strcmp((char *)app[0], "$PSTMLOGSTOPOK") == 0)
 800e5b4:	4925      	ldr	r1, [pc, #148]	@ (800e64c <NMEA_ParsePSTMDatalog+0x234>)
 800e5b6:	481e      	ldr	r0, [pc, #120]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e5b8:	f7f1 fe0a 	bl	80001d0 <strcmp>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d106      	bne.n	800e5d0 <NMEA_ParsePSTMDatalog+0x1b8>
      {
        pDatalog->op = GNSS_DATALOG_STOP_MSG;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2208      	movs	r2, #8
 800e5c6:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_OK;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	705a      	strb	r2, [r3, #1]
 800e5ce:	e028      	b.n	800e622 <NMEA_ParsePSTMDatalog+0x20a>
      }
      else if (strcmp((char *)app[0], "$PSTMLOGSTOPERROR") == 0)
 800e5d0:	491f      	ldr	r1, [pc, #124]	@ (800e650 <NMEA_ParsePSTMDatalog+0x238>)
 800e5d2:	4817      	ldr	r0, [pc, #92]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e5d4:	f7f1 fdfc 	bl	80001d0 <strcmp>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d106      	bne.n	800e5ec <NMEA_ParsePSTMDatalog+0x1d4>
      {
        pDatalog->op = GNSS_DATALOG_STOP_MSG;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2208      	movs	r2, #8
 800e5e2:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_ERROR;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	705a      	strb	r2, [r3, #1]
 800e5ea:	e01a      	b.n	800e622 <NMEA_ParsePSTMDatalog+0x20a>
      }
      /* Erase */
      else if (strcmp((char *)app[0], "$PSTMLOGERASEOK") == 0)
 800e5ec:	4919      	ldr	r1, [pc, #100]	@ (800e654 <NMEA_ParsePSTMDatalog+0x23c>)
 800e5ee:	4810      	ldr	r0, [pc, #64]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e5f0:	f7f1 fdee 	bl	80001d0 <strcmp>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d106      	bne.n	800e608 <NMEA_ParsePSTMDatalog+0x1f0>
      {
        pDatalog->op = GNSS_DATALOG_ERASE_MSG;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2209      	movs	r2, #9
 800e5fe:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_OK;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	705a      	strb	r2, [r3, #1]
 800e606:	e00c      	b.n	800e622 <NMEA_ParsePSTMDatalog+0x20a>
      }
      else if (strcmp((char *)app[0], "$PSTMLOGERASEERROR") == 0)
 800e608:	4913      	ldr	r1, [pc, #76]	@ (800e658 <NMEA_ParsePSTMDatalog+0x240>)
 800e60a:	4809      	ldr	r0, [pc, #36]	@ (800e630 <NMEA_ParsePSTMDatalog+0x218>)
 800e60c:	f7f1 fde0 	bl	80001d0 <strcmp>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d105      	bne.n	800e622 <NMEA_ParsePSTMDatalog+0x20a>
      {
        pDatalog->op = GNSS_DATALOG_ERASE_MSG;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2209      	movs	r2, #9
 800e61a:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_ERROR;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2201      	movs	r2, #1
 800e620:	705a      	strb	r2, [r3, #1]
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 800e622:	2300      	movs	r3, #0
 800e624:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800e626:	7dfb      	ldrb	r3, [r7, #23]
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3720      	adds	r7, #32
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	20005d0c 	.word	0x20005d0c
 800e634:	080152dc 	.word	0x080152dc
 800e638:	080152ec 	.word	0x080152ec
 800e63c:	08015300 	.word	0x08015300
 800e640:	08015314 	.word	0x08015314
 800e644:	08015328 	.word	0x08015328
 800e648:	08015338 	.word	0x08015338
 800e64c:	0801534c 	.word	0x0801534c
 800e650:	0801535c 	.word	0x0801535c
 800e654:	08015370 	.word	0x08015370
 800e658:	08015380 	.word	0x08015380

0800e65c <NMEA_ParsePSTMsgl>:

ParseStatus_t NMEA_ParsePSTMsgl(OpResult_t *pResult, uint8_t NMEA[])
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b088      	sub	sp, #32
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 800e666:	2300      	movs	r3, #0
 800e668:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 800e66a:	2301      	movs	r3, #1
 800e66c:	75fb      	strb	r3, [r7, #23]

  if(NMEA != NULL)
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	f000 8083 	beq.w	800e77c <NMEA_ParsePSTMsgl+0x120>
  {

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800e676:	2300      	movs	r3, #0
 800e678:	75bb      	strb	r3, [r7, #22]
 800e67a:	e012      	b.n	800e6a2 <NMEA_ParsePSTMsgl+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800e67c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800e680:	4613      	mov	r3, r2
 800e682:	005b      	lsls	r3, r3, #1
 800e684:	4413      	add	r3, r2
 800e686:	011b      	lsls	r3, r3, #4
 800e688:	4a3f      	ldr	r2, [pc, #252]	@ (800e788 <NMEA_ParsePSTMsgl+0x12c>)
 800e68a:	4413      	add	r3, r2
 800e68c:	2230      	movs	r2, #48	@ 0x30
 800e68e:	2100      	movs	r1, #0
 800e690:	4618      	mov	r0, r3
 800e692:	f002 f994 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800e696:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	3301      	adds	r3, #1
 800e69e:	b2db      	uxtb	r3, r3
 800e6a0:	75bb      	strb	r3, [r7, #22]
 800e6a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800e6a6:	2b2f      	cmp	r3, #47	@ 0x2f
 800e6a8:	dde8      	ble.n	800e67c <NMEA_ParsePSTMsgl+0x20>
    }
    
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	613b      	str	r3, [r7, #16]
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	60fb      	str	r3, [r7, #12]
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	60bb      	str	r3, [r7, #8]
 800e6b6:	e03f      	b.n	800e738 <NMEA_ParsePSTMsgl+0xdc>
    {
      new_field = 0;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	683a      	ldr	r2, [r7, #0]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	2b2c      	cmp	r3, #44	@ 0x2c
 800e6c6:	d005      	beq.n	800e6d4 <NMEA_ParsePSTMsgl+0x78>
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	683a      	ldr	r2, [r7, #0]
 800e6cc:	4413      	add	r3, r2
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6d2:	d119      	bne.n	800e708 <NMEA_ParsePSTMsgl+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 800e6d4:	492c      	ldr	r1, [pc, #176]	@ (800e788 <NMEA_ParsePSTMsgl+0x12c>)
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	4613      	mov	r3, r2
 800e6da:	005b      	lsls	r3, r3, #1
 800e6dc:	4413      	add	r3, r2
 800e6de:	011b      	lsls	r3, r3, #4
 800e6e0:	18ca      	adds	r2, r1, r3
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	61fb      	str	r3, [r7, #28]
        
        if (NMEA_CheckListMsg((char *)app[0]) == 0)
 800e6ee:	4826      	ldr	r0, [pc, #152]	@ (800e788 <NMEA_ParsePSTMsgl+0x12c>)
 800e6f0:	f7fe fb3a 	bl	800cd68 <NMEA_CheckListMsg>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d125      	bne.n	800e746 <NMEA_ParsePSTMsgl+0xea>
        {
          j++;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	60fb      	str	r3, [r7, #12]
          k = 0;
 800e700:	2300      	movs	r3, #0
 800e702:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 800e704:	2301      	movs	r3, #1
 800e706:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d111      	bne.n	800e732 <NMEA_ParsePSTMsgl+0xd6>
      {
        app[j][k] = NMEA[i];
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	683a      	ldr	r2, [r7, #0]
 800e712:	4413      	add	r3, r2
 800e714:	7818      	ldrb	r0, [r3, #0]
 800e716:	491c      	ldr	r1, [pc, #112]	@ (800e788 <NMEA_ParsePSTMsgl+0x12c>)
 800e718:	68fa      	ldr	r2, [r7, #12]
 800e71a:	4613      	mov	r3, r2
 800e71c:	005b      	lsls	r3, r3, #1
 800e71e:	4413      	add	r3, r2
 800e720:	011b      	lsls	r3, r3, #4
 800e722:	18ca      	adds	r2, r1, r3
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	4413      	add	r3, r2
 800e728:	4602      	mov	r2, r0
 800e72a:	701a      	strb	r2, [r3, #0]
        k++;
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	3301      	adds	r3, #1
 800e730:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	3301      	adds	r3, #1
 800e736:	613b      	str	r3, [r7, #16]
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	683a      	ldr	r2, [r7, #0]
 800e73c:	4413      	add	r3, r2
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	2b0a      	cmp	r3, #10
 800e742:	d1b9      	bne.n	800e6b8 <NMEA_ParsePSTMsgl+0x5c>
 800e744:	e000      	b.n	800e748 <NMEA_ParsePSTMsgl+0xec>
          break;
 800e746:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d116      	bne.n	800e77c <NMEA_ParsePSTMsgl+0x120>
    {
      /* Enabling */
      if (strcmp((char *)app[0], "$PSTMCFGMSGLOK") == 0)
 800e74e:	490f      	ldr	r1, [pc, #60]	@ (800e78c <NMEA_ParsePSTMsgl+0x130>)
 800e750:	480d      	ldr	r0, [pc, #52]	@ (800e788 <NMEA_ParsePSTMsgl+0x12c>)
 800e752:	f7f1 fd3d 	bl	80001d0 <strcmp>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d103      	bne.n	800e764 <NMEA_ParsePSTMsgl+0x108>
      {
        *pResult = GNSS_OP_OK;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	701a      	strb	r2, [r3, #0]
 800e762:	e009      	b.n	800e778 <NMEA_ParsePSTMsgl+0x11c>
      }
      else if (strcmp((char *)app[0], "$PSTMCFGMSGLERROR") == 0)
 800e764:	490a      	ldr	r1, [pc, #40]	@ (800e790 <NMEA_ParsePSTMsgl+0x134>)
 800e766:	4808      	ldr	r0, [pc, #32]	@ (800e788 <NMEA_ParsePSTMsgl+0x12c>)
 800e768:	f7f1 fd32 	bl	80001d0 <strcmp>
 800e76c:	4603      	mov	r3, r0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d102      	bne.n	800e778 <NMEA_ParsePSTMsgl+0x11c>
      {
        *pResult = GNSS_OP_ERROR;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2201      	movs	r2, #1
 800e776:	701a      	strb	r2, [r3, #0]
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 800e778:	2300      	movs	r3, #0
 800e77a:	75fb      	strb	r3, [r7, #23]
    }

  }
  return status;
 800e77c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3720      	adds	r7, #32
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
 800e786:	bf00      	nop
 800e788:	20005d0c 	.word	0x20005d0c
 800e78c:	08015394 	.word	0x08015394
 800e790:	080153a4 	.word	0x080153a4

0800e794 <NMEA_ParsePSTMSavePar>:

ParseStatus_t NMEA_ParsePSTMSavePar(OpResult_t *pResult, uint8_t NMEA[])
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b088      	sub	sp, #32
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	75fb      	strb	r3, [r7, #23]

  if(NMEA != NULL)
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f000 8083 	beq.w	800e8b4 <NMEA_ParsePSTMSavePar+0x120>
  {

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	75bb      	strb	r3, [r7, #22]
 800e7b2:	e012      	b.n	800e7da <NMEA_ParsePSTMSavePar+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800e7b4:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	005b      	lsls	r3, r3, #1
 800e7bc:	4413      	add	r3, r2
 800e7be:	011b      	lsls	r3, r3, #4
 800e7c0:	4a3f      	ldr	r2, [pc, #252]	@ (800e8c0 <NMEA_ParsePSTMSavePar+0x12c>)
 800e7c2:	4413      	add	r3, r2
 800e7c4:	2230      	movs	r2, #48	@ 0x30
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f002 f8f8 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800e7ce:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	75bb      	strb	r3, [r7, #22]
 800e7da:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800e7de:	2b2f      	cmp	r3, #47	@ 0x2f
 800e7e0:	dde8      	ble.n	800e7b4 <NMEA_ParsePSTMSavePar+0x20>
    }
    
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	613b      	str	r3, [r7, #16]
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	60fb      	str	r3, [r7, #12]
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	60bb      	str	r3, [r7, #8]
 800e7ee:	e03f      	b.n	800e870 <NMEA_ParsePSTMSavePar+0xdc>
    {
      new_field = 0;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	683a      	ldr	r2, [r7, #0]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	2b2c      	cmp	r3, #44	@ 0x2c
 800e7fe:	d005      	beq.n	800e80c <NMEA_ParsePSTMSavePar+0x78>
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	683a      	ldr	r2, [r7, #0]
 800e804:	4413      	add	r3, r2
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	2b2a      	cmp	r3, #42	@ 0x2a
 800e80a:	d119      	bne.n	800e840 <NMEA_ParsePSTMSavePar+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 800e80c:	492c      	ldr	r1, [pc, #176]	@ (800e8c0 <NMEA_ParsePSTMSavePar+0x12c>)
 800e80e:	68fa      	ldr	r2, [r7, #12]
 800e810:	4613      	mov	r3, r2
 800e812:	005b      	lsls	r3, r3, #1
 800e814:	4413      	add	r3, r2
 800e816:	011b      	lsls	r3, r3, #4
 800e818:	18ca      	adds	r2, r1, r3
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	4413      	add	r3, r2
 800e81e:	2200      	movs	r2, #0
 800e820:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800e822:	2301      	movs	r3, #1
 800e824:	61fb      	str	r3, [r7, #28]
        
        if (NMEA_CheckSaveparMsg((char *)app[0]) == 0)
 800e826:	4826      	ldr	r0, [pc, #152]	@ (800e8c0 <NMEA_ParsePSTMSavePar+0x12c>)
 800e828:	f7fe fac0 	bl	800cdac <NMEA_CheckSaveparMsg>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d125      	bne.n	800e87e <NMEA_ParsePSTMSavePar+0xea>
        {
          j++;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	3301      	adds	r3, #1
 800e836:	60fb      	str	r3, [r7, #12]
          k = 0;
 800e838:	2300      	movs	r3, #0
 800e83a:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 800e83c:	2301      	movs	r3, #1
 800e83e:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0) {
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d111      	bne.n	800e86a <NMEA_ParsePSTMSavePar+0xd6>
        app[j][k] = NMEA[i];
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	683a      	ldr	r2, [r7, #0]
 800e84a:	4413      	add	r3, r2
 800e84c:	7818      	ldrb	r0, [r3, #0]
 800e84e:	491c      	ldr	r1, [pc, #112]	@ (800e8c0 <NMEA_ParsePSTMSavePar+0x12c>)
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	4613      	mov	r3, r2
 800e854:	005b      	lsls	r3, r3, #1
 800e856:	4413      	add	r3, r2
 800e858:	011b      	lsls	r3, r3, #4
 800e85a:	18ca      	adds	r2, r1, r3
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	4413      	add	r3, r2
 800e860:	4602      	mov	r2, r0
 800e862:	701a      	strb	r2, [r3, #0]
        k++;
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	3301      	adds	r3, #1
 800e868:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	3301      	adds	r3, #1
 800e86e:	613b      	str	r3, [r7, #16]
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	683a      	ldr	r2, [r7, #0]
 800e874:	4413      	add	r3, r2
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	2b0a      	cmp	r3, #10
 800e87a:	d1b9      	bne.n	800e7f0 <NMEA_ParsePSTMSavePar+0x5c>
 800e87c:	e000      	b.n	800e880 <NMEA_ParsePSTMSavePar+0xec>
          break;
 800e87e:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	2b01      	cmp	r3, #1
 800e884:	d116      	bne.n	800e8b4 <NMEA_ParsePSTMSavePar+0x120>
    {
      if (strcmp((char *)app[0], "$PSTMSAVEPAROK") == 0)
 800e886:	490f      	ldr	r1, [pc, #60]	@ (800e8c4 <NMEA_ParsePSTMSavePar+0x130>)
 800e888:	480d      	ldr	r0, [pc, #52]	@ (800e8c0 <NMEA_ParsePSTMSavePar+0x12c>)
 800e88a:	f7f1 fca1 	bl	80001d0 <strcmp>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d103      	bne.n	800e89c <NMEA_ParsePSTMSavePar+0x108>
      {
        *pResult = GNSS_OP_OK;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	701a      	strb	r2, [r3, #0]
 800e89a:	e009      	b.n	800e8b0 <NMEA_ParsePSTMSavePar+0x11c>
      }
      else if (strcmp((char *)app[0], "$PSTMSAVEPARERROR") == 0)
 800e89c:	490a      	ldr	r1, [pc, #40]	@ (800e8c8 <NMEA_ParsePSTMSavePar+0x134>)
 800e89e:	4808      	ldr	r0, [pc, #32]	@ (800e8c0 <NMEA_ParsePSTMSavePar+0x12c>)
 800e8a0:	f7f1 fc96 	bl	80001d0 <strcmp>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d102      	bne.n	800e8b0 <NMEA_ParsePSTMSavePar+0x11c>
      {
        *pResult = GNSS_OP_ERROR;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	701a      	strb	r2, [r3, #0]
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800e8b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3720      	adds	r7, #32
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	20005d0c 	.word	0x20005d0c
 800e8c4:	080153b8 	.word	0x080153b8
 800e8c8:	080153c8 	.word	0x080153c8

0800e8cc <NMEA_ParsePSTMPASSRTN>:

ParseStatus_t NMEA_ParsePSTMPASSRTN(PSTMPASSRTN_Info_t *pPSTMPASSRTN, uint8_t NMEA[])
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b088      	sub	sp, #32
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
  int8_t new_field;
  BOOL valid_msg = FALSE;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	61bb      	str	r3, [r7, #24]

  ParseStatus_t status = PARSE_FAIL;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	75fb      	strb	r3, [r7, #23]

  if(NMEA != NULL)
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f000 8093 	beq.w	800ea0c <NMEA_ParsePSTMPASSRTN+0x140>
  {

    /* clear the app[][] buffer */
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	75bb      	strb	r3, [r7, #22]
 800e8ea:	e012      	b.n	800e912 <NMEA_ParsePSTMPASSRTN+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800e8ec:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800e8f0:	4613      	mov	r3, r2
 800e8f2:	005b      	lsls	r3, r3, #1
 800e8f4:	4413      	add	r3, r2
 800e8f6:	011b      	lsls	r3, r3, #4
 800e8f8:	4a47      	ldr	r2, [pc, #284]	@ (800ea18 <NMEA_ParsePSTMPASSRTN+0x14c>)
 800e8fa:	4413      	add	r3, r2
 800e8fc:	2230      	movs	r2, #48	@ 0x30
 800e8fe:	2100      	movs	r1, #0
 800e900:	4618      	mov	r0, r3
 800e902:	f002 f85c 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800e906:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	3301      	adds	r3, #1
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	75bb      	strb	r3, [r7, #22]
 800e912:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800e916:	2b2f      	cmp	r3, #47	@ 0x2f
 800e918:	dde8      	ble.n	800e8ec <NMEA_ParsePSTMPASSRTN+0x20>
    }

    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800e91a:	2300      	movs	r3, #0
 800e91c:	613b      	str	r3, [r7, #16]
 800e91e:	2300      	movs	r3, #0
 800e920:	60fb      	str	r3, [r7, #12]
 800e922:	2300      	movs	r3, #0
 800e924:	60bb      	str	r3, [r7, #8]
 800e926:	e040      	b.n	800e9aa <NMEA_ParsePSTMPASSRTN+0xde>
    {
      new_field = 0;
 800e928:	2300      	movs	r3, #0
 800e92a:	77fb      	strb	r3, [r7, #31]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	683a      	ldr	r2, [r7, #0]
 800e930:	4413      	add	r3, r2
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	2b2c      	cmp	r3, #44	@ 0x2c
 800e936:	d005      	beq.n	800e944 <NMEA_ParsePSTMPASSRTN+0x78>
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	683a      	ldr	r2, [r7, #0]
 800e93c:	4413      	add	r3, r2
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	2b2a      	cmp	r3, #42	@ 0x2a
 800e942:	d119      	bne.n	800e978 <NMEA_ParsePSTMPASSRTN+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 800e944:	4934      	ldr	r1, [pc, #208]	@ (800ea18 <NMEA_ParsePSTMPASSRTN+0x14c>)
 800e946:	68fa      	ldr	r2, [r7, #12]
 800e948:	4613      	mov	r3, r2
 800e94a:	005b      	lsls	r3, r3, #1
 800e94c:	4413      	add	r3, r2
 800e94e:	011b      	lsls	r3, r3, #4
 800e950:	18ca      	adds	r2, r1, r3
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	4413      	add	r3, r2
 800e956:	2200      	movs	r2, #0
 800e958:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800e95a:	2301      	movs	r3, #1
 800e95c:	77fb      	strb	r3, [r7, #31]

        if (NMEA_CheckPassMsg((char *)app[0]) == 0)
 800e95e:	482e      	ldr	r0, [pc, #184]	@ (800ea18 <NMEA_ParsePSTMPASSRTN+0x14c>)
 800e960:	f7fe fa46 	bl	800cdf0 <NMEA_CheckPassMsg>
 800e964:	4603      	mov	r3, r0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d126      	bne.n	800e9b8 <NMEA_ParsePSTMPASSRTN+0xec>
        {
          j++;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	3301      	adds	r3, #1
 800e96e:	60fb      	str	r3, [r7, #12]
          k = 0;
 800e970:	2300      	movs	r3, #0
 800e972:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 800e974:	2301      	movs	r3, #1
 800e976:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800e978:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d111      	bne.n	800e9a4 <NMEA_ParsePSTMPASSRTN+0xd8>
      {
        app[j][k] = NMEA[i];
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	683a      	ldr	r2, [r7, #0]
 800e984:	4413      	add	r3, r2
 800e986:	7818      	ldrb	r0, [r3, #0]
 800e988:	4923      	ldr	r1, [pc, #140]	@ (800ea18 <NMEA_ParsePSTMPASSRTN+0x14c>)
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	4613      	mov	r3, r2
 800e98e:	005b      	lsls	r3, r3, #1
 800e990:	4413      	add	r3, r2
 800e992:	011b      	lsls	r3, r3, #4
 800e994:	18ca      	adds	r2, r1, r3
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	4413      	add	r3, r2
 800e99a:	4602      	mov	r2, r0
 800e99c:	701a      	strb	r2, [r3, #0]
        k++;
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	613b      	str	r3, [r7, #16]
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	683a      	ldr	r2, [r7, #0]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	2b0a      	cmp	r3, #10
 800e9b4:	d1b8      	bne.n	800e928 <NMEA_ParsePSTMPASSRTN+0x5c>
 800e9b6:	e000      	b.n	800e9ba <NMEA_ParsePSTMPASSRTN+0xee>
          break;
 800e9b8:	bf00      	nop
      }
    }

    if (valid_msg == TRUE)
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d125      	bne.n	800ea0c <NMEA_ParsePSTMPASSRTN+0x140>
    {
      if (strcmp((char *)app[0], "$PSTMSTAGPS8PASSRTN") == 0)
 800e9c0:	4916      	ldr	r1, [pc, #88]	@ (800ea1c <NMEA_ParsePSTMPASSRTN+0x150>)
 800e9c2:	4815      	ldr	r0, [pc, #84]	@ (800ea18 <NMEA_ParsePSTMPASSRTN+0x14c>)
 800e9c4:	f7f1 fc04 	bl	80001d0 <strcmp>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d111      	bne.n	800e9f2 <NMEA_ParsePSTMPASSRTN+0x126>
      {
        (void)strncpy((char *)pPSTMPASSRTN->deviceId, (char *)app[1], 64);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2240      	movs	r2, #64	@ 0x40
 800e9d2:	4913      	ldr	r1, [pc, #76]	@ (800ea20 <NMEA_ParsePSTMPASSRTN+0x154>)
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f002 f80c 	bl	80109f2 <strncpy>
        (void)strncpy((char *)pPSTMPASSRTN->pwd, (char *)app[2], 64);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	3340      	adds	r3, #64	@ 0x40
 800e9de:	2240      	movs	r2, #64	@ 0x40
 800e9e0:	4910      	ldr	r1, [pc, #64]	@ (800ea24 <NMEA_ParsePSTMPASSRTN+0x158>)
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f002 f805 	bl	80109f2 <strncpy>
        pPSTMPASSRTN->result = GNSS_OP_OK;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800e9f0:	e00a      	b.n	800ea08 <NMEA_ParsePSTMPASSRTN+0x13c>
      }
      else if (strcmp((char *)app[0], "$PSTMSTAGPS8PASSGENERROR") == 0)
 800e9f2:	490d      	ldr	r1, [pc, #52]	@ (800ea28 <NMEA_ParsePSTMPASSRTN+0x15c>)
 800e9f4:	4808      	ldr	r0, [pc, #32]	@ (800ea18 <NMEA_ParsePSTMPASSRTN+0x14c>)
 800e9f6:	f7f1 fbeb 	bl	80001d0 <strcmp>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d103      	bne.n	800ea08 <NMEA_ParsePSTMPASSRTN+0x13c>
      {
        pPSTMPASSRTN->result = GNSS_OP_ERROR;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2201      	movs	r2, #1
 800ea04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800ea0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3720      	adds	r7, #32
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20005d0c 	.word	0x20005d0c
 800ea1c:	080153dc 	.word	0x080153dc
 800ea20:	20005d3c 	.word	0x20005d3c
 800ea24:	20005d6c 	.word	0x20005d6c
 800ea28:	080153f0 	.word	0x080153f0

0800ea2c <NMEA_ParsePSTMAGPS>:

ParseStatus_t NMEA_ParsePSTMAGPS(PSTMAGPS_Info_t *pPSTMAGPS, uint8_t NMEA[])
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b088      	sub	sp, #32
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
  int8_t new_field;
  BOOL valid_msg = FALSE;
 800ea36:	2300      	movs	r3, #0
 800ea38:	61bb      	str	r3, [r7, #24]

  ParseStatus_t status = PARSE_FAIL;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	75fb      	strb	r3, [r7, #23]

  if(NMEA != NULL)
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	f000 812a 	beq.w	800ec9a <NMEA_ParsePSTMAGPS+0x26e>
  {
    /* clear the app[][] buffer */
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800ea46:	2300      	movs	r3, #0
 800ea48:	75bb      	strb	r3, [r7, #22]
 800ea4a:	e012      	b.n	800ea72 <NMEA_ParsePSTMAGPS+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 800ea4c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800ea50:	4613      	mov	r3, r2
 800ea52:	005b      	lsls	r3, r3, #1
 800ea54:	4413      	add	r3, r2
 800ea56:	011b      	lsls	r3, r3, #4
 800ea58:	4a92      	ldr	r2, [pc, #584]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800ea5a:	4413      	add	r3, r2
 800ea5c:	2230      	movs	r2, #48	@ 0x30
 800ea5e:	2100      	movs	r1, #0
 800ea60:	4618      	mov	r0, r3
 800ea62:	f001 ffac 	bl	80109be <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800ea66:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	75bb      	strb	r3, [r7, #22]
 800ea72:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800ea76:	2b2f      	cmp	r3, #47	@ 0x2f
 800ea78:	dde8      	ble.n	800ea4c <NMEA_ParsePSTMAGPS+0x20>
    }

    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	613b      	str	r3, [r7, #16]
 800ea7e:	2300      	movs	r3, #0
 800ea80:	60fb      	str	r3, [r7, #12]
 800ea82:	2300      	movs	r3, #0
 800ea84:	60bb      	str	r3, [r7, #8]
 800ea86:	e040      	b.n	800eb0a <NMEA_ParsePSTMAGPS+0xde>
    {
      new_field = 0;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	77fb      	strb	r3, [r7, #31]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	683a      	ldr	r2, [r7, #0]
 800ea90:	4413      	add	r3, r2
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	2b2c      	cmp	r3, #44	@ 0x2c
 800ea96:	d005      	beq.n	800eaa4 <NMEA_ParsePSTMAGPS+0x78>
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	683a      	ldr	r2, [r7, #0]
 800ea9c:	4413      	add	r3, r2
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800eaa2:	d119      	bne.n	800ead8 <NMEA_ParsePSTMAGPS+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 800eaa4:	497f      	ldr	r1, [pc, #508]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800eaa6:	68fa      	ldr	r2, [r7, #12]
 800eaa8:	4613      	mov	r3, r2
 800eaaa:	005b      	lsls	r3, r3, #1
 800eaac:	4413      	add	r3, r2
 800eaae:	011b      	lsls	r3, r3, #4
 800eab0:	18ca      	adds	r2, r1, r3
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	4413      	add	r3, r2
 800eab6:	2200      	movs	r2, #0
 800eab8:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800eaba:	2301      	movs	r3, #1
 800eabc:	77fb      	strb	r3, [r7, #31]

        if (NMEA_CheckAGPSMsg((char *)app[0]) == 0)
 800eabe:	4879      	ldr	r0, [pc, #484]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800eac0:	f7fe f9b8 	bl	800ce34 <NMEA_CheckAGPSMsg>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d126      	bne.n	800eb18 <NMEA_ParsePSTMAGPS+0xec>
        {
          j++;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	3301      	adds	r3, #1
 800eace:	60fb      	str	r3, [r7, #12]
          k = 0;
 800ead0:	2300      	movs	r3, #0
 800ead2:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 800ead4:	2301      	movs	r3, #1
 800ead6:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800ead8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d111      	bne.n	800eb04 <NMEA_ParsePSTMAGPS+0xd8>
      {
        app[j][k] = NMEA[i];
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	683a      	ldr	r2, [r7, #0]
 800eae4:	4413      	add	r3, r2
 800eae6:	7818      	ldrb	r0, [r3, #0]
 800eae8:	496e      	ldr	r1, [pc, #440]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800eaea:	68fa      	ldr	r2, [r7, #12]
 800eaec:	4613      	mov	r3, r2
 800eaee:	005b      	lsls	r3, r3, #1
 800eaf0:	4413      	add	r3, r2
 800eaf2:	011b      	lsls	r3, r3, #4
 800eaf4:	18ca      	adds	r2, r1, r3
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	4413      	add	r3, r2
 800eafa:	4602      	mov	r2, r0
 800eafc:	701a      	strb	r2, [r3, #0]
        k++;
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	3301      	adds	r3, #1
 800eb02:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	3301      	adds	r3, #1
 800eb08:	613b      	str	r3, [r7, #16]
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	683a      	ldr	r2, [r7, #0]
 800eb0e:	4413      	add	r3, r2
 800eb10:	781b      	ldrb	r3, [r3, #0]
 800eb12:	2b0a      	cmp	r3, #10
 800eb14:	d1b8      	bne.n	800ea88 <NMEA_ParsePSTMAGPS+0x5c>
 800eb16:	e000      	b.n	800eb1a <NMEA_ParsePSTMAGPS+0xee>
          break;
 800eb18:	bf00      	nop
      }
    }

    if (valid_msg == TRUE)
 800eb1a:	69bb      	ldr	r3, [r7, #24]
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	f040 80bc 	bne.w	800ec9a <NMEA_ParsePSTMAGPS+0x26e>
    {
      /* Status */
      if (strcmp((char *)app[0], "$PSTMAGPSSTATUS") == 0)
 800eb22:	4961      	ldr	r1, [pc, #388]	@ (800eca8 <NMEA_ParsePSTMAGPS+0x27c>)
 800eb24:	485f      	ldr	r0, [pc, #380]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800eb26:	f7f1 fb53 	bl	80001d0 <strcmp>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d10b      	bne.n	800eb48 <NMEA_ParsePSTMAGPS+0x11c>
      {
        pPSTMAGPS->op = GNSS_AGPS_STATUS_MSG;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	220a      	movs	r2, #10
 800eb34:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->status = strtol((char *)app[1], NULL, BASE);
 800eb36:	220a      	movs	r2, #10
 800eb38:	2100      	movs	r1, #0
 800eb3a:	485c      	ldr	r0, [pc, #368]	@ (800ecac <NMEA_ParsePSTMAGPS+0x280>)
 800eb3c:	f001 f84a 	bl	800fbd4 <strtol>
 800eb40:	4602      	mov	r2, r0
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	605a      	str	r2, [r3, #4]
 800eb46:	e0a6      	b.n	800ec96 <NMEA_ParsePSTMAGPS+0x26a>
      }
      /* Begin */
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSEEDBEGINOK") == 0)
 800eb48:	4959      	ldr	r1, [pc, #356]	@ (800ecb0 <NMEA_ParsePSTMAGPS+0x284>)
 800eb4a:	4856      	ldr	r0, [pc, #344]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800eb4c:	f7f1 fb40 	bl	80001d0 <strcmp>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d106      	bne.n	800eb64 <NMEA_ParsePSTMAGPS+0x138>
      {
        pPSTMAGPS->op = GNSS_AGPS_BEGIN_MSG;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	220b      	movs	r2, #11
 800eb5a:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_OK;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	721a      	strb	r2, [r3, #8]
 800eb62:	e098      	b.n	800ec96 <NMEA_ParsePSTMAGPS+0x26a>
      }
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSEEDBEGINERROR") == 0)
 800eb64:	4953      	ldr	r1, [pc, #332]	@ (800ecb4 <NMEA_ParsePSTMAGPS+0x288>)
 800eb66:	484f      	ldr	r0, [pc, #316]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800eb68:	f7f1 fb32 	bl	80001d0 <strcmp>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d106      	bne.n	800eb80 <NMEA_ParsePSTMAGPS+0x154>
      {
        pPSTMAGPS->op = GNSS_AGPS_BEGIN_MSG;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	220b      	movs	r2, #11
 800eb76:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_ERROR;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	721a      	strb	r2, [r3, #8]
 800eb7e:	e08a      	b.n	800ec96 <NMEA_ParsePSTMAGPS+0x26a>
      }
      /* Block type */
      else if (strcmp((char *)app[0], "$PSTMSTAGPSBLKTYPEOK") == 0)
 800eb80:	494d      	ldr	r1, [pc, #308]	@ (800ecb8 <NMEA_ParsePSTMAGPS+0x28c>)
 800eb82:	4848      	ldr	r0, [pc, #288]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800eb84:	f7f1 fb24 	bl	80001d0 <strcmp>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d106      	bne.n	800eb9c <NMEA_ParsePSTMAGPS+0x170>
      {
        pPSTMAGPS->op = GNSS_AGPS_BLKTYPE_MSG;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	220c      	movs	r2, #12
 800eb92:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_OK;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2200      	movs	r2, #0
 800eb98:	721a      	strb	r2, [r3, #8]
 800eb9a:	e07c      	b.n	800ec96 <NMEA_ParsePSTMAGPS+0x26a>
      }
      else if (strcmp((char *)app[0], "$PSTMSTAGPSBLKTYPEERROR") == 0)
 800eb9c:	4947      	ldr	r1, [pc, #284]	@ (800ecbc <NMEA_ParsePSTMAGPS+0x290>)
 800eb9e:	4841      	ldr	r0, [pc, #260]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800eba0:	f7f1 fb16 	bl	80001d0 <strcmp>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d106      	bne.n	800ebb8 <NMEA_ParsePSTMAGPS+0x18c>
      {
        pPSTMAGPS->op = GNSS_AGPS_BLKTYPE_MSG;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	220c      	movs	r2, #12
 800ebae:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_ERROR;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	721a      	strb	r2, [r3, #8]
 800ebb6:	e06e      	b.n	800ec96 <NMEA_ParsePSTMAGPS+0x26a>
      }
      /* Slot freq */
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSLOTFRQOK") == 0)
 800ebb8:	4941      	ldr	r1, [pc, #260]	@ (800ecc0 <NMEA_ParsePSTMAGPS+0x294>)
 800ebba:	483a      	ldr	r0, [pc, #232]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800ebbc:	f7f1 fb08 	bl	80001d0 <strcmp>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d106      	bne.n	800ebd4 <NMEA_ParsePSTMAGPS+0x1a8>
      {
        pPSTMAGPS->op = GNSS_AGPS_SLOTFRQ_MSG;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	220d      	movs	r2, #13
 800ebca:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_OK;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	721a      	strb	r2, [r3, #8]
 800ebd2:	e060      	b.n	800ec96 <NMEA_ParsePSTMAGPS+0x26a>
      }
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSLOTFRQERROR") == 0)
 800ebd4:	493b      	ldr	r1, [pc, #236]	@ (800ecc4 <NMEA_ParsePSTMAGPS+0x298>)
 800ebd6:	4833      	ldr	r0, [pc, #204]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800ebd8:	f7f1 fafa 	bl	80001d0 <strcmp>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d106      	bne.n	800ebf0 <NMEA_ParsePSTMAGPS+0x1c4>
      {
        pPSTMAGPS->op = GNSS_AGPS_SLOTFRQ_MSG;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	220d      	movs	r2, #13
 800ebe6:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_ERROR;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2201      	movs	r2, #1
 800ebec:	721a      	strb	r2, [r3, #8]
 800ebee:	e052      	b.n	800ec96 <NMEA_ParsePSTMAGPS+0x26a>
      }
      /* Seed pkt */
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSEEDPKTOK") == 0)
 800ebf0:	4935      	ldr	r1, [pc, #212]	@ (800ecc8 <NMEA_ParsePSTMAGPS+0x29c>)
 800ebf2:	482c      	ldr	r0, [pc, #176]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800ebf4:	f7f1 faec 	bl	80001d0 <strcmp>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d106      	bne.n	800ec0c <NMEA_ParsePSTMAGPS+0x1e0>
      {
        pPSTMAGPS->op = GNSS_AGPS_SEEDPKT_MSG;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	220e      	movs	r2, #14
 800ec02:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_OK;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2200      	movs	r2, #0
 800ec08:	721a      	strb	r2, [r3, #8]
 800ec0a:	e044      	b.n	800ec96 <NMEA_ParsePSTMAGPS+0x26a>
      }
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSEEDPKTERROR") == 0)
 800ec0c:	492f      	ldr	r1, [pc, #188]	@ (800eccc <NMEA_ParsePSTMAGPS+0x2a0>)
 800ec0e:	4825      	ldr	r0, [pc, #148]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800ec10:	f7f1 fade 	bl	80001d0 <strcmp>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d106      	bne.n	800ec28 <NMEA_ParsePSTMAGPS+0x1fc>
      {
        pPSTMAGPS->op = GNSS_AGPS_SEEDPKT_MSG;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	220e      	movs	r2, #14
 800ec1e:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_ERROR;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2201      	movs	r2, #1
 800ec24:	721a      	strb	r2, [r3, #8]
 800ec26:	e036      	b.n	800ec96 <NMEA_ParsePSTMAGPS+0x26a>
      }
      /* Propagate */
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSEEDPROPOK") == 0)
 800ec28:	4929      	ldr	r1, [pc, #164]	@ (800ecd0 <NMEA_ParsePSTMAGPS+0x2a4>)
 800ec2a:	481e      	ldr	r0, [pc, #120]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800ec2c:	f7f1 fad0 	bl	80001d0 <strcmp>
 800ec30:	4603      	mov	r3, r0
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d106      	bne.n	800ec44 <NMEA_ParsePSTMAGPS+0x218>
      {
        pPSTMAGPS->op = GNSS_AGPS_PROP_MSG;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	220f      	movs	r2, #15
 800ec3a:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_OK;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	721a      	strb	r2, [r3, #8]
 800ec42:	e028      	b.n	800ec96 <NMEA_ParsePSTMAGPS+0x26a>
      }
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSEEDPROPERROR") == 0)
 800ec44:	4923      	ldr	r1, [pc, #140]	@ (800ecd4 <NMEA_ParsePSTMAGPS+0x2a8>)
 800ec46:	4817      	ldr	r0, [pc, #92]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800ec48:	f7f1 fac2 	bl	80001d0 <strcmp>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d106      	bne.n	800ec60 <NMEA_ParsePSTMAGPS+0x234>
      {
        pPSTMAGPS->op = GNSS_AGPS_PROP_MSG;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	220f      	movs	r2, #15
 800ec56:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_ERROR;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	721a      	strb	r2, [r3, #8]
 800ec5e:	e01a      	b.n	800ec96 <NMEA_ParsePSTMAGPS+0x26a>
      }
      /* Init time */
      else if (strcmp((char *)app[0], "$PSTMINITTIMEOK") == 0)
 800ec60:	491d      	ldr	r1, [pc, #116]	@ (800ecd8 <NMEA_ParsePSTMAGPS+0x2ac>)
 800ec62:	4810      	ldr	r0, [pc, #64]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800ec64:	f7f1 fab4 	bl	80001d0 <strcmp>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d106      	bne.n	800ec7c <NMEA_ParsePSTMAGPS+0x250>
      {
        pPSTMAGPS->op = GNSS_AGPS_INITTIME_MSG;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2210      	movs	r2, #16
 800ec72:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_OK;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2200      	movs	r2, #0
 800ec78:	721a      	strb	r2, [r3, #8]
 800ec7a:	e00c      	b.n	800ec96 <NMEA_ParsePSTMAGPS+0x26a>
      }
      else if (strcmp((char *)app[0], "$PSTMINITTIMEERROR") == 0)
 800ec7c:	4917      	ldr	r1, [pc, #92]	@ (800ecdc <NMEA_ParsePSTMAGPS+0x2b0>)
 800ec7e:	4809      	ldr	r0, [pc, #36]	@ (800eca4 <NMEA_ParsePSTMAGPS+0x278>)
 800ec80:	f7f1 faa6 	bl	80001d0 <strcmp>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d105      	bne.n	800ec96 <NMEA_ParsePSTMAGPS+0x26a>
      {
        pPSTMAGPS->op = GNSS_AGPS_INITTIME_MSG;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2210      	movs	r2, #16
 800ec8e:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_ERROR;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2201      	movs	r2, #1
 800ec94:	721a      	strb	r2, [r3, #8]
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 800ec96:	2300      	movs	r3, #0
 800ec98:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800ec9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3720      	adds	r7, #32
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	20005d0c 	.word	0x20005d0c
 800eca8:	0801540c 	.word	0x0801540c
 800ecac:	20005d3c 	.word	0x20005d3c
 800ecb0:	0801541c 	.word	0x0801541c
 800ecb4:	08015434 	.word	0x08015434
 800ecb8:	08015450 	.word	0x08015450
 800ecbc:	08015468 	.word	0x08015468
 800ecc0:	08015480 	.word	0x08015480
 800ecc4:	08015498 	.word	0x08015498
 800ecc8:	080154b0 	.word	0x080154b0
 800eccc:	080154c8 	.word	0x080154c8
 800ecd0:	080154e0 	.word	0x080154e0
 800ecd4:	080154f8 	.word	0x080154f8
 800ecd8:	08015514 	.word	0x08015514
 800ecdc:	08015524 	.word	0x08015524

0800ece0 <NMEA_Copy_Data>:

void NMEA_Copy_Data(GPGGA_Info_t *pInfo, GPGGA_Info_t GPGGAInfo)
{
 800ece0:	b082      	sub	sp, #8
 800ece2:	b480      	push	{r7}
 800ece4:	b083      	sub	sp, #12
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
 800ecea:	f107 0110 	add.w	r1, r7, #16
 800ecee:	e881 000c 	stmia.w	r1, {r2, r3}
  pInfo->acc          = GPGGAInfo.acc;
 800ecf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	631a      	str	r2, [r3, #48]	@ 0x30
  pInfo->geoid.height = GPGGAInfo.geoid.height;
 800ecf8:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	871a      	strh	r2, [r3, #56]	@ 0x38
  pInfo->geoid.mis    = GPGGAInfo.geoid.mis;
 800ed00:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  pInfo->sats         = GPGGAInfo.sats;
 800ed0a:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	869a      	strh	r2, [r3, #52]	@ 0x34
  pInfo->update       = GPGGAInfo.update;
 800ed12:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	@ 0x4c
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  pInfo->utc.hh       = GPGGAInfo.utc.hh;
 800ed1a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	809a      	strh	r2, [r3, #4]
  pInfo->utc.mm       = GPGGAInfo.utc.mm;
 800ed22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	80da      	strh	r2, [r3, #6]
  pInfo->utc.ss       = GPGGAInfo.utc.ss;
 800ed2a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	811a      	strh	r2, [r3, #8]
  pInfo->utc.utc      = GPGGAInfo.utc.utc;
 800ed32:	693a      	ldr	r2, [r7, #16]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	601a      	str	r2, [r3, #0]
  pInfo->valid        = GPGGAInfo.valid;
 800ed38:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  pInfo->xyz.alt      = GPGGAInfo.xyz.alt;
 800ed42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ed46:	6879      	ldr	r1, [r7, #4]
 800ed48:	e9c1 2308 	strd	r2, r3, [r1, #32]
  pInfo->xyz.lat      = GPGGAInfo.xyz.lat;
 800ed4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ed50:	6879      	ldr	r1, [r7, #4]
 800ed52:	e9c1 2304 	strd	r2, r3, [r1, #16]
  pInfo->xyz.lon      = GPGGAInfo.xyz.lon;
 800ed56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ed5a:	6879      	ldr	r1, [r7, #4]
 800ed5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
  pInfo->xyz.ew       = GPGGAInfo.xyz.ew;
 800ed60:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  pInfo->xyz.ns       = GPGGAInfo.xyz.ns;
 800ed6a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  pInfo->xyz.mis      = GPGGAInfo.xyz.mis;
 800ed74:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  pInfo->checksum     = GPGGAInfo.checksum;
 800ed7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ed84:	bf00      	nop
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	b002      	add	sp, #8
 800ed90:	4770      	bx	lr

0800ed92 <char2int>:
 * @brief  Function that converts a character to unsigned integer
 * @param  c        The character to convert
 * @retval The returned unsigned integer
 */
uint32_t char2int(uint8_t c)
{
 800ed92:	b480      	push	{r7}
 800ed94:	b085      	sub	sp, #20
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	4603      	mov	r3, r0
 800ed9a:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = (unsigned char)0;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	60fb      	str	r3, [r7, #12]

  if((c >= (uint8_t)'0') && (c <= (uint8_t)'9'))
 800eda0:	79fb      	ldrb	r3, [r7, #7]
 800eda2:	2b2f      	cmp	r3, #47	@ 0x2f
 800eda4:	d906      	bls.n	800edb4 <char2int+0x22>
 800eda6:	79fb      	ldrb	r3, [r7, #7]
 800eda8:	2b39      	cmp	r3, #57	@ 0x39
 800edaa:	d803      	bhi.n	800edb4 <char2int+0x22>
  {
    ret = (unsigned char)(c - (uint8_t)'0');
 800edac:	79fb      	ldrb	r3, [r7, #7]
 800edae:	3b30      	subs	r3, #48	@ 0x30
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	60fb      	str	r3, [r7, #12]
  }

  if((c >= (uint8_t)'A') && (c <= (uint8_t)'F'))
 800edb4:	79fb      	ldrb	r3, [r7, #7]
 800edb6:	2b40      	cmp	r3, #64	@ 0x40
 800edb8:	d907      	bls.n	800edca <char2int+0x38>
 800edba:	79fb      	ldrb	r3, [r7, #7]
 800edbc:	2b46      	cmp	r3, #70	@ 0x46
 800edbe:	d804      	bhi.n	800edca <char2int+0x38>
  {
    ret = (unsigned char)(c - (uint8_t)'A') + (unsigned)10;
 800edc0:	79fb      	ldrb	r3, [r7, #7]
 800edc2:	3b41      	subs	r3, #65	@ 0x41
 800edc4:	b2db      	uxtb	r3, r3
 800edc6:	330a      	adds	r3, #10
 800edc8:	60fb      	str	r3, [r7, #12]
  }

  if((c >= (uint8_t)'a') && (c <= (uint8_t)'f'))
 800edca:	79fb      	ldrb	r3, [r7, #7]
 800edcc:	2b60      	cmp	r3, #96	@ 0x60
 800edce:	d907      	bls.n	800ede0 <char2int+0x4e>
 800edd0:	79fb      	ldrb	r3, [r7, #7]
 800edd2:	2b66      	cmp	r3, #102	@ 0x66
 800edd4:	d804      	bhi.n	800ede0 <char2int+0x4e>
  {
    ret = (unsigned char)(c - (uint8_t)'a') + (unsigned)10;
 800edd6:	79fb      	ldrb	r3, [r7, #7]
 800edd8:	3b61      	subs	r3, #97	@ 0x61
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	330a      	adds	r3, #10
 800edde:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ede0:	68fb      	ldr	r3, [r7, #12]
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3714      	adds	r7, #20
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <atoi>:
 800edee:	220a      	movs	r2, #10
 800edf0:	2100      	movs	r1, #0
 800edf2:	f000 beef 	b.w	800fbd4 <strtol>

0800edf6 <sulp>:
 800edf6:	b570      	push	{r4, r5, r6, lr}
 800edf8:	4604      	mov	r4, r0
 800edfa:	460d      	mov	r5, r1
 800edfc:	ec45 4b10 	vmov	d0, r4, r5
 800ee00:	4616      	mov	r6, r2
 800ee02:	f003 fcb1 	bl	8012768 <__ulp>
 800ee06:	ec51 0b10 	vmov	r0, r1, d0
 800ee0a:	b17e      	cbz	r6, 800ee2c <sulp+0x36>
 800ee0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ee10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	dd09      	ble.n	800ee2c <sulp+0x36>
 800ee18:	051b      	lsls	r3, r3, #20
 800ee1a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ee1e:	2400      	movs	r4, #0
 800ee20:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ee24:	4622      	mov	r2, r4
 800ee26:	462b      	mov	r3, r5
 800ee28:	f7f1 fbf6 	bl	8000618 <__aeabi_dmul>
 800ee2c:	ec41 0b10 	vmov	d0, r0, r1
 800ee30:	bd70      	pop	{r4, r5, r6, pc}
 800ee32:	0000      	movs	r0, r0
 800ee34:	0000      	movs	r0, r0
	...

0800ee38 <_strtod_l>:
 800ee38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee3c:	b09f      	sub	sp, #124	@ 0x7c
 800ee3e:	460c      	mov	r4, r1
 800ee40:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ee42:	2200      	movs	r2, #0
 800ee44:	921a      	str	r2, [sp, #104]	@ 0x68
 800ee46:	9005      	str	r0, [sp, #20]
 800ee48:	f04f 0a00 	mov.w	sl, #0
 800ee4c:	f04f 0b00 	mov.w	fp, #0
 800ee50:	460a      	mov	r2, r1
 800ee52:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee54:	7811      	ldrb	r1, [r2, #0]
 800ee56:	292b      	cmp	r1, #43	@ 0x2b
 800ee58:	d04a      	beq.n	800eef0 <_strtod_l+0xb8>
 800ee5a:	d838      	bhi.n	800eece <_strtod_l+0x96>
 800ee5c:	290d      	cmp	r1, #13
 800ee5e:	d832      	bhi.n	800eec6 <_strtod_l+0x8e>
 800ee60:	2908      	cmp	r1, #8
 800ee62:	d832      	bhi.n	800eeca <_strtod_l+0x92>
 800ee64:	2900      	cmp	r1, #0
 800ee66:	d03b      	beq.n	800eee0 <_strtod_l+0xa8>
 800ee68:	2200      	movs	r2, #0
 800ee6a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ee6e:	782a      	ldrb	r2, [r5, #0]
 800ee70:	2a30      	cmp	r2, #48	@ 0x30
 800ee72:	f040 80b2 	bne.w	800efda <_strtod_l+0x1a2>
 800ee76:	786a      	ldrb	r2, [r5, #1]
 800ee78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ee7c:	2a58      	cmp	r2, #88	@ 0x58
 800ee7e:	d16e      	bne.n	800ef5e <_strtod_l+0x126>
 800ee80:	9302      	str	r3, [sp, #8]
 800ee82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee84:	9301      	str	r3, [sp, #4]
 800ee86:	ab1a      	add	r3, sp, #104	@ 0x68
 800ee88:	9300      	str	r3, [sp, #0]
 800ee8a:	4a8f      	ldr	r2, [pc, #572]	@ (800f0c8 <_strtod_l+0x290>)
 800ee8c:	9805      	ldr	r0, [sp, #20]
 800ee8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ee90:	a919      	add	r1, sp, #100	@ 0x64
 800ee92:	f002 fd63 	bl	801195c <__gethex>
 800ee96:	f010 060f 	ands.w	r6, r0, #15
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	d005      	beq.n	800eeaa <_strtod_l+0x72>
 800ee9e:	2e06      	cmp	r6, #6
 800eea0:	d128      	bne.n	800eef4 <_strtod_l+0xbc>
 800eea2:	3501      	adds	r5, #1
 800eea4:	2300      	movs	r3, #0
 800eea6:	9519      	str	r5, [sp, #100]	@ 0x64
 800eea8:	930e      	str	r3, [sp, #56]	@ 0x38
 800eeaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f040 858e 	bne.w	800f9ce <_strtod_l+0xb96>
 800eeb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eeb4:	b1cb      	cbz	r3, 800eeea <_strtod_l+0xb2>
 800eeb6:	4652      	mov	r2, sl
 800eeb8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800eebc:	ec43 2b10 	vmov	d0, r2, r3
 800eec0:	b01f      	add	sp, #124	@ 0x7c
 800eec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec6:	2920      	cmp	r1, #32
 800eec8:	d1ce      	bne.n	800ee68 <_strtod_l+0x30>
 800eeca:	3201      	adds	r2, #1
 800eecc:	e7c1      	b.n	800ee52 <_strtod_l+0x1a>
 800eece:	292d      	cmp	r1, #45	@ 0x2d
 800eed0:	d1ca      	bne.n	800ee68 <_strtod_l+0x30>
 800eed2:	2101      	movs	r1, #1
 800eed4:	910e      	str	r1, [sp, #56]	@ 0x38
 800eed6:	1c51      	adds	r1, r2, #1
 800eed8:	9119      	str	r1, [sp, #100]	@ 0x64
 800eeda:	7852      	ldrb	r2, [r2, #1]
 800eedc:	2a00      	cmp	r2, #0
 800eede:	d1c5      	bne.n	800ee6c <_strtod_l+0x34>
 800eee0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eee2:	9419      	str	r4, [sp, #100]	@ 0x64
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	f040 8570 	bne.w	800f9ca <_strtod_l+0xb92>
 800eeea:	4652      	mov	r2, sl
 800eeec:	465b      	mov	r3, fp
 800eeee:	e7e5      	b.n	800eebc <_strtod_l+0x84>
 800eef0:	2100      	movs	r1, #0
 800eef2:	e7ef      	b.n	800eed4 <_strtod_l+0x9c>
 800eef4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eef6:	b13a      	cbz	r2, 800ef08 <_strtod_l+0xd0>
 800eef8:	2135      	movs	r1, #53	@ 0x35
 800eefa:	a81c      	add	r0, sp, #112	@ 0x70
 800eefc:	f003 fd2e 	bl	801295c <__copybits>
 800ef00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef02:	9805      	ldr	r0, [sp, #20]
 800ef04:	f003 f904 	bl	8012110 <_Bfree>
 800ef08:	3e01      	subs	r6, #1
 800ef0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ef0c:	2e04      	cmp	r6, #4
 800ef0e:	d806      	bhi.n	800ef1e <_strtod_l+0xe6>
 800ef10:	e8df f006 	tbb	[pc, r6]
 800ef14:	201d0314 	.word	0x201d0314
 800ef18:	14          	.byte	0x14
 800ef19:	00          	.byte	0x00
 800ef1a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ef1e:	05e1      	lsls	r1, r4, #23
 800ef20:	bf48      	it	mi
 800ef22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ef26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ef2a:	0d1b      	lsrs	r3, r3, #20
 800ef2c:	051b      	lsls	r3, r3, #20
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1bb      	bne.n	800eeaa <_strtod_l+0x72>
 800ef32:	f001 fdbb 	bl	8010aac <__errno>
 800ef36:	2322      	movs	r3, #34	@ 0x22
 800ef38:	6003      	str	r3, [r0, #0]
 800ef3a:	e7b6      	b.n	800eeaa <_strtod_l+0x72>
 800ef3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ef40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ef44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ef48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ef4c:	e7e7      	b.n	800ef1e <_strtod_l+0xe6>
 800ef4e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800f0d0 <_strtod_l+0x298>
 800ef52:	e7e4      	b.n	800ef1e <_strtod_l+0xe6>
 800ef54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ef58:	f04f 3aff 	mov.w	sl, #4294967295
 800ef5c:	e7df      	b.n	800ef1e <_strtod_l+0xe6>
 800ef5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef60:	1c5a      	adds	r2, r3, #1
 800ef62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ef64:	785b      	ldrb	r3, [r3, #1]
 800ef66:	2b30      	cmp	r3, #48	@ 0x30
 800ef68:	d0f9      	beq.n	800ef5e <_strtod_l+0x126>
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d09d      	beq.n	800eeaa <_strtod_l+0x72>
 800ef6e:	2301      	movs	r3, #1
 800ef70:	2700      	movs	r7, #0
 800ef72:	9308      	str	r3, [sp, #32]
 800ef74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef76:	930c      	str	r3, [sp, #48]	@ 0x30
 800ef78:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ef7a:	46b9      	mov	r9, r7
 800ef7c:	220a      	movs	r2, #10
 800ef7e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ef80:	7805      	ldrb	r5, [r0, #0]
 800ef82:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ef86:	b2d9      	uxtb	r1, r3
 800ef88:	2909      	cmp	r1, #9
 800ef8a:	d928      	bls.n	800efde <_strtod_l+0x1a6>
 800ef8c:	494f      	ldr	r1, [pc, #316]	@ (800f0cc <_strtod_l+0x294>)
 800ef8e:	2201      	movs	r2, #1
 800ef90:	f001 fd1d 	bl	80109ce <strncmp>
 800ef94:	2800      	cmp	r0, #0
 800ef96:	d032      	beq.n	800effe <_strtod_l+0x1c6>
 800ef98:	2000      	movs	r0, #0
 800ef9a:	462a      	mov	r2, r5
 800ef9c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ef9e:	464d      	mov	r5, r9
 800efa0:	4603      	mov	r3, r0
 800efa2:	2a65      	cmp	r2, #101	@ 0x65
 800efa4:	d001      	beq.n	800efaa <_strtod_l+0x172>
 800efa6:	2a45      	cmp	r2, #69	@ 0x45
 800efa8:	d114      	bne.n	800efd4 <_strtod_l+0x19c>
 800efaa:	b91d      	cbnz	r5, 800efb4 <_strtod_l+0x17c>
 800efac:	9a08      	ldr	r2, [sp, #32]
 800efae:	4302      	orrs	r2, r0
 800efb0:	d096      	beq.n	800eee0 <_strtod_l+0xa8>
 800efb2:	2500      	movs	r5, #0
 800efb4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800efb6:	1c62      	adds	r2, r4, #1
 800efb8:	9219      	str	r2, [sp, #100]	@ 0x64
 800efba:	7862      	ldrb	r2, [r4, #1]
 800efbc:	2a2b      	cmp	r2, #43	@ 0x2b
 800efbe:	d07a      	beq.n	800f0b6 <_strtod_l+0x27e>
 800efc0:	2a2d      	cmp	r2, #45	@ 0x2d
 800efc2:	d07e      	beq.n	800f0c2 <_strtod_l+0x28a>
 800efc4:	f04f 0c00 	mov.w	ip, #0
 800efc8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800efcc:	2909      	cmp	r1, #9
 800efce:	f240 8085 	bls.w	800f0dc <_strtod_l+0x2a4>
 800efd2:	9419      	str	r4, [sp, #100]	@ 0x64
 800efd4:	f04f 0800 	mov.w	r8, #0
 800efd8:	e0a5      	b.n	800f126 <_strtod_l+0x2ee>
 800efda:	2300      	movs	r3, #0
 800efdc:	e7c8      	b.n	800ef70 <_strtod_l+0x138>
 800efde:	f1b9 0f08 	cmp.w	r9, #8
 800efe2:	bfd8      	it	le
 800efe4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800efe6:	f100 0001 	add.w	r0, r0, #1
 800efea:	bfda      	itte	le
 800efec:	fb02 3301 	mlale	r3, r2, r1, r3
 800eff0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800eff2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800eff6:	f109 0901 	add.w	r9, r9, #1
 800effa:	9019      	str	r0, [sp, #100]	@ 0x64
 800effc:	e7bf      	b.n	800ef7e <_strtod_l+0x146>
 800effe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f000:	1c5a      	adds	r2, r3, #1
 800f002:	9219      	str	r2, [sp, #100]	@ 0x64
 800f004:	785a      	ldrb	r2, [r3, #1]
 800f006:	f1b9 0f00 	cmp.w	r9, #0
 800f00a:	d03b      	beq.n	800f084 <_strtod_l+0x24c>
 800f00c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f00e:	464d      	mov	r5, r9
 800f010:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f014:	2b09      	cmp	r3, #9
 800f016:	d912      	bls.n	800f03e <_strtod_l+0x206>
 800f018:	2301      	movs	r3, #1
 800f01a:	e7c2      	b.n	800efa2 <_strtod_l+0x16a>
 800f01c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f01e:	1c5a      	adds	r2, r3, #1
 800f020:	9219      	str	r2, [sp, #100]	@ 0x64
 800f022:	785a      	ldrb	r2, [r3, #1]
 800f024:	3001      	adds	r0, #1
 800f026:	2a30      	cmp	r2, #48	@ 0x30
 800f028:	d0f8      	beq.n	800f01c <_strtod_l+0x1e4>
 800f02a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f02e:	2b08      	cmp	r3, #8
 800f030:	f200 84d2 	bhi.w	800f9d8 <_strtod_l+0xba0>
 800f034:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f036:	900a      	str	r0, [sp, #40]	@ 0x28
 800f038:	2000      	movs	r0, #0
 800f03a:	930c      	str	r3, [sp, #48]	@ 0x30
 800f03c:	4605      	mov	r5, r0
 800f03e:	3a30      	subs	r2, #48	@ 0x30
 800f040:	f100 0301 	add.w	r3, r0, #1
 800f044:	d018      	beq.n	800f078 <_strtod_l+0x240>
 800f046:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f048:	4419      	add	r1, r3
 800f04a:	910a      	str	r1, [sp, #40]	@ 0x28
 800f04c:	462e      	mov	r6, r5
 800f04e:	f04f 0e0a 	mov.w	lr, #10
 800f052:	1c71      	adds	r1, r6, #1
 800f054:	eba1 0c05 	sub.w	ip, r1, r5
 800f058:	4563      	cmp	r3, ip
 800f05a:	dc15      	bgt.n	800f088 <_strtod_l+0x250>
 800f05c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800f060:	182b      	adds	r3, r5, r0
 800f062:	2b08      	cmp	r3, #8
 800f064:	f105 0501 	add.w	r5, r5, #1
 800f068:	4405      	add	r5, r0
 800f06a:	dc1a      	bgt.n	800f0a2 <_strtod_l+0x26a>
 800f06c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f06e:	230a      	movs	r3, #10
 800f070:	fb03 2301 	mla	r3, r3, r1, r2
 800f074:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f076:	2300      	movs	r3, #0
 800f078:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f07a:	1c51      	adds	r1, r2, #1
 800f07c:	9119      	str	r1, [sp, #100]	@ 0x64
 800f07e:	7852      	ldrb	r2, [r2, #1]
 800f080:	4618      	mov	r0, r3
 800f082:	e7c5      	b.n	800f010 <_strtod_l+0x1d8>
 800f084:	4648      	mov	r0, r9
 800f086:	e7ce      	b.n	800f026 <_strtod_l+0x1ee>
 800f088:	2e08      	cmp	r6, #8
 800f08a:	dc05      	bgt.n	800f098 <_strtod_l+0x260>
 800f08c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f08e:	fb0e f606 	mul.w	r6, lr, r6
 800f092:	960b      	str	r6, [sp, #44]	@ 0x2c
 800f094:	460e      	mov	r6, r1
 800f096:	e7dc      	b.n	800f052 <_strtod_l+0x21a>
 800f098:	2910      	cmp	r1, #16
 800f09a:	bfd8      	it	le
 800f09c:	fb0e f707 	mulle.w	r7, lr, r7
 800f0a0:	e7f8      	b.n	800f094 <_strtod_l+0x25c>
 800f0a2:	2b0f      	cmp	r3, #15
 800f0a4:	bfdc      	itt	le
 800f0a6:	230a      	movle	r3, #10
 800f0a8:	fb03 2707 	mlale	r7, r3, r7, r2
 800f0ac:	e7e3      	b.n	800f076 <_strtod_l+0x23e>
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	e77a      	b.n	800efac <_strtod_l+0x174>
 800f0b6:	f04f 0c00 	mov.w	ip, #0
 800f0ba:	1ca2      	adds	r2, r4, #2
 800f0bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800f0be:	78a2      	ldrb	r2, [r4, #2]
 800f0c0:	e782      	b.n	800efc8 <_strtod_l+0x190>
 800f0c2:	f04f 0c01 	mov.w	ip, #1
 800f0c6:	e7f8      	b.n	800f0ba <_strtod_l+0x282>
 800f0c8:	080157a4 	.word	0x080157a4
 800f0cc:	080155bc 	.word	0x080155bc
 800f0d0:	7ff00000 	.word	0x7ff00000
 800f0d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f0d6:	1c51      	adds	r1, r2, #1
 800f0d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800f0da:	7852      	ldrb	r2, [r2, #1]
 800f0dc:	2a30      	cmp	r2, #48	@ 0x30
 800f0de:	d0f9      	beq.n	800f0d4 <_strtod_l+0x29c>
 800f0e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f0e4:	2908      	cmp	r1, #8
 800f0e6:	f63f af75 	bhi.w	800efd4 <_strtod_l+0x19c>
 800f0ea:	3a30      	subs	r2, #48	@ 0x30
 800f0ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800f0ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f0f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f0f2:	f04f 080a 	mov.w	r8, #10
 800f0f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f0f8:	1c56      	adds	r6, r2, #1
 800f0fa:	9619      	str	r6, [sp, #100]	@ 0x64
 800f0fc:	7852      	ldrb	r2, [r2, #1]
 800f0fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f102:	f1be 0f09 	cmp.w	lr, #9
 800f106:	d939      	bls.n	800f17c <_strtod_l+0x344>
 800f108:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f10a:	1a76      	subs	r6, r6, r1
 800f10c:	2e08      	cmp	r6, #8
 800f10e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f112:	dc03      	bgt.n	800f11c <_strtod_l+0x2e4>
 800f114:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f116:	4588      	cmp	r8, r1
 800f118:	bfa8      	it	ge
 800f11a:	4688      	movge	r8, r1
 800f11c:	f1bc 0f00 	cmp.w	ip, #0
 800f120:	d001      	beq.n	800f126 <_strtod_l+0x2ee>
 800f122:	f1c8 0800 	rsb	r8, r8, #0
 800f126:	2d00      	cmp	r5, #0
 800f128:	d14e      	bne.n	800f1c8 <_strtod_l+0x390>
 800f12a:	9908      	ldr	r1, [sp, #32]
 800f12c:	4308      	orrs	r0, r1
 800f12e:	f47f aebc 	bne.w	800eeaa <_strtod_l+0x72>
 800f132:	2b00      	cmp	r3, #0
 800f134:	f47f aed4 	bne.w	800eee0 <_strtod_l+0xa8>
 800f138:	2a69      	cmp	r2, #105	@ 0x69
 800f13a:	d028      	beq.n	800f18e <_strtod_l+0x356>
 800f13c:	dc25      	bgt.n	800f18a <_strtod_l+0x352>
 800f13e:	2a49      	cmp	r2, #73	@ 0x49
 800f140:	d025      	beq.n	800f18e <_strtod_l+0x356>
 800f142:	2a4e      	cmp	r2, #78	@ 0x4e
 800f144:	f47f aecc 	bne.w	800eee0 <_strtod_l+0xa8>
 800f148:	499a      	ldr	r1, [pc, #616]	@ (800f3b4 <_strtod_l+0x57c>)
 800f14a:	a819      	add	r0, sp, #100	@ 0x64
 800f14c:	f002 fe28 	bl	8011da0 <__match>
 800f150:	2800      	cmp	r0, #0
 800f152:	f43f aec5 	beq.w	800eee0 <_strtod_l+0xa8>
 800f156:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	2b28      	cmp	r3, #40	@ 0x28
 800f15c:	d12e      	bne.n	800f1bc <_strtod_l+0x384>
 800f15e:	4996      	ldr	r1, [pc, #600]	@ (800f3b8 <_strtod_l+0x580>)
 800f160:	aa1c      	add	r2, sp, #112	@ 0x70
 800f162:	a819      	add	r0, sp, #100	@ 0x64
 800f164:	f002 fe30 	bl	8011dc8 <__hexnan>
 800f168:	2805      	cmp	r0, #5
 800f16a:	d127      	bne.n	800f1bc <_strtod_l+0x384>
 800f16c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f16e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f172:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f176:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f17a:	e696      	b.n	800eeaa <_strtod_l+0x72>
 800f17c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f17e:	fb08 2101 	mla	r1, r8, r1, r2
 800f182:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f186:	9209      	str	r2, [sp, #36]	@ 0x24
 800f188:	e7b5      	b.n	800f0f6 <_strtod_l+0x2be>
 800f18a:	2a6e      	cmp	r2, #110	@ 0x6e
 800f18c:	e7da      	b.n	800f144 <_strtod_l+0x30c>
 800f18e:	498b      	ldr	r1, [pc, #556]	@ (800f3bc <_strtod_l+0x584>)
 800f190:	a819      	add	r0, sp, #100	@ 0x64
 800f192:	f002 fe05 	bl	8011da0 <__match>
 800f196:	2800      	cmp	r0, #0
 800f198:	f43f aea2 	beq.w	800eee0 <_strtod_l+0xa8>
 800f19c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f19e:	4988      	ldr	r1, [pc, #544]	@ (800f3c0 <_strtod_l+0x588>)
 800f1a0:	3b01      	subs	r3, #1
 800f1a2:	a819      	add	r0, sp, #100	@ 0x64
 800f1a4:	9319      	str	r3, [sp, #100]	@ 0x64
 800f1a6:	f002 fdfb 	bl	8011da0 <__match>
 800f1aa:	b910      	cbnz	r0, 800f1b2 <_strtod_l+0x37a>
 800f1ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800f1b2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f3d0 <_strtod_l+0x598>
 800f1b6:	f04f 0a00 	mov.w	sl, #0
 800f1ba:	e676      	b.n	800eeaa <_strtod_l+0x72>
 800f1bc:	4881      	ldr	r0, [pc, #516]	@ (800f3c4 <_strtod_l+0x58c>)
 800f1be:	f001 fcb3 	bl	8010b28 <nan>
 800f1c2:	ec5b ab10 	vmov	sl, fp, d0
 800f1c6:	e670      	b.n	800eeaa <_strtod_l+0x72>
 800f1c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f1cc:	eba8 0303 	sub.w	r3, r8, r3
 800f1d0:	f1b9 0f00 	cmp.w	r9, #0
 800f1d4:	bf08      	it	eq
 800f1d6:	46a9      	moveq	r9, r5
 800f1d8:	2d10      	cmp	r5, #16
 800f1da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1dc:	462c      	mov	r4, r5
 800f1de:	bfa8      	it	ge
 800f1e0:	2410      	movge	r4, #16
 800f1e2:	f7f1 f99f 	bl	8000524 <__aeabi_ui2d>
 800f1e6:	2d09      	cmp	r5, #9
 800f1e8:	4682      	mov	sl, r0
 800f1ea:	468b      	mov	fp, r1
 800f1ec:	dc13      	bgt.n	800f216 <_strtod_l+0x3de>
 800f1ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f43f ae5a 	beq.w	800eeaa <_strtod_l+0x72>
 800f1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1f8:	dd78      	ble.n	800f2ec <_strtod_l+0x4b4>
 800f1fa:	2b16      	cmp	r3, #22
 800f1fc:	dc5f      	bgt.n	800f2be <_strtod_l+0x486>
 800f1fe:	4972      	ldr	r1, [pc, #456]	@ (800f3c8 <_strtod_l+0x590>)
 800f200:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f204:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f208:	4652      	mov	r2, sl
 800f20a:	465b      	mov	r3, fp
 800f20c:	f7f1 fa04 	bl	8000618 <__aeabi_dmul>
 800f210:	4682      	mov	sl, r0
 800f212:	468b      	mov	fp, r1
 800f214:	e649      	b.n	800eeaa <_strtod_l+0x72>
 800f216:	4b6c      	ldr	r3, [pc, #432]	@ (800f3c8 <_strtod_l+0x590>)
 800f218:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f21c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f220:	f7f1 f9fa 	bl	8000618 <__aeabi_dmul>
 800f224:	4682      	mov	sl, r0
 800f226:	4638      	mov	r0, r7
 800f228:	468b      	mov	fp, r1
 800f22a:	f7f1 f97b 	bl	8000524 <__aeabi_ui2d>
 800f22e:	4602      	mov	r2, r0
 800f230:	460b      	mov	r3, r1
 800f232:	4650      	mov	r0, sl
 800f234:	4659      	mov	r1, fp
 800f236:	f7f1 f839 	bl	80002ac <__adddf3>
 800f23a:	2d0f      	cmp	r5, #15
 800f23c:	4682      	mov	sl, r0
 800f23e:	468b      	mov	fp, r1
 800f240:	ddd5      	ble.n	800f1ee <_strtod_l+0x3b6>
 800f242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f244:	1b2c      	subs	r4, r5, r4
 800f246:	441c      	add	r4, r3
 800f248:	2c00      	cmp	r4, #0
 800f24a:	f340 8093 	ble.w	800f374 <_strtod_l+0x53c>
 800f24e:	f014 030f 	ands.w	r3, r4, #15
 800f252:	d00a      	beq.n	800f26a <_strtod_l+0x432>
 800f254:	495c      	ldr	r1, [pc, #368]	@ (800f3c8 <_strtod_l+0x590>)
 800f256:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f25a:	4652      	mov	r2, sl
 800f25c:	465b      	mov	r3, fp
 800f25e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f262:	f7f1 f9d9 	bl	8000618 <__aeabi_dmul>
 800f266:	4682      	mov	sl, r0
 800f268:	468b      	mov	fp, r1
 800f26a:	f034 040f 	bics.w	r4, r4, #15
 800f26e:	d073      	beq.n	800f358 <_strtod_l+0x520>
 800f270:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f274:	dd49      	ble.n	800f30a <_strtod_l+0x4d2>
 800f276:	2400      	movs	r4, #0
 800f278:	46a0      	mov	r8, r4
 800f27a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f27c:	46a1      	mov	r9, r4
 800f27e:	9a05      	ldr	r2, [sp, #20]
 800f280:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f3d0 <_strtod_l+0x598>
 800f284:	2322      	movs	r3, #34	@ 0x22
 800f286:	6013      	str	r3, [r2, #0]
 800f288:	f04f 0a00 	mov.w	sl, #0
 800f28c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f28e:	2b00      	cmp	r3, #0
 800f290:	f43f ae0b 	beq.w	800eeaa <_strtod_l+0x72>
 800f294:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f296:	9805      	ldr	r0, [sp, #20]
 800f298:	f002 ff3a 	bl	8012110 <_Bfree>
 800f29c:	9805      	ldr	r0, [sp, #20]
 800f29e:	4649      	mov	r1, r9
 800f2a0:	f002 ff36 	bl	8012110 <_Bfree>
 800f2a4:	9805      	ldr	r0, [sp, #20]
 800f2a6:	4641      	mov	r1, r8
 800f2a8:	f002 ff32 	bl	8012110 <_Bfree>
 800f2ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f2ae:	9805      	ldr	r0, [sp, #20]
 800f2b0:	f002 ff2e 	bl	8012110 <_Bfree>
 800f2b4:	9805      	ldr	r0, [sp, #20]
 800f2b6:	4621      	mov	r1, r4
 800f2b8:	f002 ff2a 	bl	8012110 <_Bfree>
 800f2bc:	e5f5      	b.n	800eeaa <_strtod_l+0x72>
 800f2be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	dbbc      	blt.n	800f242 <_strtod_l+0x40a>
 800f2c8:	4c3f      	ldr	r4, [pc, #252]	@ (800f3c8 <_strtod_l+0x590>)
 800f2ca:	f1c5 050f 	rsb	r5, r5, #15
 800f2ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f2d2:	4652      	mov	r2, sl
 800f2d4:	465b      	mov	r3, fp
 800f2d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2da:	f7f1 f99d 	bl	8000618 <__aeabi_dmul>
 800f2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2e0:	1b5d      	subs	r5, r3, r5
 800f2e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f2e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f2ea:	e78f      	b.n	800f20c <_strtod_l+0x3d4>
 800f2ec:	3316      	adds	r3, #22
 800f2ee:	dba8      	blt.n	800f242 <_strtod_l+0x40a>
 800f2f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2f2:	eba3 0808 	sub.w	r8, r3, r8
 800f2f6:	4b34      	ldr	r3, [pc, #208]	@ (800f3c8 <_strtod_l+0x590>)
 800f2f8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f2fc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f300:	4650      	mov	r0, sl
 800f302:	4659      	mov	r1, fp
 800f304:	f7f1 fab2 	bl	800086c <__aeabi_ddiv>
 800f308:	e782      	b.n	800f210 <_strtod_l+0x3d8>
 800f30a:	2300      	movs	r3, #0
 800f30c:	4f2f      	ldr	r7, [pc, #188]	@ (800f3cc <_strtod_l+0x594>)
 800f30e:	1124      	asrs	r4, r4, #4
 800f310:	4650      	mov	r0, sl
 800f312:	4659      	mov	r1, fp
 800f314:	461e      	mov	r6, r3
 800f316:	2c01      	cmp	r4, #1
 800f318:	dc21      	bgt.n	800f35e <_strtod_l+0x526>
 800f31a:	b10b      	cbz	r3, 800f320 <_strtod_l+0x4e8>
 800f31c:	4682      	mov	sl, r0
 800f31e:	468b      	mov	fp, r1
 800f320:	492a      	ldr	r1, [pc, #168]	@ (800f3cc <_strtod_l+0x594>)
 800f322:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f326:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f32a:	4652      	mov	r2, sl
 800f32c:	465b      	mov	r3, fp
 800f32e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f332:	f7f1 f971 	bl	8000618 <__aeabi_dmul>
 800f336:	4b26      	ldr	r3, [pc, #152]	@ (800f3d0 <_strtod_l+0x598>)
 800f338:	460a      	mov	r2, r1
 800f33a:	400b      	ands	r3, r1
 800f33c:	4925      	ldr	r1, [pc, #148]	@ (800f3d4 <_strtod_l+0x59c>)
 800f33e:	428b      	cmp	r3, r1
 800f340:	4682      	mov	sl, r0
 800f342:	d898      	bhi.n	800f276 <_strtod_l+0x43e>
 800f344:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f348:	428b      	cmp	r3, r1
 800f34a:	bf86      	itte	hi
 800f34c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f3d8 <_strtod_l+0x5a0>
 800f350:	f04f 3aff 	movhi.w	sl, #4294967295
 800f354:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f358:	2300      	movs	r3, #0
 800f35a:	9308      	str	r3, [sp, #32]
 800f35c:	e076      	b.n	800f44c <_strtod_l+0x614>
 800f35e:	07e2      	lsls	r2, r4, #31
 800f360:	d504      	bpl.n	800f36c <_strtod_l+0x534>
 800f362:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f366:	f7f1 f957 	bl	8000618 <__aeabi_dmul>
 800f36a:	2301      	movs	r3, #1
 800f36c:	3601      	adds	r6, #1
 800f36e:	1064      	asrs	r4, r4, #1
 800f370:	3708      	adds	r7, #8
 800f372:	e7d0      	b.n	800f316 <_strtod_l+0x4de>
 800f374:	d0f0      	beq.n	800f358 <_strtod_l+0x520>
 800f376:	4264      	negs	r4, r4
 800f378:	f014 020f 	ands.w	r2, r4, #15
 800f37c:	d00a      	beq.n	800f394 <_strtod_l+0x55c>
 800f37e:	4b12      	ldr	r3, [pc, #72]	@ (800f3c8 <_strtod_l+0x590>)
 800f380:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f384:	4650      	mov	r0, sl
 800f386:	4659      	mov	r1, fp
 800f388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f38c:	f7f1 fa6e 	bl	800086c <__aeabi_ddiv>
 800f390:	4682      	mov	sl, r0
 800f392:	468b      	mov	fp, r1
 800f394:	1124      	asrs	r4, r4, #4
 800f396:	d0df      	beq.n	800f358 <_strtod_l+0x520>
 800f398:	2c1f      	cmp	r4, #31
 800f39a:	dd1f      	ble.n	800f3dc <_strtod_l+0x5a4>
 800f39c:	2400      	movs	r4, #0
 800f39e:	46a0      	mov	r8, r4
 800f3a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f3a2:	46a1      	mov	r9, r4
 800f3a4:	9a05      	ldr	r2, [sp, #20]
 800f3a6:	2322      	movs	r3, #34	@ 0x22
 800f3a8:	f04f 0a00 	mov.w	sl, #0
 800f3ac:	f04f 0b00 	mov.w	fp, #0
 800f3b0:	6013      	str	r3, [r2, #0]
 800f3b2:	e76b      	b.n	800f28c <_strtod_l+0x454>
 800f3b4:	080155cb 	.word	0x080155cb
 800f3b8:	08015790 	.word	0x08015790
 800f3bc:	080155c3 	.word	0x080155c3
 800f3c0:	080155fd 	.word	0x080155fd
 800f3c4:	0801578c 	.word	0x0801578c
 800f3c8:	08015918 	.word	0x08015918
 800f3cc:	080158f0 	.word	0x080158f0
 800f3d0:	7ff00000 	.word	0x7ff00000
 800f3d4:	7ca00000 	.word	0x7ca00000
 800f3d8:	7fefffff 	.word	0x7fefffff
 800f3dc:	f014 0310 	ands.w	r3, r4, #16
 800f3e0:	bf18      	it	ne
 800f3e2:	236a      	movne	r3, #106	@ 0x6a
 800f3e4:	4ea9      	ldr	r6, [pc, #676]	@ (800f68c <_strtod_l+0x854>)
 800f3e6:	9308      	str	r3, [sp, #32]
 800f3e8:	4650      	mov	r0, sl
 800f3ea:	4659      	mov	r1, fp
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	07e7      	lsls	r7, r4, #31
 800f3f0:	d504      	bpl.n	800f3fc <_strtod_l+0x5c4>
 800f3f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f3f6:	f7f1 f90f 	bl	8000618 <__aeabi_dmul>
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	1064      	asrs	r4, r4, #1
 800f3fe:	f106 0608 	add.w	r6, r6, #8
 800f402:	d1f4      	bne.n	800f3ee <_strtod_l+0x5b6>
 800f404:	b10b      	cbz	r3, 800f40a <_strtod_l+0x5d2>
 800f406:	4682      	mov	sl, r0
 800f408:	468b      	mov	fp, r1
 800f40a:	9b08      	ldr	r3, [sp, #32]
 800f40c:	b1b3      	cbz	r3, 800f43c <_strtod_l+0x604>
 800f40e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f412:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f416:	2b00      	cmp	r3, #0
 800f418:	4659      	mov	r1, fp
 800f41a:	dd0f      	ble.n	800f43c <_strtod_l+0x604>
 800f41c:	2b1f      	cmp	r3, #31
 800f41e:	dd56      	ble.n	800f4ce <_strtod_l+0x696>
 800f420:	2b34      	cmp	r3, #52	@ 0x34
 800f422:	bfde      	ittt	le
 800f424:	f04f 33ff 	movle.w	r3, #4294967295
 800f428:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f42c:	4093      	lslle	r3, r2
 800f42e:	f04f 0a00 	mov.w	sl, #0
 800f432:	bfcc      	ite	gt
 800f434:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f438:	ea03 0b01 	andle.w	fp, r3, r1
 800f43c:	2200      	movs	r2, #0
 800f43e:	2300      	movs	r3, #0
 800f440:	4650      	mov	r0, sl
 800f442:	4659      	mov	r1, fp
 800f444:	f7f1 fb50 	bl	8000ae8 <__aeabi_dcmpeq>
 800f448:	2800      	cmp	r0, #0
 800f44a:	d1a7      	bne.n	800f39c <_strtod_l+0x564>
 800f44c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f452:	9805      	ldr	r0, [sp, #20]
 800f454:	462b      	mov	r3, r5
 800f456:	464a      	mov	r2, r9
 800f458:	f002 fec2 	bl	80121e0 <__s2b>
 800f45c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f45e:	2800      	cmp	r0, #0
 800f460:	f43f af09 	beq.w	800f276 <_strtod_l+0x43e>
 800f464:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f466:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f468:	2a00      	cmp	r2, #0
 800f46a:	eba3 0308 	sub.w	r3, r3, r8
 800f46e:	bfa8      	it	ge
 800f470:	2300      	movge	r3, #0
 800f472:	9312      	str	r3, [sp, #72]	@ 0x48
 800f474:	2400      	movs	r4, #0
 800f476:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f47a:	9316      	str	r3, [sp, #88]	@ 0x58
 800f47c:	46a0      	mov	r8, r4
 800f47e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f480:	9805      	ldr	r0, [sp, #20]
 800f482:	6859      	ldr	r1, [r3, #4]
 800f484:	f002 fe04 	bl	8012090 <_Balloc>
 800f488:	4681      	mov	r9, r0
 800f48a:	2800      	cmp	r0, #0
 800f48c:	f43f aef7 	beq.w	800f27e <_strtod_l+0x446>
 800f490:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f492:	691a      	ldr	r2, [r3, #16]
 800f494:	3202      	adds	r2, #2
 800f496:	f103 010c 	add.w	r1, r3, #12
 800f49a:	0092      	lsls	r2, r2, #2
 800f49c:	300c      	adds	r0, #12
 800f49e:	f001 fb32 	bl	8010b06 <memcpy>
 800f4a2:	ec4b ab10 	vmov	d0, sl, fp
 800f4a6:	9805      	ldr	r0, [sp, #20]
 800f4a8:	aa1c      	add	r2, sp, #112	@ 0x70
 800f4aa:	a91b      	add	r1, sp, #108	@ 0x6c
 800f4ac:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f4b0:	f003 f9ca 	bl	8012848 <__d2b>
 800f4b4:	901a      	str	r0, [sp, #104]	@ 0x68
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	f43f aee1 	beq.w	800f27e <_strtod_l+0x446>
 800f4bc:	9805      	ldr	r0, [sp, #20]
 800f4be:	2101      	movs	r1, #1
 800f4c0:	f002 ff24 	bl	801230c <__i2b>
 800f4c4:	4680      	mov	r8, r0
 800f4c6:	b948      	cbnz	r0, 800f4dc <_strtod_l+0x6a4>
 800f4c8:	f04f 0800 	mov.w	r8, #0
 800f4cc:	e6d7      	b.n	800f27e <_strtod_l+0x446>
 800f4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f4d6:	ea03 0a0a 	and.w	sl, r3, sl
 800f4da:	e7af      	b.n	800f43c <_strtod_l+0x604>
 800f4dc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f4de:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f4e0:	2d00      	cmp	r5, #0
 800f4e2:	bfab      	itete	ge
 800f4e4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f4e6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f4e8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f4ea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f4ec:	bfac      	ite	ge
 800f4ee:	18ef      	addge	r7, r5, r3
 800f4f0:	1b5e      	sublt	r6, r3, r5
 800f4f2:	9b08      	ldr	r3, [sp, #32]
 800f4f4:	1aed      	subs	r5, r5, r3
 800f4f6:	4415      	add	r5, r2
 800f4f8:	4b65      	ldr	r3, [pc, #404]	@ (800f690 <_strtod_l+0x858>)
 800f4fa:	3d01      	subs	r5, #1
 800f4fc:	429d      	cmp	r5, r3
 800f4fe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f502:	da50      	bge.n	800f5a6 <_strtod_l+0x76e>
 800f504:	1b5b      	subs	r3, r3, r5
 800f506:	2b1f      	cmp	r3, #31
 800f508:	eba2 0203 	sub.w	r2, r2, r3
 800f50c:	f04f 0101 	mov.w	r1, #1
 800f510:	dc3d      	bgt.n	800f58e <_strtod_l+0x756>
 800f512:	fa01 f303 	lsl.w	r3, r1, r3
 800f516:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f518:	2300      	movs	r3, #0
 800f51a:	9310      	str	r3, [sp, #64]	@ 0x40
 800f51c:	18bd      	adds	r5, r7, r2
 800f51e:	9b08      	ldr	r3, [sp, #32]
 800f520:	42af      	cmp	r7, r5
 800f522:	4416      	add	r6, r2
 800f524:	441e      	add	r6, r3
 800f526:	463b      	mov	r3, r7
 800f528:	bfa8      	it	ge
 800f52a:	462b      	movge	r3, r5
 800f52c:	42b3      	cmp	r3, r6
 800f52e:	bfa8      	it	ge
 800f530:	4633      	movge	r3, r6
 800f532:	2b00      	cmp	r3, #0
 800f534:	bfc2      	ittt	gt
 800f536:	1aed      	subgt	r5, r5, r3
 800f538:	1af6      	subgt	r6, r6, r3
 800f53a:	1aff      	subgt	r7, r7, r3
 800f53c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f53e:	2b00      	cmp	r3, #0
 800f540:	dd16      	ble.n	800f570 <_strtod_l+0x738>
 800f542:	4641      	mov	r1, r8
 800f544:	9805      	ldr	r0, [sp, #20]
 800f546:	461a      	mov	r2, r3
 800f548:	f002 ff98 	bl	801247c <__pow5mult>
 800f54c:	4680      	mov	r8, r0
 800f54e:	2800      	cmp	r0, #0
 800f550:	d0ba      	beq.n	800f4c8 <_strtod_l+0x690>
 800f552:	4601      	mov	r1, r0
 800f554:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f556:	9805      	ldr	r0, [sp, #20]
 800f558:	f002 feee 	bl	8012338 <__multiply>
 800f55c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f55e:	2800      	cmp	r0, #0
 800f560:	f43f ae8d 	beq.w	800f27e <_strtod_l+0x446>
 800f564:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f566:	9805      	ldr	r0, [sp, #20]
 800f568:	f002 fdd2 	bl	8012110 <_Bfree>
 800f56c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f56e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f570:	2d00      	cmp	r5, #0
 800f572:	dc1d      	bgt.n	800f5b0 <_strtod_l+0x778>
 800f574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f576:	2b00      	cmp	r3, #0
 800f578:	dd23      	ble.n	800f5c2 <_strtod_l+0x78a>
 800f57a:	4649      	mov	r1, r9
 800f57c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f57e:	9805      	ldr	r0, [sp, #20]
 800f580:	f002 ff7c 	bl	801247c <__pow5mult>
 800f584:	4681      	mov	r9, r0
 800f586:	b9e0      	cbnz	r0, 800f5c2 <_strtod_l+0x78a>
 800f588:	f04f 0900 	mov.w	r9, #0
 800f58c:	e677      	b.n	800f27e <_strtod_l+0x446>
 800f58e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f592:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f596:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f59a:	35e2      	adds	r5, #226	@ 0xe2
 800f59c:	fa01 f305 	lsl.w	r3, r1, r5
 800f5a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f5a2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f5a4:	e7ba      	b.n	800f51c <_strtod_l+0x6e4>
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f5ae:	e7b5      	b.n	800f51c <_strtod_l+0x6e4>
 800f5b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f5b2:	9805      	ldr	r0, [sp, #20]
 800f5b4:	462a      	mov	r2, r5
 800f5b6:	f002 ffbb 	bl	8012530 <__lshift>
 800f5ba:	901a      	str	r0, [sp, #104]	@ 0x68
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d1d9      	bne.n	800f574 <_strtod_l+0x73c>
 800f5c0:	e65d      	b.n	800f27e <_strtod_l+0x446>
 800f5c2:	2e00      	cmp	r6, #0
 800f5c4:	dd07      	ble.n	800f5d6 <_strtod_l+0x79e>
 800f5c6:	4649      	mov	r1, r9
 800f5c8:	9805      	ldr	r0, [sp, #20]
 800f5ca:	4632      	mov	r2, r6
 800f5cc:	f002 ffb0 	bl	8012530 <__lshift>
 800f5d0:	4681      	mov	r9, r0
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	d0d8      	beq.n	800f588 <_strtod_l+0x750>
 800f5d6:	2f00      	cmp	r7, #0
 800f5d8:	dd08      	ble.n	800f5ec <_strtod_l+0x7b4>
 800f5da:	4641      	mov	r1, r8
 800f5dc:	9805      	ldr	r0, [sp, #20]
 800f5de:	463a      	mov	r2, r7
 800f5e0:	f002 ffa6 	bl	8012530 <__lshift>
 800f5e4:	4680      	mov	r8, r0
 800f5e6:	2800      	cmp	r0, #0
 800f5e8:	f43f ae49 	beq.w	800f27e <_strtod_l+0x446>
 800f5ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f5ee:	9805      	ldr	r0, [sp, #20]
 800f5f0:	464a      	mov	r2, r9
 800f5f2:	f003 f825 	bl	8012640 <__mdiff>
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	2800      	cmp	r0, #0
 800f5fa:	f43f ae40 	beq.w	800f27e <_strtod_l+0x446>
 800f5fe:	68c3      	ldr	r3, [r0, #12]
 800f600:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f602:	2300      	movs	r3, #0
 800f604:	60c3      	str	r3, [r0, #12]
 800f606:	4641      	mov	r1, r8
 800f608:	f002 fffe 	bl	8012608 <__mcmp>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	da45      	bge.n	800f69c <_strtod_l+0x864>
 800f610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f612:	ea53 030a 	orrs.w	r3, r3, sl
 800f616:	d16b      	bne.n	800f6f0 <_strtod_l+0x8b8>
 800f618:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d167      	bne.n	800f6f0 <_strtod_l+0x8b8>
 800f620:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f624:	0d1b      	lsrs	r3, r3, #20
 800f626:	051b      	lsls	r3, r3, #20
 800f628:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f62c:	d960      	bls.n	800f6f0 <_strtod_l+0x8b8>
 800f62e:	6963      	ldr	r3, [r4, #20]
 800f630:	b913      	cbnz	r3, 800f638 <_strtod_l+0x800>
 800f632:	6923      	ldr	r3, [r4, #16]
 800f634:	2b01      	cmp	r3, #1
 800f636:	dd5b      	ble.n	800f6f0 <_strtod_l+0x8b8>
 800f638:	4621      	mov	r1, r4
 800f63a:	2201      	movs	r2, #1
 800f63c:	9805      	ldr	r0, [sp, #20]
 800f63e:	f002 ff77 	bl	8012530 <__lshift>
 800f642:	4641      	mov	r1, r8
 800f644:	4604      	mov	r4, r0
 800f646:	f002 ffdf 	bl	8012608 <__mcmp>
 800f64a:	2800      	cmp	r0, #0
 800f64c:	dd50      	ble.n	800f6f0 <_strtod_l+0x8b8>
 800f64e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f652:	9a08      	ldr	r2, [sp, #32]
 800f654:	0d1b      	lsrs	r3, r3, #20
 800f656:	051b      	lsls	r3, r3, #20
 800f658:	2a00      	cmp	r2, #0
 800f65a:	d06a      	beq.n	800f732 <_strtod_l+0x8fa>
 800f65c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f660:	d867      	bhi.n	800f732 <_strtod_l+0x8fa>
 800f662:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f666:	f67f ae9d 	bls.w	800f3a4 <_strtod_l+0x56c>
 800f66a:	4b0a      	ldr	r3, [pc, #40]	@ (800f694 <_strtod_l+0x85c>)
 800f66c:	4650      	mov	r0, sl
 800f66e:	4659      	mov	r1, fp
 800f670:	2200      	movs	r2, #0
 800f672:	f7f0 ffd1 	bl	8000618 <__aeabi_dmul>
 800f676:	4b08      	ldr	r3, [pc, #32]	@ (800f698 <_strtod_l+0x860>)
 800f678:	400b      	ands	r3, r1
 800f67a:	4682      	mov	sl, r0
 800f67c:	468b      	mov	fp, r1
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f47f ae08 	bne.w	800f294 <_strtod_l+0x45c>
 800f684:	9a05      	ldr	r2, [sp, #20]
 800f686:	2322      	movs	r3, #34	@ 0x22
 800f688:	6013      	str	r3, [r2, #0]
 800f68a:	e603      	b.n	800f294 <_strtod_l+0x45c>
 800f68c:	080157b8 	.word	0x080157b8
 800f690:	fffffc02 	.word	0xfffffc02
 800f694:	39500000 	.word	0x39500000
 800f698:	7ff00000 	.word	0x7ff00000
 800f69c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f6a0:	d165      	bne.n	800f76e <_strtod_l+0x936>
 800f6a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f6a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f6a8:	b35a      	cbz	r2, 800f702 <_strtod_l+0x8ca>
 800f6aa:	4a9f      	ldr	r2, [pc, #636]	@ (800f928 <_strtod_l+0xaf0>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d12b      	bne.n	800f708 <_strtod_l+0x8d0>
 800f6b0:	9b08      	ldr	r3, [sp, #32]
 800f6b2:	4651      	mov	r1, sl
 800f6b4:	b303      	cbz	r3, 800f6f8 <_strtod_l+0x8c0>
 800f6b6:	4b9d      	ldr	r3, [pc, #628]	@ (800f92c <_strtod_l+0xaf4>)
 800f6b8:	465a      	mov	r2, fp
 800f6ba:	4013      	ands	r3, r2
 800f6bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f6c4:	d81b      	bhi.n	800f6fe <_strtod_l+0x8c6>
 800f6c6:	0d1b      	lsrs	r3, r3, #20
 800f6c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800f6d0:	4299      	cmp	r1, r3
 800f6d2:	d119      	bne.n	800f708 <_strtod_l+0x8d0>
 800f6d4:	4b96      	ldr	r3, [pc, #600]	@ (800f930 <_strtod_l+0xaf8>)
 800f6d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d102      	bne.n	800f6e2 <_strtod_l+0x8aa>
 800f6dc:	3101      	adds	r1, #1
 800f6de:	f43f adce 	beq.w	800f27e <_strtod_l+0x446>
 800f6e2:	4b92      	ldr	r3, [pc, #584]	@ (800f92c <_strtod_l+0xaf4>)
 800f6e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6e6:	401a      	ands	r2, r3
 800f6e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f6ec:	f04f 0a00 	mov.w	sl, #0
 800f6f0:	9b08      	ldr	r3, [sp, #32]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1b9      	bne.n	800f66a <_strtod_l+0x832>
 800f6f6:	e5cd      	b.n	800f294 <_strtod_l+0x45c>
 800f6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6fc:	e7e8      	b.n	800f6d0 <_strtod_l+0x898>
 800f6fe:	4613      	mov	r3, r2
 800f700:	e7e6      	b.n	800f6d0 <_strtod_l+0x898>
 800f702:	ea53 030a 	orrs.w	r3, r3, sl
 800f706:	d0a2      	beq.n	800f64e <_strtod_l+0x816>
 800f708:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f70a:	b1db      	cbz	r3, 800f744 <_strtod_l+0x90c>
 800f70c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f70e:	4213      	tst	r3, r2
 800f710:	d0ee      	beq.n	800f6f0 <_strtod_l+0x8b8>
 800f712:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f714:	9a08      	ldr	r2, [sp, #32]
 800f716:	4650      	mov	r0, sl
 800f718:	4659      	mov	r1, fp
 800f71a:	b1bb      	cbz	r3, 800f74c <_strtod_l+0x914>
 800f71c:	f7ff fb6b 	bl	800edf6 <sulp>
 800f720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f724:	ec53 2b10 	vmov	r2, r3, d0
 800f728:	f7f0 fdc0 	bl	80002ac <__adddf3>
 800f72c:	4682      	mov	sl, r0
 800f72e:	468b      	mov	fp, r1
 800f730:	e7de      	b.n	800f6f0 <_strtod_l+0x8b8>
 800f732:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f736:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f73a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f73e:	f04f 3aff 	mov.w	sl, #4294967295
 800f742:	e7d5      	b.n	800f6f0 <_strtod_l+0x8b8>
 800f744:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f746:	ea13 0f0a 	tst.w	r3, sl
 800f74a:	e7e1      	b.n	800f710 <_strtod_l+0x8d8>
 800f74c:	f7ff fb53 	bl	800edf6 <sulp>
 800f750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f754:	ec53 2b10 	vmov	r2, r3, d0
 800f758:	f7f0 fda6 	bl	80002a8 <__aeabi_dsub>
 800f75c:	2200      	movs	r2, #0
 800f75e:	2300      	movs	r3, #0
 800f760:	4682      	mov	sl, r0
 800f762:	468b      	mov	fp, r1
 800f764:	f7f1 f9c0 	bl	8000ae8 <__aeabi_dcmpeq>
 800f768:	2800      	cmp	r0, #0
 800f76a:	d0c1      	beq.n	800f6f0 <_strtod_l+0x8b8>
 800f76c:	e61a      	b.n	800f3a4 <_strtod_l+0x56c>
 800f76e:	4641      	mov	r1, r8
 800f770:	4620      	mov	r0, r4
 800f772:	f003 f8c1 	bl	80128f8 <__ratio>
 800f776:	ec57 6b10 	vmov	r6, r7, d0
 800f77a:	2200      	movs	r2, #0
 800f77c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f780:	4630      	mov	r0, r6
 800f782:	4639      	mov	r1, r7
 800f784:	f7f1 f9c4 	bl	8000b10 <__aeabi_dcmple>
 800f788:	2800      	cmp	r0, #0
 800f78a:	d06f      	beq.n	800f86c <_strtod_l+0xa34>
 800f78c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d17a      	bne.n	800f888 <_strtod_l+0xa50>
 800f792:	f1ba 0f00 	cmp.w	sl, #0
 800f796:	d158      	bne.n	800f84a <_strtod_l+0xa12>
 800f798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f79a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d15a      	bne.n	800f858 <_strtod_l+0xa20>
 800f7a2:	4b64      	ldr	r3, [pc, #400]	@ (800f934 <_strtod_l+0xafc>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	4639      	mov	r1, r7
 800f7aa:	f7f1 f9a7 	bl	8000afc <__aeabi_dcmplt>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	d159      	bne.n	800f866 <_strtod_l+0xa2e>
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	4639      	mov	r1, r7
 800f7b6:	4b60      	ldr	r3, [pc, #384]	@ (800f938 <_strtod_l+0xb00>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	f7f0 ff2d 	bl	8000618 <__aeabi_dmul>
 800f7be:	4606      	mov	r6, r0
 800f7c0:	460f      	mov	r7, r1
 800f7c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f7c6:	9606      	str	r6, [sp, #24]
 800f7c8:	9307      	str	r3, [sp, #28]
 800f7ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7ce:	4d57      	ldr	r5, [pc, #348]	@ (800f92c <_strtod_l+0xaf4>)
 800f7d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f7d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7d6:	401d      	ands	r5, r3
 800f7d8:	4b58      	ldr	r3, [pc, #352]	@ (800f93c <_strtod_l+0xb04>)
 800f7da:	429d      	cmp	r5, r3
 800f7dc:	f040 80b2 	bne.w	800f944 <_strtod_l+0xb0c>
 800f7e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f7e6:	ec4b ab10 	vmov	d0, sl, fp
 800f7ea:	f002 ffbd 	bl	8012768 <__ulp>
 800f7ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7f2:	ec51 0b10 	vmov	r0, r1, d0
 800f7f6:	f7f0 ff0f 	bl	8000618 <__aeabi_dmul>
 800f7fa:	4652      	mov	r2, sl
 800f7fc:	465b      	mov	r3, fp
 800f7fe:	f7f0 fd55 	bl	80002ac <__adddf3>
 800f802:	460b      	mov	r3, r1
 800f804:	4949      	ldr	r1, [pc, #292]	@ (800f92c <_strtod_l+0xaf4>)
 800f806:	4a4e      	ldr	r2, [pc, #312]	@ (800f940 <_strtod_l+0xb08>)
 800f808:	4019      	ands	r1, r3
 800f80a:	4291      	cmp	r1, r2
 800f80c:	4682      	mov	sl, r0
 800f80e:	d942      	bls.n	800f896 <_strtod_l+0xa5e>
 800f810:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f812:	4b47      	ldr	r3, [pc, #284]	@ (800f930 <_strtod_l+0xaf8>)
 800f814:	429a      	cmp	r2, r3
 800f816:	d103      	bne.n	800f820 <_strtod_l+0x9e8>
 800f818:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f81a:	3301      	adds	r3, #1
 800f81c:	f43f ad2f 	beq.w	800f27e <_strtod_l+0x446>
 800f820:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f930 <_strtod_l+0xaf8>
 800f824:	f04f 3aff 	mov.w	sl, #4294967295
 800f828:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f82a:	9805      	ldr	r0, [sp, #20]
 800f82c:	f002 fc70 	bl	8012110 <_Bfree>
 800f830:	9805      	ldr	r0, [sp, #20]
 800f832:	4649      	mov	r1, r9
 800f834:	f002 fc6c 	bl	8012110 <_Bfree>
 800f838:	9805      	ldr	r0, [sp, #20]
 800f83a:	4641      	mov	r1, r8
 800f83c:	f002 fc68 	bl	8012110 <_Bfree>
 800f840:	9805      	ldr	r0, [sp, #20]
 800f842:	4621      	mov	r1, r4
 800f844:	f002 fc64 	bl	8012110 <_Bfree>
 800f848:	e619      	b.n	800f47e <_strtod_l+0x646>
 800f84a:	f1ba 0f01 	cmp.w	sl, #1
 800f84e:	d103      	bne.n	800f858 <_strtod_l+0xa20>
 800f850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f852:	2b00      	cmp	r3, #0
 800f854:	f43f ada6 	beq.w	800f3a4 <_strtod_l+0x56c>
 800f858:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f908 <_strtod_l+0xad0>
 800f85c:	4f35      	ldr	r7, [pc, #212]	@ (800f934 <_strtod_l+0xafc>)
 800f85e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f862:	2600      	movs	r6, #0
 800f864:	e7b1      	b.n	800f7ca <_strtod_l+0x992>
 800f866:	4f34      	ldr	r7, [pc, #208]	@ (800f938 <_strtod_l+0xb00>)
 800f868:	2600      	movs	r6, #0
 800f86a:	e7aa      	b.n	800f7c2 <_strtod_l+0x98a>
 800f86c:	4b32      	ldr	r3, [pc, #200]	@ (800f938 <_strtod_l+0xb00>)
 800f86e:	4630      	mov	r0, r6
 800f870:	4639      	mov	r1, r7
 800f872:	2200      	movs	r2, #0
 800f874:	f7f0 fed0 	bl	8000618 <__aeabi_dmul>
 800f878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f87a:	4606      	mov	r6, r0
 800f87c:	460f      	mov	r7, r1
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d09f      	beq.n	800f7c2 <_strtod_l+0x98a>
 800f882:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f886:	e7a0      	b.n	800f7ca <_strtod_l+0x992>
 800f888:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f910 <_strtod_l+0xad8>
 800f88c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f890:	ec57 6b17 	vmov	r6, r7, d7
 800f894:	e799      	b.n	800f7ca <_strtod_l+0x992>
 800f896:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f89a:	9b08      	ldr	r3, [sp, #32]
 800f89c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d1c1      	bne.n	800f828 <_strtod_l+0x9f0>
 800f8a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f8a8:	0d1b      	lsrs	r3, r3, #20
 800f8aa:	051b      	lsls	r3, r3, #20
 800f8ac:	429d      	cmp	r5, r3
 800f8ae:	d1bb      	bne.n	800f828 <_strtod_l+0x9f0>
 800f8b0:	4630      	mov	r0, r6
 800f8b2:	4639      	mov	r1, r7
 800f8b4:	f7f1 fa10 	bl	8000cd8 <__aeabi_d2lz>
 800f8b8:	f7f0 fe80 	bl	80005bc <__aeabi_l2d>
 800f8bc:	4602      	mov	r2, r0
 800f8be:	460b      	mov	r3, r1
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	4639      	mov	r1, r7
 800f8c4:	f7f0 fcf0 	bl	80002a8 <__aeabi_dsub>
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	4602      	mov	r2, r0
 800f8cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f8d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8d6:	ea46 060a 	orr.w	r6, r6, sl
 800f8da:	431e      	orrs	r6, r3
 800f8dc:	d06f      	beq.n	800f9be <_strtod_l+0xb86>
 800f8de:	a30e      	add	r3, pc, #56	@ (adr r3, 800f918 <_strtod_l+0xae0>)
 800f8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e4:	f7f1 f90a 	bl	8000afc <__aeabi_dcmplt>
 800f8e8:	2800      	cmp	r0, #0
 800f8ea:	f47f acd3 	bne.w	800f294 <_strtod_l+0x45c>
 800f8ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800f920 <_strtod_l+0xae8>)
 800f8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f8f8:	f7f1 f91e 	bl	8000b38 <__aeabi_dcmpgt>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	d093      	beq.n	800f828 <_strtod_l+0x9f0>
 800f900:	e4c8      	b.n	800f294 <_strtod_l+0x45c>
 800f902:	bf00      	nop
 800f904:	f3af 8000 	nop.w
 800f908:	00000000 	.word	0x00000000
 800f90c:	bff00000 	.word	0xbff00000
 800f910:	00000000 	.word	0x00000000
 800f914:	3ff00000 	.word	0x3ff00000
 800f918:	94a03595 	.word	0x94a03595
 800f91c:	3fdfffff 	.word	0x3fdfffff
 800f920:	35afe535 	.word	0x35afe535
 800f924:	3fe00000 	.word	0x3fe00000
 800f928:	000fffff 	.word	0x000fffff
 800f92c:	7ff00000 	.word	0x7ff00000
 800f930:	7fefffff 	.word	0x7fefffff
 800f934:	3ff00000 	.word	0x3ff00000
 800f938:	3fe00000 	.word	0x3fe00000
 800f93c:	7fe00000 	.word	0x7fe00000
 800f940:	7c9fffff 	.word	0x7c9fffff
 800f944:	9b08      	ldr	r3, [sp, #32]
 800f946:	b323      	cbz	r3, 800f992 <_strtod_l+0xb5a>
 800f948:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f94c:	d821      	bhi.n	800f992 <_strtod_l+0xb5a>
 800f94e:	a328      	add	r3, pc, #160	@ (adr r3, 800f9f0 <_strtod_l+0xbb8>)
 800f950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f954:	4630      	mov	r0, r6
 800f956:	4639      	mov	r1, r7
 800f958:	f7f1 f8da 	bl	8000b10 <__aeabi_dcmple>
 800f95c:	b1a0      	cbz	r0, 800f988 <_strtod_l+0xb50>
 800f95e:	4639      	mov	r1, r7
 800f960:	4630      	mov	r0, r6
 800f962:	f7f1 f931 	bl	8000bc8 <__aeabi_d2uiz>
 800f966:	2801      	cmp	r0, #1
 800f968:	bf38      	it	cc
 800f96a:	2001      	movcc	r0, #1
 800f96c:	f7f0 fdda 	bl	8000524 <__aeabi_ui2d>
 800f970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f972:	4606      	mov	r6, r0
 800f974:	460f      	mov	r7, r1
 800f976:	b9fb      	cbnz	r3, 800f9b8 <_strtod_l+0xb80>
 800f978:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f97c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f97e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f980:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f984:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f988:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f98a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f98e:	1b5b      	subs	r3, r3, r5
 800f990:	9311      	str	r3, [sp, #68]	@ 0x44
 800f992:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f996:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f99a:	f002 fee5 	bl	8012768 <__ulp>
 800f99e:	4650      	mov	r0, sl
 800f9a0:	ec53 2b10 	vmov	r2, r3, d0
 800f9a4:	4659      	mov	r1, fp
 800f9a6:	f7f0 fe37 	bl	8000618 <__aeabi_dmul>
 800f9aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f9ae:	f7f0 fc7d 	bl	80002ac <__adddf3>
 800f9b2:	4682      	mov	sl, r0
 800f9b4:	468b      	mov	fp, r1
 800f9b6:	e770      	b.n	800f89a <_strtod_l+0xa62>
 800f9b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f9bc:	e7e0      	b.n	800f980 <_strtod_l+0xb48>
 800f9be:	a30e      	add	r3, pc, #56	@ (adr r3, 800f9f8 <_strtod_l+0xbc0>)
 800f9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c4:	f7f1 f89a 	bl	8000afc <__aeabi_dcmplt>
 800f9c8:	e798      	b.n	800f8fc <_strtod_l+0xac4>
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	930e      	str	r3, [sp, #56]	@ 0x38
 800f9ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f9d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f9d2:	6013      	str	r3, [r2, #0]
 800f9d4:	f7ff ba6d 	b.w	800eeb2 <_strtod_l+0x7a>
 800f9d8:	2a65      	cmp	r2, #101	@ 0x65
 800f9da:	f43f ab68 	beq.w	800f0ae <_strtod_l+0x276>
 800f9de:	2a45      	cmp	r2, #69	@ 0x45
 800f9e0:	f43f ab65 	beq.w	800f0ae <_strtod_l+0x276>
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	f7ff bba0 	b.w	800f12a <_strtod_l+0x2f2>
 800f9ea:	bf00      	nop
 800f9ec:	f3af 8000 	nop.w
 800f9f0:	ffc00000 	.word	0xffc00000
 800f9f4:	41dfffff 	.word	0x41dfffff
 800f9f8:	94a03595 	.word	0x94a03595
 800f9fc:	3fcfffff 	.word	0x3fcfffff

0800fa00 <strtod>:
 800fa00:	460a      	mov	r2, r1
 800fa02:	4601      	mov	r1, r0
 800fa04:	4802      	ldr	r0, [pc, #8]	@ (800fa10 <strtod+0x10>)
 800fa06:	4b03      	ldr	r3, [pc, #12]	@ (800fa14 <strtod+0x14>)
 800fa08:	6800      	ldr	r0, [r0, #0]
 800fa0a:	f7ff ba15 	b.w	800ee38 <_strtod_l>
 800fa0e:	bf00      	nop
 800fa10:	2000018c 	.word	0x2000018c
 800fa14:	20000020 	.word	0x20000020

0800fa18 <strtof>:
 800fa18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa1c:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800fadc <strtof+0xc4>
 800fa20:	4b29      	ldr	r3, [pc, #164]	@ (800fac8 <strtof+0xb0>)
 800fa22:	460a      	mov	r2, r1
 800fa24:	ed2d 8b02 	vpush	{d8}
 800fa28:	4601      	mov	r1, r0
 800fa2a:	f8d8 0000 	ldr.w	r0, [r8]
 800fa2e:	f7ff fa03 	bl	800ee38 <_strtod_l>
 800fa32:	ec55 4b10 	vmov	r4, r5, d0
 800fa36:	4622      	mov	r2, r4
 800fa38:	462b      	mov	r3, r5
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	4629      	mov	r1, r5
 800fa3e:	f7f1 f885 	bl	8000b4c <__aeabi_dcmpun>
 800fa42:	b190      	cbz	r0, 800fa6a <strtof+0x52>
 800fa44:	2d00      	cmp	r5, #0
 800fa46:	4821      	ldr	r0, [pc, #132]	@ (800facc <strtof+0xb4>)
 800fa48:	da09      	bge.n	800fa5e <strtof+0x46>
 800fa4a:	f001 f875 	bl	8010b38 <nanf>
 800fa4e:	eeb1 8a40 	vneg.f32	s16, s0
 800fa52:	eeb0 0a48 	vmov.f32	s0, s16
 800fa56:	ecbd 8b02 	vpop	{d8}
 800fa5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa5e:	ecbd 8b02 	vpop	{d8}
 800fa62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa66:	f001 b867 	b.w	8010b38 <nanf>
 800fa6a:	4620      	mov	r0, r4
 800fa6c:	4629      	mov	r1, r5
 800fa6e:	f7f1 f8cb 	bl	8000c08 <__aeabi_d2f>
 800fa72:	ee08 0a10 	vmov	s16, r0
 800fa76:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800fad0 <strtof+0xb8>
 800fa7a:	eeb0 7ac8 	vabs.f32	s14, s16
 800fa7e:	eeb4 7a67 	vcmp.f32	s14, s15
 800fa82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa86:	dd11      	ble.n	800faac <strtof+0x94>
 800fa88:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800fa8c:	4b11      	ldr	r3, [pc, #68]	@ (800fad4 <strtof+0xbc>)
 800fa8e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa92:	4620      	mov	r0, r4
 800fa94:	4639      	mov	r1, r7
 800fa96:	f7f1 f859 	bl	8000b4c <__aeabi_dcmpun>
 800fa9a:	b980      	cbnz	r0, 800fabe <strtof+0xa6>
 800fa9c:	4b0d      	ldr	r3, [pc, #52]	@ (800fad4 <strtof+0xbc>)
 800fa9e:	f04f 32ff 	mov.w	r2, #4294967295
 800faa2:	4620      	mov	r0, r4
 800faa4:	4639      	mov	r1, r7
 800faa6:	f7f1 f833 	bl	8000b10 <__aeabi_dcmple>
 800faaa:	b940      	cbnz	r0, 800fabe <strtof+0xa6>
 800faac:	ee18 3a10 	vmov	r3, s16
 800fab0:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fab4:	d1cd      	bne.n	800fa52 <strtof+0x3a>
 800fab6:	4b08      	ldr	r3, [pc, #32]	@ (800fad8 <strtof+0xc0>)
 800fab8:	402b      	ands	r3, r5
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d0c9      	beq.n	800fa52 <strtof+0x3a>
 800fabe:	f8d8 3000 	ldr.w	r3, [r8]
 800fac2:	2222      	movs	r2, #34	@ 0x22
 800fac4:	601a      	str	r2, [r3, #0]
 800fac6:	e7c4      	b.n	800fa52 <strtof+0x3a>
 800fac8:	20000020 	.word	0x20000020
 800facc:	0801578c 	.word	0x0801578c
 800fad0:	7f7fffff 	.word	0x7f7fffff
 800fad4:	7fefffff 	.word	0x7fefffff
 800fad8:	7ff00000 	.word	0x7ff00000
 800fadc:	2000018c 	.word	0x2000018c

0800fae0 <_strtol_l.isra.0>:
 800fae0:	2b24      	cmp	r3, #36	@ 0x24
 800fae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fae6:	4686      	mov	lr, r0
 800fae8:	4690      	mov	r8, r2
 800faea:	d801      	bhi.n	800faf0 <_strtol_l.isra.0+0x10>
 800faec:	2b01      	cmp	r3, #1
 800faee:	d106      	bne.n	800fafe <_strtol_l.isra.0+0x1e>
 800faf0:	f000 ffdc 	bl	8010aac <__errno>
 800faf4:	2316      	movs	r3, #22
 800faf6:	6003      	str	r3, [r0, #0]
 800faf8:	2000      	movs	r0, #0
 800fafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fafe:	4834      	ldr	r0, [pc, #208]	@ (800fbd0 <_strtol_l.isra.0+0xf0>)
 800fb00:	460d      	mov	r5, r1
 800fb02:	462a      	mov	r2, r5
 800fb04:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb08:	5d06      	ldrb	r6, [r0, r4]
 800fb0a:	f016 0608 	ands.w	r6, r6, #8
 800fb0e:	d1f8      	bne.n	800fb02 <_strtol_l.isra.0+0x22>
 800fb10:	2c2d      	cmp	r4, #45	@ 0x2d
 800fb12:	d110      	bne.n	800fb36 <_strtol_l.isra.0+0x56>
 800fb14:	782c      	ldrb	r4, [r5, #0]
 800fb16:	2601      	movs	r6, #1
 800fb18:	1c95      	adds	r5, r2, #2
 800fb1a:	f033 0210 	bics.w	r2, r3, #16
 800fb1e:	d115      	bne.n	800fb4c <_strtol_l.isra.0+0x6c>
 800fb20:	2c30      	cmp	r4, #48	@ 0x30
 800fb22:	d10d      	bne.n	800fb40 <_strtol_l.isra.0+0x60>
 800fb24:	782a      	ldrb	r2, [r5, #0]
 800fb26:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fb2a:	2a58      	cmp	r2, #88	@ 0x58
 800fb2c:	d108      	bne.n	800fb40 <_strtol_l.isra.0+0x60>
 800fb2e:	786c      	ldrb	r4, [r5, #1]
 800fb30:	3502      	adds	r5, #2
 800fb32:	2310      	movs	r3, #16
 800fb34:	e00a      	b.n	800fb4c <_strtol_l.isra.0+0x6c>
 800fb36:	2c2b      	cmp	r4, #43	@ 0x2b
 800fb38:	bf04      	itt	eq
 800fb3a:	782c      	ldrbeq	r4, [r5, #0]
 800fb3c:	1c95      	addeq	r5, r2, #2
 800fb3e:	e7ec      	b.n	800fb1a <_strtol_l.isra.0+0x3a>
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d1f6      	bne.n	800fb32 <_strtol_l.isra.0+0x52>
 800fb44:	2c30      	cmp	r4, #48	@ 0x30
 800fb46:	bf14      	ite	ne
 800fb48:	230a      	movne	r3, #10
 800fb4a:	2308      	moveq	r3, #8
 800fb4c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fb50:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fb54:	2200      	movs	r2, #0
 800fb56:	fbbc f9f3 	udiv	r9, ip, r3
 800fb5a:	4610      	mov	r0, r2
 800fb5c:	fb03 ca19 	mls	sl, r3, r9, ip
 800fb60:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fb64:	2f09      	cmp	r7, #9
 800fb66:	d80f      	bhi.n	800fb88 <_strtol_l.isra.0+0xa8>
 800fb68:	463c      	mov	r4, r7
 800fb6a:	42a3      	cmp	r3, r4
 800fb6c:	dd1b      	ble.n	800fba6 <_strtol_l.isra.0+0xc6>
 800fb6e:	1c57      	adds	r7, r2, #1
 800fb70:	d007      	beq.n	800fb82 <_strtol_l.isra.0+0xa2>
 800fb72:	4581      	cmp	r9, r0
 800fb74:	d314      	bcc.n	800fba0 <_strtol_l.isra.0+0xc0>
 800fb76:	d101      	bne.n	800fb7c <_strtol_l.isra.0+0x9c>
 800fb78:	45a2      	cmp	sl, r4
 800fb7a:	db11      	blt.n	800fba0 <_strtol_l.isra.0+0xc0>
 800fb7c:	fb00 4003 	mla	r0, r0, r3, r4
 800fb80:	2201      	movs	r2, #1
 800fb82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb86:	e7eb      	b.n	800fb60 <_strtol_l.isra.0+0x80>
 800fb88:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fb8c:	2f19      	cmp	r7, #25
 800fb8e:	d801      	bhi.n	800fb94 <_strtol_l.isra.0+0xb4>
 800fb90:	3c37      	subs	r4, #55	@ 0x37
 800fb92:	e7ea      	b.n	800fb6a <_strtol_l.isra.0+0x8a>
 800fb94:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fb98:	2f19      	cmp	r7, #25
 800fb9a:	d804      	bhi.n	800fba6 <_strtol_l.isra.0+0xc6>
 800fb9c:	3c57      	subs	r4, #87	@ 0x57
 800fb9e:	e7e4      	b.n	800fb6a <_strtol_l.isra.0+0x8a>
 800fba0:	f04f 32ff 	mov.w	r2, #4294967295
 800fba4:	e7ed      	b.n	800fb82 <_strtol_l.isra.0+0xa2>
 800fba6:	1c53      	adds	r3, r2, #1
 800fba8:	d108      	bne.n	800fbbc <_strtol_l.isra.0+0xdc>
 800fbaa:	2322      	movs	r3, #34	@ 0x22
 800fbac:	f8ce 3000 	str.w	r3, [lr]
 800fbb0:	4660      	mov	r0, ip
 800fbb2:	f1b8 0f00 	cmp.w	r8, #0
 800fbb6:	d0a0      	beq.n	800fafa <_strtol_l.isra.0+0x1a>
 800fbb8:	1e69      	subs	r1, r5, #1
 800fbba:	e006      	b.n	800fbca <_strtol_l.isra.0+0xea>
 800fbbc:	b106      	cbz	r6, 800fbc0 <_strtol_l.isra.0+0xe0>
 800fbbe:	4240      	negs	r0, r0
 800fbc0:	f1b8 0f00 	cmp.w	r8, #0
 800fbc4:	d099      	beq.n	800fafa <_strtol_l.isra.0+0x1a>
 800fbc6:	2a00      	cmp	r2, #0
 800fbc8:	d1f6      	bne.n	800fbb8 <_strtol_l.isra.0+0xd8>
 800fbca:	f8c8 1000 	str.w	r1, [r8]
 800fbce:	e794      	b.n	800fafa <_strtol_l.isra.0+0x1a>
 800fbd0:	080157e1 	.word	0x080157e1

0800fbd4 <strtol>:
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	460a      	mov	r2, r1
 800fbd8:	4601      	mov	r1, r0
 800fbda:	4802      	ldr	r0, [pc, #8]	@ (800fbe4 <strtol+0x10>)
 800fbdc:	6800      	ldr	r0, [r0, #0]
 800fbde:	f7ff bf7f 	b.w	800fae0 <_strtol_l.isra.0>
 800fbe2:	bf00      	nop
 800fbe4:	2000018c 	.word	0x2000018c

0800fbe8 <_strtoul_l.isra.0>:
 800fbe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbec:	4e34      	ldr	r6, [pc, #208]	@ (800fcc0 <_strtoul_l.isra.0+0xd8>)
 800fbee:	4686      	mov	lr, r0
 800fbf0:	460d      	mov	r5, r1
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fbf8:	5d37      	ldrb	r7, [r6, r4]
 800fbfa:	f017 0708 	ands.w	r7, r7, #8
 800fbfe:	d1f8      	bne.n	800fbf2 <_strtoul_l.isra.0+0xa>
 800fc00:	2c2d      	cmp	r4, #45	@ 0x2d
 800fc02:	d110      	bne.n	800fc26 <_strtoul_l.isra.0+0x3e>
 800fc04:	782c      	ldrb	r4, [r5, #0]
 800fc06:	2701      	movs	r7, #1
 800fc08:	1c85      	adds	r5, r0, #2
 800fc0a:	f033 0010 	bics.w	r0, r3, #16
 800fc0e:	d115      	bne.n	800fc3c <_strtoul_l.isra.0+0x54>
 800fc10:	2c30      	cmp	r4, #48	@ 0x30
 800fc12:	d10d      	bne.n	800fc30 <_strtoul_l.isra.0+0x48>
 800fc14:	7828      	ldrb	r0, [r5, #0]
 800fc16:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800fc1a:	2858      	cmp	r0, #88	@ 0x58
 800fc1c:	d108      	bne.n	800fc30 <_strtoul_l.isra.0+0x48>
 800fc1e:	786c      	ldrb	r4, [r5, #1]
 800fc20:	3502      	adds	r5, #2
 800fc22:	2310      	movs	r3, #16
 800fc24:	e00a      	b.n	800fc3c <_strtoul_l.isra.0+0x54>
 800fc26:	2c2b      	cmp	r4, #43	@ 0x2b
 800fc28:	bf04      	itt	eq
 800fc2a:	782c      	ldrbeq	r4, [r5, #0]
 800fc2c:	1c85      	addeq	r5, r0, #2
 800fc2e:	e7ec      	b.n	800fc0a <_strtoul_l.isra.0+0x22>
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d1f6      	bne.n	800fc22 <_strtoul_l.isra.0+0x3a>
 800fc34:	2c30      	cmp	r4, #48	@ 0x30
 800fc36:	bf14      	ite	ne
 800fc38:	230a      	movne	r3, #10
 800fc3a:	2308      	moveq	r3, #8
 800fc3c:	f04f 38ff 	mov.w	r8, #4294967295
 800fc40:	2600      	movs	r6, #0
 800fc42:	fbb8 f8f3 	udiv	r8, r8, r3
 800fc46:	fb03 f908 	mul.w	r9, r3, r8
 800fc4a:	ea6f 0909 	mvn.w	r9, r9
 800fc4e:	4630      	mov	r0, r6
 800fc50:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800fc54:	f1bc 0f09 	cmp.w	ip, #9
 800fc58:	d810      	bhi.n	800fc7c <_strtoul_l.isra.0+0x94>
 800fc5a:	4664      	mov	r4, ip
 800fc5c:	42a3      	cmp	r3, r4
 800fc5e:	dd1e      	ble.n	800fc9e <_strtoul_l.isra.0+0xb6>
 800fc60:	f1b6 3fff 	cmp.w	r6, #4294967295
 800fc64:	d007      	beq.n	800fc76 <_strtoul_l.isra.0+0x8e>
 800fc66:	4580      	cmp	r8, r0
 800fc68:	d316      	bcc.n	800fc98 <_strtoul_l.isra.0+0xb0>
 800fc6a:	d101      	bne.n	800fc70 <_strtoul_l.isra.0+0x88>
 800fc6c:	45a1      	cmp	r9, r4
 800fc6e:	db13      	blt.n	800fc98 <_strtoul_l.isra.0+0xb0>
 800fc70:	fb00 4003 	mla	r0, r0, r3, r4
 800fc74:	2601      	movs	r6, #1
 800fc76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc7a:	e7e9      	b.n	800fc50 <_strtoul_l.isra.0+0x68>
 800fc7c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800fc80:	f1bc 0f19 	cmp.w	ip, #25
 800fc84:	d801      	bhi.n	800fc8a <_strtoul_l.isra.0+0xa2>
 800fc86:	3c37      	subs	r4, #55	@ 0x37
 800fc88:	e7e8      	b.n	800fc5c <_strtoul_l.isra.0+0x74>
 800fc8a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800fc8e:	f1bc 0f19 	cmp.w	ip, #25
 800fc92:	d804      	bhi.n	800fc9e <_strtoul_l.isra.0+0xb6>
 800fc94:	3c57      	subs	r4, #87	@ 0x57
 800fc96:	e7e1      	b.n	800fc5c <_strtoul_l.isra.0+0x74>
 800fc98:	f04f 36ff 	mov.w	r6, #4294967295
 800fc9c:	e7eb      	b.n	800fc76 <_strtoul_l.isra.0+0x8e>
 800fc9e:	1c73      	adds	r3, r6, #1
 800fca0:	d106      	bne.n	800fcb0 <_strtoul_l.isra.0+0xc8>
 800fca2:	2322      	movs	r3, #34	@ 0x22
 800fca4:	f8ce 3000 	str.w	r3, [lr]
 800fca8:	4630      	mov	r0, r6
 800fcaa:	b932      	cbnz	r2, 800fcba <_strtoul_l.isra.0+0xd2>
 800fcac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcb0:	b107      	cbz	r7, 800fcb4 <_strtoul_l.isra.0+0xcc>
 800fcb2:	4240      	negs	r0, r0
 800fcb4:	2a00      	cmp	r2, #0
 800fcb6:	d0f9      	beq.n	800fcac <_strtoul_l.isra.0+0xc4>
 800fcb8:	b106      	cbz	r6, 800fcbc <_strtoul_l.isra.0+0xd4>
 800fcba:	1e69      	subs	r1, r5, #1
 800fcbc:	6011      	str	r1, [r2, #0]
 800fcbe:	e7f5      	b.n	800fcac <_strtoul_l.isra.0+0xc4>
 800fcc0:	080157e1 	.word	0x080157e1

0800fcc4 <strtoul>:
 800fcc4:	4613      	mov	r3, r2
 800fcc6:	460a      	mov	r2, r1
 800fcc8:	4601      	mov	r1, r0
 800fcca:	4802      	ldr	r0, [pc, #8]	@ (800fcd4 <strtoul+0x10>)
 800fccc:	6800      	ldr	r0, [r0, #0]
 800fcce:	f7ff bf8b 	b.w	800fbe8 <_strtoul_l.isra.0>
 800fcd2:	bf00      	nop
 800fcd4:	2000018c 	.word	0x2000018c

0800fcd8 <__cvt>:
 800fcd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fcdc:	ec57 6b10 	vmov	r6, r7, d0
 800fce0:	2f00      	cmp	r7, #0
 800fce2:	460c      	mov	r4, r1
 800fce4:	4619      	mov	r1, r3
 800fce6:	463b      	mov	r3, r7
 800fce8:	bfbb      	ittet	lt
 800fcea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fcee:	461f      	movlt	r7, r3
 800fcf0:	2300      	movge	r3, #0
 800fcf2:	232d      	movlt	r3, #45	@ 0x2d
 800fcf4:	700b      	strb	r3, [r1, #0]
 800fcf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fcf8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fcfc:	4691      	mov	r9, r2
 800fcfe:	f023 0820 	bic.w	r8, r3, #32
 800fd02:	bfbc      	itt	lt
 800fd04:	4632      	movlt	r2, r6
 800fd06:	4616      	movlt	r6, r2
 800fd08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fd0c:	d005      	beq.n	800fd1a <__cvt+0x42>
 800fd0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fd12:	d100      	bne.n	800fd16 <__cvt+0x3e>
 800fd14:	3401      	adds	r4, #1
 800fd16:	2102      	movs	r1, #2
 800fd18:	e000      	b.n	800fd1c <__cvt+0x44>
 800fd1a:	2103      	movs	r1, #3
 800fd1c:	ab03      	add	r3, sp, #12
 800fd1e:	9301      	str	r3, [sp, #4]
 800fd20:	ab02      	add	r3, sp, #8
 800fd22:	9300      	str	r3, [sp, #0]
 800fd24:	ec47 6b10 	vmov	d0, r6, r7
 800fd28:	4653      	mov	r3, sl
 800fd2a:	4622      	mov	r2, r4
 800fd2c:	f000 ff94 	bl	8010c58 <_dtoa_r>
 800fd30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fd34:	4605      	mov	r5, r0
 800fd36:	d119      	bne.n	800fd6c <__cvt+0x94>
 800fd38:	f019 0f01 	tst.w	r9, #1
 800fd3c:	d00e      	beq.n	800fd5c <__cvt+0x84>
 800fd3e:	eb00 0904 	add.w	r9, r0, r4
 800fd42:	2200      	movs	r2, #0
 800fd44:	2300      	movs	r3, #0
 800fd46:	4630      	mov	r0, r6
 800fd48:	4639      	mov	r1, r7
 800fd4a:	f7f0 fecd 	bl	8000ae8 <__aeabi_dcmpeq>
 800fd4e:	b108      	cbz	r0, 800fd54 <__cvt+0x7c>
 800fd50:	f8cd 900c 	str.w	r9, [sp, #12]
 800fd54:	2230      	movs	r2, #48	@ 0x30
 800fd56:	9b03      	ldr	r3, [sp, #12]
 800fd58:	454b      	cmp	r3, r9
 800fd5a:	d31e      	bcc.n	800fd9a <__cvt+0xc2>
 800fd5c:	9b03      	ldr	r3, [sp, #12]
 800fd5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd60:	1b5b      	subs	r3, r3, r5
 800fd62:	4628      	mov	r0, r5
 800fd64:	6013      	str	r3, [r2, #0]
 800fd66:	b004      	add	sp, #16
 800fd68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fd70:	eb00 0904 	add.w	r9, r0, r4
 800fd74:	d1e5      	bne.n	800fd42 <__cvt+0x6a>
 800fd76:	7803      	ldrb	r3, [r0, #0]
 800fd78:	2b30      	cmp	r3, #48	@ 0x30
 800fd7a:	d10a      	bne.n	800fd92 <__cvt+0xba>
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	2300      	movs	r3, #0
 800fd80:	4630      	mov	r0, r6
 800fd82:	4639      	mov	r1, r7
 800fd84:	f7f0 feb0 	bl	8000ae8 <__aeabi_dcmpeq>
 800fd88:	b918      	cbnz	r0, 800fd92 <__cvt+0xba>
 800fd8a:	f1c4 0401 	rsb	r4, r4, #1
 800fd8e:	f8ca 4000 	str.w	r4, [sl]
 800fd92:	f8da 3000 	ldr.w	r3, [sl]
 800fd96:	4499      	add	r9, r3
 800fd98:	e7d3      	b.n	800fd42 <__cvt+0x6a>
 800fd9a:	1c59      	adds	r1, r3, #1
 800fd9c:	9103      	str	r1, [sp, #12]
 800fd9e:	701a      	strb	r2, [r3, #0]
 800fda0:	e7d9      	b.n	800fd56 <__cvt+0x7e>

0800fda2 <__exponent>:
 800fda2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fda4:	2900      	cmp	r1, #0
 800fda6:	bfba      	itte	lt
 800fda8:	4249      	neglt	r1, r1
 800fdaa:	232d      	movlt	r3, #45	@ 0x2d
 800fdac:	232b      	movge	r3, #43	@ 0x2b
 800fdae:	2909      	cmp	r1, #9
 800fdb0:	7002      	strb	r2, [r0, #0]
 800fdb2:	7043      	strb	r3, [r0, #1]
 800fdb4:	dd29      	ble.n	800fe0a <__exponent+0x68>
 800fdb6:	f10d 0307 	add.w	r3, sp, #7
 800fdba:	461d      	mov	r5, r3
 800fdbc:	270a      	movs	r7, #10
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	fbb1 f6f7 	udiv	r6, r1, r7
 800fdc4:	fb07 1416 	mls	r4, r7, r6, r1
 800fdc8:	3430      	adds	r4, #48	@ 0x30
 800fdca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fdce:	460c      	mov	r4, r1
 800fdd0:	2c63      	cmp	r4, #99	@ 0x63
 800fdd2:	f103 33ff 	add.w	r3, r3, #4294967295
 800fdd6:	4631      	mov	r1, r6
 800fdd8:	dcf1      	bgt.n	800fdbe <__exponent+0x1c>
 800fdda:	3130      	adds	r1, #48	@ 0x30
 800fddc:	1e94      	subs	r4, r2, #2
 800fdde:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fde2:	1c41      	adds	r1, r0, #1
 800fde4:	4623      	mov	r3, r4
 800fde6:	42ab      	cmp	r3, r5
 800fde8:	d30a      	bcc.n	800fe00 <__exponent+0x5e>
 800fdea:	f10d 0309 	add.w	r3, sp, #9
 800fdee:	1a9b      	subs	r3, r3, r2
 800fdf0:	42ac      	cmp	r4, r5
 800fdf2:	bf88      	it	hi
 800fdf4:	2300      	movhi	r3, #0
 800fdf6:	3302      	adds	r3, #2
 800fdf8:	4403      	add	r3, r0
 800fdfa:	1a18      	subs	r0, r3, r0
 800fdfc:	b003      	add	sp, #12
 800fdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe00:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fe04:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fe08:	e7ed      	b.n	800fde6 <__exponent+0x44>
 800fe0a:	2330      	movs	r3, #48	@ 0x30
 800fe0c:	3130      	adds	r1, #48	@ 0x30
 800fe0e:	7083      	strb	r3, [r0, #2]
 800fe10:	70c1      	strb	r1, [r0, #3]
 800fe12:	1d03      	adds	r3, r0, #4
 800fe14:	e7f1      	b.n	800fdfa <__exponent+0x58>
	...

0800fe18 <_printf_float>:
 800fe18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe1c:	b08d      	sub	sp, #52	@ 0x34
 800fe1e:	460c      	mov	r4, r1
 800fe20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fe24:	4616      	mov	r6, r2
 800fe26:	461f      	mov	r7, r3
 800fe28:	4605      	mov	r5, r0
 800fe2a:	f000 fdf5 	bl	8010a18 <_localeconv_r>
 800fe2e:	6803      	ldr	r3, [r0, #0]
 800fe30:	9304      	str	r3, [sp, #16]
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7f0 fa2c 	bl	8000290 <strlen>
 800fe38:	2300      	movs	r3, #0
 800fe3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe3c:	f8d8 3000 	ldr.w	r3, [r8]
 800fe40:	9005      	str	r0, [sp, #20]
 800fe42:	3307      	adds	r3, #7
 800fe44:	f023 0307 	bic.w	r3, r3, #7
 800fe48:	f103 0208 	add.w	r2, r3, #8
 800fe4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fe50:	f8d4 b000 	ldr.w	fp, [r4]
 800fe54:	f8c8 2000 	str.w	r2, [r8]
 800fe58:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fe5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fe60:	9307      	str	r3, [sp, #28]
 800fe62:	f8cd 8018 	str.w	r8, [sp, #24]
 800fe66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fe6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe6e:	4b9c      	ldr	r3, [pc, #624]	@ (80100e0 <_printf_float+0x2c8>)
 800fe70:	f04f 32ff 	mov.w	r2, #4294967295
 800fe74:	f7f0 fe6a 	bl	8000b4c <__aeabi_dcmpun>
 800fe78:	bb70      	cbnz	r0, 800fed8 <_printf_float+0xc0>
 800fe7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe7e:	4b98      	ldr	r3, [pc, #608]	@ (80100e0 <_printf_float+0x2c8>)
 800fe80:	f04f 32ff 	mov.w	r2, #4294967295
 800fe84:	f7f0 fe44 	bl	8000b10 <__aeabi_dcmple>
 800fe88:	bb30      	cbnz	r0, 800fed8 <_printf_float+0xc0>
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	4640      	mov	r0, r8
 800fe90:	4649      	mov	r1, r9
 800fe92:	f7f0 fe33 	bl	8000afc <__aeabi_dcmplt>
 800fe96:	b110      	cbz	r0, 800fe9e <_printf_float+0x86>
 800fe98:	232d      	movs	r3, #45	@ 0x2d
 800fe9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe9e:	4a91      	ldr	r2, [pc, #580]	@ (80100e4 <_printf_float+0x2cc>)
 800fea0:	4b91      	ldr	r3, [pc, #580]	@ (80100e8 <_printf_float+0x2d0>)
 800fea2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fea6:	bf8c      	ite	hi
 800fea8:	4690      	movhi	r8, r2
 800feaa:	4698      	movls	r8, r3
 800feac:	2303      	movs	r3, #3
 800feae:	6123      	str	r3, [r4, #16]
 800feb0:	f02b 0304 	bic.w	r3, fp, #4
 800feb4:	6023      	str	r3, [r4, #0]
 800feb6:	f04f 0900 	mov.w	r9, #0
 800feba:	9700      	str	r7, [sp, #0]
 800febc:	4633      	mov	r3, r6
 800febe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fec0:	4621      	mov	r1, r4
 800fec2:	4628      	mov	r0, r5
 800fec4:	f000 f9d2 	bl	801026c <_printf_common>
 800fec8:	3001      	adds	r0, #1
 800feca:	f040 808d 	bne.w	800ffe8 <_printf_float+0x1d0>
 800fece:	f04f 30ff 	mov.w	r0, #4294967295
 800fed2:	b00d      	add	sp, #52	@ 0x34
 800fed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fed8:	4642      	mov	r2, r8
 800feda:	464b      	mov	r3, r9
 800fedc:	4640      	mov	r0, r8
 800fede:	4649      	mov	r1, r9
 800fee0:	f7f0 fe34 	bl	8000b4c <__aeabi_dcmpun>
 800fee4:	b140      	cbz	r0, 800fef8 <_printf_float+0xe0>
 800fee6:	464b      	mov	r3, r9
 800fee8:	2b00      	cmp	r3, #0
 800feea:	bfbc      	itt	lt
 800feec:	232d      	movlt	r3, #45	@ 0x2d
 800feee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fef2:	4a7e      	ldr	r2, [pc, #504]	@ (80100ec <_printf_float+0x2d4>)
 800fef4:	4b7e      	ldr	r3, [pc, #504]	@ (80100f0 <_printf_float+0x2d8>)
 800fef6:	e7d4      	b.n	800fea2 <_printf_float+0x8a>
 800fef8:	6863      	ldr	r3, [r4, #4]
 800fefa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fefe:	9206      	str	r2, [sp, #24]
 800ff00:	1c5a      	adds	r2, r3, #1
 800ff02:	d13b      	bne.n	800ff7c <_printf_float+0x164>
 800ff04:	2306      	movs	r3, #6
 800ff06:	6063      	str	r3, [r4, #4]
 800ff08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	6022      	str	r2, [r4, #0]
 800ff10:	9303      	str	r3, [sp, #12]
 800ff12:	ab0a      	add	r3, sp, #40	@ 0x28
 800ff14:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ff18:	ab09      	add	r3, sp, #36	@ 0x24
 800ff1a:	9300      	str	r3, [sp, #0]
 800ff1c:	6861      	ldr	r1, [r4, #4]
 800ff1e:	ec49 8b10 	vmov	d0, r8, r9
 800ff22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ff26:	4628      	mov	r0, r5
 800ff28:	f7ff fed6 	bl	800fcd8 <__cvt>
 800ff2c:	9b06      	ldr	r3, [sp, #24]
 800ff2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ff30:	2b47      	cmp	r3, #71	@ 0x47
 800ff32:	4680      	mov	r8, r0
 800ff34:	d129      	bne.n	800ff8a <_printf_float+0x172>
 800ff36:	1cc8      	adds	r0, r1, #3
 800ff38:	db02      	blt.n	800ff40 <_printf_float+0x128>
 800ff3a:	6863      	ldr	r3, [r4, #4]
 800ff3c:	4299      	cmp	r1, r3
 800ff3e:	dd41      	ble.n	800ffc4 <_printf_float+0x1ac>
 800ff40:	f1aa 0a02 	sub.w	sl, sl, #2
 800ff44:	fa5f fa8a 	uxtb.w	sl, sl
 800ff48:	3901      	subs	r1, #1
 800ff4a:	4652      	mov	r2, sl
 800ff4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ff50:	9109      	str	r1, [sp, #36]	@ 0x24
 800ff52:	f7ff ff26 	bl	800fda2 <__exponent>
 800ff56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff58:	1813      	adds	r3, r2, r0
 800ff5a:	2a01      	cmp	r2, #1
 800ff5c:	4681      	mov	r9, r0
 800ff5e:	6123      	str	r3, [r4, #16]
 800ff60:	dc02      	bgt.n	800ff68 <_printf_float+0x150>
 800ff62:	6822      	ldr	r2, [r4, #0]
 800ff64:	07d2      	lsls	r2, r2, #31
 800ff66:	d501      	bpl.n	800ff6c <_printf_float+0x154>
 800ff68:	3301      	adds	r3, #1
 800ff6a:	6123      	str	r3, [r4, #16]
 800ff6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d0a2      	beq.n	800feba <_printf_float+0xa2>
 800ff74:	232d      	movs	r3, #45	@ 0x2d
 800ff76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff7a:	e79e      	b.n	800feba <_printf_float+0xa2>
 800ff7c:	9a06      	ldr	r2, [sp, #24]
 800ff7e:	2a47      	cmp	r2, #71	@ 0x47
 800ff80:	d1c2      	bne.n	800ff08 <_printf_float+0xf0>
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d1c0      	bne.n	800ff08 <_printf_float+0xf0>
 800ff86:	2301      	movs	r3, #1
 800ff88:	e7bd      	b.n	800ff06 <_printf_float+0xee>
 800ff8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ff8e:	d9db      	bls.n	800ff48 <_printf_float+0x130>
 800ff90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ff94:	d118      	bne.n	800ffc8 <_printf_float+0x1b0>
 800ff96:	2900      	cmp	r1, #0
 800ff98:	6863      	ldr	r3, [r4, #4]
 800ff9a:	dd0b      	ble.n	800ffb4 <_printf_float+0x19c>
 800ff9c:	6121      	str	r1, [r4, #16]
 800ff9e:	b913      	cbnz	r3, 800ffa6 <_printf_float+0x18e>
 800ffa0:	6822      	ldr	r2, [r4, #0]
 800ffa2:	07d0      	lsls	r0, r2, #31
 800ffa4:	d502      	bpl.n	800ffac <_printf_float+0x194>
 800ffa6:	3301      	adds	r3, #1
 800ffa8:	440b      	add	r3, r1
 800ffaa:	6123      	str	r3, [r4, #16]
 800ffac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ffae:	f04f 0900 	mov.w	r9, #0
 800ffb2:	e7db      	b.n	800ff6c <_printf_float+0x154>
 800ffb4:	b913      	cbnz	r3, 800ffbc <_printf_float+0x1a4>
 800ffb6:	6822      	ldr	r2, [r4, #0]
 800ffb8:	07d2      	lsls	r2, r2, #31
 800ffba:	d501      	bpl.n	800ffc0 <_printf_float+0x1a8>
 800ffbc:	3302      	adds	r3, #2
 800ffbe:	e7f4      	b.n	800ffaa <_printf_float+0x192>
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	e7f2      	b.n	800ffaa <_printf_float+0x192>
 800ffc4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ffc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ffca:	4299      	cmp	r1, r3
 800ffcc:	db05      	blt.n	800ffda <_printf_float+0x1c2>
 800ffce:	6823      	ldr	r3, [r4, #0]
 800ffd0:	6121      	str	r1, [r4, #16]
 800ffd2:	07d8      	lsls	r0, r3, #31
 800ffd4:	d5ea      	bpl.n	800ffac <_printf_float+0x194>
 800ffd6:	1c4b      	adds	r3, r1, #1
 800ffd8:	e7e7      	b.n	800ffaa <_printf_float+0x192>
 800ffda:	2900      	cmp	r1, #0
 800ffdc:	bfd4      	ite	le
 800ffde:	f1c1 0202 	rsble	r2, r1, #2
 800ffe2:	2201      	movgt	r2, #1
 800ffe4:	4413      	add	r3, r2
 800ffe6:	e7e0      	b.n	800ffaa <_printf_float+0x192>
 800ffe8:	6823      	ldr	r3, [r4, #0]
 800ffea:	055a      	lsls	r2, r3, #21
 800ffec:	d407      	bmi.n	800fffe <_printf_float+0x1e6>
 800ffee:	6923      	ldr	r3, [r4, #16]
 800fff0:	4642      	mov	r2, r8
 800fff2:	4631      	mov	r1, r6
 800fff4:	4628      	mov	r0, r5
 800fff6:	47b8      	blx	r7
 800fff8:	3001      	adds	r0, #1
 800fffa:	d12b      	bne.n	8010054 <_printf_float+0x23c>
 800fffc:	e767      	b.n	800fece <_printf_float+0xb6>
 800fffe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010002:	f240 80dd 	bls.w	80101c0 <_printf_float+0x3a8>
 8010006:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801000a:	2200      	movs	r2, #0
 801000c:	2300      	movs	r3, #0
 801000e:	f7f0 fd6b 	bl	8000ae8 <__aeabi_dcmpeq>
 8010012:	2800      	cmp	r0, #0
 8010014:	d033      	beq.n	801007e <_printf_float+0x266>
 8010016:	4a37      	ldr	r2, [pc, #220]	@ (80100f4 <_printf_float+0x2dc>)
 8010018:	2301      	movs	r3, #1
 801001a:	4631      	mov	r1, r6
 801001c:	4628      	mov	r0, r5
 801001e:	47b8      	blx	r7
 8010020:	3001      	adds	r0, #1
 8010022:	f43f af54 	beq.w	800fece <_printf_float+0xb6>
 8010026:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801002a:	4543      	cmp	r3, r8
 801002c:	db02      	blt.n	8010034 <_printf_float+0x21c>
 801002e:	6823      	ldr	r3, [r4, #0]
 8010030:	07d8      	lsls	r0, r3, #31
 8010032:	d50f      	bpl.n	8010054 <_printf_float+0x23c>
 8010034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010038:	4631      	mov	r1, r6
 801003a:	4628      	mov	r0, r5
 801003c:	47b8      	blx	r7
 801003e:	3001      	adds	r0, #1
 8010040:	f43f af45 	beq.w	800fece <_printf_float+0xb6>
 8010044:	f04f 0900 	mov.w	r9, #0
 8010048:	f108 38ff 	add.w	r8, r8, #4294967295
 801004c:	f104 0a1a 	add.w	sl, r4, #26
 8010050:	45c8      	cmp	r8, r9
 8010052:	dc09      	bgt.n	8010068 <_printf_float+0x250>
 8010054:	6823      	ldr	r3, [r4, #0]
 8010056:	079b      	lsls	r3, r3, #30
 8010058:	f100 8103 	bmi.w	8010262 <_printf_float+0x44a>
 801005c:	68e0      	ldr	r0, [r4, #12]
 801005e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010060:	4298      	cmp	r0, r3
 8010062:	bfb8      	it	lt
 8010064:	4618      	movlt	r0, r3
 8010066:	e734      	b.n	800fed2 <_printf_float+0xba>
 8010068:	2301      	movs	r3, #1
 801006a:	4652      	mov	r2, sl
 801006c:	4631      	mov	r1, r6
 801006e:	4628      	mov	r0, r5
 8010070:	47b8      	blx	r7
 8010072:	3001      	adds	r0, #1
 8010074:	f43f af2b 	beq.w	800fece <_printf_float+0xb6>
 8010078:	f109 0901 	add.w	r9, r9, #1
 801007c:	e7e8      	b.n	8010050 <_printf_float+0x238>
 801007e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010080:	2b00      	cmp	r3, #0
 8010082:	dc39      	bgt.n	80100f8 <_printf_float+0x2e0>
 8010084:	4a1b      	ldr	r2, [pc, #108]	@ (80100f4 <_printf_float+0x2dc>)
 8010086:	2301      	movs	r3, #1
 8010088:	4631      	mov	r1, r6
 801008a:	4628      	mov	r0, r5
 801008c:	47b8      	blx	r7
 801008e:	3001      	adds	r0, #1
 8010090:	f43f af1d 	beq.w	800fece <_printf_float+0xb6>
 8010094:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010098:	ea59 0303 	orrs.w	r3, r9, r3
 801009c:	d102      	bne.n	80100a4 <_printf_float+0x28c>
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	07d9      	lsls	r1, r3, #31
 80100a2:	d5d7      	bpl.n	8010054 <_printf_float+0x23c>
 80100a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100a8:	4631      	mov	r1, r6
 80100aa:	4628      	mov	r0, r5
 80100ac:	47b8      	blx	r7
 80100ae:	3001      	adds	r0, #1
 80100b0:	f43f af0d 	beq.w	800fece <_printf_float+0xb6>
 80100b4:	f04f 0a00 	mov.w	sl, #0
 80100b8:	f104 0b1a 	add.w	fp, r4, #26
 80100bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100be:	425b      	negs	r3, r3
 80100c0:	4553      	cmp	r3, sl
 80100c2:	dc01      	bgt.n	80100c8 <_printf_float+0x2b0>
 80100c4:	464b      	mov	r3, r9
 80100c6:	e793      	b.n	800fff0 <_printf_float+0x1d8>
 80100c8:	2301      	movs	r3, #1
 80100ca:	465a      	mov	r2, fp
 80100cc:	4631      	mov	r1, r6
 80100ce:	4628      	mov	r0, r5
 80100d0:	47b8      	blx	r7
 80100d2:	3001      	adds	r0, #1
 80100d4:	f43f aefb 	beq.w	800fece <_printf_float+0xb6>
 80100d8:	f10a 0a01 	add.w	sl, sl, #1
 80100dc:	e7ee      	b.n	80100bc <_printf_float+0x2a4>
 80100de:	bf00      	nop
 80100e0:	7fefffff 	.word	0x7fefffff
 80100e4:	080155c2 	.word	0x080155c2
 80100e8:	080155be 	.word	0x080155be
 80100ec:	080155ca 	.word	0x080155ca
 80100f0:	080155c6 	.word	0x080155c6
 80100f4:	080155ce 	.word	0x080155ce
 80100f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80100fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80100fe:	4553      	cmp	r3, sl
 8010100:	bfa8      	it	ge
 8010102:	4653      	movge	r3, sl
 8010104:	2b00      	cmp	r3, #0
 8010106:	4699      	mov	r9, r3
 8010108:	dc36      	bgt.n	8010178 <_printf_float+0x360>
 801010a:	f04f 0b00 	mov.w	fp, #0
 801010e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010112:	f104 021a 	add.w	r2, r4, #26
 8010116:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010118:	9306      	str	r3, [sp, #24]
 801011a:	eba3 0309 	sub.w	r3, r3, r9
 801011e:	455b      	cmp	r3, fp
 8010120:	dc31      	bgt.n	8010186 <_printf_float+0x36e>
 8010122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010124:	459a      	cmp	sl, r3
 8010126:	dc3a      	bgt.n	801019e <_printf_float+0x386>
 8010128:	6823      	ldr	r3, [r4, #0]
 801012a:	07da      	lsls	r2, r3, #31
 801012c:	d437      	bmi.n	801019e <_printf_float+0x386>
 801012e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010130:	ebaa 0903 	sub.w	r9, sl, r3
 8010134:	9b06      	ldr	r3, [sp, #24]
 8010136:	ebaa 0303 	sub.w	r3, sl, r3
 801013a:	4599      	cmp	r9, r3
 801013c:	bfa8      	it	ge
 801013e:	4699      	movge	r9, r3
 8010140:	f1b9 0f00 	cmp.w	r9, #0
 8010144:	dc33      	bgt.n	80101ae <_printf_float+0x396>
 8010146:	f04f 0800 	mov.w	r8, #0
 801014a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801014e:	f104 0b1a 	add.w	fp, r4, #26
 8010152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010154:	ebaa 0303 	sub.w	r3, sl, r3
 8010158:	eba3 0309 	sub.w	r3, r3, r9
 801015c:	4543      	cmp	r3, r8
 801015e:	f77f af79 	ble.w	8010054 <_printf_float+0x23c>
 8010162:	2301      	movs	r3, #1
 8010164:	465a      	mov	r2, fp
 8010166:	4631      	mov	r1, r6
 8010168:	4628      	mov	r0, r5
 801016a:	47b8      	blx	r7
 801016c:	3001      	adds	r0, #1
 801016e:	f43f aeae 	beq.w	800fece <_printf_float+0xb6>
 8010172:	f108 0801 	add.w	r8, r8, #1
 8010176:	e7ec      	b.n	8010152 <_printf_float+0x33a>
 8010178:	4642      	mov	r2, r8
 801017a:	4631      	mov	r1, r6
 801017c:	4628      	mov	r0, r5
 801017e:	47b8      	blx	r7
 8010180:	3001      	adds	r0, #1
 8010182:	d1c2      	bne.n	801010a <_printf_float+0x2f2>
 8010184:	e6a3      	b.n	800fece <_printf_float+0xb6>
 8010186:	2301      	movs	r3, #1
 8010188:	4631      	mov	r1, r6
 801018a:	4628      	mov	r0, r5
 801018c:	9206      	str	r2, [sp, #24]
 801018e:	47b8      	blx	r7
 8010190:	3001      	adds	r0, #1
 8010192:	f43f ae9c 	beq.w	800fece <_printf_float+0xb6>
 8010196:	9a06      	ldr	r2, [sp, #24]
 8010198:	f10b 0b01 	add.w	fp, fp, #1
 801019c:	e7bb      	b.n	8010116 <_printf_float+0x2fe>
 801019e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101a2:	4631      	mov	r1, r6
 80101a4:	4628      	mov	r0, r5
 80101a6:	47b8      	blx	r7
 80101a8:	3001      	adds	r0, #1
 80101aa:	d1c0      	bne.n	801012e <_printf_float+0x316>
 80101ac:	e68f      	b.n	800fece <_printf_float+0xb6>
 80101ae:	9a06      	ldr	r2, [sp, #24]
 80101b0:	464b      	mov	r3, r9
 80101b2:	4442      	add	r2, r8
 80101b4:	4631      	mov	r1, r6
 80101b6:	4628      	mov	r0, r5
 80101b8:	47b8      	blx	r7
 80101ba:	3001      	adds	r0, #1
 80101bc:	d1c3      	bne.n	8010146 <_printf_float+0x32e>
 80101be:	e686      	b.n	800fece <_printf_float+0xb6>
 80101c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80101c4:	f1ba 0f01 	cmp.w	sl, #1
 80101c8:	dc01      	bgt.n	80101ce <_printf_float+0x3b6>
 80101ca:	07db      	lsls	r3, r3, #31
 80101cc:	d536      	bpl.n	801023c <_printf_float+0x424>
 80101ce:	2301      	movs	r3, #1
 80101d0:	4642      	mov	r2, r8
 80101d2:	4631      	mov	r1, r6
 80101d4:	4628      	mov	r0, r5
 80101d6:	47b8      	blx	r7
 80101d8:	3001      	adds	r0, #1
 80101da:	f43f ae78 	beq.w	800fece <_printf_float+0xb6>
 80101de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101e2:	4631      	mov	r1, r6
 80101e4:	4628      	mov	r0, r5
 80101e6:	47b8      	blx	r7
 80101e8:	3001      	adds	r0, #1
 80101ea:	f43f ae70 	beq.w	800fece <_printf_float+0xb6>
 80101ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80101f2:	2200      	movs	r2, #0
 80101f4:	2300      	movs	r3, #0
 80101f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80101fa:	f7f0 fc75 	bl	8000ae8 <__aeabi_dcmpeq>
 80101fe:	b9c0      	cbnz	r0, 8010232 <_printf_float+0x41a>
 8010200:	4653      	mov	r3, sl
 8010202:	f108 0201 	add.w	r2, r8, #1
 8010206:	4631      	mov	r1, r6
 8010208:	4628      	mov	r0, r5
 801020a:	47b8      	blx	r7
 801020c:	3001      	adds	r0, #1
 801020e:	d10c      	bne.n	801022a <_printf_float+0x412>
 8010210:	e65d      	b.n	800fece <_printf_float+0xb6>
 8010212:	2301      	movs	r3, #1
 8010214:	465a      	mov	r2, fp
 8010216:	4631      	mov	r1, r6
 8010218:	4628      	mov	r0, r5
 801021a:	47b8      	blx	r7
 801021c:	3001      	adds	r0, #1
 801021e:	f43f ae56 	beq.w	800fece <_printf_float+0xb6>
 8010222:	f108 0801 	add.w	r8, r8, #1
 8010226:	45d0      	cmp	r8, sl
 8010228:	dbf3      	blt.n	8010212 <_printf_float+0x3fa>
 801022a:	464b      	mov	r3, r9
 801022c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010230:	e6df      	b.n	800fff2 <_printf_float+0x1da>
 8010232:	f04f 0800 	mov.w	r8, #0
 8010236:	f104 0b1a 	add.w	fp, r4, #26
 801023a:	e7f4      	b.n	8010226 <_printf_float+0x40e>
 801023c:	2301      	movs	r3, #1
 801023e:	4642      	mov	r2, r8
 8010240:	e7e1      	b.n	8010206 <_printf_float+0x3ee>
 8010242:	2301      	movs	r3, #1
 8010244:	464a      	mov	r2, r9
 8010246:	4631      	mov	r1, r6
 8010248:	4628      	mov	r0, r5
 801024a:	47b8      	blx	r7
 801024c:	3001      	adds	r0, #1
 801024e:	f43f ae3e 	beq.w	800fece <_printf_float+0xb6>
 8010252:	f108 0801 	add.w	r8, r8, #1
 8010256:	68e3      	ldr	r3, [r4, #12]
 8010258:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801025a:	1a5b      	subs	r3, r3, r1
 801025c:	4543      	cmp	r3, r8
 801025e:	dcf0      	bgt.n	8010242 <_printf_float+0x42a>
 8010260:	e6fc      	b.n	801005c <_printf_float+0x244>
 8010262:	f04f 0800 	mov.w	r8, #0
 8010266:	f104 0919 	add.w	r9, r4, #25
 801026a:	e7f4      	b.n	8010256 <_printf_float+0x43e>

0801026c <_printf_common>:
 801026c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010270:	4616      	mov	r6, r2
 8010272:	4698      	mov	r8, r3
 8010274:	688a      	ldr	r2, [r1, #8]
 8010276:	690b      	ldr	r3, [r1, #16]
 8010278:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801027c:	4293      	cmp	r3, r2
 801027e:	bfb8      	it	lt
 8010280:	4613      	movlt	r3, r2
 8010282:	6033      	str	r3, [r6, #0]
 8010284:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010288:	4607      	mov	r7, r0
 801028a:	460c      	mov	r4, r1
 801028c:	b10a      	cbz	r2, 8010292 <_printf_common+0x26>
 801028e:	3301      	adds	r3, #1
 8010290:	6033      	str	r3, [r6, #0]
 8010292:	6823      	ldr	r3, [r4, #0]
 8010294:	0699      	lsls	r1, r3, #26
 8010296:	bf42      	ittt	mi
 8010298:	6833      	ldrmi	r3, [r6, #0]
 801029a:	3302      	addmi	r3, #2
 801029c:	6033      	strmi	r3, [r6, #0]
 801029e:	6825      	ldr	r5, [r4, #0]
 80102a0:	f015 0506 	ands.w	r5, r5, #6
 80102a4:	d106      	bne.n	80102b4 <_printf_common+0x48>
 80102a6:	f104 0a19 	add.w	sl, r4, #25
 80102aa:	68e3      	ldr	r3, [r4, #12]
 80102ac:	6832      	ldr	r2, [r6, #0]
 80102ae:	1a9b      	subs	r3, r3, r2
 80102b0:	42ab      	cmp	r3, r5
 80102b2:	dc26      	bgt.n	8010302 <_printf_common+0x96>
 80102b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80102b8:	6822      	ldr	r2, [r4, #0]
 80102ba:	3b00      	subs	r3, #0
 80102bc:	bf18      	it	ne
 80102be:	2301      	movne	r3, #1
 80102c0:	0692      	lsls	r2, r2, #26
 80102c2:	d42b      	bmi.n	801031c <_printf_common+0xb0>
 80102c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80102c8:	4641      	mov	r1, r8
 80102ca:	4638      	mov	r0, r7
 80102cc:	47c8      	blx	r9
 80102ce:	3001      	adds	r0, #1
 80102d0:	d01e      	beq.n	8010310 <_printf_common+0xa4>
 80102d2:	6823      	ldr	r3, [r4, #0]
 80102d4:	6922      	ldr	r2, [r4, #16]
 80102d6:	f003 0306 	and.w	r3, r3, #6
 80102da:	2b04      	cmp	r3, #4
 80102dc:	bf02      	ittt	eq
 80102de:	68e5      	ldreq	r5, [r4, #12]
 80102e0:	6833      	ldreq	r3, [r6, #0]
 80102e2:	1aed      	subeq	r5, r5, r3
 80102e4:	68a3      	ldr	r3, [r4, #8]
 80102e6:	bf0c      	ite	eq
 80102e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102ec:	2500      	movne	r5, #0
 80102ee:	4293      	cmp	r3, r2
 80102f0:	bfc4      	itt	gt
 80102f2:	1a9b      	subgt	r3, r3, r2
 80102f4:	18ed      	addgt	r5, r5, r3
 80102f6:	2600      	movs	r6, #0
 80102f8:	341a      	adds	r4, #26
 80102fa:	42b5      	cmp	r5, r6
 80102fc:	d11a      	bne.n	8010334 <_printf_common+0xc8>
 80102fe:	2000      	movs	r0, #0
 8010300:	e008      	b.n	8010314 <_printf_common+0xa8>
 8010302:	2301      	movs	r3, #1
 8010304:	4652      	mov	r2, sl
 8010306:	4641      	mov	r1, r8
 8010308:	4638      	mov	r0, r7
 801030a:	47c8      	blx	r9
 801030c:	3001      	adds	r0, #1
 801030e:	d103      	bne.n	8010318 <_printf_common+0xac>
 8010310:	f04f 30ff 	mov.w	r0, #4294967295
 8010314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010318:	3501      	adds	r5, #1
 801031a:	e7c6      	b.n	80102aa <_printf_common+0x3e>
 801031c:	18e1      	adds	r1, r4, r3
 801031e:	1c5a      	adds	r2, r3, #1
 8010320:	2030      	movs	r0, #48	@ 0x30
 8010322:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010326:	4422      	add	r2, r4
 8010328:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801032c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010330:	3302      	adds	r3, #2
 8010332:	e7c7      	b.n	80102c4 <_printf_common+0x58>
 8010334:	2301      	movs	r3, #1
 8010336:	4622      	mov	r2, r4
 8010338:	4641      	mov	r1, r8
 801033a:	4638      	mov	r0, r7
 801033c:	47c8      	blx	r9
 801033e:	3001      	adds	r0, #1
 8010340:	d0e6      	beq.n	8010310 <_printf_common+0xa4>
 8010342:	3601      	adds	r6, #1
 8010344:	e7d9      	b.n	80102fa <_printf_common+0x8e>
	...

08010348 <_printf_i>:
 8010348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801034c:	7e0f      	ldrb	r7, [r1, #24]
 801034e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010350:	2f78      	cmp	r7, #120	@ 0x78
 8010352:	4691      	mov	r9, r2
 8010354:	4680      	mov	r8, r0
 8010356:	460c      	mov	r4, r1
 8010358:	469a      	mov	sl, r3
 801035a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801035e:	d807      	bhi.n	8010370 <_printf_i+0x28>
 8010360:	2f62      	cmp	r7, #98	@ 0x62
 8010362:	d80a      	bhi.n	801037a <_printf_i+0x32>
 8010364:	2f00      	cmp	r7, #0
 8010366:	f000 80d1 	beq.w	801050c <_printf_i+0x1c4>
 801036a:	2f58      	cmp	r7, #88	@ 0x58
 801036c:	f000 80b8 	beq.w	80104e0 <_printf_i+0x198>
 8010370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010374:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010378:	e03a      	b.n	80103f0 <_printf_i+0xa8>
 801037a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801037e:	2b15      	cmp	r3, #21
 8010380:	d8f6      	bhi.n	8010370 <_printf_i+0x28>
 8010382:	a101      	add	r1, pc, #4	@ (adr r1, 8010388 <_printf_i+0x40>)
 8010384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010388:	080103e1 	.word	0x080103e1
 801038c:	080103f5 	.word	0x080103f5
 8010390:	08010371 	.word	0x08010371
 8010394:	08010371 	.word	0x08010371
 8010398:	08010371 	.word	0x08010371
 801039c:	08010371 	.word	0x08010371
 80103a0:	080103f5 	.word	0x080103f5
 80103a4:	08010371 	.word	0x08010371
 80103a8:	08010371 	.word	0x08010371
 80103ac:	08010371 	.word	0x08010371
 80103b0:	08010371 	.word	0x08010371
 80103b4:	080104f3 	.word	0x080104f3
 80103b8:	0801041f 	.word	0x0801041f
 80103bc:	080104ad 	.word	0x080104ad
 80103c0:	08010371 	.word	0x08010371
 80103c4:	08010371 	.word	0x08010371
 80103c8:	08010515 	.word	0x08010515
 80103cc:	08010371 	.word	0x08010371
 80103d0:	0801041f 	.word	0x0801041f
 80103d4:	08010371 	.word	0x08010371
 80103d8:	08010371 	.word	0x08010371
 80103dc:	080104b5 	.word	0x080104b5
 80103e0:	6833      	ldr	r3, [r6, #0]
 80103e2:	1d1a      	adds	r2, r3, #4
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	6032      	str	r2, [r6, #0]
 80103e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80103ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80103f0:	2301      	movs	r3, #1
 80103f2:	e09c      	b.n	801052e <_printf_i+0x1e6>
 80103f4:	6833      	ldr	r3, [r6, #0]
 80103f6:	6820      	ldr	r0, [r4, #0]
 80103f8:	1d19      	adds	r1, r3, #4
 80103fa:	6031      	str	r1, [r6, #0]
 80103fc:	0606      	lsls	r6, r0, #24
 80103fe:	d501      	bpl.n	8010404 <_printf_i+0xbc>
 8010400:	681d      	ldr	r5, [r3, #0]
 8010402:	e003      	b.n	801040c <_printf_i+0xc4>
 8010404:	0645      	lsls	r5, r0, #25
 8010406:	d5fb      	bpl.n	8010400 <_printf_i+0xb8>
 8010408:	f9b3 5000 	ldrsh.w	r5, [r3]
 801040c:	2d00      	cmp	r5, #0
 801040e:	da03      	bge.n	8010418 <_printf_i+0xd0>
 8010410:	232d      	movs	r3, #45	@ 0x2d
 8010412:	426d      	negs	r5, r5
 8010414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010418:	4858      	ldr	r0, [pc, #352]	@ (801057c <_printf_i+0x234>)
 801041a:	230a      	movs	r3, #10
 801041c:	e011      	b.n	8010442 <_printf_i+0xfa>
 801041e:	6821      	ldr	r1, [r4, #0]
 8010420:	6833      	ldr	r3, [r6, #0]
 8010422:	0608      	lsls	r0, r1, #24
 8010424:	f853 5b04 	ldr.w	r5, [r3], #4
 8010428:	d402      	bmi.n	8010430 <_printf_i+0xe8>
 801042a:	0649      	lsls	r1, r1, #25
 801042c:	bf48      	it	mi
 801042e:	b2ad      	uxthmi	r5, r5
 8010430:	2f6f      	cmp	r7, #111	@ 0x6f
 8010432:	4852      	ldr	r0, [pc, #328]	@ (801057c <_printf_i+0x234>)
 8010434:	6033      	str	r3, [r6, #0]
 8010436:	bf14      	ite	ne
 8010438:	230a      	movne	r3, #10
 801043a:	2308      	moveq	r3, #8
 801043c:	2100      	movs	r1, #0
 801043e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010442:	6866      	ldr	r6, [r4, #4]
 8010444:	60a6      	str	r6, [r4, #8]
 8010446:	2e00      	cmp	r6, #0
 8010448:	db05      	blt.n	8010456 <_printf_i+0x10e>
 801044a:	6821      	ldr	r1, [r4, #0]
 801044c:	432e      	orrs	r6, r5
 801044e:	f021 0104 	bic.w	r1, r1, #4
 8010452:	6021      	str	r1, [r4, #0]
 8010454:	d04b      	beq.n	80104ee <_printf_i+0x1a6>
 8010456:	4616      	mov	r6, r2
 8010458:	fbb5 f1f3 	udiv	r1, r5, r3
 801045c:	fb03 5711 	mls	r7, r3, r1, r5
 8010460:	5dc7      	ldrb	r7, [r0, r7]
 8010462:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010466:	462f      	mov	r7, r5
 8010468:	42bb      	cmp	r3, r7
 801046a:	460d      	mov	r5, r1
 801046c:	d9f4      	bls.n	8010458 <_printf_i+0x110>
 801046e:	2b08      	cmp	r3, #8
 8010470:	d10b      	bne.n	801048a <_printf_i+0x142>
 8010472:	6823      	ldr	r3, [r4, #0]
 8010474:	07df      	lsls	r7, r3, #31
 8010476:	d508      	bpl.n	801048a <_printf_i+0x142>
 8010478:	6923      	ldr	r3, [r4, #16]
 801047a:	6861      	ldr	r1, [r4, #4]
 801047c:	4299      	cmp	r1, r3
 801047e:	bfde      	ittt	le
 8010480:	2330      	movle	r3, #48	@ 0x30
 8010482:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010486:	f106 36ff 	addle.w	r6, r6, #4294967295
 801048a:	1b92      	subs	r2, r2, r6
 801048c:	6122      	str	r2, [r4, #16]
 801048e:	f8cd a000 	str.w	sl, [sp]
 8010492:	464b      	mov	r3, r9
 8010494:	aa03      	add	r2, sp, #12
 8010496:	4621      	mov	r1, r4
 8010498:	4640      	mov	r0, r8
 801049a:	f7ff fee7 	bl	801026c <_printf_common>
 801049e:	3001      	adds	r0, #1
 80104a0:	d14a      	bne.n	8010538 <_printf_i+0x1f0>
 80104a2:	f04f 30ff 	mov.w	r0, #4294967295
 80104a6:	b004      	add	sp, #16
 80104a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104ac:	6823      	ldr	r3, [r4, #0]
 80104ae:	f043 0320 	orr.w	r3, r3, #32
 80104b2:	6023      	str	r3, [r4, #0]
 80104b4:	4832      	ldr	r0, [pc, #200]	@ (8010580 <_printf_i+0x238>)
 80104b6:	2778      	movs	r7, #120	@ 0x78
 80104b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80104bc:	6823      	ldr	r3, [r4, #0]
 80104be:	6831      	ldr	r1, [r6, #0]
 80104c0:	061f      	lsls	r7, r3, #24
 80104c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80104c6:	d402      	bmi.n	80104ce <_printf_i+0x186>
 80104c8:	065f      	lsls	r7, r3, #25
 80104ca:	bf48      	it	mi
 80104cc:	b2ad      	uxthmi	r5, r5
 80104ce:	6031      	str	r1, [r6, #0]
 80104d0:	07d9      	lsls	r1, r3, #31
 80104d2:	bf44      	itt	mi
 80104d4:	f043 0320 	orrmi.w	r3, r3, #32
 80104d8:	6023      	strmi	r3, [r4, #0]
 80104da:	b11d      	cbz	r5, 80104e4 <_printf_i+0x19c>
 80104dc:	2310      	movs	r3, #16
 80104de:	e7ad      	b.n	801043c <_printf_i+0xf4>
 80104e0:	4826      	ldr	r0, [pc, #152]	@ (801057c <_printf_i+0x234>)
 80104e2:	e7e9      	b.n	80104b8 <_printf_i+0x170>
 80104e4:	6823      	ldr	r3, [r4, #0]
 80104e6:	f023 0320 	bic.w	r3, r3, #32
 80104ea:	6023      	str	r3, [r4, #0]
 80104ec:	e7f6      	b.n	80104dc <_printf_i+0x194>
 80104ee:	4616      	mov	r6, r2
 80104f0:	e7bd      	b.n	801046e <_printf_i+0x126>
 80104f2:	6833      	ldr	r3, [r6, #0]
 80104f4:	6825      	ldr	r5, [r4, #0]
 80104f6:	6961      	ldr	r1, [r4, #20]
 80104f8:	1d18      	adds	r0, r3, #4
 80104fa:	6030      	str	r0, [r6, #0]
 80104fc:	062e      	lsls	r6, r5, #24
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	d501      	bpl.n	8010506 <_printf_i+0x1be>
 8010502:	6019      	str	r1, [r3, #0]
 8010504:	e002      	b.n	801050c <_printf_i+0x1c4>
 8010506:	0668      	lsls	r0, r5, #25
 8010508:	d5fb      	bpl.n	8010502 <_printf_i+0x1ba>
 801050a:	8019      	strh	r1, [r3, #0]
 801050c:	2300      	movs	r3, #0
 801050e:	6123      	str	r3, [r4, #16]
 8010510:	4616      	mov	r6, r2
 8010512:	e7bc      	b.n	801048e <_printf_i+0x146>
 8010514:	6833      	ldr	r3, [r6, #0]
 8010516:	1d1a      	adds	r2, r3, #4
 8010518:	6032      	str	r2, [r6, #0]
 801051a:	681e      	ldr	r6, [r3, #0]
 801051c:	6862      	ldr	r2, [r4, #4]
 801051e:	2100      	movs	r1, #0
 8010520:	4630      	mov	r0, r6
 8010522:	f7ef fe65 	bl	80001f0 <memchr>
 8010526:	b108      	cbz	r0, 801052c <_printf_i+0x1e4>
 8010528:	1b80      	subs	r0, r0, r6
 801052a:	6060      	str	r0, [r4, #4]
 801052c:	6863      	ldr	r3, [r4, #4]
 801052e:	6123      	str	r3, [r4, #16]
 8010530:	2300      	movs	r3, #0
 8010532:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010536:	e7aa      	b.n	801048e <_printf_i+0x146>
 8010538:	6923      	ldr	r3, [r4, #16]
 801053a:	4632      	mov	r2, r6
 801053c:	4649      	mov	r1, r9
 801053e:	4640      	mov	r0, r8
 8010540:	47d0      	blx	sl
 8010542:	3001      	adds	r0, #1
 8010544:	d0ad      	beq.n	80104a2 <_printf_i+0x15a>
 8010546:	6823      	ldr	r3, [r4, #0]
 8010548:	079b      	lsls	r3, r3, #30
 801054a:	d413      	bmi.n	8010574 <_printf_i+0x22c>
 801054c:	68e0      	ldr	r0, [r4, #12]
 801054e:	9b03      	ldr	r3, [sp, #12]
 8010550:	4298      	cmp	r0, r3
 8010552:	bfb8      	it	lt
 8010554:	4618      	movlt	r0, r3
 8010556:	e7a6      	b.n	80104a6 <_printf_i+0x15e>
 8010558:	2301      	movs	r3, #1
 801055a:	4632      	mov	r2, r6
 801055c:	4649      	mov	r1, r9
 801055e:	4640      	mov	r0, r8
 8010560:	47d0      	blx	sl
 8010562:	3001      	adds	r0, #1
 8010564:	d09d      	beq.n	80104a2 <_printf_i+0x15a>
 8010566:	3501      	adds	r5, #1
 8010568:	68e3      	ldr	r3, [r4, #12]
 801056a:	9903      	ldr	r1, [sp, #12]
 801056c:	1a5b      	subs	r3, r3, r1
 801056e:	42ab      	cmp	r3, r5
 8010570:	dcf2      	bgt.n	8010558 <_printf_i+0x210>
 8010572:	e7eb      	b.n	801054c <_printf_i+0x204>
 8010574:	2500      	movs	r5, #0
 8010576:	f104 0619 	add.w	r6, r4, #25
 801057a:	e7f5      	b.n	8010568 <_printf_i+0x220>
 801057c:	080155d0 	.word	0x080155d0
 8010580:	080155e1 	.word	0x080155e1

08010584 <__sflush_r>:
 8010584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801058c:	0716      	lsls	r6, r2, #28
 801058e:	4605      	mov	r5, r0
 8010590:	460c      	mov	r4, r1
 8010592:	d454      	bmi.n	801063e <__sflush_r+0xba>
 8010594:	684b      	ldr	r3, [r1, #4]
 8010596:	2b00      	cmp	r3, #0
 8010598:	dc02      	bgt.n	80105a0 <__sflush_r+0x1c>
 801059a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801059c:	2b00      	cmp	r3, #0
 801059e:	dd48      	ble.n	8010632 <__sflush_r+0xae>
 80105a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105a2:	2e00      	cmp	r6, #0
 80105a4:	d045      	beq.n	8010632 <__sflush_r+0xae>
 80105a6:	2300      	movs	r3, #0
 80105a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80105ac:	682f      	ldr	r7, [r5, #0]
 80105ae:	6a21      	ldr	r1, [r4, #32]
 80105b0:	602b      	str	r3, [r5, #0]
 80105b2:	d030      	beq.n	8010616 <__sflush_r+0x92>
 80105b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80105b6:	89a3      	ldrh	r3, [r4, #12]
 80105b8:	0759      	lsls	r1, r3, #29
 80105ba:	d505      	bpl.n	80105c8 <__sflush_r+0x44>
 80105bc:	6863      	ldr	r3, [r4, #4]
 80105be:	1ad2      	subs	r2, r2, r3
 80105c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80105c2:	b10b      	cbz	r3, 80105c8 <__sflush_r+0x44>
 80105c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80105c6:	1ad2      	subs	r2, r2, r3
 80105c8:	2300      	movs	r3, #0
 80105ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105cc:	6a21      	ldr	r1, [r4, #32]
 80105ce:	4628      	mov	r0, r5
 80105d0:	47b0      	blx	r6
 80105d2:	1c43      	adds	r3, r0, #1
 80105d4:	89a3      	ldrh	r3, [r4, #12]
 80105d6:	d106      	bne.n	80105e6 <__sflush_r+0x62>
 80105d8:	6829      	ldr	r1, [r5, #0]
 80105da:	291d      	cmp	r1, #29
 80105dc:	d82b      	bhi.n	8010636 <__sflush_r+0xb2>
 80105de:	4a2a      	ldr	r2, [pc, #168]	@ (8010688 <__sflush_r+0x104>)
 80105e0:	40ca      	lsrs	r2, r1
 80105e2:	07d6      	lsls	r6, r2, #31
 80105e4:	d527      	bpl.n	8010636 <__sflush_r+0xb2>
 80105e6:	2200      	movs	r2, #0
 80105e8:	6062      	str	r2, [r4, #4]
 80105ea:	04d9      	lsls	r1, r3, #19
 80105ec:	6922      	ldr	r2, [r4, #16]
 80105ee:	6022      	str	r2, [r4, #0]
 80105f0:	d504      	bpl.n	80105fc <__sflush_r+0x78>
 80105f2:	1c42      	adds	r2, r0, #1
 80105f4:	d101      	bne.n	80105fa <__sflush_r+0x76>
 80105f6:	682b      	ldr	r3, [r5, #0]
 80105f8:	b903      	cbnz	r3, 80105fc <__sflush_r+0x78>
 80105fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80105fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80105fe:	602f      	str	r7, [r5, #0]
 8010600:	b1b9      	cbz	r1, 8010632 <__sflush_r+0xae>
 8010602:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010606:	4299      	cmp	r1, r3
 8010608:	d002      	beq.n	8010610 <__sflush_r+0x8c>
 801060a:	4628      	mov	r0, r5
 801060c:	f001 f8f4 	bl	80117f8 <_free_r>
 8010610:	2300      	movs	r3, #0
 8010612:	6363      	str	r3, [r4, #52]	@ 0x34
 8010614:	e00d      	b.n	8010632 <__sflush_r+0xae>
 8010616:	2301      	movs	r3, #1
 8010618:	4628      	mov	r0, r5
 801061a:	47b0      	blx	r6
 801061c:	4602      	mov	r2, r0
 801061e:	1c50      	adds	r0, r2, #1
 8010620:	d1c9      	bne.n	80105b6 <__sflush_r+0x32>
 8010622:	682b      	ldr	r3, [r5, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d0c6      	beq.n	80105b6 <__sflush_r+0x32>
 8010628:	2b1d      	cmp	r3, #29
 801062a:	d001      	beq.n	8010630 <__sflush_r+0xac>
 801062c:	2b16      	cmp	r3, #22
 801062e:	d11e      	bne.n	801066e <__sflush_r+0xea>
 8010630:	602f      	str	r7, [r5, #0]
 8010632:	2000      	movs	r0, #0
 8010634:	e022      	b.n	801067c <__sflush_r+0xf8>
 8010636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801063a:	b21b      	sxth	r3, r3
 801063c:	e01b      	b.n	8010676 <__sflush_r+0xf2>
 801063e:	690f      	ldr	r7, [r1, #16]
 8010640:	2f00      	cmp	r7, #0
 8010642:	d0f6      	beq.n	8010632 <__sflush_r+0xae>
 8010644:	0793      	lsls	r3, r2, #30
 8010646:	680e      	ldr	r6, [r1, #0]
 8010648:	bf08      	it	eq
 801064a:	694b      	ldreq	r3, [r1, #20]
 801064c:	600f      	str	r7, [r1, #0]
 801064e:	bf18      	it	ne
 8010650:	2300      	movne	r3, #0
 8010652:	eba6 0807 	sub.w	r8, r6, r7
 8010656:	608b      	str	r3, [r1, #8]
 8010658:	f1b8 0f00 	cmp.w	r8, #0
 801065c:	dde9      	ble.n	8010632 <__sflush_r+0xae>
 801065e:	6a21      	ldr	r1, [r4, #32]
 8010660:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010662:	4643      	mov	r3, r8
 8010664:	463a      	mov	r2, r7
 8010666:	4628      	mov	r0, r5
 8010668:	47b0      	blx	r6
 801066a:	2800      	cmp	r0, #0
 801066c:	dc08      	bgt.n	8010680 <__sflush_r+0xfc>
 801066e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010676:	81a3      	strh	r3, [r4, #12]
 8010678:	f04f 30ff 	mov.w	r0, #4294967295
 801067c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010680:	4407      	add	r7, r0
 8010682:	eba8 0800 	sub.w	r8, r8, r0
 8010686:	e7e7      	b.n	8010658 <__sflush_r+0xd4>
 8010688:	20400001 	.word	0x20400001

0801068c <_fflush_r>:
 801068c:	b538      	push	{r3, r4, r5, lr}
 801068e:	690b      	ldr	r3, [r1, #16]
 8010690:	4605      	mov	r5, r0
 8010692:	460c      	mov	r4, r1
 8010694:	b913      	cbnz	r3, 801069c <_fflush_r+0x10>
 8010696:	2500      	movs	r5, #0
 8010698:	4628      	mov	r0, r5
 801069a:	bd38      	pop	{r3, r4, r5, pc}
 801069c:	b118      	cbz	r0, 80106a6 <_fflush_r+0x1a>
 801069e:	6a03      	ldr	r3, [r0, #32]
 80106a0:	b90b      	cbnz	r3, 80106a6 <_fflush_r+0x1a>
 80106a2:	f000 f8bb 	bl	801081c <__sinit>
 80106a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d0f3      	beq.n	8010696 <_fflush_r+0xa>
 80106ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80106b0:	07d0      	lsls	r0, r2, #31
 80106b2:	d404      	bmi.n	80106be <_fflush_r+0x32>
 80106b4:	0599      	lsls	r1, r3, #22
 80106b6:	d402      	bmi.n	80106be <_fflush_r+0x32>
 80106b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106ba:	f000 fa22 	bl	8010b02 <__retarget_lock_acquire_recursive>
 80106be:	4628      	mov	r0, r5
 80106c0:	4621      	mov	r1, r4
 80106c2:	f7ff ff5f 	bl	8010584 <__sflush_r>
 80106c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106c8:	07da      	lsls	r2, r3, #31
 80106ca:	4605      	mov	r5, r0
 80106cc:	d4e4      	bmi.n	8010698 <_fflush_r+0xc>
 80106ce:	89a3      	ldrh	r3, [r4, #12]
 80106d0:	059b      	lsls	r3, r3, #22
 80106d2:	d4e1      	bmi.n	8010698 <_fflush_r+0xc>
 80106d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106d6:	f000 fa15 	bl	8010b04 <__retarget_lock_release_recursive>
 80106da:	e7dd      	b.n	8010698 <_fflush_r+0xc>

080106dc <fflush>:
 80106dc:	4601      	mov	r1, r0
 80106de:	b920      	cbnz	r0, 80106ea <fflush+0xe>
 80106e0:	4a04      	ldr	r2, [pc, #16]	@ (80106f4 <fflush+0x18>)
 80106e2:	4905      	ldr	r1, [pc, #20]	@ (80106f8 <fflush+0x1c>)
 80106e4:	4805      	ldr	r0, [pc, #20]	@ (80106fc <fflush+0x20>)
 80106e6:	f000 b8b1 	b.w	801084c <_fwalk_sglue>
 80106ea:	4b05      	ldr	r3, [pc, #20]	@ (8010700 <fflush+0x24>)
 80106ec:	6818      	ldr	r0, [r3, #0]
 80106ee:	f7ff bfcd 	b.w	801068c <_fflush_r>
 80106f2:	bf00      	nop
 80106f4:	20000014 	.word	0x20000014
 80106f8:	0801068d 	.word	0x0801068d
 80106fc:	20000190 	.word	0x20000190
 8010700:	2000018c 	.word	0x2000018c

08010704 <std>:
 8010704:	2300      	movs	r3, #0
 8010706:	b510      	push	{r4, lr}
 8010708:	4604      	mov	r4, r0
 801070a:	e9c0 3300 	strd	r3, r3, [r0]
 801070e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010712:	6083      	str	r3, [r0, #8]
 8010714:	8181      	strh	r1, [r0, #12]
 8010716:	6643      	str	r3, [r0, #100]	@ 0x64
 8010718:	81c2      	strh	r2, [r0, #14]
 801071a:	6183      	str	r3, [r0, #24]
 801071c:	4619      	mov	r1, r3
 801071e:	2208      	movs	r2, #8
 8010720:	305c      	adds	r0, #92	@ 0x5c
 8010722:	f000 f94c 	bl	80109be <memset>
 8010726:	4b0d      	ldr	r3, [pc, #52]	@ (801075c <std+0x58>)
 8010728:	6263      	str	r3, [r4, #36]	@ 0x24
 801072a:	4b0d      	ldr	r3, [pc, #52]	@ (8010760 <std+0x5c>)
 801072c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801072e:	4b0d      	ldr	r3, [pc, #52]	@ (8010764 <std+0x60>)
 8010730:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010732:	4b0d      	ldr	r3, [pc, #52]	@ (8010768 <std+0x64>)
 8010734:	6323      	str	r3, [r4, #48]	@ 0x30
 8010736:	4b0d      	ldr	r3, [pc, #52]	@ (801076c <std+0x68>)
 8010738:	6224      	str	r4, [r4, #32]
 801073a:	429c      	cmp	r4, r3
 801073c:	d006      	beq.n	801074c <std+0x48>
 801073e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010742:	4294      	cmp	r4, r2
 8010744:	d002      	beq.n	801074c <std+0x48>
 8010746:	33d0      	adds	r3, #208	@ 0xd0
 8010748:	429c      	cmp	r4, r3
 801074a:	d105      	bne.n	8010758 <std+0x54>
 801074c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010754:	f000 b9d4 	b.w	8010b00 <__retarget_lock_init_recursive>
 8010758:	bd10      	pop	{r4, pc}
 801075a:	bf00      	nop
 801075c:	08010939 	.word	0x08010939
 8010760:	0801095b 	.word	0x0801095b
 8010764:	08010993 	.word	0x08010993
 8010768:	080109b7 	.word	0x080109b7
 801076c:	2000660c 	.word	0x2000660c

08010770 <stdio_exit_handler>:
 8010770:	4a02      	ldr	r2, [pc, #8]	@ (801077c <stdio_exit_handler+0xc>)
 8010772:	4903      	ldr	r1, [pc, #12]	@ (8010780 <stdio_exit_handler+0x10>)
 8010774:	4803      	ldr	r0, [pc, #12]	@ (8010784 <stdio_exit_handler+0x14>)
 8010776:	f000 b869 	b.w	801084c <_fwalk_sglue>
 801077a:	bf00      	nop
 801077c:	20000014 	.word	0x20000014
 8010780:	0801068d 	.word	0x0801068d
 8010784:	20000190 	.word	0x20000190

08010788 <cleanup_stdio>:
 8010788:	6841      	ldr	r1, [r0, #4]
 801078a:	4b0c      	ldr	r3, [pc, #48]	@ (80107bc <cleanup_stdio+0x34>)
 801078c:	4299      	cmp	r1, r3
 801078e:	b510      	push	{r4, lr}
 8010790:	4604      	mov	r4, r0
 8010792:	d001      	beq.n	8010798 <cleanup_stdio+0x10>
 8010794:	f7ff ff7a 	bl	801068c <_fflush_r>
 8010798:	68a1      	ldr	r1, [r4, #8]
 801079a:	4b09      	ldr	r3, [pc, #36]	@ (80107c0 <cleanup_stdio+0x38>)
 801079c:	4299      	cmp	r1, r3
 801079e:	d002      	beq.n	80107a6 <cleanup_stdio+0x1e>
 80107a0:	4620      	mov	r0, r4
 80107a2:	f7ff ff73 	bl	801068c <_fflush_r>
 80107a6:	68e1      	ldr	r1, [r4, #12]
 80107a8:	4b06      	ldr	r3, [pc, #24]	@ (80107c4 <cleanup_stdio+0x3c>)
 80107aa:	4299      	cmp	r1, r3
 80107ac:	d004      	beq.n	80107b8 <cleanup_stdio+0x30>
 80107ae:	4620      	mov	r0, r4
 80107b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107b4:	f7ff bf6a 	b.w	801068c <_fflush_r>
 80107b8:	bd10      	pop	{r4, pc}
 80107ba:	bf00      	nop
 80107bc:	2000660c 	.word	0x2000660c
 80107c0:	20006674 	.word	0x20006674
 80107c4:	200066dc 	.word	0x200066dc

080107c8 <global_stdio_init.part.0>:
 80107c8:	b510      	push	{r4, lr}
 80107ca:	4b0b      	ldr	r3, [pc, #44]	@ (80107f8 <global_stdio_init.part.0+0x30>)
 80107cc:	4c0b      	ldr	r4, [pc, #44]	@ (80107fc <global_stdio_init.part.0+0x34>)
 80107ce:	4a0c      	ldr	r2, [pc, #48]	@ (8010800 <global_stdio_init.part.0+0x38>)
 80107d0:	601a      	str	r2, [r3, #0]
 80107d2:	4620      	mov	r0, r4
 80107d4:	2200      	movs	r2, #0
 80107d6:	2104      	movs	r1, #4
 80107d8:	f7ff ff94 	bl	8010704 <std>
 80107dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80107e0:	2201      	movs	r2, #1
 80107e2:	2109      	movs	r1, #9
 80107e4:	f7ff ff8e 	bl	8010704 <std>
 80107e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80107ec:	2202      	movs	r2, #2
 80107ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107f2:	2112      	movs	r1, #18
 80107f4:	f7ff bf86 	b.w	8010704 <std>
 80107f8:	20006744 	.word	0x20006744
 80107fc:	2000660c 	.word	0x2000660c
 8010800:	08010771 	.word	0x08010771

08010804 <__sfp_lock_acquire>:
 8010804:	4801      	ldr	r0, [pc, #4]	@ (801080c <__sfp_lock_acquire+0x8>)
 8010806:	f000 b97c 	b.w	8010b02 <__retarget_lock_acquire_recursive>
 801080a:	bf00      	nop
 801080c:	2000674d 	.word	0x2000674d

08010810 <__sfp_lock_release>:
 8010810:	4801      	ldr	r0, [pc, #4]	@ (8010818 <__sfp_lock_release+0x8>)
 8010812:	f000 b977 	b.w	8010b04 <__retarget_lock_release_recursive>
 8010816:	bf00      	nop
 8010818:	2000674d 	.word	0x2000674d

0801081c <__sinit>:
 801081c:	b510      	push	{r4, lr}
 801081e:	4604      	mov	r4, r0
 8010820:	f7ff fff0 	bl	8010804 <__sfp_lock_acquire>
 8010824:	6a23      	ldr	r3, [r4, #32]
 8010826:	b11b      	cbz	r3, 8010830 <__sinit+0x14>
 8010828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801082c:	f7ff bff0 	b.w	8010810 <__sfp_lock_release>
 8010830:	4b04      	ldr	r3, [pc, #16]	@ (8010844 <__sinit+0x28>)
 8010832:	6223      	str	r3, [r4, #32]
 8010834:	4b04      	ldr	r3, [pc, #16]	@ (8010848 <__sinit+0x2c>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d1f5      	bne.n	8010828 <__sinit+0xc>
 801083c:	f7ff ffc4 	bl	80107c8 <global_stdio_init.part.0>
 8010840:	e7f2      	b.n	8010828 <__sinit+0xc>
 8010842:	bf00      	nop
 8010844:	08010789 	.word	0x08010789
 8010848:	20006744 	.word	0x20006744

0801084c <_fwalk_sglue>:
 801084c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010850:	4607      	mov	r7, r0
 8010852:	4688      	mov	r8, r1
 8010854:	4614      	mov	r4, r2
 8010856:	2600      	movs	r6, #0
 8010858:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801085c:	f1b9 0901 	subs.w	r9, r9, #1
 8010860:	d505      	bpl.n	801086e <_fwalk_sglue+0x22>
 8010862:	6824      	ldr	r4, [r4, #0]
 8010864:	2c00      	cmp	r4, #0
 8010866:	d1f7      	bne.n	8010858 <_fwalk_sglue+0xc>
 8010868:	4630      	mov	r0, r6
 801086a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801086e:	89ab      	ldrh	r3, [r5, #12]
 8010870:	2b01      	cmp	r3, #1
 8010872:	d907      	bls.n	8010884 <_fwalk_sglue+0x38>
 8010874:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010878:	3301      	adds	r3, #1
 801087a:	d003      	beq.n	8010884 <_fwalk_sglue+0x38>
 801087c:	4629      	mov	r1, r5
 801087e:	4638      	mov	r0, r7
 8010880:	47c0      	blx	r8
 8010882:	4306      	orrs	r6, r0
 8010884:	3568      	adds	r5, #104	@ 0x68
 8010886:	e7e9      	b.n	801085c <_fwalk_sglue+0x10>

08010888 <sniprintf>:
 8010888:	b40c      	push	{r2, r3}
 801088a:	b530      	push	{r4, r5, lr}
 801088c:	4b18      	ldr	r3, [pc, #96]	@ (80108f0 <sniprintf+0x68>)
 801088e:	1e0c      	subs	r4, r1, #0
 8010890:	681d      	ldr	r5, [r3, #0]
 8010892:	b09d      	sub	sp, #116	@ 0x74
 8010894:	da08      	bge.n	80108a8 <sniprintf+0x20>
 8010896:	238b      	movs	r3, #139	@ 0x8b
 8010898:	602b      	str	r3, [r5, #0]
 801089a:	f04f 30ff 	mov.w	r0, #4294967295
 801089e:	b01d      	add	sp, #116	@ 0x74
 80108a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80108a4:	b002      	add	sp, #8
 80108a6:	4770      	bx	lr
 80108a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80108ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80108b0:	f04f 0300 	mov.w	r3, #0
 80108b4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80108b6:	bf14      	ite	ne
 80108b8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80108bc:	4623      	moveq	r3, r4
 80108be:	9304      	str	r3, [sp, #16]
 80108c0:	9307      	str	r3, [sp, #28]
 80108c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80108c6:	9002      	str	r0, [sp, #8]
 80108c8:	9006      	str	r0, [sp, #24]
 80108ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80108ce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80108d0:	ab21      	add	r3, sp, #132	@ 0x84
 80108d2:	a902      	add	r1, sp, #8
 80108d4:	4628      	mov	r0, r5
 80108d6:	9301      	str	r3, [sp, #4]
 80108d8:	f002 f8ec 	bl	8012ab4 <_svfiprintf_r>
 80108dc:	1c43      	adds	r3, r0, #1
 80108de:	bfbc      	itt	lt
 80108e0:	238b      	movlt	r3, #139	@ 0x8b
 80108e2:	602b      	strlt	r3, [r5, #0]
 80108e4:	2c00      	cmp	r4, #0
 80108e6:	d0da      	beq.n	801089e <sniprintf+0x16>
 80108e8:	9b02      	ldr	r3, [sp, #8]
 80108ea:	2200      	movs	r2, #0
 80108ec:	701a      	strb	r2, [r3, #0]
 80108ee:	e7d6      	b.n	801089e <sniprintf+0x16>
 80108f0:	2000018c 	.word	0x2000018c

080108f4 <siprintf>:
 80108f4:	b40e      	push	{r1, r2, r3}
 80108f6:	b510      	push	{r4, lr}
 80108f8:	b09d      	sub	sp, #116	@ 0x74
 80108fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80108fc:	9002      	str	r0, [sp, #8]
 80108fe:	9006      	str	r0, [sp, #24]
 8010900:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010904:	480a      	ldr	r0, [pc, #40]	@ (8010930 <siprintf+0x3c>)
 8010906:	9107      	str	r1, [sp, #28]
 8010908:	9104      	str	r1, [sp, #16]
 801090a:	490a      	ldr	r1, [pc, #40]	@ (8010934 <siprintf+0x40>)
 801090c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010910:	9105      	str	r1, [sp, #20]
 8010912:	2400      	movs	r4, #0
 8010914:	a902      	add	r1, sp, #8
 8010916:	6800      	ldr	r0, [r0, #0]
 8010918:	9301      	str	r3, [sp, #4]
 801091a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801091c:	f002 f8ca 	bl	8012ab4 <_svfiprintf_r>
 8010920:	9b02      	ldr	r3, [sp, #8]
 8010922:	701c      	strb	r4, [r3, #0]
 8010924:	b01d      	add	sp, #116	@ 0x74
 8010926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801092a:	b003      	add	sp, #12
 801092c:	4770      	bx	lr
 801092e:	bf00      	nop
 8010930:	2000018c 	.word	0x2000018c
 8010934:	ffff0208 	.word	0xffff0208

08010938 <__sread>:
 8010938:	b510      	push	{r4, lr}
 801093a:	460c      	mov	r4, r1
 801093c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010940:	f000 f890 	bl	8010a64 <_read_r>
 8010944:	2800      	cmp	r0, #0
 8010946:	bfab      	itete	ge
 8010948:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801094a:	89a3      	ldrhlt	r3, [r4, #12]
 801094c:	181b      	addge	r3, r3, r0
 801094e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010952:	bfac      	ite	ge
 8010954:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010956:	81a3      	strhlt	r3, [r4, #12]
 8010958:	bd10      	pop	{r4, pc}

0801095a <__swrite>:
 801095a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801095e:	461f      	mov	r7, r3
 8010960:	898b      	ldrh	r3, [r1, #12]
 8010962:	05db      	lsls	r3, r3, #23
 8010964:	4605      	mov	r5, r0
 8010966:	460c      	mov	r4, r1
 8010968:	4616      	mov	r6, r2
 801096a:	d505      	bpl.n	8010978 <__swrite+0x1e>
 801096c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010970:	2302      	movs	r3, #2
 8010972:	2200      	movs	r2, #0
 8010974:	f000 f864 	bl	8010a40 <_lseek_r>
 8010978:	89a3      	ldrh	r3, [r4, #12]
 801097a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801097e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010982:	81a3      	strh	r3, [r4, #12]
 8010984:	4632      	mov	r2, r6
 8010986:	463b      	mov	r3, r7
 8010988:	4628      	mov	r0, r5
 801098a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801098e:	f000 b87b 	b.w	8010a88 <_write_r>

08010992 <__sseek>:
 8010992:	b510      	push	{r4, lr}
 8010994:	460c      	mov	r4, r1
 8010996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801099a:	f000 f851 	bl	8010a40 <_lseek_r>
 801099e:	1c43      	adds	r3, r0, #1
 80109a0:	89a3      	ldrh	r3, [r4, #12]
 80109a2:	bf15      	itete	ne
 80109a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80109a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80109aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80109ae:	81a3      	strheq	r3, [r4, #12]
 80109b0:	bf18      	it	ne
 80109b2:	81a3      	strhne	r3, [r4, #12]
 80109b4:	bd10      	pop	{r4, pc}

080109b6 <__sclose>:
 80109b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109ba:	f000 b831 	b.w	8010a20 <_close_r>

080109be <memset>:
 80109be:	4402      	add	r2, r0
 80109c0:	4603      	mov	r3, r0
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d100      	bne.n	80109c8 <memset+0xa>
 80109c6:	4770      	bx	lr
 80109c8:	f803 1b01 	strb.w	r1, [r3], #1
 80109cc:	e7f9      	b.n	80109c2 <memset+0x4>

080109ce <strncmp>:
 80109ce:	b510      	push	{r4, lr}
 80109d0:	b16a      	cbz	r2, 80109ee <strncmp+0x20>
 80109d2:	3901      	subs	r1, #1
 80109d4:	1884      	adds	r4, r0, r2
 80109d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80109de:	429a      	cmp	r2, r3
 80109e0:	d103      	bne.n	80109ea <strncmp+0x1c>
 80109e2:	42a0      	cmp	r0, r4
 80109e4:	d001      	beq.n	80109ea <strncmp+0x1c>
 80109e6:	2a00      	cmp	r2, #0
 80109e8:	d1f5      	bne.n	80109d6 <strncmp+0x8>
 80109ea:	1ad0      	subs	r0, r2, r3
 80109ec:	bd10      	pop	{r4, pc}
 80109ee:	4610      	mov	r0, r2
 80109f0:	e7fc      	b.n	80109ec <strncmp+0x1e>

080109f2 <strncpy>:
 80109f2:	b510      	push	{r4, lr}
 80109f4:	3901      	subs	r1, #1
 80109f6:	4603      	mov	r3, r0
 80109f8:	b132      	cbz	r2, 8010a08 <strncpy+0x16>
 80109fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80109fe:	f803 4b01 	strb.w	r4, [r3], #1
 8010a02:	3a01      	subs	r2, #1
 8010a04:	2c00      	cmp	r4, #0
 8010a06:	d1f7      	bne.n	80109f8 <strncpy+0x6>
 8010a08:	441a      	add	r2, r3
 8010a0a:	2100      	movs	r1, #0
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d100      	bne.n	8010a12 <strncpy+0x20>
 8010a10:	bd10      	pop	{r4, pc}
 8010a12:	f803 1b01 	strb.w	r1, [r3], #1
 8010a16:	e7f9      	b.n	8010a0c <strncpy+0x1a>

08010a18 <_localeconv_r>:
 8010a18:	4800      	ldr	r0, [pc, #0]	@ (8010a1c <_localeconv_r+0x4>)
 8010a1a:	4770      	bx	lr
 8010a1c:	20000110 	.word	0x20000110

08010a20 <_close_r>:
 8010a20:	b538      	push	{r3, r4, r5, lr}
 8010a22:	4d06      	ldr	r5, [pc, #24]	@ (8010a3c <_close_r+0x1c>)
 8010a24:	2300      	movs	r3, #0
 8010a26:	4604      	mov	r4, r0
 8010a28:	4608      	mov	r0, r1
 8010a2a:	602b      	str	r3, [r5, #0]
 8010a2c:	f7f0 fff0 	bl	8001a10 <_close>
 8010a30:	1c43      	adds	r3, r0, #1
 8010a32:	d102      	bne.n	8010a3a <_close_r+0x1a>
 8010a34:	682b      	ldr	r3, [r5, #0]
 8010a36:	b103      	cbz	r3, 8010a3a <_close_r+0x1a>
 8010a38:	6023      	str	r3, [r4, #0]
 8010a3a:	bd38      	pop	{r3, r4, r5, pc}
 8010a3c:	20006748 	.word	0x20006748

08010a40 <_lseek_r>:
 8010a40:	b538      	push	{r3, r4, r5, lr}
 8010a42:	4d07      	ldr	r5, [pc, #28]	@ (8010a60 <_lseek_r+0x20>)
 8010a44:	4604      	mov	r4, r0
 8010a46:	4608      	mov	r0, r1
 8010a48:	4611      	mov	r1, r2
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	602a      	str	r2, [r5, #0]
 8010a4e:	461a      	mov	r2, r3
 8010a50:	f7f1 f805 	bl	8001a5e <_lseek>
 8010a54:	1c43      	adds	r3, r0, #1
 8010a56:	d102      	bne.n	8010a5e <_lseek_r+0x1e>
 8010a58:	682b      	ldr	r3, [r5, #0]
 8010a5a:	b103      	cbz	r3, 8010a5e <_lseek_r+0x1e>
 8010a5c:	6023      	str	r3, [r4, #0]
 8010a5e:	bd38      	pop	{r3, r4, r5, pc}
 8010a60:	20006748 	.word	0x20006748

08010a64 <_read_r>:
 8010a64:	b538      	push	{r3, r4, r5, lr}
 8010a66:	4d07      	ldr	r5, [pc, #28]	@ (8010a84 <_read_r+0x20>)
 8010a68:	4604      	mov	r4, r0
 8010a6a:	4608      	mov	r0, r1
 8010a6c:	4611      	mov	r1, r2
 8010a6e:	2200      	movs	r2, #0
 8010a70:	602a      	str	r2, [r5, #0]
 8010a72:	461a      	mov	r2, r3
 8010a74:	f7f0 ff93 	bl	800199e <_read>
 8010a78:	1c43      	adds	r3, r0, #1
 8010a7a:	d102      	bne.n	8010a82 <_read_r+0x1e>
 8010a7c:	682b      	ldr	r3, [r5, #0]
 8010a7e:	b103      	cbz	r3, 8010a82 <_read_r+0x1e>
 8010a80:	6023      	str	r3, [r4, #0]
 8010a82:	bd38      	pop	{r3, r4, r5, pc}
 8010a84:	20006748 	.word	0x20006748

08010a88 <_write_r>:
 8010a88:	b538      	push	{r3, r4, r5, lr}
 8010a8a:	4d07      	ldr	r5, [pc, #28]	@ (8010aa8 <_write_r+0x20>)
 8010a8c:	4604      	mov	r4, r0
 8010a8e:	4608      	mov	r0, r1
 8010a90:	4611      	mov	r1, r2
 8010a92:	2200      	movs	r2, #0
 8010a94:	602a      	str	r2, [r5, #0]
 8010a96:	461a      	mov	r2, r3
 8010a98:	f7f0 ff9e 	bl	80019d8 <_write>
 8010a9c:	1c43      	adds	r3, r0, #1
 8010a9e:	d102      	bne.n	8010aa6 <_write_r+0x1e>
 8010aa0:	682b      	ldr	r3, [r5, #0]
 8010aa2:	b103      	cbz	r3, 8010aa6 <_write_r+0x1e>
 8010aa4:	6023      	str	r3, [r4, #0]
 8010aa6:	bd38      	pop	{r3, r4, r5, pc}
 8010aa8:	20006748 	.word	0x20006748

08010aac <__errno>:
 8010aac:	4b01      	ldr	r3, [pc, #4]	@ (8010ab4 <__errno+0x8>)
 8010aae:	6818      	ldr	r0, [r3, #0]
 8010ab0:	4770      	bx	lr
 8010ab2:	bf00      	nop
 8010ab4:	2000018c 	.word	0x2000018c

08010ab8 <__libc_init_array>:
 8010ab8:	b570      	push	{r4, r5, r6, lr}
 8010aba:	4d0d      	ldr	r5, [pc, #52]	@ (8010af0 <__libc_init_array+0x38>)
 8010abc:	4c0d      	ldr	r4, [pc, #52]	@ (8010af4 <__libc_init_array+0x3c>)
 8010abe:	1b64      	subs	r4, r4, r5
 8010ac0:	10a4      	asrs	r4, r4, #2
 8010ac2:	2600      	movs	r6, #0
 8010ac4:	42a6      	cmp	r6, r4
 8010ac6:	d109      	bne.n	8010adc <__libc_init_array+0x24>
 8010ac8:	4d0b      	ldr	r5, [pc, #44]	@ (8010af8 <__libc_init_array+0x40>)
 8010aca:	4c0c      	ldr	r4, [pc, #48]	@ (8010afc <__libc_init_array+0x44>)
 8010acc:	f002 fd6c 	bl	80135a8 <_init>
 8010ad0:	1b64      	subs	r4, r4, r5
 8010ad2:	10a4      	asrs	r4, r4, #2
 8010ad4:	2600      	movs	r6, #0
 8010ad6:	42a6      	cmp	r6, r4
 8010ad8:	d105      	bne.n	8010ae6 <__libc_init_array+0x2e>
 8010ada:	bd70      	pop	{r4, r5, r6, pc}
 8010adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ae0:	4798      	blx	r3
 8010ae2:	3601      	adds	r6, #1
 8010ae4:	e7ee      	b.n	8010ac4 <__libc_init_array+0xc>
 8010ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010aea:	4798      	blx	r3
 8010aec:	3601      	adds	r6, #1
 8010aee:	e7f2      	b.n	8010ad6 <__libc_init_array+0x1e>
 8010af0:	080159f8 	.word	0x080159f8
 8010af4:	080159f8 	.word	0x080159f8
 8010af8:	080159f8 	.word	0x080159f8
 8010afc:	080159fc 	.word	0x080159fc

08010b00 <__retarget_lock_init_recursive>:
 8010b00:	4770      	bx	lr

08010b02 <__retarget_lock_acquire_recursive>:
 8010b02:	4770      	bx	lr

08010b04 <__retarget_lock_release_recursive>:
 8010b04:	4770      	bx	lr

08010b06 <memcpy>:
 8010b06:	440a      	add	r2, r1
 8010b08:	4291      	cmp	r1, r2
 8010b0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b0e:	d100      	bne.n	8010b12 <memcpy+0xc>
 8010b10:	4770      	bx	lr
 8010b12:	b510      	push	{r4, lr}
 8010b14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b1c:	4291      	cmp	r1, r2
 8010b1e:	d1f9      	bne.n	8010b14 <memcpy+0xe>
 8010b20:	bd10      	pop	{r4, pc}
 8010b22:	0000      	movs	r0, r0
 8010b24:	0000      	movs	r0, r0
	...

08010b28 <nan>:
 8010b28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010b30 <nan+0x8>
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop
 8010b30:	00000000 	.word	0x00000000
 8010b34:	7ff80000 	.word	0x7ff80000

08010b38 <nanf>:
 8010b38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010b40 <nanf+0x8>
 8010b3c:	4770      	bx	lr
 8010b3e:	bf00      	nop
 8010b40:	7fc00000 	.word	0x7fc00000

08010b44 <quorem>:
 8010b44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b48:	6903      	ldr	r3, [r0, #16]
 8010b4a:	690c      	ldr	r4, [r1, #16]
 8010b4c:	42a3      	cmp	r3, r4
 8010b4e:	4607      	mov	r7, r0
 8010b50:	db7e      	blt.n	8010c50 <quorem+0x10c>
 8010b52:	3c01      	subs	r4, #1
 8010b54:	f101 0814 	add.w	r8, r1, #20
 8010b58:	00a3      	lsls	r3, r4, #2
 8010b5a:	f100 0514 	add.w	r5, r0, #20
 8010b5e:	9300      	str	r3, [sp, #0]
 8010b60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b64:	9301      	str	r3, [sp, #4]
 8010b66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010b6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b6e:	3301      	adds	r3, #1
 8010b70:	429a      	cmp	r2, r3
 8010b72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010b76:	fbb2 f6f3 	udiv	r6, r2, r3
 8010b7a:	d32e      	bcc.n	8010bda <quorem+0x96>
 8010b7c:	f04f 0a00 	mov.w	sl, #0
 8010b80:	46c4      	mov	ip, r8
 8010b82:	46ae      	mov	lr, r5
 8010b84:	46d3      	mov	fp, sl
 8010b86:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010b8a:	b298      	uxth	r0, r3
 8010b8c:	fb06 a000 	mla	r0, r6, r0, sl
 8010b90:	0c02      	lsrs	r2, r0, #16
 8010b92:	0c1b      	lsrs	r3, r3, #16
 8010b94:	fb06 2303 	mla	r3, r6, r3, r2
 8010b98:	f8de 2000 	ldr.w	r2, [lr]
 8010b9c:	b280      	uxth	r0, r0
 8010b9e:	b292      	uxth	r2, r2
 8010ba0:	1a12      	subs	r2, r2, r0
 8010ba2:	445a      	add	r2, fp
 8010ba4:	f8de 0000 	ldr.w	r0, [lr]
 8010ba8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010bb2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010bb6:	b292      	uxth	r2, r2
 8010bb8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010bbc:	45e1      	cmp	r9, ip
 8010bbe:	f84e 2b04 	str.w	r2, [lr], #4
 8010bc2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010bc6:	d2de      	bcs.n	8010b86 <quorem+0x42>
 8010bc8:	9b00      	ldr	r3, [sp, #0]
 8010bca:	58eb      	ldr	r3, [r5, r3]
 8010bcc:	b92b      	cbnz	r3, 8010bda <quorem+0x96>
 8010bce:	9b01      	ldr	r3, [sp, #4]
 8010bd0:	3b04      	subs	r3, #4
 8010bd2:	429d      	cmp	r5, r3
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	d32f      	bcc.n	8010c38 <quorem+0xf4>
 8010bd8:	613c      	str	r4, [r7, #16]
 8010bda:	4638      	mov	r0, r7
 8010bdc:	f001 fd14 	bl	8012608 <__mcmp>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	db25      	blt.n	8010c30 <quorem+0xec>
 8010be4:	4629      	mov	r1, r5
 8010be6:	2000      	movs	r0, #0
 8010be8:	f858 2b04 	ldr.w	r2, [r8], #4
 8010bec:	f8d1 c000 	ldr.w	ip, [r1]
 8010bf0:	fa1f fe82 	uxth.w	lr, r2
 8010bf4:	fa1f f38c 	uxth.w	r3, ip
 8010bf8:	eba3 030e 	sub.w	r3, r3, lr
 8010bfc:	4403      	add	r3, r0
 8010bfe:	0c12      	lsrs	r2, r2, #16
 8010c00:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010c04:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c0e:	45c1      	cmp	r9, r8
 8010c10:	f841 3b04 	str.w	r3, [r1], #4
 8010c14:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010c18:	d2e6      	bcs.n	8010be8 <quorem+0xa4>
 8010c1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c22:	b922      	cbnz	r2, 8010c2e <quorem+0xea>
 8010c24:	3b04      	subs	r3, #4
 8010c26:	429d      	cmp	r5, r3
 8010c28:	461a      	mov	r2, r3
 8010c2a:	d30b      	bcc.n	8010c44 <quorem+0x100>
 8010c2c:	613c      	str	r4, [r7, #16]
 8010c2e:	3601      	adds	r6, #1
 8010c30:	4630      	mov	r0, r6
 8010c32:	b003      	add	sp, #12
 8010c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c38:	6812      	ldr	r2, [r2, #0]
 8010c3a:	3b04      	subs	r3, #4
 8010c3c:	2a00      	cmp	r2, #0
 8010c3e:	d1cb      	bne.n	8010bd8 <quorem+0x94>
 8010c40:	3c01      	subs	r4, #1
 8010c42:	e7c6      	b.n	8010bd2 <quorem+0x8e>
 8010c44:	6812      	ldr	r2, [r2, #0]
 8010c46:	3b04      	subs	r3, #4
 8010c48:	2a00      	cmp	r2, #0
 8010c4a:	d1ef      	bne.n	8010c2c <quorem+0xe8>
 8010c4c:	3c01      	subs	r4, #1
 8010c4e:	e7ea      	b.n	8010c26 <quorem+0xe2>
 8010c50:	2000      	movs	r0, #0
 8010c52:	e7ee      	b.n	8010c32 <quorem+0xee>
 8010c54:	0000      	movs	r0, r0
	...

08010c58 <_dtoa_r>:
 8010c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c5c:	69c7      	ldr	r7, [r0, #28]
 8010c5e:	b097      	sub	sp, #92	@ 0x5c
 8010c60:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010c64:	ec55 4b10 	vmov	r4, r5, d0
 8010c68:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010c6a:	9107      	str	r1, [sp, #28]
 8010c6c:	4681      	mov	r9, r0
 8010c6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010c70:	9311      	str	r3, [sp, #68]	@ 0x44
 8010c72:	b97f      	cbnz	r7, 8010c94 <_dtoa_r+0x3c>
 8010c74:	2010      	movs	r0, #16
 8010c76:	f001 f943 	bl	8011f00 <malloc>
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010c80:	b920      	cbnz	r0, 8010c8c <_dtoa_r+0x34>
 8010c82:	4ba9      	ldr	r3, [pc, #676]	@ (8010f28 <_dtoa_r+0x2d0>)
 8010c84:	21ef      	movs	r1, #239	@ 0xef
 8010c86:	48a9      	ldr	r0, [pc, #676]	@ (8010f2c <_dtoa_r+0x2d4>)
 8010c88:	f002 f83a 	bl	8012d00 <__assert_func>
 8010c8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010c90:	6007      	str	r7, [r0, #0]
 8010c92:	60c7      	str	r7, [r0, #12]
 8010c94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010c98:	6819      	ldr	r1, [r3, #0]
 8010c9a:	b159      	cbz	r1, 8010cb4 <_dtoa_r+0x5c>
 8010c9c:	685a      	ldr	r2, [r3, #4]
 8010c9e:	604a      	str	r2, [r1, #4]
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	4093      	lsls	r3, r2
 8010ca4:	608b      	str	r3, [r1, #8]
 8010ca6:	4648      	mov	r0, r9
 8010ca8:	f001 fa32 	bl	8012110 <_Bfree>
 8010cac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	601a      	str	r2, [r3, #0]
 8010cb4:	1e2b      	subs	r3, r5, #0
 8010cb6:	bfb9      	ittee	lt
 8010cb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010cbc:	9305      	strlt	r3, [sp, #20]
 8010cbe:	2300      	movge	r3, #0
 8010cc0:	6033      	strge	r3, [r6, #0]
 8010cc2:	9f05      	ldr	r7, [sp, #20]
 8010cc4:	4b9a      	ldr	r3, [pc, #616]	@ (8010f30 <_dtoa_r+0x2d8>)
 8010cc6:	bfbc      	itt	lt
 8010cc8:	2201      	movlt	r2, #1
 8010cca:	6032      	strlt	r2, [r6, #0]
 8010ccc:	43bb      	bics	r3, r7
 8010cce:	d112      	bne.n	8010cf6 <_dtoa_r+0x9e>
 8010cd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010cd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010cd6:	6013      	str	r3, [r2, #0]
 8010cd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010cdc:	4323      	orrs	r3, r4
 8010cde:	f000 855a 	beq.w	8011796 <_dtoa_r+0xb3e>
 8010ce2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010ce4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010f44 <_dtoa_r+0x2ec>
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f000 855c 	beq.w	80117a6 <_dtoa_r+0xb4e>
 8010cee:	f10a 0303 	add.w	r3, sl, #3
 8010cf2:	f000 bd56 	b.w	80117a2 <_dtoa_r+0xb4a>
 8010cf6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	ec51 0b17 	vmov	r0, r1, d7
 8010d00:	2300      	movs	r3, #0
 8010d02:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010d06:	f7ef feef 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d0a:	4680      	mov	r8, r0
 8010d0c:	b158      	cbz	r0, 8010d26 <_dtoa_r+0xce>
 8010d0e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010d10:	2301      	movs	r3, #1
 8010d12:	6013      	str	r3, [r2, #0]
 8010d14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010d16:	b113      	cbz	r3, 8010d1e <_dtoa_r+0xc6>
 8010d18:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010d1a:	4b86      	ldr	r3, [pc, #536]	@ (8010f34 <_dtoa_r+0x2dc>)
 8010d1c:	6013      	str	r3, [r2, #0]
 8010d1e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010f48 <_dtoa_r+0x2f0>
 8010d22:	f000 bd40 	b.w	80117a6 <_dtoa_r+0xb4e>
 8010d26:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8010d2a:	aa14      	add	r2, sp, #80	@ 0x50
 8010d2c:	a915      	add	r1, sp, #84	@ 0x54
 8010d2e:	4648      	mov	r0, r9
 8010d30:	f001 fd8a 	bl	8012848 <__d2b>
 8010d34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010d38:	9002      	str	r0, [sp, #8]
 8010d3a:	2e00      	cmp	r6, #0
 8010d3c:	d078      	beq.n	8010e30 <_dtoa_r+0x1d8>
 8010d3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d40:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010d4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010d50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010d54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010d58:	4619      	mov	r1, r3
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	4b76      	ldr	r3, [pc, #472]	@ (8010f38 <_dtoa_r+0x2e0>)
 8010d5e:	f7ef faa3 	bl	80002a8 <__aeabi_dsub>
 8010d62:	a36b      	add	r3, pc, #428	@ (adr r3, 8010f10 <_dtoa_r+0x2b8>)
 8010d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d68:	f7ef fc56 	bl	8000618 <__aeabi_dmul>
 8010d6c:	a36a      	add	r3, pc, #424	@ (adr r3, 8010f18 <_dtoa_r+0x2c0>)
 8010d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d72:	f7ef fa9b 	bl	80002ac <__adddf3>
 8010d76:	4604      	mov	r4, r0
 8010d78:	4630      	mov	r0, r6
 8010d7a:	460d      	mov	r5, r1
 8010d7c:	f7ef fbe2 	bl	8000544 <__aeabi_i2d>
 8010d80:	a367      	add	r3, pc, #412	@ (adr r3, 8010f20 <_dtoa_r+0x2c8>)
 8010d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d86:	f7ef fc47 	bl	8000618 <__aeabi_dmul>
 8010d8a:	4602      	mov	r2, r0
 8010d8c:	460b      	mov	r3, r1
 8010d8e:	4620      	mov	r0, r4
 8010d90:	4629      	mov	r1, r5
 8010d92:	f7ef fa8b 	bl	80002ac <__adddf3>
 8010d96:	4604      	mov	r4, r0
 8010d98:	460d      	mov	r5, r1
 8010d9a:	f7ef feed 	bl	8000b78 <__aeabi_d2iz>
 8010d9e:	2200      	movs	r2, #0
 8010da0:	4607      	mov	r7, r0
 8010da2:	2300      	movs	r3, #0
 8010da4:	4620      	mov	r0, r4
 8010da6:	4629      	mov	r1, r5
 8010da8:	f7ef fea8 	bl	8000afc <__aeabi_dcmplt>
 8010dac:	b140      	cbz	r0, 8010dc0 <_dtoa_r+0x168>
 8010dae:	4638      	mov	r0, r7
 8010db0:	f7ef fbc8 	bl	8000544 <__aeabi_i2d>
 8010db4:	4622      	mov	r2, r4
 8010db6:	462b      	mov	r3, r5
 8010db8:	f7ef fe96 	bl	8000ae8 <__aeabi_dcmpeq>
 8010dbc:	b900      	cbnz	r0, 8010dc0 <_dtoa_r+0x168>
 8010dbe:	3f01      	subs	r7, #1
 8010dc0:	2f16      	cmp	r7, #22
 8010dc2:	d852      	bhi.n	8010e6a <_dtoa_r+0x212>
 8010dc4:	4b5d      	ldr	r3, [pc, #372]	@ (8010f3c <_dtoa_r+0x2e4>)
 8010dc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010dd2:	f7ef fe93 	bl	8000afc <__aeabi_dcmplt>
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	d049      	beq.n	8010e6e <_dtoa_r+0x216>
 8010dda:	3f01      	subs	r7, #1
 8010ddc:	2300      	movs	r3, #0
 8010dde:	9310      	str	r3, [sp, #64]	@ 0x40
 8010de0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010de2:	1b9b      	subs	r3, r3, r6
 8010de4:	1e5a      	subs	r2, r3, #1
 8010de6:	bf45      	ittet	mi
 8010de8:	f1c3 0301 	rsbmi	r3, r3, #1
 8010dec:	9300      	strmi	r3, [sp, #0]
 8010dee:	2300      	movpl	r3, #0
 8010df0:	2300      	movmi	r3, #0
 8010df2:	9206      	str	r2, [sp, #24]
 8010df4:	bf54      	ite	pl
 8010df6:	9300      	strpl	r3, [sp, #0]
 8010df8:	9306      	strmi	r3, [sp, #24]
 8010dfa:	2f00      	cmp	r7, #0
 8010dfc:	db39      	blt.n	8010e72 <_dtoa_r+0x21a>
 8010dfe:	9b06      	ldr	r3, [sp, #24]
 8010e00:	970d      	str	r7, [sp, #52]	@ 0x34
 8010e02:	443b      	add	r3, r7
 8010e04:	9306      	str	r3, [sp, #24]
 8010e06:	2300      	movs	r3, #0
 8010e08:	9308      	str	r3, [sp, #32]
 8010e0a:	9b07      	ldr	r3, [sp, #28]
 8010e0c:	2b09      	cmp	r3, #9
 8010e0e:	d863      	bhi.n	8010ed8 <_dtoa_r+0x280>
 8010e10:	2b05      	cmp	r3, #5
 8010e12:	bfc4      	itt	gt
 8010e14:	3b04      	subgt	r3, #4
 8010e16:	9307      	strgt	r3, [sp, #28]
 8010e18:	9b07      	ldr	r3, [sp, #28]
 8010e1a:	f1a3 0302 	sub.w	r3, r3, #2
 8010e1e:	bfcc      	ite	gt
 8010e20:	2400      	movgt	r4, #0
 8010e22:	2401      	movle	r4, #1
 8010e24:	2b03      	cmp	r3, #3
 8010e26:	d863      	bhi.n	8010ef0 <_dtoa_r+0x298>
 8010e28:	e8df f003 	tbb	[pc, r3]
 8010e2c:	2b375452 	.word	0x2b375452
 8010e30:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010e34:	441e      	add	r6, r3
 8010e36:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010e3a:	2b20      	cmp	r3, #32
 8010e3c:	bfc1      	itttt	gt
 8010e3e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010e42:	409f      	lslgt	r7, r3
 8010e44:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010e48:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010e4c:	bfd6      	itet	le
 8010e4e:	f1c3 0320 	rsble	r3, r3, #32
 8010e52:	ea47 0003 	orrgt.w	r0, r7, r3
 8010e56:	fa04 f003 	lslle.w	r0, r4, r3
 8010e5a:	f7ef fb63 	bl	8000524 <__aeabi_ui2d>
 8010e5e:	2201      	movs	r2, #1
 8010e60:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010e64:	3e01      	subs	r6, #1
 8010e66:	9212      	str	r2, [sp, #72]	@ 0x48
 8010e68:	e776      	b.n	8010d58 <_dtoa_r+0x100>
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	e7b7      	b.n	8010dde <_dtoa_r+0x186>
 8010e6e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010e70:	e7b6      	b.n	8010de0 <_dtoa_r+0x188>
 8010e72:	9b00      	ldr	r3, [sp, #0]
 8010e74:	1bdb      	subs	r3, r3, r7
 8010e76:	9300      	str	r3, [sp, #0]
 8010e78:	427b      	negs	r3, r7
 8010e7a:	9308      	str	r3, [sp, #32]
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010e80:	e7c3      	b.n	8010e0a <_dtoa_r+0x1b2>
 8010e82:	2301      	movs	r3, #1
 8010e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010e88:	eb07 0b03 	add.w	fp, r7, r3
 8010e8c:	f10b 0301 	add.w	r3, fp, #1
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	9303      	str	r3, [sp, #12]
 8010e94:	bfb8      	it	lt
 8010e96:	2301      	movlt	r3, #1
 8010e98:	e006      	b.n	8010ea8 <_dtoa_r+0x250>
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	dd28      	ble.n	8010ef6 <_dtoa_r+0x29e>
 8010ea4:	469b      	mov	fp, r3
 8010ea6:	9303      	str	r3, [sp, #12]
 8010ea8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8010eac:	2100      	movs	r1, #0
 8010eae:	2204      	movs	r2, #4
 8010eb0:	f102 0514 	add.w	r5, r2, #20
 8010eb4:	429d      	cmp	r5, r3
 8010eb6:	d926      	bls.n	8010f06 <_dtoa_r+0x2ae>
 8010eb8:	6041      	str	r1, [r0, #4]
 8010eba:	4648      	mov	r0, r9
 8010ebc:	f001 f8e8 	bl	8012090 <_Balloc>
 8010ec0:	4682      	mov	sl, r0
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	d142      	bne.n	8010f4c <_dtoa_r+0x2f4>
 8010ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8010f40 <_dtoa_r+0x2e8>)
 8010ec8:	4602      	mov	r2, r0
 8010eca:	f240 11af 	movw	r1, #431	@ 0x1af
 8010ece:	e6da      	b.n	8010c86 <_dtoa_r+0x2e>
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	e7e3      	b.n	8010e9c <_dtoa_r+0x244>
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	e7d5      	b.n	8010e84 <_dtoa_r+0x22c>
 8010ed8:	2401      	movs	r4, #1
 8010eda:	2300      	movs	r3, #0
 8010edc:	9307      	str	r3, [sp, #28]
 8010ede:	9409      	str	r4, [sp, #36]	@ 0x24
 8010ee0:	f04f 3bff 	mov.w	fp, #4294967295
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	f8cd b00c 	str.w	fp, [sp, #12]
 8010eea:	2312      	movs	r3, #18
 8010eec:	920c      	str	r2, [sp, #48]	@ 0x30
 8010eee:	e7db      	b.n	8010ea8 <_dtoa_r+0x250>
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ef4:	e7f4      	b.n	8010ee0 <_dtoa_r+0x288>
 8010ef6:	f04f 0b01 	mov.w	fp, #1
 8010efa:	f8cd b00c 	str.w	fp, [sp, #12]
 8010efe:	465b      	mov	r3, fp
 8010f00:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010f04:	e7d0      	b.n	8010ea8 <_dtoa_r+0x250>
 8010f06:	3101      	adds	r1, #1
 8010f08:	0052      	lsls	r2, r2, #1
 8010f0a:	e7d1      	b.n	8010eb0 <_dtoa_r+0x258>
 8010f0c:	f3af 8000 	nop.w
 8010f10:	636f4361 	.word	0x636f4361
 8010f14:	3fd287a7 	.word	0x3fd287a7
 8010f18:	8b60c8b3 	.word	0x8b60c8b3
 8010f1c:	3fc68a28 	.word	0x3fc68a28
 8010f20:	509f79fb 	.word	0x509f79fb
 8010f24:	3fd34413 	.word	0x3fd34413
 8010f28:	08015607 	.word	0x08015607
 8010f2c:	0801561e 	.word	0x0801561e
 8010f30:	7ff00000 	.word	0x7ff00000
 8010f34:	080155cf 	.word	0x080155cf
 8010f38:	3ff80000 	.word	0x3ff80000
 8010f3c:	08015918 	.word	0x08015918
 8010f40:	08015676 	.word	0x08015676
 8010f44:	08015603 	.word	0x08015603
 8010f48:	080155ce 	.word	0x080155ce
 8010f4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010f50:	6018      	str	r0, [r3, #0]
 8010f52:	9b03      	ldr	r3, [sp, #12]
 8010f54:	2b0e      	cmp	r3, #14
 8010f56:	f200 80a1 	bhi.w	801109c <_dtoa_r+0x444>
 8010f5a:	2c00      	cmp	r4, #0
 8010f5c:	f000 809e 	beq.w	801109c <_dtoa_r+0x444>
 8010f60:	2f00      	cmp	r7, #0
 8010f62:	dd33      	ble.n	8010fcc <_dtoa_r+0x374>
 8010f64:	4b9c      	ldr	r3, [pc, #624]	@ (80111d8 <_dtoa_r+0x580>)
 8010f66:	f007 020f 	and.w	r2, r7, #15
 8010f6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f6e:	ed93 7b00 	vldr	d7, [r3]
 8010f72:	05f8      	lsls	r0, r7, #23
 8010f74:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010f78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010f7c:	d516      	bpl.n	8010fac <_dtoa_r+0x354>
 8010f7e:	4b97      	ldr	r3, [pc, #604]	@ (80111dc <_dtoa_r+0x584>)
 8010f80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010f84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010f88:	f7ef fc70 	bl	800086c <__aeabi_ddiv>
 8010f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010f90:	f004 040f 	and.w	r4, r4, #15
 8010f94:	2603      	movs	r6, #3
 8010f96:	4d91      	ldr	r5, [pc, #580]	@ (80111dc <_dtoa_r+0x584>)
 8010f98:	b954      	cbnz	r4, 8010fb0 <_dtoa_r+0x358>
 8010f9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010f9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010fa2:	f7ef fc63 	bl	800086c <__aeabi_ddiv>
 8010fa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010faa:	e028      	b.n	8010ffe <_dtoa_r+0x3a6>
 8010fac:	2602      	movs	r6, #2
 8010fae:	e7f2      	b.n	8010f96 <_dtoa_r+0x33e>
 8010fb0:	07e1      	lsls	r1, r4, #31
 8010fb2:	d508      	bpl.n	8010fc6 <_dtoa_r+0x36e>
 8010fb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010fb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010fbc:	f7ef fb2c 	bl	8000618 <__aeabi_dmul>
 8010fc0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010fc4:	3601      	adds	r6, #1
 8010fc6:	1064      	asrs	r4, r4, #1
 8010fc8:	3508      	adds	r5, #8
 8010fca:	e7e5      	b.n	8010f98 <_dtoa_r+0x340>
 8010fcc:	f000 80af 	beq.w	801112e <_dtoa_r+0x4d6>
 8010fd0:	427c      	negs	r4, r7
 8010fd2:	4b81      	ldr	r3, [pc, #516]	@ (80111d8 <_dtoa_r+0x580>)
 8010fd4:	4d81      	ldr	r5, [pc, #516]	@ (80111dc <_dtoa_r+0x584>)
 8010fd6:	f004 020f 	and.w	r2, r4, #15
 8010fda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010fe6:	f7ef fb17 	bl	8000618 <__aeabi_dmul>
 8010fea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010fee:	1124      	asrs	r4, r4, #4
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	2602      	movs	r6, #2
 8010ff4:	2c00      	cmp	r4, #0
 8010ff6:	f040 808f 	bne.w	8011118 <_dtoa_r+0x4c0>
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d1d3      	bne.n	8010fa6 <_dtoa_r+0x34e>
 8010ffe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011000:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011004:	2b00      	cmp	r3, #0
 8011006:	f000 8094 	beq.w	8011132 <_dtoa_r+0x4da>
 801100a:	4b75      	ldr	r3, [pc, #468]	@ (80111e0 <_dtoa_r+0x588>)
 801100c:	2200      	movs	r2, #0
 801100e:	4620      	mov	r0, r4
 8011010:	4629      	mov	r1, r5
 8011012:	f7ef fd73 	bl	8000afc <__aeabi_dcmplt>
 8011016:	2800      	cmp	r0, #0
 8011018:	f000 808b 	beq.w	8011132 <_dtoa_r+0x4da>
 801101c:	9b03      	ldr	r3, [sp, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	f000 8087 	beq.w	8011132 <_dtoa_r+0x4da>
 8011024:	f1bb 0f00 	cmp.w	fp, #0
 8011028:	dd34      	ble.n	8011094 <_dtoa_r+0x43c>
 801102a:	4620      	mov	r0, r4
 801102c:	4b6d      	ldr	r3, [pc, #436]	@ (80111e4 <_dtoa_r+0x58c>)
 801102e:	2200      	movs	r2, #0
 8011030:	4629      	mov	r1, r5
 8011032:	f7ef faf1 	bl	8000618 <__aeabi_dmul>
 8011036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801103a:	f107 38ff 	add.w	r8, r7, #4294967295
 801103e:	3601      	adds	r6, #1
 8011040:	465c      	mov	r4, fp
 8011042:	4630      	mov	r0, r6
 8011044:	f7ef fa7e 	bl	8000544 <__aeabi_i2d>
 8011048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801104c:	f7ef fae4 	bl	8000618 <__aeabi_dmul>
 8011050:	4b65      	ldr	r3, [pc, #404]	@ (80111e8 <_dtoa_r+0x590>)
 8011052:	2200      	movs	r2, #0
 8011054:	f7ef f92a 	bl	80002ac <__adddf3>
 8011058:	4605      	mov	r5, r0
 801105a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801105e:	2c00      	cmp	r4, #0
 8011060:	d16a      	bne.n	8011138 <_dtoa_r+0x4e0>
 8011062:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011066:	4b61      	ldr	r3, [pc, #388]	@ (80111ec <_dtoa_r+0x594>)
 8011068:	2200      	movs	r2, #0
 801106a:	f7ef f91d 	bl	80002a8 <__aeabi_dsub>
 801106e:	4602      	mov	r2, r0
 8011070:	460b      	mov	r3, r1
 8011072:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011076:	462a      	mov	r2, r5
 8011078:	4633      	mov	r3, r6
 801107a:	f7ef fd5d 	bl	8000b38 <__aeabi_dcmpgt>
 801107e:	2800      	cmp	r0, #0
 8011080:	f040 8298 	bne.w	80115b4 <_dtoa_r+0x95c>
 8011084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011088:	462a      	mov	r2, r5
 801108a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801108e:	f7ef fd35 	bl	8000afc <__aeabi_dcmplt>
 8011092:	bb38      	cbnz	r0, 80110e4 <_dtoa_r+0x48c>
 8011094:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8011098:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801109c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801109e:	2b00      	cmp	r3, #0
 80110a0:	f2c0 8157 	blt.w	8011352 <_dtoa_r+0x6fa>
 80110a4:	2f0e      	cmp	r7, #14
 80110a6:	f300 8154 	bgt.w	8011352 <_dtoa_r+0x6fa>
 80110aa:	4b4b      	ldr	r3, [pc, #300]	@ (80111d8 <_dtoa_r+0x580>)
 80110ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80110b0:	ed93 7b00 	vldr	d7, [r3]
 80110b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	ed8d 7b00 	vstr	d7, [sp]
 80110bc:	f280 80e5 	bge.w	801128a <_dtoa_r+0x632>
 80110c0:	9b03      	ldr	r3, [sp, #12]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	f300 80e1 	bgt.w	801128a <_dtoa_r+0x632>
 80110c8:	d10c      	bne.n	80110e4 <_dtoa_r+0x48c>
 80110ca:	4b48      	ldr	r3, [pc, #288]	@ (80111ec <_dtoa_r+0x594>)
 80110cc:	2200      	movs	r2, #0
 80110ce:	ec51 0b17 	vmov	r0, r1, d7
 80110d2:	f7ef faa1 	bl	8000618 <__aeabi_dmul>
 80110d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80110da:	f7ef fd23 	bl	8000b24 <__aeabi_dcmpge>
 80110de:	2800      	cmp	r0, #0
 80110e0:	f000 8266 	beq.w	80115b0 <_dtoa_r+0x958>
 80110e4:	2400      	movs	r4, #0
 80110e6:	4625      	mov	r5, r4
 80110e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80110ea:	4656      	mov	r6, sl
 80110ec:	ea6f 0803 	mvn.w	r8, r3
 80110f0:	2700      	movs	r7, #0
 80110f2:	4621      	mov	r1, r4
 80110f4:	4648      	mov	r0, r9
 80110f6:	f001 f80b 	bl	8012110 <_Bfree>
 80110fa:	2d00      	cmp	r5, #0
 80110fc:	f000 80bd 	beq.w	801127a <_dtoa_r+0x622>
 8011100:	b12f      	cbz	r7, 801110e <_dtoa_r+0x4b6>
 8011102:	42af      	cmp	r7, r5
 8011104:	d003      	beq.n	801110e <_dtoa_r+0x4b6>
 8011106:	4639      	mov	r1, r7
 8011108:	4648      	mov	r0, r9
 801110a:	f001 f801 	bl	8012110 <_Bfree>
 801110e:	4629      	mov	r1, r5
 8011110:	4648      	mov	r0, r9
 8011112:	f000 fffd 	bl	8012110 <_Bfree>
 8011116:	e0b0      	b.n	801127a <_dtoa_r+0x622>
 8011118:	07e2      	lsls	r2, r4, #31
 801111a:	d505      	bpl.n	8011128 <_dtoa_r+0x4d0>
 801111c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011120:	f7ef fa7a 	bl	8000618 <__aeabi_dmul>
 8011124:	3601      	adds	r6, #1
 8011126:	2301      	movs	r3, #1
 8011128:	1064      	asrs	r4, r4, #1
 801112a:	3508      	adds	r5, #8
 801112c:	e762      	b.n	8010ff4 <_dtoa_r+0x39c>
 801112e:	2602      	movs	r6, #2
 8011130:	e765      	b.n	8010ffe <_dtoa_r+0x3a6>
 8011132:	9c03      	ldr	r4, [sp, #12]
 8011134:	46b8      	mov	r8, r7
 8011136:	e784      	b.n	8011042 <_dtoa_r+0x3ea>
 8011138:	4b27      	ldr	r3, [pc, #156]	@ (80111d8 <_dtoa_r+0x580>)
 801113a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801113c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011140:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011144:	4454      	add	r4, sl
 8011146:	2900      	cmp	r1, #0
 8011148:	d054      	beq.n	80111f4 <_dtoa_r+0x59c>
 801114a:	4929      	ldr	r1, [pc, #164]	@ (80111f0 <_dtoa_r+0x598>)
 801114c:	2000      	movs	r0, #0
 801114e:	f7ef fb8d 	bl	800086c <__aeabi_ddiv>
 8011152:	4633      	mov	r3, r6
 8011154:	462a      	mov	r2, r5
 8011156:	f7ef f8a7 	bl	80002a8 <__aeabi_dsub>
 801115a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801115e:	4656      	mov	r6, sl
 8011160:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011164:	f7ef fd08 	bl	8000b78 <__aeabi_d2iz>
 8011168:	4605      	mov	r5, r0
 801116a:	f7ef f9eb 	bl	8000544 <__aeabi_i2d>
 801116e:	4602      	mov	r2, r0
 8011170:	460b      	mov	r3, r1
 8011172:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011176:	f7ef f897 	bl	80002a8 <__aeabi_dsub>
 801117a:	3530      	adds	r5, #48	@ 0x30
 801117c:	4602      	mov	r2, r0
 801117e:	460b      	mov	r3, r1
 8011180:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011184:	f806 5b01 	strb.w	r5, [r6], #1
 8011188:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801118c:	f7ef fcb6 	bl	8000afc <__aeabi_dcmplt>
 8011190:	2800      	cmp	r0, #0
 8011192:	d172      	bne.n	801127a <_dtoa_r+0x622>
 8011194:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011198:	4911      	ldr	r1, [pc, #68]	@ (80111e0 <_dtoa_r+0x588>)
 801119a:	2000      	movs	r0, #0
 801119c:	f7ef f884 	bl	80002a8 <__aeabi_dsub>
 80111a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80111a4:	f7ef fcaa 	bl	8000afc <__aeabi_dcmplt>
 80111a8:	2800      	cmp	r0, #0
 80111aa:	f040 80b4 	bne.w	8011316 <_dtoa_r+0x6be>
 80111ae:	42a6      	cmp	r6, r4
 80111b0:	f43f af70 	beq.w	8011094 <_dtoa_r+0x43c>
 80111b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80111b8:	4b0a      	ldr	r3, [pc, #40]	@ (80111e4 <_dtoa_r+0x58c>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	f7ef fa2c 	bl	8000618 <__aeabi_dmul>
 80111c0:	4b08      	ldr	r3, [pc, #32]	@ (80111e4 <_dtoa_r+0x58c>)
 80111c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80111c6:	2200      	movs	r2, #0
 80111c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111cc:	f7ef fa24 	bl	8000618 <__aeabi_dmul>
 80111d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80111d4:	e7c4      	b.n	8011160 <_dtoa_r+0x508>
 80111d6:	bf00      	nop
 80111d8:	08015918 	.word	0x08015918
 80111dc:	080158f0 	.word	0x080158f0
 80111e0:	3ff00000 	.word	0x3ff00000
 80111e4:	40240000 	.word	0x40240000
 80111e8:	401c0000 	.word	0x401c0000
 80111ec:	40140000 	.word	0x40140000
 80111f0:	3fe00000 	.word	0x3fe00000
 80111f4:	4631      	mov	r1, r6
 80111f6:	4628      	mov	r0, r5
 80111f8:	f7ef fa0e 	bl	8000618 <__aeabi_dmul>
 80111fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011200:	9413      	str	r4, [sp, #76]	@ 0x4c
 8011202:	4656      	mov	r6, sl
 8011204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011208:	f7ef fcb6 	bl	8000b78 <__aeabi_d2iz>
 801120c:	4605      	mov	r5, r0
 801120e:	f7ef f999 	bl	8000544 <__aeabi_i2d>
 8011212:	4602      	mov	r2, r0
 8011214:	460b      	mov	r3, r1
 8011216:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801121a:	f7ef f845 	bl	80002a8 <__aeabi_dsub>
 801121e:	3530      	adds	r5, #48	@ 0x30
 8011220:	f806 5b01 	strb.w	r5, [r6], #1
 8011224:	4602      	mov	r2, r0
 8011226:	460b      	mov	r3, r1
 8011228:	42a6      	cmp	r6, r4
 801122a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801122e:	f04f 0200 	mov.w	r2, #0
 8011232:	d124      	bne.n	801127e <_dtoa_r+0x626>
 8011234:	4baf      	ldr	r3, [pc, #700]	@ (80114f4 <_dtoa_r+0x89c>)
 8011236:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801123a:	f7ef f837 	bl	80002ac <__adddf3>
 801123e:	4602      	mov	r2, r0
 8011240:	460b      	mov	r3, r1
 8011242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011246:	f7ef fc77 	bl	8000b38 <__aeabi_dcmpgt>
 801124a:	2800      	cmp	r0, #0
 801124c:	d163      	bne.n	8011316 <_dtoa_r+0x6be>
 801124e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011252:	49a8      	ldr	r1, [pc, #672]	@ (80114f4 <_dtoa_r+0x89c>)
 8011254:	2000      	movs	r0, #0
 8011256:	f7ef f827 	bl	80002a8 <__aeabi_dsub>
 801125a:	4602      	mov	r2, r0
 801125c:	460b      	mov	r3, r1
 801125e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011262:	f7ef fc4b 	bl	8000afc <__aeabi_dcmplt>
 8011266:	2800      	cmp	r0, #0
 8011268:	f43f af14 	beq.w	8011094 <_dtoa_r+0x43c>
 801126c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801126e:	1e73      	subs	r3, r6, #1
 8011270:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011272:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011276:	2b30      	cmp	r3, #48	@ 0x30
 8011278:	d0f8      	beq.n	801126c <_dtoa_r+0x614>
 801127a:	4647      	mov	r7, r8
 801127c:	e03b      	b.n	80112f6 <_dtoa_r+0x69e>
 801127e:	4b9e      	ldr	r3, [pc, #632]	@ (80114f8 <_dtoa_r+0x8a0>)
 8011280:	f7ef f9ca 	bl	8000618 <__aeabi_dmul>
 8011284:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011288:	e7bc      	b.n	8011204 <_dtoa_r+0x5ac>
 801128a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801128e:	4656      	mov	r6, sl
 8011290:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011294:	4620      	mov	r0, r4
 8011296:	4629      	mov	r1, r5
 8011298:	f7ef fae8 	bl	800086c <__aeabi_ddiv>
 801129c:	f7ef fc6c 	bl	8000b78 <__aeabi_d2iz>
 80112a0:	4680      	mov	r8, r0
 80112a2:	f7ef f94f 	bl	8000544 <__aeabi_i2d>
 80112a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112aa:	f7ef f9b5 	bl	8000618 <__aeabi_dmul>
 80112ae:	4602      	mov	r2, r0
 80112b0:	460b      	mov	r3, r1
 80112b2:	4620      	mov	r0, r4
 80112b4:	4629      	mov	r1, r5
 80112b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80112ba:	f7ee fff5 	bl	80002a8 <__aeabi_dsub>
 80112be:	f806 4b01 	strb.w	r4, [r6], #1
 80112c2:	9d03      	ldr	r5, [sp, #12]
 80112c4:	eba6 040a 	sub.w	r4, r6, sl
 80112c8:	42a5      	cmp	r5, r4
 80112ca:	4602      	mov	r2, r0
 80112cc:	460b      	mov	r3, r1
 80112ce:	d133      	bne.n	8011338 <_dtoa_r+0x6e0>
 80112d0:	f7ee ffec 	bl	80002ac <__adddf3>
 80112d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112d8:	4604      	mov	r4, r0
 80112da:	460d      	mov	r5, r1
 80112dc:	f7ef fc2c 	bl	8000b38 <__aeabi_dcmpgt>
 80112e0:	b9c0      	cbnz	r0, 8011314 <_dtoa_r+0x6bc>
 80112e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112e6:	4620      	mov	r0, r4
 80112e8:	4629      	mov	r1, r5
 80112ea:	f7ef fbfd 	bl	8000ae8 <__aeabi_dcmpeq>
 80112ee:	b110      	cbz	r0, 80112f6 <_dtoa_r+0x69e>
 80112f0:	f018 0f01 	tst.w	r8, #1
 80112f4:	d10e      	bne.n	8011314 <_dtoa_r+0x6bc>
 80112f6:	9902      	ldr	r1, [sp, #8]
 80112f8:	4648      	mov	r0, r9
 80112fa:	f000 ff09 	bl	8012110 <_Bfree>
 80112fe:	2300      	movs	r3, #0
 8011300:	7033      	strb	r3, [r6, #0]
 8011302:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011304:	3701      	adds	r7, #1
 8011306:	601f      	str	r7, [r3, #0]
 8011308:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801130a:	2b00      	cmp	r3, #0
 801130c:	f000 824b 	beq.w	80117a6 <_dtoa_r+0xb4e>
 8011310:	601e      	str	r6, [r3, #0]
 8011312:	e248      	b.n	80117a6 <_dtoa_r+0xb4e>
 8011314:	46b8      	mov	r8, r7
 8011316:	4633      	mov	r3, r6
 8011318:	461e      	mov	r6, r3
 801131a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801131e:	2a39      	cmp	r2, #57	@ 0x39
 8011320:	d106      	bne.n	8011330 <_dtoa_r+0x6d8>
 8011322:	459a      	cmp	sl, r3
 8011324:	d1f8      	bne.n	8011318 <_dtoa_r+0x6c0>
 8011326:	2230      	movs	r2, #48	@ 0x30
 8011328:	f108 0801 	add.w	r8, r8, #1
 801132c:	f88a 2000 	strb.w	r2, [sl]
 8011330:	781a      	ldrb	r2, [r3, #0]
 8011332:	3201      	adds	r2, #1
 8011334:	701a      	strb	r2, [r3, #0]
 8011336:	e7a0      	b.n	801127a <_dtoa_r+0x622>
 8011338:	4b6f      	ldr	r3, [pc, #444]	@ (80114f8 <_dtoa_r+0x8a0>)
 801133a:	2200      	movs	r2, #0
 801133c:	f7ef f96c 	bl	8000618 <__aeabi_dmul>
 8011340:	2200      	movs	r2, #0
 8011342:	2300      	movs	r3, #0
 8011344:	4604      	mov	r4, r0
 8011346:	460d      	mov	r5, r1
 8011348:	f7ef fbce 	bl	8000ae8 <__aeabi_dcmpeq>
 801134c:	2800      	cmp	r0, #0
 801134e:	d09f      	beq.n	8011290 <_dtoa_r+0x638>
 8011350:	e7d1      	b.n	80112f6 <_dtoa_r+0x69e>
 8011352:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011354:	2a00      	cmp	r2, #0
 8011356:	f000 80ea 	beq.w	801152e <_dtoa_r+0x8d6>
 801135a:	9a07      	ldr	r2, [sp, #28]
 801135c:	2a01      	cmp	r2, #1
 801135e:	f300 80cd 	bgt.w	80114fc <_dtoa_r+0x8a4>
 8011362:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011364:	2a00      	cmp	r2, #0
 8011366:	f000 80c1 	beq.w	80114ec <_dtoa_r+0x894>
 801136a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801136e:	9c08      	ldr	r4, [sp, #32]
 8011370:	9e00      	ldr	r6, [sp, #0]
 8011372:	9a00      	ldr	r2, [sp, #0]
 8011374:	441a      	add	r2, r3
 8011376:	9200      	str	r2, [sp, #0]
 8011378:	9a06      	ldr	r2, [sp, #24]
 801137a:	2101      	movs	r1, #1
 801137c:	441a      	add	r2, r3
 801137e:	4648      	mov	r0, r9
 8011380:	9206      	str	r2, [sp, #24]
 8011382:	f000 ffc3 	bl	801230c <__i2b>
 8011386:	4605      	mov	r5, r0
 8011388:	b166      	cbz	r6, 80113a4 <_dtoa_r+0x74c>
 801138a:	9b06      	ldr	r3, [sp, #24]
 801138c:	2b00      	cmp	r3, #0
 801138e:	dd09      	ble.n	80113a4 <_dtoa_r+0x74c>
 8011390:	42b3      	cmp	r3, r6
 8011392:	9a00      	ldr	r2, [sp, #0]
 8011394:	bfa8      	it	ge
 8011396:	4633      	movge	r3, r6
 8011398:	1ad2      	subs	r2, r2, r3
 801139a:	9200      	str	r2, [sp, #0]
 801139c:	9a06      	ldr	r2, [sp, #24]
 801139e:	1af6      	subs	r6, r6, r3
 80113a0:	1ad3      	subs	r3, r2, r3
 80113a2:	9306      	str	r3, [sp, #24]
 80113a4:	9b08      	ldr	r3, [sp, #32]
 80113a6:	b30b      	cbz	r3, 80113ec <_dtoa_r+0x794>
 80113a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	f000 80c6 	beq.w	801153c <_dtoa_r+0x8e4>
 80113b0:	2c00      	cmp	r4, #0
 80113b2:	f000 80c0 	beq.w	8011536 <_dtoa_r+0x8de>
 80113b6:	4629      	mov	r1, r5
 80113b8:	4622      	mov	r2, r4
 80113ba:	4648      	mov	r0, r9
 80113bc:	f001 f85e 	bl	801247c <__pow5mult>
 80113c0:	9a02      	ldr	r2, [sp, #8]
 80113c2:	4601      	mov	r1, r0
 80113c4:	4605      	mov	r5, r0
 80113c6:	4648      	mov	r0, r9
 80113c8:	f000 ffb6 	bl	8012338 <__multiply>
 80113cc:	9902      	ldr	r1, [sp, #8]
 80113ce:	4680      	mov	r8, r0
 80113d0:	4648      	mov	r0, r9
 80113d2:	f000 fe9d 	bl	8012110 <_Bfree>
 80113d6:	9b08      	ldr	r3, [sp, #32]
 80113d8:	1b1b      	subs	r3, r3, r4
 80113da:	9308      	str	r3, [sp, #32]
 80113dc:	f000 80b1 	beq.w	8011542 <_dtoa_r+0x8ea>
 80113e0:	9a08      	ldr	r2, [sp, #32]
 80113e2:	4641      	mov	r1, r8
 80113e4:	4648      	mov	r0, r9
 80113e6:	f001 f849 	bl	801247c <__pow5mult>
 80113ea:	9002      	str	r0, [sp, #8]
 80113ec:	2101      	movs	r1, #1
 80113ee:	4648      	mov	r0, r9
 80113f0:	f000 ff8c 	bl	801230c <__i2b>
 80113f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80113f6:	4604      	mov	r4, r0
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	f000 81d8 	beq.w	80117ae <_dtoa_r+0xb56>
 80113fe:	461a      	mov	r2, r3
 8011400:	4601      	mov	r1, r0
 8011402:	4648      	mov	r0, r9
 8011404:	f001 f83a 	bl	801247c <__pow5mult>
 8011408:	9b07      	ldr	r3, [sp, #28]
 801140a:	2b01      	cmp	r3, #1
 801140c:	4604      	mov	r4, r0
 801140e:	f300 809f 	bgt.w	8011550 <_dtoa_r+0x8f8>
 8011412:	9b04      	ldr	r3, [sp, #16]
 8011414:	2b00      	cmp	r3, #0
 8011416:	f040 8097 	bne.w	8011548 <_dtoa_r+0x8f0>
 801141a:	9b05      	ldr	r3, [sp, #20]
 801141c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011420:	2b00      	cmp	r3, #0
 8011422:	f040 8093 	bne.w	801154c <_dtoa_r+0x8f4>
 8011426:	9b05      	ldr	r3, [sp, #20]
 8011428:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801142c:	0d1b      	lsrs	r3, r3, #20
 801142e:	051b      	lsls	r3, r3, #20
 8011430:	b133      	cbz	r3, 8011440 <_dtoa_r+0x7e8>
 8011432:	9b00      	ldr	r3, [sp, #0]
 8011434:	3301      	adds	r3, #1
 8011436:	9300      	str	r3, [sp, #0]
 8011438:	9b06      	ldr	r3, [sp, #24]
 801143a:	3301      	adds	r3, #1
 801143c:	9306      	str	r3, [sp, #24]
 801143e:	2301      	movs	r3, #1
 8011440:	9308      	str	r3, [sp, #32]
 8011442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011444:	2b00      	cmp	r3, #0
 8011446:	f000 81b8 	beq.w	80117ba <_dtoa_r+0xb62>
 801144a:	6923      	ldr	r3, [r4, #16]
 801144c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011450:	6918      	ldr	r0, [r3, #16]
 8011452:	f000 ff0f 	bl	8012274 <__hi0bits>
 8011456:	f1c0 0020 	rsb	r0, r0, #32
 801145a:	9b06      	ldr	r3, [sp, #24]
 801145c:	4418      	add	r0, r3
 801145e:	f010 001f 	ands.w	r0, r0, #31
 8011462:	f000 8082 	beq.w	801156a <_dtoa_r+0x912>
 8011466:	f1c0 0320 	rsb	r3, r0, #32
 801146a:	2b04      	cmp	r3, #4
 801146c:	dd73      	ble.n	8011556 <_dtoa_r+0x8fe>
 801146e:	9b00      	ldr	r3, [sp, #0]
 8011470:	f1c0 001c 	rsb	r0, r0, #28
 8011474:	4403      	add	r3, r0
 8011476:	9300      	str	r3, [sp, #0]
 8011478:	9b06      	ldr	r3, [sp, #24]
 801147a:	4403      	add	r3, r0
 801147c:	4406      	add	r6, r0
 801147e:	9306      	str	r3, [sp, #24]
 8011480:	9b00      	ldr	r3, [sp, #0]
 8011482:	2b00      	cmp	r3, #0
 8011484:	dd05      	ble.n	8011492 <_dtoa_r+0x83a>
 8011486:	9902      	ldr	r1, [sp, #8]
 8011488:	461a      	mov	r2, r3
 801148a:	4648      	mov	r0, r9
 801148c:	f001 f850 	bl	8012530 <__lshift>
 8011490:	9002      	str	r0, [sp, #8]
 8011492:	9b06      	ldr	r3, [sp, #24]
 8011494:	2b00      	cmp	r3, #0
 8011496:	dd05      	ble.n	80114a4 <_dtoa_r+0x84c>
 8011498:	4621      	mov	r1, r4
 801149a:	461a      	mov	r2, r3
 801149c:	4648      	mov	r0, r9
 801149e:	f001 f847 	bl	8012530 <__lshift>
 80114a2:	4604      	mov	r4, r0
 80114a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d061      	beq.n	801156e <_dtoa_r+0x916>
 80114aa:	9802      	ldr	r0, [sp, #8]
 80114ac:	4621      	mov	r1, r4
 80114ae:	f001 f8ab 	bl	8012608 <__mcmp>
 80114b2:	2800      	cmp	r0, #0
 80114b4:	da5b      	bge.n	801156e <_dtoa_r+0x916>
 80114b6:	2300      	movs	r3, #0
 80114b8:	9902      	ldr	r1, [sp, #8]
 80114ba:	220a      	movs	r2, #10
 80114bc:	4648      	mov	r0, r9
 80114be:	f000 fe49 	bl	8012154 <__multadd>
 80114c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114c4:	9002      	str	r0, [sp, #8]
 80114c6:	f107 38ff 	add.w	r8, r7, #4294967295
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	f000 8177 	beq.w	80117be <_dtoa_r+0xb66>
 80114d0:	4629      	mov	r1, r5
 80114d2:	2300      	movs	r3, #0
 80114d4:	220a      	movs	r2, #10
 80114d6:	4648      	mov	r0, r9
 80114d8:	f000 fe3c 	bl	8012154 <__multadd>
 80114dc:	f1bb 0f00 	cmp.w	fp, #0
 80114e0:	4605      	mov	r5, r0
 80114e2:	dc6f      	bgt.n	80115c4 <_dtoa_r+0x96c>
 80114e4:	9b07      	ldr	r3, [sp, #28]
 80114e6:	2b02      	cmp	r3, #2
 80114e8:	dc49      	bgt.n	801157e <_dtoa_r+0x926>
 80114ea:	e06b      	b.n	80115c4 <_dtoa_r+0x96c>
 80114ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80114ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80114f2:	e73c      	b.n	801136e <_dtoa_r+0x716>
 80114f4:	3fe00000 	.word	0x3fe00000
 80114f8:	40240000 	.word	0x40240000
 80114fc:	9b03      	ldr	r3, [sp, #12]
 80114fe:	1e5c      	subs	r4, r3, #1
 8011500:	9b08      	ldr	r3, [sp, #32]
 8011502:	42a3      	cmp	r3, r4
 8011504:	db09      	blt.n	801151a <_dtoa_r+0x8c2>
 8011506:	1b1c      	subs	r4, r3, r4
 8011508:	9b03      	ldr	r3, [sp, #12]
 801150a:	2b00      	cmp	r3, #0
 801150c:	f6bf af30 	bge.w	8011370 <_dtoa_r+0x718>
 8011510:	9b00      	ldr	r3, [sp, #0]
 8011512:	9a03      	ldr	r2, [sp, #12]
 8011514:	1a9e      	subs	r6, r3, r2
 8011516:	2300      	movs	r3, #0
 8011518:	e72b      	b.n	8011372 <_dtoa_r+0x71a>
 801151a:	9b08      	ldr	r3, [sp, #32]
 801151c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801151e:	9408      	str	r4, [sp, #32]
 8011520:	1ae3      	subs	r3, r4, r3
 8011522:	441a      	add	r2, r3
 8011524:	9e00      	ldr	r6, [sp, #0]
 8011526:	9b03      	ldr	r3, [sp, #12]
 8011528:	920d      	str	r2, [sp, #52]	@ 0x34
 801152a:	2400      	movs	r4, #0
 801152c:	e721      	b.n	8011372 <_dtoa_r+0x71a>
 801152e:	9c08      	ldr	r4, [sp, #32]
 8011530:	9e00      	ldr	r6, [sp, #0]
 8011532:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011534:	e728      	b.n	8011388 <_dtoa_r+0x730>
 8011536:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801153a:	e751      	b.n	80113e0 <_dtoa_r+0x788>
 801153c:	9a08      	ldr	r2, [sp, #32]
 801153e:	9902      	ldr	r1, [sp, #8]
 8011540:	e750      	b.n	80113e4 <_dtoa_r+0x78c>
 8011542:	f8cd 8008 	str.w	r8, [sp, #8]
 8011546:	e751      	b.n	80113ec <_dtoa_r+0x794>
 8011548:	2300      	movs	r3, #0
 801154a:	e779      	b.n	8011440 <_dtoa_r+0x7e8>
 801154c:	9b04      	ldr	r3, [sp, #16]
 801154e:	e777      	b.n	8011440 <_dtoa_r+0x7e8>
 8011550:	2300      	movs	r3, #0
 8011552:	9308      	str	r3, [sp, #32]
 8011554:	e779      	b.n	801144a <_dtoa_r+0x7f2>
 8011556:	d093      	beq.n	8011480 <_dtoa_r+0x828>
 8011558:	9a00      	ldr	r2, [sp, #0]
 801155a:	331c      	adds	r3, #28
 801155c:	441a      	add	r2, r3
 801155e:	9200      	str	r2, [sp, #0]
 8011560:	9a06      	ldr	r2, [sp, #24]
 8011562:	441a      	add	r2, r3
 8011564:	441e      	add	r6, r3
 8011566:	9206      	str	r2, [sp, #24]
 8011568:	e78a      	b.n	8011480 <_dtoa_r+0x828>
 801156a:	4603      	mov	r3, r0
 801156c:	e7f4      	b.n	8011558 <_dtoa_r+0x900>
 801156e:	9b03      	ldr	r3, [sp, #12]
 8011570:	2b00      	cmp	r3, #0
 8011572:	46b8      	mov	r8, r7
 8011574:	dc20      	bgt.n	80115b8 <_dtoa_r+0x960>
 8011576:	469b      	mov	fp, r3
 8011578:	9b07      	ldr	r3, [sp, #28]
 801157a:	2b02      	cmp	r3, #2
 801157c:	dd1e      	ble.n	80115bc <_dtoa_r+0x964>
 801157e:	f1bb 0f00 	cmp.w	fp, #0
 8011582:	f47f adb1 	bne.w	80110e8 <_dtoa_r+0x490>
 8011586:	4621      	mov	r1, r4
 8011588:	465b      	mov	r3, fp
 801158a:	2205      	movs	r2, #5
 801158c:	4648      	mov	r0, r9
 801158e:	f000 fde1 	bl	8012154 <__multadd>
 8011592:	4601      	mov	r1, r0
 8011594:	4604      	mov	r4, r0
 8011596:	9802      	ldr	r0, [sp, #8]
 8011598:	f001 f836 	bl	8012608 <__mcmp>
 801159c:	2800      	cmp	r0, #0
 801159e:	f77f ada3 	ble.w	80110e8 <_dtoa_r+0x490>
 80115a2:	4656      	mov	r6, sl
 80115a4:	2331      	movs	r3, #49	@ 0x31
 80115a6:	f806 3b01 	strb.w	r3, [r6], #1
 80115aa:	f108 0801 	add.w	r8, r8, #1
 80115ae:	e59f      	b.n	80110f0 <_dtoa_r+0x498>
 80115b0:	9c03      	ldr	r4, [sp, #12]
 80115b2:	46b8      	mov	r8, r7
 80115b4:	4625      	mov	r5, r4
 80115b6:	e7f4      	b.n	80115a2 <_dtoa_r+0x94a>
 80115b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80115bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115be:	2b00      	cmp	r3, #0
 80115c0:	f000 8101 	beq.w	80117c6 <_dtoa_r+0xb6e>
 80115c4:	2e00      	cmp	r6, #0
 80115c6:	dd05      	ble.n	80115d4 <_dtoa_r+0x97c>
 80115c8:	4629      	mov	r1, r5
 80115ca:	4632      	mov	r2, r6
 80115cc:	4648      	mov	r0, r9
 80115ce:	f000 ffaf 	bl	8012530 <__lshift>
 80115d2:	4605      	mov	r5, r0
 80115d4:	9b08      	ldr	r3, [sp, #32]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d05c      	beq.n	8011694 <_dtoa_r+0xa3c>
 80115da:	6869      	ldr	r1, [r5, #4]
 80115dc:	4648      	mov	r0, r9
 80115de:	f000 fd57 	bl	8012090 <_Balloc>
 80115e2:	4606      	mov	r6, r0
 80115e4:	b928      	cbnz	r0, 80115f2 <_dtoa_r+0x99a>
 80115e6:	4b82      	ldr	r3, [pc, #520]	@ (80117f0 <_dtoa_r+0xb98>)
 80115e8:	4602      	mov	r2, r0
 80115ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80115ee:	f7ff bb4a 	b.w	8010c86 <_dtoa_r+0x2e>
 80115f2:	692a      	ldr	r2, [r5, #16]
 80115f4:	3202      	adds	r2, #2
 80115f6:	0092      	lsls	r2, r2, #2
 80115f8:	f105 010c 	add.w	r1, r5, #12
 80115fc:	300c      	adds	r0, #12
 80115fe:	f7ff fa82 	bl	8010b06 <memcpy>
 8011602:	2201      	movs	r2, #1
 8011604:	4631      	mov	r1, r6
 8011606:	4648      	mov	r0, r9
 8011608:	f000 ff92 	bl	8012530 <__lshift>
 801160c:	f10a 0301 	add.w	r3, sl, #1
 8011610:	9300      	str	r3, [sp, #0]
 8011612:	eb0a 030b 	add.w	r3, sl, fp
 8011616:	9308      	str	r3, [sp, #32]
 8011618:	9b04      	ldr	r3, [sp, #16]
 801161a:	f003 0301 	and.w	r3, r3, #1
 801161e:	462f      	mov	r7, r5
 8011620:	9306      	str	r3, [sp, #24]
 8011622:	4605      	mov	r5, r0
 8011624:	9b00      	ldr	r3, [sp, #0]
 8011626:	9802      	ldr	r0, [sp, #8]
 8011628:	4621      	mov	r1, r4
 801162a:	f103 3bff 	add.w	fp, r3, #4294967295
 801162e:	f7ff fa89 	bl	8010b44 <quorem>
 8011632:	4603      	mov	r3, r0
 8011634:	3330      	adds	r3, #48	@ 0x30
 8011636:	9003      	str	r0, [sp, #12]
 8011638:	4639      	mov	r1, r7
 801163a:	9802      	ldr	r0, [sp, #8]
 801163c:	9309      	str	r3, [sp, #36]	@ 0x24
 801163e:	f000 ffe3 	bl	8012608 <__mcmp>
 8011642:	462a      	mov	r2, r5
 8011644:	9004      	str	r0, [sp, #16]
 8011646:	4621      	mov	r1, r4
 8011648:	4648      	mov	r0, r9
 801164a:	f000 fff9 	bl	8012640 <__mdiff>
 801164e:	68c2      	ldr	r2, [r0, #12]
 8011650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011652:	4606      	mov	r6, r0
 8011654:	bb02      	cbnz	r2, 8011698 <_dtoa_r+0xa40>
 8011656:	4601      	mov	r1, r0
 8011658:	9802      	ldr	r0, [sp, #8]
 801165a:	f000 ffd5 	bl	8012608 <__mcmp>
 801165e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011660:	4602      	mov	r2, r0
 8011662:	4631      	mov	r1, r6
 8011664:	4648      	mov	r0, r9
 8011666:	920c      	str	r2, [sp, #48]	@ 0x30
 8011668:	9309      	str	r3, [sp, #36]	@ 0x24
 801166a:	f000 fd51 	bl	8012110 <_Bfree>
 801166e:	9b07      	ldr	r3, [sp, #28]
 8011670:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011672:	9e00      	ldr	r6, [sp, #0]
 8011674:	ea42 0103 	orr.w	r1, r2, r3
 8011678:	9b06      	ldr	r3, [sp, #24]
 801167a:	4319      	orrs	r1, r3
 801167c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801167e:	d10d      	bne.n	801169c <_dtoa_r+0xa44>
 8011680:	2b39      	cmp	r3, #57	@ 0x39
 8011682:	d027      	beq.n	80116d4 <_dtoa_r+0xa7c>
 8011684:	9a04      	ldr	r2, [sp, #16]
 8011686:	2a00      	cmp	r2, #0
 8011688:	dd01      	ble.n	801168e <_dtoa_r+0xa36>
 801168a:	9b03      	ldr	r3, [sp, #12]
 801168c:	3331      	adds	r3, #49	@ 0x31
 801168e:	f88b 3000 	strb.w	r3, [fp]
 8011692:	e52e      	b.n	80110f2 <_dtoa_r+0x49a>
 8011694:	4628      	mov	r0, r5
 8011696:	e7b9      	b.n	801160c <_dtoa_r+0x9b4>
 8011698:	2201      	movs	r2, #1
 801169a:	e7e2      	b.n	8011662 <_dtoa_r+0xa0a>
 801169c:	9904      	ldr	r1, [sp, #16]
 801169e:	2900      	cmp	r1, #0
 80116a0:	db04      	blt.n	80116ac <_dtoa_r+0xa54>
 80116a2:	9807      	ldr	r0, [sp, #28]
 80116a4:	4301      	orrs	r1, r0
 80116a6:	9806      	ldr	r0, [sp, #24]
 80116a8:	4301      	orrs	r1, r0
 80116aa:	d120      	bne.n	80116ee <_dtoa_r+0xa96>
 80116ac:	2a00      	cmp	r2, #0
 80116ae:	ddee      	ble.n	801168e <_dtoa_r+0xa36>
 80116b0:	9902      	ldr	r1, [sp, #8]
 80116b2:	9300      	str	r3, [sp, #0]
 80116b4:	2201      	movs	r2, #1
 80116b6:	4648      	mov	r0, r9
 80116b8:	f000 ff3a 	bl	8012530 <__lshift>
 80116bc:	4621      	mov	r1, r4
 80116be:	9002      	str	r0, [sp, #8]
 80116c0:	f000 ffa2 	bl	8012608 <__mcmp>
 80116c4:	2800      	cmp	r0, #0
 80116c6:	9b00      	ldr	r3, [sp, #0]
 80116c8:	dc02      	bgt.n	80116d0 <_dtoa_r+0xa78>
 80116ca:	d1e0      	bne.n	801168e <_dtoa_r+0xa36>
 80116cc:	07da      	lsls	r2, r3, #31
 80116ce:	d5de      	bpl.n	801168e <_dtoa_r+0xa36>
 80116d0:	2b39      	cmp	r3, #57	@ 0x39
 80116d2:	d1da      	bne.n	801168a <_dtoa_r+0xa32>
 80116d4:	2339      	movs	r3, #57	@ 0x39
 80116d6:	f88b 3000 	strb.w	r3, [fp]
 80116da:	4633      	mov	r3, r6
 80116dc:	461e      	mov	r6, r3
 80116de:	3b01      	subs	r3, #1
 80116e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80116e4:	2a39      	cmp	r2, #57	@ 0x39
 80116e6:	d04e      	beq.n	8011786 <_dtoa_r+0xb2e>
 80116e8:	3201      	adds	r2, #1
 80116ea:	701a      	strb	r2, [r3, #0]
 80116ec:	e501      	b.n	80110f2 <_dtoa_r+0x49a>
 80116ee:	2a00      	cmp	r2, #0
 80116f0:	dd03      	ble.n	80116fa <_dtoa_r+0xaa2>
 80116f2:	2b39      	cmp	r3, #57	@ 0x39
 80116f4:	d0ee      	beq.n	80116d4 <_dtoa_r+0xa7c>
 80116f6:	3301      	adds	r3, #1
 80116f8:	e7c9      	b.n	801168e <_dtoa_r+0xa36>
 80116fa:	9a00      	ldr	r2, [sp, #0]
 80116fc:	9908      	ldr	r1, [sp, #32]
 80116fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011702:	428a      	cmp	r2, r1
 8011704:	d028      	beq.n	8011758 <_dtoa_r+0xb00>
 8011706:	9902      	ldr	r1, [sp, #8]
 8011708:	2300      	movs	r3, #0
 801170a:	220a      	movs	r2, #10
 801170c:	4648      	mov	r0, r9
 801170e:	f000 fd21 	bl	8012154 <__multadd>
 8011712:	42af      	cmp	r7, r5
 8011714:	9002      	str	r0, [sp, #8]
 8011716:	f04f 0300 	mov.w	r3, #0
 801171a:	f04f 020a 	mov.w	r2, #10
 801171e:	4639      	mov	r1, r7
 8011720:	4648      	mov	r0, r9
 8011722:	d107      	bne.n	8011734 <_dtoa_r+0xadc>
 8011724:	f000 fd16 	bl	8012154 <__multadd>
 8011728:	4607      	mov	r7, r0
 801172a:	4605      	mov	r5, r0
 801172c:	9b00      	ldr	r3, [sp, #0]
 801172e:	3301      	adds	r3, #1
 8011730:	9300      	str	r3, [sp, #0]
 8011732:	e777      	b.n	8011624 <_dtoa_r+0x9cc>
 8011734:	f000 fd0e 	bl	8012154 <__multadd>
 8011738:	4629      	mov	r1, r5
 801173a:	4607      	mov	r7, r0
 801173c:	2300      	movs	r3, #0
 801173e:	220a      	movs	r2, #10
 8011740:	4648      	mov	r0, r9
 8011742:	f000 fd07 	bl	8012154 <__multadd>
 8011746:	4605      	mov	r5, r0
 8011748:	e7f0      	b.n	801172c <_dtoa_r+0xad4>
 801174a:	f1bb 0f00 	cmp.w	fp, #0
 801174e:	bfcc      	ite	gt
 8011750:	465e      	movgt	r6, fp
 8011752:	2601      	movle	r6, #1
 8011754:	4456      	add	r6, sl
 8011756:	2700      	movs	r7, #0
 8011758:	9902      	ldr	r1, [sp, #8]
 801175a:	9300      	str	r3, [sp, #0]
 801175c:	2201      	movs	r2, #1
 801175e:	4648      	mov	r0, r9
 8011760:	f000 fee6 	bl	8012530 <__lshift>
 8011764:	4621      	mov	r1, r4
 8011766:	9002      	str	r0, [sp, #8]
 8011768:	f000 ff4e 	bl	8012608 <__mcmp>
 801176c:	2800      	cmp	r0, #0
 801176e:	dcb4      	bgt.n	80116da <_dtoa_r+0xa82>
 8011770:	d102      	bne.n	8011778 <_dtoa_r+0xb20>
 8011772:	9b00      	ldr	r3, [sp, #0]
 8011774:	07db      	lsls	r3, r3, #31
 8011776:	d4b0      	bmi.n	80116da <_dtoa_r+0xa82>
 8011778:	4633      	mov	r3, r6
 801177a:	461e      	mov	r6, r3
 801177c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011780:	2a30      	cmp	r2, #48	@ 0x30
 8011782:	d0fa      	beq.n	801177a <_dtoa_r+0xb22>
 8011784:	e4b5      	b.n	80110f2 <_dtoa_r+0x49a>
 8011786:	459a      	cmp	sl, r3
 8011788:	d1a8      	bne.n	80116dc <_dtoa_r+0xa84>
 801178a:	2331      	movs	r3, #49	@ 0x31
 801178c:	f108 0801 	add.w	r8, r8, #1
 8011790:	f88a 3000 	strb.w	r3, [sl]
 8011794:	e4ad      	b.n	80110f2 <_dtoa_r+0x49a>
 8011796:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011798:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80117f4 <_dtoa_r+0xb9c>
 801179c:	b11b      	cbz	r3, 80117a6 <_dtoa_r+0xb4e>
 801179e:	f10a 0308 	add.w	r3, sl, #8
 80117a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80117a4:	6013      	str	r3, [r2, #0]
 80117a6:	4650      	mov	r0, sl
 80117a8:	b017      	add	sp, #92	@ 0x5c
 80117aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ae:	9b07      	ldr	r3, [sp, #28]
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	f77f ae2e 	ble.w	8011412 <_dtoa_r+0x7ba>
 80117b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80117b8:	9308      	str	r3, [sp, #32]
 80117ba:	2001      	movs	r0, #1
 80117bc:	e64d      	b.n	801145a <_dtoa_r+0x802>
 80117be:	f1bb 0f00 	cmp.w	fp, #0
 80117c2:	f77f aed9 	ble.w	8011578 <_dtoa_r+0x920>
 80117c6:	4656      	mov	r6, sl
 80117c8:	9802      	ldr	r0, [sp, #8]
 80117ca:	4621      	mov	r1, r4
 80117cc:	f7ff f9ba 	bl	8010b44 <quorem>
 80117d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80117d4:	f806 3b01 	strb.w	r3, [r6], #1
 80117d8:	eba6 020a 	sub.w	r2, r6, sl
 80117dc:	4593      	cmp	fp, r2
 80117de:	ddb4      	ble.n	801174a <_dtoa_r+0xaf2>
 80117e0:	9902      	ldr	r1, [sp, #8]
 80117e2:	2300      	movs	r3, #0
 80117e4:	220a      	movs	r2, #10
 80117e6:	4648      	mov	r0, r9
 80117e8:	f000 fcb4 	bl	8012154 <__multadd>
 80117ec:	9002      	str	r0, [sp, #8]
 80117ee:	e7eb      	b.n	80117c8 <_dtoa_r+0xb70>
 80117f0:	08015676 	.word	0x08015676
 80117f4:	080155fa 	.word	0x080155fa

080117f8 <_free_r>:
 80117f8:	b538      	push	{r3, r4, r5, lr}
 80117fa:	4605      	mov	r5, r0
 80117fc:	2900      	cmp	r1, #0
 80117fe:	d041      	beq.n	8011884 <_free_r+0x8c>
 8011800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011804:	1f0c      	subs	r4, r1, #4
 8011806:	2b00      	cmp	r3, #0
 8011808:	bfb8      	it	lt
 801180a:	18e4      	addlt	r4, r4, r3
 801180c:	f000 fc34 	bl	8012078 <__malloc_lock>
 8011810:	4a1d      	ldr	r2, [pc, #116]	@ (8011888 <_free_r+0x90>)
 8011812:	6813      	ldr	r3, [r2, #0]
 8011814:	b933      	cbnz	r3, 8011824 <_free_r+0x2c>
 8011816:	6063      	str	r3, [r4, #4]
 8011818:	6014      	str	r4, [r2, #0]
 801181a:	4628      	mov	r0, r5
 801181c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011820:	f000 bc30 	b.w	8012084 <__malloc_unlock>
 8011824:	42a3      	cmp	r3, r4
 8011826:	d908      	bls.n	801183a <_free_r+0x42>
 8011828:	6820      	ldr	r0, [r4, #0]
 801182a:	1821      	adds	r1, r4, r0
 801182c:	428b      	cmp	r3, r1
 801182e:	bf01      	itttt	eq
 8011830:	6819      	ldreq	r1, [r3, #0]
 8011832:	685b      	ldreq	r3, [r3, #4]
 8011834:	1809      	addeq	r1, r1, r0
 8011836:	6021      	streq	r1, [r4, #0]
 8011838:	e7ed      	b.n	8011816 <_free_r+0x1e>
 801183a:	461a      	mov	r2, r3
 801183c:	685b      	ldr	r3, [r3, #4]
 801183e:	b10b      	cbz	r3, 8011844 <_free_r+0x4c>
 8011840:	42a3      	cmp	r3, r4
 8011842:	d9fa      	bls.n	801183a <_free_r+0x42>
 8011844:	6811      	ldr	r1, [r2, #0]
 8011846:	1850      	adds	r0, r2, r1
 8011848:	42a0      	cmp	r0, r4
 801184a:	d10b      	bne.n	8011864 <_free_r+0x6c>
 801184c:	6820      	ldr	r0, [r4, #0]
 801184e:	4401      	add	r1, r0
 8011850:	1850      	adds	r0, r2, r1
 8011852:	4283      	cmp	r3, r0
 8011854:	6011      	str	r1, [r2, #0]
 8011856:	d1e0      	bne.n	801181a <_free_r+0x22>
 8011858:	6818      	ldr	r0, [r3, #0]
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	6053      	str	r3, [r2, #4]
 801185e:	4408      	add	r0, r1
 8011860:	6010      	str	r0, [r2, #0]
 8011862:	e7da      	b.n	801181a <_free_r+0x22>
 8011864:	d902      	bls.n	801186c <_free_r+0x74>
 8011866:	230c      	movs	r3, #12
 8011868:	602b      	str	r3, [r5, #0]
 801186a:	e7d6      	b.n	801181a <_free_r+0x22>
 801186c:	6820      	ldr	r0, [r4, #0]
 801186e:	1821      	adds	r1, r4, r0
 8011870:	428b      	cmp	r3, r1
 8011872:	bf04      	itt	eq
 8011874:	6819      	ldreq	r1, [r3, #0]
 8011876:	685b      	ldreq	r3, [r3, #4]
 8011878:	6063      	str	r3, [r4, #4]
 801187a:	bf04      	itt	eq
 801187c:	1809      	addeq	r1, r1, r0
 801187e:	6021      	streq	r1, [r4, #0]
 8011880:	6054      	str	r4, [r2, #4]
 8011882:	e7ca      	b.n	801181a <_free_r+0x22>
 8011884:	bd38      	pop	{r3, r4, r5, pc}
 8011886:	bf00      	nop
 8011888:	20006754 	.word	0x20006754

0801188c <rshift>:
 801188c:	6903      	ldr	r3, [r0, #16]
 801188e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011892:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011896:	ea4f 1261 	mov.w	r2, r1, asr #5
 801189a:	f100 0414 	add.w	r4, r0, #20
 801189e:	dd45      	ble.n	801192c <rshift+0xa0>
 80118a0:	f011 011f 	ands.w	r1, r1, #31
 80118a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80118a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80118ac:	d10c      	bne.n	80118c8 <rshift+0x3c>
 80118ae:	f100 0710 	add.w	r7, r0, #16
 80118b2:	4629      	mov	r1, r5
 80118b4:	42b1      	cmp	r1, r6
 80118b6:	d334      	bcc.n	8011922 <rshift+0x96>
 80118b8:	1a9b      	subs	r3, r3, r2
 80118ba:	009b      	lsls	r3, r3, #2
 80118bc:	1eea      	subs	r2, r5, #3
 80118be:	4296      	cmp	r6, r2
 80118c0:	bf38      	it	cc
 80118c2:	2300      	movcc	r3, #0
 80118c4:	4423      	add	r3, r4
 80118c6:	e015      	b.n	80118f4 <rshift+0x68>
 80118c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80118cc:	f1c1 0820 	rsb	r8, r1, #32
 80118d0:	40cf      	lsrs	r7, r1
 80118d2:	f105 0e04 	add.w	lr, r5, #4
 80118d6:	46a1      	mov	r9, r4
 80118d8:	4576      	cmp	r6, lr
 80118da:	46f4      	mov	ip, lr
 80118dc:	d815      	bhi.n	801190a <rshift+0x7e>
 80118de:	1a9a      	subs	r2, r3, r2
 80118e0:	0092      	lsls	r2, r2, #2
 80118e2:	3a04      	subs	r2, #4
 80118e4:	3501      	adds	r5, #1
 80118e6:	42ae      	cmp	r6, r5
 80118e8:	bf38      	it	cc
 80118ea:	2200      	movcc	r2, #0
 80118ec:	18a3      	adds	r3, r4, r2
 80118ee:	50a7      	str	r7, [r4, r2]
 80118f0:	b107      	cbz	r7, 80118f4 <rshift+0x68>
 80118f2:	3304      	adds	r3, #4
 80118f4:	1b1a      	subs	r2, r3, r4
 80118f6:	42a3      	cmp	r3, r4
 80118f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80118fc:	bf08      	it	eq
 80118fe:	2300      	moveq	r3, #0
 8011900:	6102      	str	r2, [r0, #16]
 8011902:	bf08      	it	eq
 8011904:	6143      	streq	r3, [r0, #20]
 8011906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801190a:	f8dc c000 	ldr.w	ip, [ip]
 801190e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011912:	ea4c 0707 	orr.w	r7, ip, r7
 8011916:	f849 7b04 	str.w	r7, [r9], #4
 801191a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801191e:	40cf      	lsrs	r7, r1
 8011920:	e7da      	b.n	80118d8 <rshift+0x4c>
 8011922:	f851 cb04 	ldr.w	ip, [r1], #4
 8011926:	f847 cf04 	str.w	ip, [r7, #4]!
 801192a:	e7c3      	b.n	80118b4 <rshift+0x28>
 801192c:	4623      	mov	r3, r4
 801192e:	e7e1      	b.n	80118f4 <rshift+0x68>

08011930 <__hexdig_fun>:
 8011930:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011934:	2b09      	cmp	r3, #9
 8011936:	d802      	bhi.n	801193e <__hexdig_fun+0xe>
 8011938:	3820      	subs	r0, #32
 801193a:	b2c0      	uxtb	r0, r0
 801193c:	4770      	bx	lr
 801193e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011942:	2b05      	cmp	r3, #5
 8011944:	d801      	bhi.n	801194a <__hexdig_fun+0x1a>
 8011946:	3847      	subs	r0, #71	@ 0x47
 8011948:	e7f7      	b.n	801193a <__hexdig_fun+0xa>
 801194a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801194e:	2b05      	cmp	r3, #5
 8011950:	d801      	bhi.n	8011956 <__hexdig_fun+0x26>
 8011952:	3827      	subs	r0, #39	@ 0x27
 8011954:	e7f1      	b.n	801193a <__hexdig_fun+0xa>
 8011956:	2000      	movs	r0, #0
 8011958:	4770      	bx	lr
	...

0801195c <__gethex>:
 801195c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011960:	b085      	sub	sp, #20
 8011962:	468a      	mov	sl, r1
 8011964:	9302      	str	r3, [sp, #8]
 8011966:	680b      	ldr	r3, [r1, #0]
 8011968:	9001      	str	r0, [sp, #4]
 801196a:	4690      	mov	r8, r2
 801196c:	1c9c      	adds	r4, r3, #2
 801196e:	46a1      	mov	r9, r4
 8011970:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011974:	2830      	cmp	r0, #48	@ 0x30
 8011976:	d0fa      	beq.n	801196e <__gethex+0x12>
 8011978:	eba9 0303 	sub.w	r3, r9, r3
 801197c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011980:	f7ff ffd6 	bl	8011930 <__hexdig_fun>
 8011984:	4605      	mov	r5, r0
 8011986:	2800      	cmp	r0, #0
 8011988:	d168      	bne.n	8011a5c <__gethex+0x100>
 801198a:	49a0      	ldr	r1, [pc, #640]	@ (8011c0c <__gethex+0x2b0>)
 801198c:	2201      	movs	r2, #1
 801198e:	4648      	mov	r0, r9
 8011990:	f7ff f81d 	bl	80109ce <strncmp>
 8011994:	4607      	mov	r7, r0
 8011996:	2800      	cmp	r0, #0
 8011998:	d167      	bne.n	8011a6a <__gethex+0x10e>
 801199a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801199e:	4626      	mov	r6, r4
 80119a0:	f7ff ffc6 	bl	8011930 <__hexdig_fun>
 80119a4:	2800      	cmp	r0, #0
 80119a6:	d062      	beq.n	8011a6e <__gethex+0x112>
 80119a8:	4623      	mov	r3, r4
 80119aa:	7818      	ldrb	r0, [r3, #0]
 80119ac:	2830      	cmp	r0, #48	@ 0x30
 80119ae:	4699      	mov	r9, r3
 80119b0:	f103 0301 	add.w	r3, r3, #1
 80119b4:	d0f9      	beq.n	80119aa <__gethex+0x4e>
 80119b6:	f7ff ffbb 	bl	8011930 <__hexdig_fun>
 80119ba:	fab0 f580 	clz	r5, r0
 80119be:	096d      	lsrs	r5, r5, #5
 80119c0:	f04f 0b01 	mov.w	fp, #1
 80119c4:	464a      	mov	r2, r9
 80119c6:	4616      	mov	r6, r2
 80119c8:	3201      	adds	r2, #1
 80119ca:	7830      	ldrb	r0, [r6, #0]
 80119cc:	f7ff ffb0 	bl	8011930 <__hexdig_fun>
 80119d0:	2800      	cmp	r0, #0
 80119d2:	d1f8      	bne.n	80119c6 <__gethex+0x6a>
 80119d4:	498d      	ldr	r1, [pc, #564]	@ (8011c0c <__gethex+0x2b0>)
 80119d6:	2201      	movs	r2, #1
 80119d8:	4630      	mov	r0, r6
 80119da:	f7fe fff8 	bl	80109ce <strncmp>
 80119de:	2800      	cmp	r0, #0
 80119e0:	d13f      	bne.n	8011a62 <__gethex+0x106>
 80119e2:	b944      	cbnz	r4, 80119f6 <__gethex+0x9a>
 80119e4:	1c74      	adds	r4, r6, #1
 80119e6:	4622      	mov	r2, r4
 80119e8:	4616      	mov	r6, r2
 80119ea:	3201      	adds	r2, #1
 80119ec:	7830      	ldrb	r0, [r6, #0]
 80119ee:	f7ff ff9f 	bl	8011930 <__hexdig_fun>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	d1f8      	bne.n	80119e8 <__gethex+0x8c>
 80119f6:	1ba4      	subs	r4, r4, r6
 80119f8:	00a7      	lsls	r7, r4, #2
 80119fa:	7833      	ldrb	r3, [r6, #0]
 80119fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011a00:	2b50      	cmp	r3, #80	@ 0x50
 8011a02:	d13e      	bne.n	8011a82 <__gethex+0x126>
 8011a04:	7873      	ldrb	r3, [r6, #1]
 8011a06:	2b2b      	cmp	r3, #43	@ 0x2b
 8011a08:	d033      	beq.n	8011a72 <__gethex+0x116>
 8011a0a:	2b2d      	cmp	r3, #45	@ 0x2d
 8011a0c:	d034      	beq.n	8011a78 <__gethex+0x11c>
 8011a0e:	1c71      	adds	r1, r6, #1
 8011a10:	2400      	movs	r4, #0
 8011a12:	7808      	ldrb	r0, [r1, #0]
 8011a14:	f7ff ff8c 	bl	8011930 <__hexdig_fun>
 8011a18:	1e43      	subs	r3, r0, #1
 8011a1a:	b2db      	uxtb	r3, r3
 8011a1c:	2b18      	cmp	r3, #24
 8011a1e:	d830      	bhi.n	8011a82 <__gethex+0x126>
 8011a20:	f1a0 0210 	sub.w	r2, r0, #16
 8011a24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011a28:	f7ff ff82 	bl	8011930 <__hexdig_fun>
 8011a2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011a30:	fa5f fc8c 	uxtb.w	ip, ip
 8011a34:	f1bc 0f18 	cmp.w	ip, #24
 8011a38:	f04f 030a 	mov.w	r3, #10
 8011a3c:	d91e      	bls.n	8011a7c <__gethex+0x120>
 8011a3e:	b104      	cbz	r4, 8011a42 <__gethex+0xe6>
 8011a40:	4252      	negs	r2, r2
 8011a42:	4417      	add	r7, r2
 8011a44:	f8ca 1000 	str.w	r1, [sl]
 8011a48:	b1ed      	cbz	r5, 8011a86 <__gethex+0x12a>
 8011a4a:	f1bb 0f00 	cmp.w	fp, #0
 8011a4e:	bf0c      	ite	eq
 8011a50:	2506      	moveq	r5, #6
 8011a52:	2500      	movne	r5, #0
 8011a54:	4628      	mov	r0, r5
 8011a56:	b005      	add	sp, #20
 8011a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a5c:	2500      	movs	r5, #0
 8011a5e:	462c      	mov	r4, r5
 8011a60:	e7b0      	b.n	80119c4 <__gethex+0x68>
 8011a62:	2c00      	cmp	r4, #0
 8011a64:	d1c7      	bne.n	80119f6 <__gethex+0x9a>
 8011a66:	4627      	mov	r7, r4
 8011a68:	e7c7      	b.n	80119fa <__gethex+0x9e>
 8011a6a:	464e      	mov	r6, r9
 8011a6c:	462f      	mov	r7, r5
 8011a6e:	2501      	movs	r5, #1
 8011a70:	e7c3      	b.n	80119fa <__gethex+0x9e>
 8011a72:	2400      	movs	r4, #0
 8011a74:	1cb1      	adds	r1, r6, #2
 8011a76:	e7cc      	b.n	8011a12 <__gethex+0xb6>
 8011a78:	2401      	movs	r4, #1
 8011a7a:	e7fb      	b.n	8011a74 <__gethex+0x118>
 8011a7c:	fb03 0002 	mla	r0, r3, r2, r0
 8011a80:	e7ce      	b.n	8011a20 <__gethex+0xc4>
 8011a82:	4631      	mov	r1, r6
 8011a84:	e7de      	b.n	8011a44 <__gethex+0xe8>
 8011a86:	eba6 0309 	sub.w	r3, r6, r9
 8011a8a:	3b01      	subs	r3, #1
 8011a8c:	4629      	mov	r1, r5
 8011a8e:	2b07      	cmp	r3, #7
 8011a90:	dc0a      	bgt.n	8011aa8 <__gethex+0x14c>
 8011a92:	9801      	ldr	r0, [sp, #4]
 8011a94:	f000 fafc 	bl	8012090 <_Balloc>
 8011a98:	4604      	mov	r4, r0
 8011a9a:	b940      	cbnz	r0, 8011aae <__gethex+0x152>
 8011a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8011c10 <__gethex+0x2b4>)
 8011a9e:	4602      	mov	r2, r0
 8011aa0:	21e4      	movs	r1, #228	@ 0xe4
 8011aa2:	485c      	ldr	r0, [pc, #368]	@ (8011c14 <__gethex+0x2b8>)
 8011aa4:	f001 f92c 	bl	8012d00 <__assert_func>
 8011aa8:	3101      	adds	r1, #1
 8011aaa:	105b      	asrs	r3, r3, #1
 8011aac:	e7ef      	b.n	8011a8e <__gethex+0x132>
 8011aae:	f100 0a14 	add.w	sl, r0, #20
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	4655      	mov	r5, sl
 8011ab6:	469b      	mov	fp, r3
 8011ab8:	45b1      	cmp	r9, r6
 8011aba:	d337      	bcc.n	8011b2c <__gethex+0x1d0>
 8011abc:	f845 bb04 	str.w	fp, [r5], #4
 8011ac0:	eba5 050a 	sub.w	r5, r5, sl
 8011ac4:	10ad      	asrs	r5, r5, #2
 8011ac6:	6125      	str	r5, [r4, #16]
 8011ac8:	4658      	mov	r0, fp
 8011aca:	f000 fbd3 	bl	8012274 <__hi0bits>
 8011ace:	016d      	lsls	r5, r5, #5
 8011ad0:	f8d8 6000 	ldr.w	r6, [r8]
 8011ad4:	1a2d      	subs	r5, r5, r0
 8011ad6:	42b5      	cmp	r5, r6
 8011ad8:	dd54      	ble.n	8011b84 <__gethex+0x228>
 8011ada:	1bad      	subs	r5, r5, r6
 8011adc:	4629      	mov	r1, r5
 8011ade:	4620      	mov	r0, r4
 8011ae0:	f000 ff5f 	bl	80129a2 <__any_on>
 8011ae4:	4681      	mov	r9, r0
 8011ae6:	b178      	cbz	r0, 8011b08 <__gethex+0x1ac>
 8011ae8:	1e6b      	subs	r3, r5, #1
 8011aea:	1159      	asrs	r1, r3, #5
 8011aec:	f003 021f 	and.w	r2, r3, #31
 8011af0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011af4:	f04f 0901 	mov.w	r9, #1
 8011af8:	fa09 f202 	lsl.w	r2, r9, r2
 8011afc:	420a      	tst	r2, r1
 8011afe:	d003      	beq.n	8011b08 <__gethex+0x1ac>
 8011b00:	454b      	cmp	r3, r9
 8011b02:	dc36      	bgt.n	8011b72 <__gethex+0x216>
 8011b04:	f04f 0902 	mov.w	r9, #2
 8011b08:	4629      	mov	r1, r5
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	f7ff febe 	bl	801188c <rshift>
 8011b10:	442f      	add	r7, r5
 8011b12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b16:	42bb      	cmp	r3, r7
 8011b18:	da42      	bge.n	8011ba0 <__gethex+0x244>
 8011b1a:	9801      	ldr	r0, [sp, #4]
 8011b1c:	4621      	mov	r1, r4
 8011b1e:	f000 faf7 	bl	8012110 <_Bfree>
 8011b22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b24:	2300      	movs	r3, #0
 8011b26:	6013      	str	r3, [r2, #0]
 8011b28:	25a3      	movs	r5, #163	@ 0xa3
 8011b2a:	e793      	b.n	8011a54 <__gethex+0xf8>
 8011b2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011b30:	2a2e      	cmp	r2, #46	@ 0x2e
 8011b32:	d012      	beq.n	8011b5a <__gethex+0x1fe>
 8011b34:	2b20      	cmp	r3, #32
 8011b36:	d104      	bne.n	8011b42 <__gethex+0x1e6>
 8011b38:	f845 bb04 	str.w	fp, [r5], #4
 8011b3c:	f04f 0b00 	mov.w	fp, #0
 8011b40:	465b      	mov	r3, fp
 8011b42:	7830      	ldrb	r0, [r6, #0]
 8011b44:	9303      	str	r3, [sp, #12]
 8011b46:	f7ff fef3 	bl	8011930 <__hexdig_fun>
 8011b4a:	9b03      	ldr	r3, [sp, #12]
 8011b4c:	f000 000f 	and.w	r0, r0, #15
 8011b50:	4098      	lsls	r0, r3
 8011b52:	ea4b 0b00 	orr.w	fp, fp, r0
 8011b56:	3304      	adds	r3, #4
 8011b58:	e7ae      	b.n	8011ab8 <__gethex+0x15c>
 8011b5a:	45b1      	cmp	r9, r6
 8011b5c:	d8ea      	bhi.n	8011b34 <__gethex+0x1d8>
 8011b5e:	492b      	ldr	r1, [pc, #172]	@ (8011c0c <__gethex+0x2b0>)
 8011b60:	9303      	str	r3, [sp, #12]
 8011b62:	2201      	movs	r2, #1
 8011b64:	4630      	mov	r0, r6
 8011b66:	f7fe ff32 	bl	80109ce <strncmp>
 8011b6a:	9b03      	ldr	r3, [sp, #12]
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	d1e1      	bne.n	8011b34 <__gethex+0x1d8>
 8011b70:	e7a2      	b.n	8011ab8 <__gethex+0x15c>
 8011b72:	1ea9      	subs	r1, r5, #2
 8011b74:	4620      	mov	r0, r4
 8011b76:	f000 ff14 	bl	80129a2 <__any_on>
 8011b7a:	2800      	cmp	r0, #0
 8011b7c:	d0c2      	beq.n	8011b04 <__gethex+0x1a8>
 8011b7e:	f04f 0903 	mov.w	r9, #3
 8011b82:	e7c1      	b.n	8011b08 <__gethex+0x1ac>
 8011b84:	da09      	bge.n	8011b9a <__gethex+0x23e>
 8011b86:	1b75      	subs	r5, r6, r5
 8011b88:	4621      	mov	r1, r4
 8011b8a:	9801      	ldr	r0, [sp, #4]
 8011b8c:	462a      	mov	r2, r5
 8011b8e:	f000 fccf 	bl	8012530 <__lshift>
 8011b92:	1b7f      	subs	r7, r7, r5
 8011b94:	4604      	mov	r4, r0
 8011b96:	f100 0a14 	add.w	sl, r0, #20
 8011b9a:	f04f 0900 	mov.w	r9, #0
 8011b9e:	e7b8      	b.n	8011b12 <__gethex+0x1b6>
 8011ba0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011ba4:	42bd      	cmp	r5, r7
 8011ba6:	dd6f      	ble.n	8011c88 <__gethex+0x32c>
 8011ba8:	1bed      	subs	r5, r5, r7
 8011baa:	42ae      	cmp	r6, r5
 8011bac:	dc34      	bgt.n	8011c18 <__gethex+0x2bc>
 8011bae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011bb2:	2b02      	cmp	r3, #2
 8011bb4:	d022      	beq.n	8011bfc <__gethex+0x2a0>
 8011bb6:	2b03      	cmp	r3, #3
 8011bb8:	d024      	beq.n	8011c04 <__gethex+0x2a8>
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d115      	bne.n	8011bea <__gethex+0x28e>
 8011bbe:	42ae      	cmp	r6, r5
 8011bc0:	d113      	bne.n	8011bea <__gethex+0x28e>
 8011bc2:	2e01      	cmp	r6, #1
 8011bc4:	d10b      	bne.n	8011bde <__gethex+0x282>
 8011bc6:	9a02      	ldr	r2, [sp, #8]
 8011bc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011bcc:	6013      	str	r3, [r2, #0]
 8011bce:	2301      	movs	r3, #1
 8011bd0:	6123      	str	r3, [r4, #16]
 8011bd2:	f8ca 3000 	str.w	r3, [sl]
 8011bd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bd8:	2562      	movs	r5, #98	@ 0x62
 8011bda:	601c      	str	r4, [r3, #0]
 8011bdc:	e73a      	b.n	8011a54 <__gethex+0xf8>
 8011bde:	1e71      	subs	r1, r6, #1
 8011be0:	4620      	mov	r0, r4
 8011be2:	f000 fede 	bl	80129a2 <__any_on>
 8011be6:	2800      	cmp	r0, #0
 8011be8:	d1ed      	bne.n	8011bc6 <__gethex+0x26a>
 8011bea:	9801      	ldr	r0, [sp, #4]
 8011bec:	4621      	mov	r1, r4
 8011bee:	f000 fa8f 	bl	8012110 <_Bfree>
 8011bf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	6013      	str	r3, [r2, #0]
 8011bf8:	2550      	movs	r5, #80	@ 0x50
 8011bfa:	e72b      	b.n	8011a54 <__gethex+0xf8>
 8011bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d1f3      	bne.n	8011bea <__gethex+0x28e>
 8011c02:	e7e0      	b.n	8011bc6 <__gethex+0x26a>
 8011c04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d1dd      	bne.n	8011bc6 <__gethex+0x26a>
 8011c0a:	e7ee      	b.n	8011bea <__gethex+0x28e>
 8011c0c:	080155bc 	.word	0x080155bc
 8011c10:	08015676 	.word	0x08015676
 8011c14:	08015687 	.word	0x08015687
 8011c18:	1e6f      	subs	r7, r5, #1
 8011c1a:	f1b9 0f00 	cmp.w	r9, #0
 8011c1e:	d130      	bne.n	8011c82 <__gethex+0x326>
 8011c20:	b127      	cbz	r7, 8011c2c <__gethex+0x2d0>
 8011c22:	4639      	mov	r1, r7
 8011c24:	4620      	mov	r0, r4
 8011c26:	f000 febc 	bl	80129a2 <__any_on>
 8011c2a:	4681      	mov	r9, r0
 8011c2c:	117a      	asrs	r2, r7, #5
 8011c2e:	2301      	movs	r3, #1
 8011c30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011c34:	f007 071f 	and.w	r7, r7, #31
 8011c38:	40bb      	lsls	r3, r7
 8011c3a:	4213      	tst	r3, r2
 8011c3c:	4629      	mov	r1, r5
 8011c3e:	4620      	mov	r0, r4
 8011c40:	bf18      	it	ne
 8011c42:	f049 0902 	orrne.w	r9, r9, #2
 8011c46:	f7ff fe21 	bl	801188c <rshift>
 8011c4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011c4e:	1b76      	subs	r6, r6, r5
 8011c50:	2502      	movs	r5, #2
 8011c52:	f1b9 0f00 	cmp.w	r9, #0
 8011c56:	d047      	beq.n	8011ce8 <__gethex+0x38c>
 8011c58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011c5c:	2b02      	cmp	r3, #2
 8011c5e:	d015      	beq.n	8011c8c <__gethex+0x330>
 8011c60:	2b03      	cmp	r3, #3
 8011c62:	d017      	beq.n	8011c94 <__gethex+0x338>
 8011c64:	2b01      	cmp	r3, #1
 8011c66:	d109      	bne.n	8011c7c <__gethex+0x320>
 8011c68:	f019 0f02 	tst.w	r9, #2
 8011c6c:	d006      	beq.n	8011c7c <__gethex+0x320>
 8011c6e:	f8da 3000 	ldr.w	r3, [sl]
 8011c72:	ea49 0903 	orr.w	r9, r9, r3
 8011c76:	f019 0f01 	tst.w	r9, #1
 8011c7a:	d10e      	bne.n	8011c9a <__gethex+0x33e>
 8011c7c:	f045 0510 	orr.w	r5, r5, #16
 8011c80:	e032      	b.n	8011ce8 <__gethex+0x38c>
 8011c82:	f04f 0901 	mov.w	r9, #1
 8011c86:	e7d1      	b.n	8011c2c <__gethex+0x2d0>
 8011c88:	2501      	movs	r5, #1
 8011c8a:	e7e2      	b.n	8011c52 <__gethex+0x2f6>
 8011c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c8e:	f1c3 0301 	rsb	r3, r3, #1
 8011c92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d0f0      	beq.n	8011c7c <__gethex+0x320>
 8011c9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011c9e:	f104 0314 	add.w	r3, r4, #20
 8011ca2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011ca6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011caa:	f04f 0c00 	mov.w	ip, #0
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cb4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011cb8:	d01b      	beq.n	8011cf2 <__gethex+0x396>
 8011cba:	3201      	adds	r2, #1
 8011cbc:	6002      	str	r2, [r0, #0]
 8011cbe:	2d02      	cmp	r5, #2
 8011cc0:	f104 0314 	add.w	r3, r4, #20
 8011cc4:	d13c      	bne.n	8011d40 <__gethex+0x3e4>
 8011cc6:	f8d8 2000 	ldr.w	r2, [r8]
 8011cca:	3a01      	subs	r2, #1
 8011ccc:	42b2      	cmp	r2, r6
 8011cce:	d109      	bne.n	8011ce4 <__gethex+0x388>
 8011cd0:	1171      	asrs	r1, r6, #5
 8011cd2:	2201      	movs	r2, #1
 8011cd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011cd8:	f006 061f 	and.w	r6, r6, #31
 8011cdc:	fa02 f606 	lsl.w	r6, r2, r6
 8011ce0:	421e      	tst	r6, r3
 8011ce2:	d13a      	bne.n	8011d5a <__gethex+0x3fe>
 8011ce4:	f045 0520 	orr.w	r5, r5, #32
 8011ce8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011cea:	601c      	str	r4, [r3, #0]
 8011cec:	9b02      	ldr	r3, [sp, #8]
 8011cee:	601f      	str	r7, [r3, #0]
 8011cf0:	e6b0      	b.n	8011a54 <__gethex+0xf8>
 8011cf2:	4299      	cmp	r1, r3
 8011cf4:	f843 cc04 	str.w	ip, [r3, #-4]
 8011cf8:	d8d9      	bhi.n	8011cae <__gethex+0x352>
 8011cfa:	68a3      	ldr	r3, [r4, #8]
 8011cfc:	459b      	cmp	fp, r3
 8011cfe:	db17      	blt.n	8011d30 <__gethex+0x3d4>
 8011d00:	6861      	ldr	r1, [r4, #4]
 8011d02:	9801      	ldr	r0, [sp, #4]
 8011d04:	3101      	adds	r1, #1
 8011d06:	f000 f9c3 	bl	8012090 <_Balloc>
 8011d0a:	4681      	mov	r9, r0
 8011d0c:	b918      	cbnz	r0, 8011d16 <__gethex+0x3ba>
 8011d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8011d78 <__gethex+0x41c>)
 8011d10:	4602      	mov	r2, r0
 8011d12:	2184      	movs	r1, #132	@ 0x84
 8011d14:	e6c5      	b.n	8011aa2 <__gethex+0x146>
 8011d16:	6922      	ldr	r2, [r4, #16]
 8011d18:	3202      	adds	r2, #2
 8011d1a:	f104 010c 	add.w	r1, r4, #12
 8011d1e:	0092      	lsls	r2, r2, #2
 8011d20:	300c      	adds	r0, #12
 8011d22:	f7fe fef0 	bl	8010b06 <memcpy>
 8011d26:	4621      	mov	r1, r4
 8011d28:	9801      	ldr	r0, [sp, #4]
 8011d2a:	f000 f9f1 	bl	8012110 <_Bfree>
 8011d2e:	464c      	mov	r4, r9
 8011d30:	6923      	ldr	r3, [r4, #16]
 8011d32:	1c5a      	adds	r2, r3, #1
 8011d34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011d38:	6122      	str	r2, [r4, #16]
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	615a      	str	r2, [r3, #20]
 8011d3e:	e7be      	b.n	8011cbe <__gethex+0x362>
 8011d40:	6922      	ldr	r2, [r4, #16]
 8011d42:	455a      	cmp	r2, fp
 8011d44:	dd0b      	ble.n	8011d5e <__gethex+0x402>
 8011d46:	2101      	movs	r1, #1
 8011d48:	4620      	mov	r0, r4
 8011d4a:	f7ff fd9f 	bl	801188c <rshift>
 8011d4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011d52:	3701      	adds	r7, #1
 8011d54:	42bb      	cmp	r3, r7
 8011d56:	f6ff aee0 	blt.w	8011b1a <__gethex+0x1be>
 8011d5a:	2501      	movs	r5, #1
 8011d5c:	e7c2      	b.n	8011ce4 <__gethex+0x388>
 8011d5e:	f016 061f 	ands.w	r6, r6, #31
 8011d62:	d0fa      	beq.n	8011d5a <__gethex+0x3fe>
 8011d64:	4453      	add	r3, sl
 8011d66:	f1c6 0620 	rsb	r6, r6, #32
 8011d6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011d6e:	f000 fa81 	bl	8012274 <__hi0bits>
 8011d72:	42b0      	cmp	r0, r6
 8011d74:	dbe7      	blt.n	8011d46 <__gethex+0x3ea>
 8011d76:	e7f0      	b.n	8011d5a <__gethex+0x3fe>
 8011d78:	08015676 	.word	0x08015676

08011d7c <L_shift>:
 8011d7c:	f1c2 0208 	rsb	r2, r2, #8
 8011d80:	0092      	lsls	r2, r2, #2
 8011d82:	b570      	push	{r4, r5, r6, lr}
 8011d84:	f1c2 0620 	rsb	r6, r2, #32
 8011d88:	6843      	ldr	r3, [r0, #4]
 8011d8a:	6804      	ldr	r4, [r0, #0]
 8011d8c:	fa03 f506 	lsl.w	r5, r3, r6
 8011d90:	432c      	orrs	r4, r5
 8011d92:	40d3      	lsrs	r3, r2
 8011d94:	6004      	str	r4, [r0, #0]
 8011d96:	f840 3f04 	str.w	r3, [r0, #4]!
 8011d9a:	4288      	cmp	r0, r1
 8011d9c:	d3f4      	bcc.n	8011d88 <L_shift+0xc>
 8011d9e:	bd70      	pop	{r4, r5, r6, pc}

08011da0 <__match>:
 8011da0:	b530      	push	{r4, r5, lr}
 8011da2:	6803      	ldr	r3, [r0, #0]
 8011da4:	3301      	adds	r3, #1
 8011da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011daa:	b914      	cbnz	r4, 8011db2 <__match+0x12>
 8011dac:	6003      	str	r3, [r0, #0]
 8011dae:	2001      	movs	r0, #1
 8011db0:	bd30      	pop	{r4, r5, pc}
 8011db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011db6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011dba:	2d19      	cmp	r5, #25
 8011dbc:	bf98      	it	ls
 8011dbe:	3220      	addls	r2, #32
 8011dc0:	42a2      	cmp	r2, r4
 8011dc2:	d0f0      	beq.n	8011da6 <__match+0x6>
 8011dc4:	2000      	movs	r0, #0
 8011dc6:	e7f3      	b.n	8011db0 <__match+0x10>

08011dc8 <__hexnan>:
 8011dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dcc:	680b      	ldr	r3, [r1, #0]
 8011dce:	6801      	ldr	r1, [r0, #0]
 8011dd0:	115e      	asrs	r6, r3, #5
 8011dd2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011dd6:	f013 031f 	ands.w	r3, r3, #31
 8011dda:	b087      	sub	sp, #28
 8011ddc:	bf18      	it	ne
 8011dde:	3604      	addne	r6, #4
 8011de0:	2500      	movs	r5, #0
 8011de2:	1f37      	subs	r7, r6, #4
 8011de4:	4682      	mov	sl, r0
 8011de6:	4690      	mov	r8, r2
 8011de8:	9301      	str	r3, [sp, #4]
 8011dea:	f846 5c04 	str.w	r5, [r6, #-4]
 8011dee:	46b9      	mov	r9, r7
 8011df0:	463c      	mov	r4, r7
 8011df2:	9502      	str	r5, [sp, #8]
 8011df4:	46ab      	mov	fp, r5
 8011df6:	784a      	ldrb	r2, [r1, #1]
 8011df8:	1c4b      	adds	r3, r1, #1
 8011dfa:	9303      	str	r3, [sp, #12]
 8011dfc:	b342      	cbz	r2, 8011e50 <__hexnan+0x88>
 8011dfe:	4610      	mov	r0, r2
 8011e00:	9105      	str	r1, [sp, #20]
 8011e02:	9204      	str	r2, [sp, #16]
 8011e04:	f7ff fd94 	bl	8011930 <__hexdig_fun>
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	d151      	bne.n	8011eb0 <__hexnan+0xe8>
 8011e0c:	9a04      	ldr	r2, [sp, #16]
 8011e0e:	9905      	ldr	r1, [sp, #20]
 8011e10:	2a20      	cmp	r2, #32
 8011e12:	d818      	bhi.n	8011e46 <__hexnan+0x7e>
 8011e14:	9b02      	ldr	r3, [sp, #8]
 8011e16:	459b      	cmp	fp, r3
 8011e18:	dd13      	ble.n	8011e42 <__hexnan+0x7a>
 8011e1a:	454c      	cmp	r4, r9
 8011e1c:	d206      	bcs.n	8011e2c <__hexnan+0x64>
 8011e1e:	2d07      	cmp	r5, #7
 8011e20:	dc04      	bgt.n	8011e2c <__hexnan+0x64>
 8011e22:	462a      	mov	r2, r5
 8011e24:	4649      	mov	r1, r9
 8011e26:	4620      	mov	r0, r4
 8011e28:	f7ff ffa8 	bl	8011d7c <L_shift>
 8011e2c:	4544      	cmp	r4, r8
 8011e2e:	d952      	bls.n	8011ed6 <__hexnan+0x10e>
 8011e30:	2300      	movs	r3, #0
 8011e32:	f1a4 0904 	sub.w	r9, r4, #4
 8011e36:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e3a:	f8cd b008 	str.w	fp, [sp, #8]
 8011e3e:	464c      	mov	r4, r9
 8011e40:	461d      	mov	r5, r3
 8011e42:	9903      	ldr	r1, [sp, #12]
 8011e44:	e7d7      	b.n	8011df6 <__hexnan+0x2e>
 8011e46:	2a29      	cmp	r2, #41	@ 0x29
 8011e48:	d157      	bne.n	8011efa <__hexnan+0x132>
 8011e4a:	3102      	adds	r1, #2
 8011e4c:	f8ca 1000 	str.w	r1, [sl]
 8011e50:	f1bb 0f00 	cmp.w	fp, #0
 8011e54:	d051      	beq.n	8011efa <__hexnan+0x132>
 8011e56:	454c      	cmp	r4, r9
 8011e58:	d206      	bcs.n	8011e68 <__hexnan+0xa0>
 8011e5a:	2d07      	cmp	r5, #7
 8011e5c:	dc04      	bgt.n	8011e68 <__hexnan+0xa0>
 8011e5e:	462a      	mov	r2, r5
 8011e60:	4649      	mov	r1, r9
 8011e62:	4620      	mov	r0, r4
 8011e64:	f7ff ff8a 	bl	8011d7c <L_shift>
 8011e68:	4544      	cmp	r4, r8
 8011e6a:	d936      	bls.n	8011eda <__hexnan+0x112>
 8011e6c:	f1a8 0204 	sub.w	r2, r8, #4
 8011e70:	4623      	mov	r3, r4
 8011e72:	f853 1b04 	ldr.w	r1, [r3], #4
 8011e76:	f842 1f04 	str.w	r1, [r2, #4]!
 8011e7a:	429f      	cmp	r7, r3
 8011e7c:	d2f9      	bcs.n	8011e72 <__hexnan+0xaa>
 8011e7e:	1b3b      	subs	r3, r7, r4
 8011e80:	f023 0303 	bic.w	r3, r3, #3
 8011e84:	3304      	adds	r3, #4
 8011e86:	3401      	adds	r4, #1
 8011e88:	3e03      	subs	r6, #3
 8011e8a:	42b4      	cmp	r4, r6
 8011e8c:	bf88      	it	hi
 8011e8e:	2304      	movhi	r3, #4
 8011e90:	4443      	add	r3, r8
 8011e92:	2200      	movs	r2, #0
 8011e94:	f843 2b04 	str.w	r2, [r3], #4
 8011e98:	429f      	cmp	r7, r3
 8011e9a:	d2fb      	bcs.n	8011e94 <__hexnan+0xcc>
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	b91b      	cbnz	r3, 8011ea8 <__hexnan+0xe0>
 8011ea0:	4547      	cmp	r7, r8
 8011ea2:	d128      	bne.n	8011ef6 <__hexnan+0x12e>
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	603b      	str	r3, [r7, #0]
 8011ea8:	2005      	movs	r0, #5
 8011eaa:	b007      	add	sp, #28
 8011eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eb0:	3501      	adds	r5, #1
 8011eb2:	2d08      	cmp	r5, #8
 8011eb4:	f10b 0b01 	add.w	fp, fp, #1
 8011eb8:	dd06      	ble.n	8011ec8 <__hexnan+0x100>
 8011eba:	4544      	cmp	r4, r8
 8011ebc:	d9c1      	bls.n	8011e42 <__hexnan+0x7a>
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ec4:	2501      	movs	r5, #1
 8011ec6:	3c04      	subs	r4, #4
 8011ec8:	6822      	ldr	r2, [r4, #0]
 8011eca:	f000 000f 	and.w	r0, r0, #15
 8011ece:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011ed2:	6020      	str	r0, [r4, #0]
 8011ed4:	e7b5      	b.n	8011e42 <__hexnan+0x7a>
 8011ed6:	2508      	movs	r5, #8
 8011ed8:	e7b3      	b.n	8011e42 <__hexnan+0x7a>
 8011eda:	9b01      	ldr	r3, [sp, #4]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d0dd      	beq.n	8011e9c <__hexnan+0xd4>
 8011ee0:	f1c3 0320 	rsb	r3, r3, #32
 8011ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ee8:	40da      	lsrs	r2, r3
 8011eea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011eee:	4013      	ands	r3, r2
 8011ef0:	f846 3c04 	str.w	r3, [r6, #-4]
 8011ef4:	e7d2      	b.n	8011e9c <__hexnan+0xd4>
 8011ef6:	3f04      	subs	r7, #4
 8011ef8:	e7d0      	b.n	8011e9c <__hexnan+0xd4>
 8011efa:	2004      	movs	r0, #4
 8011efc:	e7d5      	b.n	8011eaa <__hexnan+0xe2>
	...

08011f00 <malloc>:
 8011f00:	4b02      	ldr	r3, [pc, #8]	@ (8011f0c <malloc+0xc>)
 8011f02:	4601      	mov	r1, r0
 8011f04:	6818      	ldr	r0, [r3, #0]
 8011f06:	f000 b825 	b.w	8011f54 <_malloc_r>
 8011f0a:	bf00      	nop
 8011f0c:	2000018c 	.word	0x2000018c

08011f10 <sbrk_aligned>:
 8011f10:	b570      	push	{r4, r5, r6, lr}
 8011f12:	4e0f      	ldr	r6, [pc, #60]	@ (8011f50 <sbrk_aligned+0x40>)
 8011f14:	460c      	mov	r4, r1
 8011f16:	6831      	ldr	r1, [r6, #0]
 8011f18:	4605      	mov	r5, r0
 8011f1a:	b911      	cbnz	r1, 8011f22 <sbrk_aligned+0x12>
 8011f1c:	f000 fee0 	bl	8012ce0 <_sbrk_r>
 8011f20:	6030      	str	r0, [r6, #0]
 8011f22:	4621      	mov	r1, r4
 8011f24:	4628      	mov	r0, r5
 8011f26:	f000 fedb 	bl	8012ce0 <_sbrk_r>
 8011f2a:	1c43      	adds	r3, r0, #1
 8011f2c:	d103      	bne.n	8011f36 <sbrk_aligned+0x26>
 8011f2e:	f04f 34ff 	mov.w	r4, #4294967295
 8011f32:	4620      	mov	r0, r4
 8011f34:	bd70      	pop	{r4, r5, r6, pc}
 8011f36:	1cc4      	adds	r4, r0, #3
 8011f38:	f024 0403 	bic.w	r4, r4, #3
 8011f3c:	42a0      	cmp	r0, r4
 8011f3e:	d0f8      	beq.n	8011f32 <sbrk_aligned+0x22>
 8011f40:	1a21      	subs	r1, r4, r0
 8011f42:	4628      	mov	r0, r5
 8011f44:	f000 fecc 	bl	8012ce0 <_sbrk_r>
 8011f48:	3001      	adds	r0, #1
 8011f4a:	d1f2      	bne.n	8011f32 <sbrk_aligned+0x22>
 8011f4c:	e7ef      	b.n	8011f2e <sbrk_aligned+0x1e>
 8011f4e:	bf00      	nop
 8011f50:	20006750 	.word	0x20006750

08011f54 <_malloc_r>:
 8011f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f58:	1ccd      	adds	r5, r1, #3
 8011f5a:	f025 0503 	bic.w	r5, r5, #3
 8011f5e:	3508      	adds	r5, #8
 8011f60:	2d0c      	cmp	r5, #12
 8011f62:	bf38      	it	cc
 8011f64:	250c      	movcc	r5, #12
 8011f66:	2d00      	cmp	r5, #0
 8011f68:	4606      	mov	r6, r0
 8011f6a:	db01      	blt.n	8011f70 <_malloc_r+0x1c>
 8011f6c:	42a9      	cmp	r1, r5
 8011f6e:	d904      	bls.n	8011f7a <_malloc_r+0x26>
 8011f70:	230c      	movs	r3, #12
 8011f72:	6033      	str	r3, [r6, #0]
 8011f74:	2000      	movs	r0, #0
 8011f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012050 <_malloc_r+0xfc>
 8011f7e:	f000 f87b 	bl	8012078 <__malloc_lock>
 8011f82:	f8d8 3000 	ldr.w	r3, [r8]
 8011f86:	461c      	mov	r4, r3
 8011f88:	bb44      	cbnz	r4, 8011fdc <_malloc_r+0x88>
 8011f8a:	4629      	mov	r1, r5
 8011f8c:	4630      	mov	r0, r6
 8011f8e:	f7ff ffbf 	bl	8011f10 <sbrk_aligned>
 8011f92:	1c43      	adds	r3, r0, #1
 8011f94:	4604      	mov	r4, r0
 8011f96:	d158      	bne.n	801204a <_malloc_r+0xf6>
 8011f98:	f8d8 4000 	ldr.w	r4, [r8]
 8011f9c:	4627      	mov	r7, r4
 8011f9e:	2f00      	cmp	r7, #0
 8011fa0:	d143      	bne.n	801202a <_malloc_r+0xd6>
 8011fa2:	2c00      	cmp	r4, #0
 8011fa4:	d04b      	beq.n	801203e <_malloc_r+0xea>
 8011fa6:	6823      	ldr	r3, [r4, #0]
 8011fa8:	4639      	mov	r1, r7
 8011faa:	4630      	mov	r0, r6
 8011fac:	eb04 0903 	add.w	r9, r4, r3
 8011fb0:	f000 fe96 	bl	8012ce0 <_sbrk_r>
 8011fb4:	4581      	cmp	r9, r0
 8011fb6:	d142      	bne.n	801203e <_malloc_r+0xea>
 8011fb8:	6821      	ldr	r1, [r4, #0]
 8011fba:	1a6d      	subs	r5, r5, r1
 8011fbc:	4629      	mov	r1, r5
 8011fbe:	4630      	mov	r0, r6
 8011fc0:	f7ff ffa6 	bl	8011f10 <sbrk_aligned>
 8011fc4:	3001      	adds	r0, #1
 8011fc6:	d03a      	beq.n	801203e <_malloc_r+0xea>
 8011fc8:	6823      	ldr	r3, [r4, #0]
 8011fca:	442b      	add	r3, r5
 8011fcc:	6023      	str	r3, [r4, #0]
 8011fce:	f8d8 3000 	ldr.w	r3, [r8]
 8011fd2:	685a      	ldr	r2, [r3, #4]
 8011fd4:	bb62      	cbnz	r2, 8012030 <_malloc_r+0xdc>
 8011fd6:	f8c8 7000 	str.w	r7, [r8]
 8011fda:	e00f      	b.n	8011ffc <_malloc_r+0xa8>
 8011fdc:	6822      	ldr	r2, [r4, #0]
 8011fde:	1b52      	subs	r2, r2, r5
 8011fe0:	d420      	bmi.n	8012024 <_malloc_r+0xd0>
 8011fe2:	2a0b      	cmp	r2, #11
 8011fe4:	d917      	bls.n	8012016 <_malloc_r+0xc2>
 8011fe6:	1961      	adds	r1, r4, r5
 8011fe8:	42a3      	cmp	r3, r4
 8011fea:	6025      	str	r5, [r4, #0]
 8011fec:	bf18      	it	ne
 8011fee:	6059      	strne	r1, [r3, #4]
 8011ff0:	6863      	ldr	r3, [r4, #4]
 8011ff2:	bf08      	it	eq
 8011ff4:	f8c8 1000 	streq.w	r1, [r8]
 8011ff8:	5162      	str	r2, [r4, r5]
 8011ffa:	604b      	str	r3, [r1, #4]
 8011ffc:	4630      	mov	r0, r6
 8011ffe:	f000 f841 	bl	8012084 <__malloc_unlock>
 8012002:	f104 000b 	add.w	r0, r4, #11
 8012006:	1d23      	adds	r3, r4, #4
 8012008:	f020 0007 	bic.w	r0, r0, #7
 801200c:	1ac2      	subs	r2, r0, r3
 801200e:	bf1c      	itt	ne
 8012010:	1a1b      	subne	r3, r3, r0
 8012012:	50a3      	strne	r3, [r4, r2]
 8012014:	e7af      	b.n	8011f76 <_malloc_r+0x22>
 8012016:	6862      	ldr	r2, [r4, #4]
 8012018:	42a3      	cmp	r3, r4
 801201a:	bf0c      	ite	eq
 801201c:	f8c8 2000 	streq.w	r2, [r8]
 8012020:	605a      	strne	r2, [r3, #4]
 8012022:	e7eb      	b.n	8011ffc <_malloc_r+0xa8>
 8012024:	4623      	mov	r3, r4
 8012026:	6864      	ldr	r4, [r4, #4]
 8012028:	e7ae      	b.n	8011f88 <_malloc_r+0x34>
 801202a:	463c      	mov	r4, r7
 801202c:	687f      	ldr	r7, [r7, #4]
 801202e:	e7b6      	b.n	8011f9e <_malloc_r+0x4a>
 8012030:	461a      	mov	r2, r3
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	42a3      	cmp	r3, r4
 8012036:	d1fb      	bne.n	8012030 <_malloc_r+0xdc>
 8012038:	2300      	movs	r3, #0
 801203a:	6053      	str	r3, [r2, #4]
 801203c:	e7de      	b.n	8011ffc <_malloc_r+0xa8>
 801203e:	230c      	movs	r3, #12
 8012040:	6033      	str	r3, [r6, #0]
 8012042:	4630      	mov	r0, r6
 8012044:	f000 f81e 	bl	8012084 <__malloc_unlock>
 8012048:	e794      	b.n	8011f74 <_malloc_r+0x20>
 801204a:	6005      	str	r5, [r0, #0]
 801204c:	e7d6      	b.n	8011ffc <_malloc_r+0xa8>
 801204e:	bf00      	nop
 8012050:	20006754 	.word	0x20006754

08012054 <__ascii_mbtowc>:
 8012054:	b082      	sub	sp, #8
 8012056:	b901      	cbnz	r1, 801205a <__ascii_mbtowc+0x6>
 8012058:	a901      	add	r1, sp, #4
 801205a:	b142      	cbz	r2, 801206e <__ascii_mbtowc+0x1a>
 801205c:	b14b      	cbz	r3, 8012072 <__ascii_mbtowc+0x1e>
 801205e:	7813      	ldrb	r3, [r2, #0]
 8012060:	600b      	str	r3, [r1, #0]
 8012062:	7812      	ldrb	r2, [r2, #0]
 8012064:	1e10      	subs	r0, r2, #0
 8012066:	bf18      	it	ne
 8012068:	2001      	movne	r0, #1
 801206a:	b002      	add	sp, #8
 801206c:	4770      	bx	lr
 801206e:	4610      	mov	r0, r2
 8012070:	e7fb      	b.n	801206a <__ascii_mbtowc+0x16>
 8012072:	f06f 0001 	mvn.w	r0, #1
 8012076:	e7f8      	b.n	801206a <__ascii_mbtowc+0x16>

08012078 <__malloc_lock>:
 8012078:	4801      	ldr	r0, [pc, #4]	@ (8012080 <__malloc_lock+0x8>)
 801207a:	f7fe bd42 	b.w	8010b02 <__retarget_lock_acquire_recursive>
 801207e:	bf00      	nop
 8012080:	2000674c 	.word	0x2000674c

08012084 <__malloc_unlock>:
 8012084:	4801      	ldr	r0, [pc, #4]	@ (801208c <__malloc_unlock+0x8>)
 8012086:	f7fe bd3d 	b.w	8010b04 <__retarget_lock_release_recursive>
 801208a:	bf00      	nop
 801208c:	2000674c 	.word	0x2000674c

08012090 <_Balloc>:
 8012090:	b570      	push	{r4, r5, r6, lr}
 8012092:	69c6      	ldr	r6, [r0, #28]
 8012094:	4604      	mov	r4, r0
 8012096:	460d      	mov	r5, r1
 8012098:	b976      	cbnz	r6, 80120b8 <_Balloc+0x28>
 801209a:	2010      	movs	r0, #16
 801209c:	f7ff ff30 	bl	8011f00 <malloc>
 80120a0:	4602      	mov	r2, r0
 80120a2:	61e0      	str	r0, [r4, #28]
 80120a4:	b920      	cbnz	r0, 80120b0 <_Balloc+0x20>
 80120a6:	4b18      	ldr	r3, [pc, #96]	@ (8012108 <_Balloc+0x78>)
 80120a8:	4818      	ldr	r0, [pc, #96]	@ (801210c <_Balloc+0x7c>)
 80120aa:	216b      	movs	r1, #107	@ 0x6b
 80120ac:	f000 fe28 	bl	8012d00 <__assert_func>
 80120b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120b4:	6006      	str	r6, [r0, #0]
 80120b6:	60c6      	str	r6, [r0, #12]
 80120b8:	69e6      	ldr	r6, [r4, #28]
 80120ba:	68f3      	ldr	r3, [r6, #12]
 80120bc:	b183      	cbz	r3, 80120e0 <_Balloc+0x50>
 80120be:	69e3      	ldr	r3, [r4, #28]
 80120c0:	68db      	ldr	r3, [r3, #12]
 80120c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80120c6:	b9b8      	cbnz	r0, 80120f8 <_Balloc+0x68>
 80120c8:	2101      	movs	r1, #1
 80120ca:	fa01 f605 	lsl.w	r6, r1, r5
 80120ce:	1d72      	adds	r2, r6, #5
 80120d0:	0092      	lsls	r2, r2, #2
 80120d2:	4620      	mov	r0, r4
 80120d4:	f000 fe32 	bl	8012d3c <_calloc_r>
 80120d8:	b160      	cbz	r0, 80120f4 <_Balloc+0x64>
 80120da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80120de:	e00e      	b.n	80120fe <_Balloc+0x6e>
 80120e0:	2221      	movs	r2, #33	@ 0x21
 80120e2:	2104      	movs	r1, #4
 80120e4:	4620      	mov	r0, r4
 80120e6:	f000 fe29 	bl	8012d3c <_calloc_r>
 80120ea:	69e3      	ldr	r3, [r4, #28]
 80120ec:	60f0      	str	r0, [r6, #12]
 80120ee:	68db      	ldr	r3, [r3, #12]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d1e4      	bne.n	80120be <_Balloc+0x2e>
 80120f4:	2000      	movs	r0, #0
 80120f6:	bd70      	pop	{r4, r5, r6, pc}
 80120f8:	6802      	ldr	r2, [r0, #0]
 80120fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80120fe:	2300      	movs	r3, #0
 8012100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012104:	e7f7      	b.n	80120f6 <_Balloc+0x66>
 8012106:	bf00      	nop
 8012108:	08015607 	.word	0x08015607
 801210c:	080156e7 	.word	0x080156e7

08012110 <_Bfree>:
 8012110:	b570      	push	{r4, r5, r6, lr}
 8012112:	69c6      	ldr	r6, [r0, #28]
 8012114:	4605      	mov	r5, r0
 8012116:	460c      	mov	r4, r1
 8012118:	b976      	cbnz	r6, 8012138 <_Bfree+0x28>
 801211a:	2010      	movs	r0, #16
 801211c:	f7ff fef0 	bl	8011f00 <malloc>
 8012120:	4602      	mov	r2, r0
 8012122:	61e8      	str	r0, [r5, #28]
 8012124:	b920      	cbnz	r0, 8012130 <_Bfree+0x20>
 8012126:	4b09      	ldr	r3, [pc, #36]	@ (801214c <_Bfree+0x3c>)
 8012128:	4809      	ldr	r0, [pc, #36]	@ (8012150 <_Bfree+0x40>)
 801212a:	218f      	movs	r1, #143	@ 0x8f
 801212c:	f000 fde8 	bl	8012d00 <__assert_func>
 8012130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012134:	6006      	str	r6, [r0, #0]
 8012136:	60c6      	str	r6, [r0, #12]
 8012138:	b13c      	cbz	r4, 801214a <_Bfree+0x3a>
 801213a:	69eb      	ldr	r3, [r5, #28]
 801213c:	6862      	ldr	r2, [r4, #4]
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012144:	6021      	str	r1, [r4, #0]
 8012146:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801214a:	bd70      	pop	{r4, r5, r6, pc}
 801214c:	08015607 	.word	0x08015607
 8012150:	080156e7 	.word	0x080156e7

08012154 <__multadd>:
 8012154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012158:	690d      	ldr	r5, [r1, #16]
 801215a:	4607      	mov	r7, r0
 801215c:	460c      	mov	r4, r1
 801215e:	461e      	mov	r6, r3
 8012160:	f101 0c14 	add.w	ip, r1, #20
 8012164:	2000      	movs	r0, #0
 8012166:	f8dc 3000 	ldr.w	r3, [ip]
 801216a:	b299      	uxth	r1, r3
 801216c:	fb02 6101 	mla	r1, r2, r1, r6
 8012170:	0c1e      	lsrs	r6, r3, #16
 8012172:	0c0b      	lsrs	r3, r1, #16
 8012174:	fb02 3306 	mla	r3, r2, r6, r3
 8012178:	b289      	uxth	r1, r1
 801217a:	3001      	adds	r0, #1
 801217c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012180:	4285      	cmp	r5, r0
 8012182:	f84c 1b04 	str.w	r1, [ip], #4
 8012186:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801218a:	dcec      	bgt.n	8012166 <__multadd+0x12>
 801218c:	b30e      	cbz	r6, 80121d2 <__multadd+0x7e>
 801218e:	68a3      	ldr	r3, [r4, #8]
 8012190:	42ab      	cmp	r3, r5
 8012192:	dc19      	bgt.n	80121c8 <__multadd+0x74>
 8012194:	6861      	ldr	r1, [r4, #4]
 8012196:	4638      	mov	r0, r7
 8012198:	3101      	adds	r1, #1
 801219a:	f7ff ff79 	bl	8012090 <_Balloc>
 801219e:	4680      	mov	r8, r0
 80121a0:	b928      	cbnz	r0, 80121ae <__multadd+0x5a>
 80121a2:	4602      	mov	r2, r0
 80121a4:	4b0c      	ldr	r3, [pc, #48]	@ (80121d8 <__multadd+0x84>)
 80121a6:	480d      	ldr	r0, [pc, #52]	@ (80121dc <__multadd+0x88>)
 80121a8:	21ba      	movs	r1, #186	@ 0xba
 80121aa:	f000 fda9 	bl	8012d00 <__assert_func>
 80121ae:	6922      	ldr	r2, [r4, #16]
 80121b0:	3202      	adds	r2, #2
 80121b2:	f104 010c 	add.w	r1, r4, #12
 80121b6:	0092      	lsls	r2, r2, #2
 80121b8:	300c      	adds	r0, #12
 80121ba:	f7fe fca4 	bl	8010b06 <memcpy>
 80121be:	4621      	mov	r1, r4
 80121c0:	4638      	mov	r0, r7
 80121c2:	f7ff ffa5 	bl	8012110 <_Bfree>
 80121c6:	4644      	mov	r4, r8
 80121c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80121cc:	3501      	adds	r5, #1
 80121ce:	615e      	str	r6, [r3, #20]
 80121d0:	6125      	str	r5, [r4, #16]
 80121d2:	4620      	mov	r0, r4
 80121d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121d8:	08015676 	.word	0x08015676
 80121dc:	080156e7 	.word	0x080156e7

080121e0 <__s2b>:
 80121e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121e4:	460c      	mov	r4, r1
 80121e6:	4615      	mov	r5, r2
 80121e8:	461f      	mov	r7, r3
 80121ea:	2209      	movs	r2, #9
 80121ec:	3308      	adds	r3, #8
 80121ee:	4606      	mov	r6, r0
 80121f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80121f4:	2100      	movs	r1, #0
 80121f6:	2201      	movs	r2, #1
 80121f8:	429a      	cmp	r2, r3
 80121fa:	db09      	blt.n	8012210 <__s2b+0x30>
 80121fc:	4630      	mov	r0, r6
 80121fe:	f7ff ff47 	bl	8012090 <_Balloc>
 8012202:	b940      	cbnz	r0, 8012216 <__s2b+0x36>
 8012204:	4602      	mov	r2, r0
 8012206:	4b19      	ldr	r3, [pc, #100]	@ (801226c <__s2b+0x8c>)
 8012208:	4819      	ldr	r0, [pc, #100]	@ (8012270 <__s2b+0x90>)
 801220a:	21d3      	movs	r1, #211	@ 0xd3
 801220c:	f000 fd78 	bl	8012d00 <__assert_func>
 8012210:	0052      	lsls	r2, r2, #1
 8012212:	3101      	adds	r1, #1
 8012214:	e7f0      	b.n	80121f8 <__s2b+0x18>
 8012216:	9b08      	ldr	r3, [sp, #32]
 8012218:	6143      	str	r3, [r0, #20]
 801221a:	2d09      	cmp	r5, #9
 801221c:	f04f 0301 	mov.w	r3, #1
 8012220:	6103      	str	r3, [r0, #16]
 8012222:	dd16      	ble.n	8012252 <__s2b+0x72>
 8012224:	f104 0909 	add.w	r9, r4, #9
 8012228:	46c8      	mov	r8, r9
 801222a:	442c      	add	r4, r5
 801222c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012230:	4601      	mov	r1, r0
 8012232:	3b30      	subs	r3, #48	@ 0x30
 8012234:	220a      	movs	r2, #10
 8012236:	4630      	mov	r0, r6
 8012238:	f7ff ff8c 	bl	8012154 <__multadd>
 801223c:	45a0      	cmp	r8, r4
 801223e:	d1f5      	bne.n	801222c <__s2b+0x4c>
 8012240:	f1a5 0408 	sub.w	r4, r5, #8
 8012244:	444c      	add	r4, r9
 8012246:	1b2d      	subs	r5, r5, r4
 8012248:	1963      	adds	r3, r4, r5
 801224a:	42bb      	cmp	r3, r7
 801224c:	db04      	blt.n	8012258 <__s2b+0x78>
 801224e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012252:	340a      	adds	r4, #10
 8012254:	2509      	movs	r5, #9
 8012256:	e7f6      	b.n	8012246 <__s2b+0x66>
 8012258:	f814 3b01 	ldrb.w	r3, [r4], #1
 801225c:	4601      	mov	r1, r0
 801225e:	3b30      	subs	r3, #48	@ 0x30
 8012260:	220a      	movs	r2, #10
 8012262:	4630      	mov	r0, r6
 8012264:	f7ff ff76 	bl	8012154 <__multadd>
 8012268:	e7ee      	b.n	8012248 <__s2b+0x68>
 801226a:	bf00      	nop
 801226c:	08015676 	.word	0x08015676
 8012270:	080156e7 	.word	0x080156e7

08012274 <__hi0bits>:
 8012274:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012278:	4603      	mov	r3, r0
 801227a:	bf36      	itet	cc
 801227c:	0403      	lslcc	r3, r0, #16
 801227e:	2000      	movcs	r0, #0
 8012280:	2010      	movcc	r0, #16
 8012282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012286:	bf3c      	itt	cc
 8012288:	021b      	lslcc	r3, r3, #8
 801228a:	3008      	addcc	r0, #8
 801228c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012290:	bf3c      	itt	cc
 8012292:	011b      	lslcc	r3, r3, #4
 8012294:	3004      	addcc	r0, #4
 8012296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801229a:	bf3c      	itt	cc
 801229c:	009b      	lslcc	r3, r3, #2
 801229e:	3002      	addcc	r0, #2
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	db05      	blt.n	80122b0 <__hi0bits+0x3c>
 80122a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80122a8:	f100 0001 	add.w	r0, r0, #1
 80122ac:	bf08      	it	eq
 80122ae:	2020      	moveq	r0, #32
 80122b0:	4770      	bx	lr

080122b2 <__lo0bits>:
 80122b2:	6803      	ldr	r3, [r0, #0]
 80122b4:	4602      	mov	r2, r0
 80122b6:	f013 0007 	ands.w	r0, r3, #7
 80122ba:	d00b      	beq.n	80122d4 <__lo0bits+0x22>
 80122bc:	07d9      	lsls	r1, r3, #31
 80122be:	d421      	bmi.n	8012304 <__lo0bits+0x52>
 80122c0:	0798      	lsls	r0, r3, #30
 80122c2:	bf49      	itett	mi
 80122c4:	085b      	lsrmi	r3, r3, #1
 80122c6:	089b      	lsrpl	r3, r3, #2
 80122c8:	2001      	movmi	r0, #1
 80122ca:	6013      	strmi	r3, [r2, #0]
 80122cc:	bf5c      	itt	pl
 80122ce:	6013      	strpl	r3, [r2, #0]
 80122d0:	2002      	movpl	r0, #2
 80122d2:	4770      	bx	lr
 80122d4:	b299      	uxth	r1, r3
 80122d6:	b909      	cbnz	r1, 80122dc <__lo0bits+0x2a>
 80122d8:	0c1b      	lsrs	r3, r3, #16
 80122da:	2010      	movs	r0, #16
 80122dc:	b2d9      	uxtb	r1, r3
 80122de:	b909      	cbnz	r1, 80122e4 <__lo0bits+0x32>
 80122e0:	3008      	adds	r0, #8
 80122e2:	0a1b      	lsrs	r3, r3, #8
 80122e4:	0719      	lsls	r1, r3, #28
 80122e6:	bf04      	itt	eq
 80122e8:	091b      	lsreq	r3, r3, #4
 80122ea:	3004      	addeq	r0, #4
 80122ec:	0799      	lsls	r1, r3, #30
 80122ee:	bf04      	itt	eq
 80122f0:	089b      	lsreq	r3, r3, #2
 80122f2:	3002      	addeq	r0, #2
 80122f4:	07d9      	lsls	r1, r3, #31
 80122f6:	d403      	bmi.n	8012300 <__lo0bits+0x4e>
 80122f8:	085b      	lsrs	r3, r3, #1
 80122fa:	f100 0001 	add.w	r0, r0, #1
 80122fe:	d003      	beq.n	8012308 <__lo0bits+0x56>
 8012300:	6013      	str	r3, [r2, #0]
 8012302:	4770      	bx	lr
 8012304:	2000      	movs	r0, #0
 8012306:	4770      	bx	lr
 8012308:	2020      	movs	r0, #32
 801230a:	4770      	bx	lr

0801230c <__i2b>:
 801230c:	b510      	push	{r4, lr}
 801230e:	460c      	mov	r4, r1
 8012310:	2101      	movs	r1, #1
 8012312:	f7ff febd 	bl	8012090 <_Balloc>
 8012316:	4602      	mov	r2, r0
 8012318:	b928      	cbnz	r0, 8012326 <__i2b+0x1a>
 801231a:	4b05      	ldr	r3, [pc, #20]	@ (8012330 <__i2b+0x24>)
 801231c:	4805      	ldr	r0, [pc, #20]	@ (8012334 <__i2b+0x28>)
 801231e:	f240 1145 	movw	r1, #325	@ 0x145
 8012322:	f000 fced 	bl	8012d00 <__assert_func>
 8012326:	2301      	movs	r3, #1
 8012328:	6144      	str	r4, [r0, #20]
 801232a:	6103      	str	r3, [r0, #16]
 801232c:	bd10      	pop	{r4, pc}
 801232e:	bf00      	nop
 8012330:	08015676 	.word	0x08015676
 8012334:	080156e7 	.word	0x080156e7

08012338 <__multiply>:
 8012338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801233c:	4617      	mov	r7, r2
 801233e:	690a      	ldr	r2, [r1, #16]
 8012340:	693b      	ldr	r3, [r7, #16]
 8012342:	429a      	cmp	r2, r3
 8012344:	bfa8      	it	ge
 8012346:	463b      	movge	r3, r7
 8012348:	4689      	mov	r9, r1
 801234a:	bfa4      	itt	ge
 801234c:	460f      	movge	r7, r1
 801234e:	4699      	movge	r9, r3
 8012350:	693d      	ldr	r5, [r7, #16]
 8012352:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	6879      	ldr	r1, [r7, #4]
 801235a:	eb05 060a 	add.w	r6, r5, sl
 801235e:	42b3      	cmp	r3, r6
 8012360:	b085      	sub	sp, #20
 8012362:	bfb8      	it	lt
 8012364:	3101      	addlt	r1, #1
 8012366:	f7ff fe93 	bl	8012090 <_Balloc>
 801236a:	b930      	cbnz	r0, 801237a <__multiply+0x42>
 801236c:	4602      	mov	r2, r0
 801236e:	4b41      	ldr	r3, [pc, #260]	@ (8012474 <__multiply+0x13c>)
 8012370:	4841      	ldr	r0, [pc, #260]	@ (8012478 <__multiply+0x140>)
 8012372:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012376:	f000 fcc3 	bl	8012d00 <__assert_func>
 801237a:	f100 0414 	add.w	r4, r0, #20
 801237e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8012382:	4623      	mov	r3, r4
 8012384:	2200      	movs	r2, #0
 8012386:	4573      	cmp	r3, lr
 8012388:	d320      	bcc.n	80123cc <__multiply+0x94>
 801238a:	f107 0814 	add.w	r8, r7, #20
 801238e:	f109 0114 	add.w	r1, r9, #20
 8012392:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8012396:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801239a:	9302      	str	r3, [sp, #8]
 801239c:	1beb      	subs	r3, r5, r7
 801239e:	3b15      	subs	r3, #21
 80123a0:	f023 0303 	bic.w	r3, r3, #3
 80123a4:	3304      	adds	r3, #4
 80123a6:	3715      	adds	r7, #21
 80123a8:	42bd      	cmp	r5, r7
 80123aa:	bf38      	it	cc
 80123ac:	2304      	movcc	r3, #4
 80123ae:	9301      	str	r3, [sp, #4]
 80123b0:	9b02      	ldr	r3, [sp, #8]
 80123b2:	9103      	str	r1, [sp, #12]
 80123b4:	428b      	cmp	r3, r1
 80123b6:	d80c      	bhi.n	80123d2 <__multiply+0x9a>
 80123b8:	2e00      	cmp	r6, #0
 80123ba:	dd03      	ble.n	80123c4 <__multiply+0x8c>
 80123bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d055      	beq.n	8012470 <__multiply+0x138>
 80123c4:	6106      	str	r6, [r0, #16]
 80123c6:	b005      	add	sp, #20
 80123c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123cc:	f843 2b04 	str.w	r2, [r3], #4
 80123d0:	e7d9      	b.n	8012386 <__multiply+0x4e>
 80123d2:	f8b1 a000 	ldrh.w	sl, [r1]
 80123d6:	f1ba 0f00 	cmp.w	sl, #0
 80123da:	d01f      	beq.n	801241c <__multiply+0xe4>
 80123dc:	46c4      	mov	ip, r8
 80123de:	46a1      	mov	r9, r4
 80123e0:	2700      	movs	r7, #0
 80123e2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80123e6:	f8d9 3000 	ldr.w	r3, [r9]
 80123ea:	fa1f fb82 	uxth.w	fp, r2
 80123ee:	b29b      	uxth	r3, r3
 80123f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80123f4:	443b      	add	r3, r7
 80123f6:	f8d9 7000 	ldr.w	r7, [r9]
 80123fa:	0c12      	lsrs	r2, r2, #16
 80123fc:	0c3f      	lsrs	r7, r7, #16
 80123fe:	fb0a 7202 	mla	r2, sl, r2, r7
 8012402:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8012406:	b29b      	uxth	r3, r3
 8012408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801240c:	4565      	cmp	r5, ip
 801240e:	f849 3b04 	str.w	r3, [r9], #4
 8012412:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8012416:	d8e4      	bhi.n	80123e2 <__multiply+0xaa>
 8012418:	9b01      	ldr	r3, [sp, #4]
 801241a:	50e7      	str	r7, [r4, r3]
 801241c:	9b03      	ldr	r3, [sp, #12]
 801241e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012422:	3104      	adds	r1, #4
 8012424:	f1b9 0f00 	cmp.w	r9, #0
 8012428:	d020      	beq.n	801246c <__multiply+0x134>
 801242a:	6823      	ldr	r3, [r4, #0]
 801242c:	4647      	mov	r7, r8
 801242e:	46a4      	mov	ip, r4
 8012430:	f04f 0a00 	mov.w	sl, #0
 8012434:	f8b7 b000 	ldrh.w	fp, [r7]
 8012438:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801243c:	fb09 220b 	mla	r2, r9, fp, r2
 8012440:	4452      	add	r2, sl
 8012442:	b29b      	uxth	r3, r3
 8012444:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012448:	f84c 3b04 	str.w	r3, [ip], #4
 801244c:	f857 3b04 	ldr.w	r3, [r7], #4
 8012450:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012454:	f8bc 3000 	ldrh.w	r3, [ip]
 8012458:	fb09 330a 	mla	r3, r9, sl, r3
 801245c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012460:	42bd      	cmp	r5, r7
 8012462:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012466:	d8e5      	bhi.n	8012434 <__multiply+0xfc>
 8012468:	9a01      	ldr	r2, [sp, #4]
 801246a:	50a3      	str	r3, [r4, r2]
 801246c:	3404      	adds	r4, #4
 801246e:	e79f      	b.n	80123b0 <__multiply+0x78>
 8012470:	3e01      	subs	r6, #1
 8012472:	e7a1      	b.n	80123b8 <__multiply+0x80>
 8012474:	08015676 	.word	0x08015676
 8012478:	080156e7 	.word	0x080156e7

0801247c <__pow5mult>:
 801247c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012480:	4615      	mov	r5, r2
 8012482:	f012 0203 	ands.w	r2, r2, #3
 8012486:	4607      	mov	r7, r0
 8012488:	460e      	mov	r6, r1
 801248a:	d007      	beq.n	801249c <__pow5mult+0x20>
 801248c:	4c25      	ldr	r4, [pc, #148]	@ (8012524 <__pow5mult+0xa8>)
 801248e:	3a01      	subs	r2, #1
 8012490:	2300      	movs	r3, #0
 8012492:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012496:	f7ff fe5d 	bl	8012154 <__multadd>
 801249a:	4606      	mov	r6, r0
 801249c:	10ad      	asrs	r5, r5, #2
 801249e:	d03d      	beq.n	801251c <__pow5mult+0xa0>
 80124a0:	69fc      	ldr	r4, [r7, #28]
 80124a2:	b97c      	cbnz	r4, 80124c4 <__pow5mult+0x48>
 80124a4:	2010      	movs	r0, #16
 80124a6:	f7ff fd2b 	bl	8011f00 <malloc>
 80124aa:	4602      	mov	r2, r0
 80124ac:	61f8      	str	r0, [r7, #28]
 80124ae:	b928      	cbnz	r0, 80124bc <__pow5mult+0x40>
 80124b0:	4b1d      	ldr	r3, [pc, #116]	@ (8012528 <__pow5mult+0xac>)
 80124b2:	481e      	ldr	r0, [pc, #120]	@ (801252c <__pow5mult+0xb0>)
 80124b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80124b8:	f000 fc22 	bl	8012d00 <__assert_func>
 80124bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124c0:	6004      	str	r4, [r0, #0]
 80124c2:	60c4      	str	r4, [r0, #12]
 80124c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80124c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124cc:	b94c      	cbnz	r4, 80124e2 <__pow5mult+0x66>
 80124ce:	f240 2171 	movw	r1, #625	@ 0x271
 80124d2:	4638      	mov	r0, r7
 80124d4:	f7ff ff1a 	bl	801230c <__i2b>
 80124d8:	2300      	movs	r3, #0
 80124da:	f8c8 0008 	str.w	r0, [r8, #8]
 80124de:	4604      	mov	r4, r0
 80124e0:	6003      	str	r3, [r0, #0]
 80124e2:	f04f 0900 	mov.w	r9, #0
 80124e6:	07eb      	lsls	r3, r5, #31
 80124e8:	d50a      	bpl.n	8012500 <__pow5mult+0x84>
 80124ea:	4631      	mov	r1, r6
 80124ec:	4622      	mov	r2, r4
 80124ee:	4638      	mov	r0, r7
 80124f0:	f7ff ff22 	bl	8012338 <__multiply>
 80124f4:	4631      	mov	r1, r6
 80124f6:	4680      	mov	r8, r0
 80124f8:	4638      	mov	r0, r7
 80124fa:	f7ff fe09 	bl	8012110 <_Bfree>
 80124fe:	4646      	mov	r6, r8
 8012500:	106d      	asrs	r5, r5, #1
 8012502:	d00b      	beq.n	801251c <__pow5mult+0xa0>
 8012504:	6820      	ldr	r0, [r4, #0]
 8012506:	b938      	cbnz	r0, 8012518 <__pow5mult+0x9c>
 8012508:	4622      	mov	r2, r4
 801250a:	4621      	mov	r1, r4
 801250c:	4638      	mov	r0, r7
 801250e:	f7ff ff13 	bl	8012338 <__multiply>
 8012512:	6020      	str	r0, [r4, #0]
 8012514:	f8c0 9000 	str.w	r9, [r0]
 8012518:	4604      	mov	r4, r0
 801251a:	e7e4      	b.n	80124e6 <__pow5mult+0x6a>
 801251c:	4630      	mov	r0, r6
 801251e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012522:	bf00      	nop
 8012524:	080158e4 	.word	0x080158e4
 8012528:	08015607 	.word	0x08015607
 801252c:	080156e7 	.word	0x080156e7

08012530 <__lshift>:
 8012530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012534:	460c      	mov	r4, r1
 8012536:	6849      	ldr	r1, [r1, #4]
 8012538:	6923      	ldr	r3, [r4, #16]
 801253a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801253e:	68a3      	ldr	r3, [r4, #8]
 8012540:	4607      	mov	r7, r0
 8012542:	4691      	mov	r9, r2
 8012544:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012548:	f108 0601 	add.w	r6, r8, #1
 801254c:	42b3      	cmp	r3, r6
 801254e:	db0b      	blt.n	8012568 <__lshift+0x38>
 8012550:	4638      	mov	r0, r7
 8012552:	f7ff fd9d 	bl	8012090 <_Balloc>
 8012556:	4605      	mov	r5, r0
 8012558:	b948      	cbnz	r0, 801256e <__lshift+0x3e>
 801255a:	4602      	mov	r2, r0
 801255c:	4b28      	ldr	r3, [pc, #160]	@ (8012600 <__lshift+0xd0>)
 801255e:	4829      	ldr	r0, [pc, #164]	@ (8012604 <__lshift+0xd4>)
 8012560:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012564:	f000 fbcc 	bl	8012d00 <__assert_func>
 8012568:	3101      	adds	r1, #1
 801256a:	005b      	lsls	r3, r3, #1
 801256c:	e7ee      	b.n	801254c <__lshift+0x1c>
 801256e:	2300      	movs	r3, #0
 8012570:	f100 0114 	add.w	r1, r0, #20
 8012574:	f100 0210 	add.w	r2, r0, #16
 8012578:	4618      	mov	r0, r3
 801257a:	4553      	cmp	r3, sl
 801257c:	db33      	blt.n	80125e6 <__lshift+0xb6>
 801257e:	6920      	ldr	r0, [r4, #16]
 8012580:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012584:	f104 0314 	add.w	r3, r4, #20
 8012588:	f019 091f 	ands.w	r9, r9, #31
 801258c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012590:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012594:	d02b      	beq.n	80125ee <__lshift+0xbe>
 8012596:	f1c9 0e20 	rsb	lr, r9, #32
 801259a:	468a      	mov	sl, r1
 801259c:	2200      	movs	r2, #0
 801259e:	6818      	ldr	r0, [r3, #0]
 80125a0:	fa00 f009 	lsl.w	r0, r0, r9
 80125a4:	4310      	orrs	r0, r2
 80125a6:	f84a 0b04 	str.w	r0, [sl], #4
 80125aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80125ae:	459c      	cmp	ip, r3
 80125b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80125b4:	d8f3      	bhi.n	801259e <__lshift+0x6e>
 80125b6:	ebac 0304 	sub.w	r3, ip, r4
 80125ba:	3b15      	subs	r3, #21
 80125bc:	f023 0303 	bic.w	r3, r3, #3
 80125c0:	3304      	adds	r3, #4
 80125c2:	f104 0015 	add.w	r0, r4, #21
 80125c6:	4560      	cmp	r0, ip
 80125c8:	bf88      	it	hi
 80125ca:	2304      	movhi	r3, #4
 80125cc:	50ca      	str	r2, [r1, r3]
 80125ce:	b10a      	cbz	r2, 80125d4 <__lshift+0xa4>
 80125d0:	f108 0602 	add.w	r6, r8, #2
 80125d4:	3e01      	subs	r6, #1
 80125d6:	4638      	mov	r0, r7
 80125d8:	612e      	str	r6, [r5, #16]
 80125da:	4621      	mov	r1, r4
 80125dc:	f7ff fd98 	bl	8012110 <_Bfree>
 80125e0:	4628      	mov	r0, r5
 80125e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80125ea:	3301      	adds	r3, #1
 80125ec:	e7c5      	b.n	801257a <__lshift+0x4a>
 80125ee:	3904      	subs	r1, #4
 80125f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80125f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80125f8:	459c      	cmp	ip, r3
 80125fa:	d8f9      	bhi.n	80125f0 <__lshift+0xc0>
 80125fc:	e7ea      	b.n	80125d4 <__lshift+0xa4>
 80125fe:	bf00      	nop
 8012600:	08015676 	.word	0x08015676
 8012604:	080156e7 	.word	0x080156e7

08012608 <__mcmp>:
 8012608:	690a      	ldr	r2, [r1, #16]
 801260a:	4603      	mov	r3, r0
 801260c:	6900      	ldr	r0, [r0, #16]
 801260e:	1a80      	subs	r0, r0, r2
 8012610:	b530      	push	{r4, r5, lr}
 8012612:	d10e      	bne.n	8012632 <__mcmp+0x2a>
 8012614:	3314      	adds	r3, #20
 8012616:	3114      	adds	r1, #20
 8012618:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801261c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012620:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012624:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012628:	4295      	cmp	r5, r2
 801262a:	d003      	beq.n	8012634 <__mcmp+0x2c>
 801262c:	d205      	bcs.n	801263a <__mcmp+0x32>
 801262e:	f04f 30ff 	mov.w	r0, #4294967295
 8012632:	bd30      	pop	{r4, r5, pc}
 8012634:	42a3      	cmp	r3, r4
 8012636:	d3f3      	bcc.n	8012620 <__mcmp+0x18>
 8012638:	e7fb      	b.n	8012632 <__mcmp+0x2a>
 801263a:	2001      	movs	r0, #1
 801263c:	e7f9      	b.n	8012632 <__mcmp+0x2a>
	...

08012640 <__mdiff>:
 8012640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012644:	4689      	mov	r9, r1
 8012646:	4606      	mov	r6, r0
 8012648:	4611      	mov	r1, r2
 801264a:	4648      	mov	r0, r9
 801264c:	4614      	mov	r4, r2
 801264e:	f7ff ffdb 	bl	8012608 <__mcmp>
 8012652:	1e05      	subs	r5, r0, #0
 8012654:	d112      	bne.n	801267c <__mdiff+0x3c>
 8012656:	4629      	mov	r1, r5
 8012658:	4630      	mov	r0, r6
 801265a:	f7ff fd19 	bl	8012090 <_Balloc>
 801265e:	4602      	mov	r2, r0
 8012660:	b928      	cbnz	r0, 801266e <__mdiff+0x2e>
 8012662:	4b3f      	ldr	r3, [pc, #252]	@ (8012760 <__mdiff+0x120>)
 8012664:	f240 2137 	movw	r1, #567	@ 0x237
 8012668:	483e      	ldr	r0, [pc, #248]	@ (8012764 <__mdiff+0x124>)
 801266a:	f000 fb49 	bl	8012d00 <__assert_func>
 801266e:	2301      	movs	r3, #1
 8012670:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012674:	4610      	mov	r0, r2
 8012676:	b003      	add	sp, #12
 8012678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801267c:	bfbc      	itt	lt
 801267e:	464b      	movlt	r3, r9
 8012680:	46a1      	movlt	r9, r4
 8012682:	4630      	mov	r0, r6
 8012684:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012688:	bfba      	itte	lt
 801268a:	461c      	movlt	r4, r3
 801268c:	2501      	movlt	r5, #1
 801268e:	2500      	movge	r5, #0
 8012690:	f7ff fcfe 	bl	8012090 <_Balloc>
 8012694:	4602      	mov	r2, r0
 8012696:	b918      	cbnz	r0, 80126a0 <__mdiff+0x60>
 8012698:	4b31      	ldr	r3, [pc, #196]	@ (8012760 <__mdiff+0x120>)
 801269a:	f240 2145 	movw	r1, #581	@ 0x245
 801269e:	e7e3      	b.n	8012668 <__mdiff+0x28>
 80126a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80126a4:	6926      	ldr	r6, [r4, #16]
 80126a6:	60c5      	str	r5, [r0, #12]
 80126a8:	f109 0310 	add.w	r3, r9, #16
 80126ac:	f109 0514 	add.w	r5, r9, #20
 80126b0:	f104 0e14 	add.w	lr, r4, #20
 80126b4:	f100 0b14 	add.w	fp, r0, #20
 80126b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80126bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80126c0:	9301      	str	r3, [sp, #4]
 80126c2:	46d9      	mov	r9, fp
 80126c4:	f04f 0c00 	mov.w	ip, #0
 80126c8:	9b01      	ldr	r3, [sp, #4]
 80126ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80126ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80126d2:	9301      	str	r3, [sp, #4]
 80126d4:	fa1f f38a 	uxth.w	r3, sl
 80126d8:	4619      	mov	r1, r3
 80126da:	b283      	uxth	r3, r0
 80126dc:	1acb      	subs	r3, r1, r3
 80126de:	0c00      	lsrs	r0, r0, #16
 80126e0:	4463      	add	r3, ip
 80126e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80126e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80126f0:	4576      	cmp	r6, lr
 80126f2:	f849 3b04 	str.w	r3, [r9], #4
 80126f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80126fa:	d8e5      	bhi.n	80126c8 <__mdiff+0x88>
 80126fc:	1b33      	subs	r3, r6, r4
 80126fe:	3b15      	subs	r3, #21
 8012700:	f023 0303 	bic.w	r3, r3, #3
 8012704:	3415      	adds	r4, #21
 8012706:	3304      	adds	r3, #4
 8012708:	42a6      	cmp	r6, r4
 801270a:	bf38      	it	cc
 801270c:	2304      	movcc	r3, #4
 801270e:	441d      	add	r5, r3
 8012710:	445b      	add	r3, fp
 8012712:	461e      	mov	r6, r3
 8012714:	462c      	mov	r4, r5
 8012716:	4544      	cmp	r4, r8
 8012718:	d30e      	bcc.n	8012738 <__mdiff+0xf8>
 801271a:	f108 0103 	add.w	r1, r8, #3
 801271e:	1b49      	subs	r1, r1, r5
 8012720:	f021 0103 	bic.w	r1, r1, #3
 8012724:	3d03      	subs	r5, #3
 8012726:	45a8      	cmp	r8, r5
 8012728:	bf38      	it	cc
 801272a:	2100      	movcc	r1, #0
 801272c:	440b      	add	r3, r1
 801272e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012732:	b191      	cbz	r1, 801275a <__mdiff+0x11a>
 8012734:	6117      	str	r7, [r2, #16]
 8012736:	e79d      	b.n	8012674 <__mdiff+0x34>
 8012738:	f854 1b04 	ldr.w	r1, [r4], #4
 801273c:	46e6      	mov	lr, ip
 801273e:	0c08      	lsrs	r0, r1, #16
 8012740:	fa1c fc81 	uxtah	ip, ip, r1
 8012744:	4471      	add	r1, lr
 8012746:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801274a:	b289      	uxth	r1, r1
 801274c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012750:	f846 1b04 	str.w	r1, [r6], #4
 8012754:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012758:	e7dd      	b.n	8012716 <__mdiff+0xd6>
 801275a:	3f01      	subs	r7, #1
 801275c:	e7e7      	b.n	801272e <__mdiff+0xee>
 801275e:	bf00      	nop
 8012760:	08015676 	.word	0x08015676
 8012764:	080156e7 	.word	0x080156e7

08012768 <__ulp>:
 8012768:	b082      	sub	sp, #8
 801276a:	ed8d 0b00 	vstr	d0, [sp]
 801276e:	9a01      	ldr	r2, [sp, #4]
 8012770:	4b0f      	ldr	r3, [pc, #60]	@ (80127b0 <__ulp+0x48>)
 8012772:	4013      	ands	r3, r2
 8012774:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012778:	2b00      	cmp	r3, #0
 801277a:	dc08      	bgt.n	801278e <__ulp+0x26>
 801277c:	425b      	negs	r3, r3
 801277e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012782:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012786:	da04      	bge.n	8012792 <__ulp+0x2a>
 8012788:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801278c:	4113      	asrs	r3, r2
 801278e:	2200      	movs	r2, #0
 8012790:	e008      	b.n	80127a4 <__ulp+0x3c>
 8012792:	f1a2 0314 	sub.w	r3, r2, #20
 8012796:	2b1e      	cmp	r3, #30
 8012798:	bfda      	itte	le
 801279a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801279e:	40da      	lsrle	r2, r3
 80127a0:	2201      	movgt	r2, #1
 80127a2:	2300      	movs	r3, #0
 80127a4:	4619      	mov	r1, r3
 80127a6:	4610      	mov	r0, r2
 80127a8:	ec41 0b10 	vmov	d0, r0, r1
 80127ac:	b002      	add	sp, #8
 80127ae:	4770      	bx	lr
 80127b0:	7ff00000 	.word	0x7ff00000

080127b4 <__b2d>:
 80127b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127b8:	6906      	ldr	r6, [r0, #16]
 80127ba:	f100 0814 	add.w	r8, r0, #20
 80127be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80127c2:	1f37      	subs	r7, r6, #4
 80127c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80127c8:	4610      	mov	r0, r2
 80127ca:	f7ff fd53 	bl	8012274 <__hi0bits>
 80127ce:	f1c0 0320 	rsb	r3, r0, #32
 80127d2:	280a      	cmp	r0, #10
 80127d4:	600b      	str	r3, [r1, #0]
 80127d6:	491b      	ldr	r1, [pc, #108]	@ (8012844 <__b2d+0x90>)
 80127d8:	dc15      	bgt.n	8012806 <__b2d+0x52>
 80127da:	f1c0 0c0b 	rsb	ip, r0, #11
 80127de:	fa22 f30c 	lsr.w	r3, r2, ip
 80127e2:	45b8      	cmp	r8, r7
 80127e4:	ea43 0501 	orr.w	r5, r3, r1
 80127e8:	bf34      	ite	cc
 80127ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80127ee:	2300      	movcs	r3, #0
 80127f0:	3015      	adds	r0, #21
 80127f2:	fa02 f000 	lsl.w	r0, r2, r0
 80127f6:	fa23 f30c 	lsr.w	r3, r3, ip
 80127fa:	4303      	orrs	r3, r0
 80127fc:	461c      	mov	r4, r3
 80127fe:	ec45 4b10 	vmov	d0, r4, r5
 8012802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012806:	45b8      	cmp	r8, r7
 8012808:	bf3a      	itte	cc
 801280a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801280e:	f1a6 0708 	subcc.w	r7, r6, #8
 8012812:	2300      	movcs	r3, #0
 8012814:	380b      	subs	r0, #11
 8012816:	d012      	beq.n	801283e <__b2d+0x8a>
 8012818:	f1c0 0120 	rsb	r1, r0, #32
 801281c:	fa23 f401 	lsr.w	r4, r3, r1
 8012820:	4082      	lsls	r2, r0
 8012822:	4322      	orrs	r2, r4
 8012824:	4547      	cmp	r7, r8
 8012826:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801282a:	bf8c      	ite	hi
 801282c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012830:	2200      	movls	r2, #0
 8012832:	4083      	lsls	r3, r0
 8012834:	40ca      	lsrs	r2, r1
 8012836:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801283a:	4313      	orrs	r3, r2
 801283c:	e7de      	b.n	80127fc <__b2d+0x48>
 801283e:	ea42 0501 	orr.w	r5, r2, r1
 8012842:	e7db      	b.n	80127fc <__b2d+0x48>
 8012844:	3ff00000 	.word	0x3ff00000

08012848 <__d2b>:
 8012848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801284c:	460f      	mov	r7, r1
 801284e:	2101      	movs	r1, #1
 8012850:	ec59 8b10 	vmov	r8, r9, d0
 8012854:	4616      	mov	r6, r2
 8012856:	f7ff fc1b 	bl	8012090 <_Balloc>
 801285a:	4604      	mov	r4, r0
 801285c:	b930      	cbnz	r0, 801286c <__d2b+0x24>
 801285e:	4602      	mov	r2, r0
 8012860:	4b23      	ldr	r3, [pc, #140]	@ (80128f0 <__d2b+0xa8>)
 8012862:	4824      	ldr	r0, [pc, #144]	@ (80128f4 <__d2b+0xac>)
 8012864:	f240 310f 	movw	r1, #783	@ 0x30f
 8012868:	f000 fa4a 	bl	8012d00 <__assert_func>
 801286c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012874:	b10d      	cbz	r5, 801287a <__d2b+0x32>
 8012876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801287a:	9301      	str	r3, [sp, #4]
 801287c:	f1b8 0300 	subs.w	r3, r8, #0
 8012880:	d023      	beq.n	80128ca <__d2b+0x82>
 8012882:	4668      	mov	r0, sp
 8012884:	9300      	str	r3, [sp, #0]
 8012886:	f7ff fd14 	bl	80122b2 <__lo0bits>
 801288a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801288e:	b1d0      	cbz	r0, 80128c6 <__d2b+0x7e>
 8012890:	f1c0 0320 	rsb	r3, r0, #32
 8012894:	fa02 f303 	lsl.w	r3, r2, r3
 8012898:	430b      	orrs	r3, r1
 801289a:	40c2      	lsrs	r2, r0
 801289c:	6163      	str	r3, [r4, #20]
 801289e:	9201      	str	r2, [sp, #4]
 80128a0:	9b01      	ldr	r3, [sp, #4]
 80128a2:	61a3      	str	r3, [r4, #24]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	bf0c      	ite	eq
 80128a8:	2201      	moveq	r2, #1
 80128aa:	2202      	movne	r2, #2
 80128ac:	6122      	str	r2, [r4, #16]
 80128ae:	b1a5      	cbz	r5, 80128da <__d2b+0x92>
 80128b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80128b4:	4405      	add	r5, r0
 80128b6:	603d      	str	r5, [r7, #0]
 80128b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80128bc:	6030      	str	r0, [r6, #0]
 80128be:	4620      	mov	r0, r4
 80128c0:	b003      	add	sp, #12
 80128c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128c6:	6161      	str	r1, [r4, #20]
 80128c8:	e7ea      	b.n	80128a0 <__d2b+0x58>
 80128ca:	a801      	add	r0, sp, #4
 80128cc:	f7ff fcf1 	bl	80122b2 <__lo0bits>
 80128d0:	9b01      	ldr	r3, [sp, #4]
 80128d2:	6163      	str	r3, [r4, #20]
 80128d4:	3020      	adds	r0, #32
 80128d6:	2201      	movs	r2, #1
 80128d8:	e7e8      	b.n	80128ac <__d2b+0x64>
 80128da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80128e2:	6038      	str	r0, [r7, #0]
 80128e4:	6918      	ldr	r0, [r3, #16]
 80128e6:	f7ff fcc5 	bl	8012274 <__hi0bits>
 80128ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128ee:	e7e5      	b.n	80128bc <__d2b+0x74>
 80128f0:	08015676 	.word	0x08015676
 80128f4:	080156e7 	.word	0x080156e7

080128f8 <__ratio>:
 80128f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128fc:	b085      	sub	sp, #20
 80128fe:	e9cd 1000 	strd	r1, r0, [sp]
 8012902:	a902      	add	r1, sp, #8
 8012904:	f7ff ff56 	bl	80127b4 <__b2d>
 8012908:	9800      	ldr	r0, [sp, #0]
 801290a:	a903      	add	r1, sp, #12
 801290c:	ec55 4b10 	vmov	r4, r5, d0
 8012910:	f7ff ff50 	bl	80127b4 <__b2d>
 8012914:	9b01      	ldr	r3, [sp, #4]
 8012916:	6919      	ldr	r1, [r3, #16]
 8012918:	9b00      	ldr	r3, [sp, #0]
 801291a:	691b      	ldr	r3, [r3, #16]
 801291c:	1ac9      	subs	r1, r1, r3
 801291e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012922:	1a9b      	subs	r3, r3, r2
 8012924:	ec5b ab10 	vmov	sl, fp, d0
 8012928:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801292c:	2b00      	cmp	r3, #0
 801292e:	bfce      	itee	gt
 8012930:	462a      	movgt	r2, r5
 8012932:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012936:	465a      	movle	r2, fp
 8012938:	462f      	mov	r7, r5
 801293a:	46d9      	mov	r9, fp
 801293c:	bfcc      	ite	gt
 801293e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012942:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012946:	464b      	mov	r3, r9
 8012948:	4652      	mov	r2, sl
 801294a:	4620      	mov	r0, r4
 801294c:	4639      	mov	r1, r7
 801294e:	f7ed ff8d 	bl	800086c <__aeabi_ddiv>
 8012952:	ec41 0b10 	vmov	d0, r0, r1
 8012956:	b005      	add	sp, #20
 8012958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801295c <__copybits>:
 801295c:	3901      	subs	r1, #1
 801295e:	b570      	push	{r4, r5, r6, lr}
 8012960:	1149      	asrs	r1, r1, #5
 8012962:	6914      	ldr	r4, [r2, #16]
 8012964:	3101      	adds	r1, #1
 8012966:	f102 0314 	add.w	r3, r2, #20
 801296a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801296e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012972:	1f05      	subs	r5, r0, #4
 8012974:	42a3      	cmp	r3, r4
 8012976:	d30c      	bcc.n	8012992 <__copybits+0x36>
 8012978:	1aa3      	subs	r3, r4, r2
 801297a:	3b11      	subs	r3, #17
 801297c:	f023 0303 	bic.w	r3, r3, #3
 8012980:	3211      	adds	r2, #17
 8012982:	42a2      	cmp	r2, r4
 8012984:	bf88      	it	hi
 8012986:	2300      	movhi	r3, #0
 8012988:	4418      	add	r0, r3
 801298a:	2300      	movs	r3, #0
 801298c:	4288      	cmp	r0, r1
 801298e:	d305      	bcc.n	801299c <__copybits+0x40>
 8012990:	bd70      	pop	{r4, r5, r6, pc}
 8012992:	f853 6b04 	ldr.w	r6, [r3], #4
 8012996:	f845 6f04 	str.w	r6, [r5, #4]!
 801299a:	e7eb      	b.n	8012974 <__copybits+0x18>
 801299c:	f840 3b04 	str.w	r3, [r0], #4
 80129a0:	e7f4      	b.n	801298c <__copybits+0x30>

080129a2 <__any_on>:
 80129a2:	f100 0214 	add.w	r2, r0, #20
 80129a6:	6900      	ldr	r0, [r0, #16]
 80129a8:	114b      	asrs	r3, r1, #5
 80129aa:	4298      	cmp	r0, r3
 80129ac:	b510      	push	{r4, lr}
 80129ae:	db11      	blt.n	80129d4 <__any_on+0x32>
 80129b0:	dd0a      	ble.n	80129c8 <__any_on+0x26>
 80129b2:	f011 011f 	ands.w	r1, r1, #31
 80129b6:	d007      	beq.n	80129c8 <__any_on+0x26>
 80129b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80129bc:	fa24 f001 	lsr.w	r0, r4, r1
 80129c0:	fa00 f101 	lsl.w	r1, r0, r1
 80129c4:	428c      	cmp	r4, r1
 80129c6:	d10b      	bne.n	80129e0 <__any_on+0x3e>
 80129c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80129cc:	4293      	cmp	r3, r2
 80129ce:	d803      	bhi.n	80129d8 <__any_on+0x36>
 80129d0:	2000      	movs	r0, #0
 80129d2:	bd10      	pop	{r4, pc}
 80129d4:	4603      	mov	r3, r0
 80129d6:	e7f7      	b.n	80129c8 <__any_on+0x26>
 80129d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80129dc:	2900      	cmp	r1, #0
 80129de:	d0f5      	beq.n	80129cc <__any_on+0x2a>
 80129e0:	2001      	movs	r0, #1
 80129e2:	e7f6      	b.n	80129d2 <__any_on+0x30>

080129e4 <__ascii_wctomb>:
 80129e4:	4603      	mov	r3, r0
 80129e6:	4608      	mov	r0, r1
 80129e8:	b141      	cbz	r1, 80129fc <__ascii_wctomb+0x18>
 80129ea:	2aff      	cmp	r2, #255	@ 0xff
 80129ec:	d904      	bls.n	80129f8 <__ascii_wctomb+0x14>
 80129ee:	228a      	movs	r2, #138	@ 0x8a
 80129f0:	601a      	str	r2, [r3, #0]
 80129f2:	f04f 30ff 	mov.w	r0, #4294967295
 80129f6:	4770      	bx	lr
 80129f8:	700a      	strb	r2, [r1, #0]
 80129fa:	2001      	movs	r0, #1
 80129fc:	4770      	bx	lr

080129fe <__ssputs_r>:
 80129fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a02:	688e      	ldr	r6, [r1, #8]
 8012a04:	461f      	mov	r7, r3
 8012a06:	42be      	cmp	r6, r7
 8012a08:	680b      	ldr	r3, [r1, #0]
 8012a0a:	4682      	mov	sl, r0
 8012a0c:	460c      	mov	r4, r1
 8012a0e:	4690      	mov	r8, r2
 8012a10:	d82d      	bhi.n	8012a6e <__ssputs_r+0x70>
 8012a12:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012a16:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012a1a:	d026      	beq.n	8012a6a <__ssputs_r+0x6c>
 8012a1c:	6965      	ldr	r5, [r4, #20]
 8012a1e:	6909      	ldr	r1, [r1, #16]
 8012a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a24:	eba3 0901 	sub.w	r9, r3, r1
 8012a28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012a2c:	1c7b      	adds	r3, r7, #1
 8012a2e:	444b      	add	r3, r9
 8012a30:	106d      	asrs	r5, r5, #1
 8012a32:	429d      	cmp	r5, r3
 8012a34:	bf38      	it	cc
 8012a36:	461d      	movcc	r5, r3
 8012a38:	0553      	lsls	r3, r2, #21
 8012a3a:	d527      	bpl.n	8012a8c <__ssputs_r+0x8e>
 8012a3c:	4629      	mov	r1, r5
 8012a3e:	f7ff fa89 	bl	8011f54 <_malloc_r>
 8012a42:	4606      	mov	r6, r0
 8012a44:	b360      	cbz	r0, 8012aa0 <__ssputs_r+0xa2>
 8012a46:	6921      	ldr	r1, [r4, #16]
 8012a48:	464a      	mov	r2, r9
 8012a4a:	f7fe f85c 	bl	8010b06 <memcpy>
 8012a4e:	89a3      	ldrh	r3, [r4, #12]
 8012a50:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a58:	81a3      	strh	r3, [r4, #12]
 8012a5a:	6126      	str	r6, [r4, #16]
 8012a5c:	6165      	str	r5, [r4, #20]
 8012a5e:	444e      	add	r6, r9
 8012a60:	eba5 0509 	sub.w	r5, r5, r9
 8012a64:	6026      	str	r6, [r4, #0]
 8012a66:	60a5      	str	r5, [r4, #8]
 8012a68:	463e      	mov	r6, r7
 8012a6a:	42be      	cmp	r6, r7
 8012a6c:	d900      	bls.n	8012a70 <__ssputs_r+0x72>
 8012a6e:	463e      	mov	r6, r7
 8012a70:	6820      	ldr	r0, [r4, #0]
 8012a72:	4632      	mov	r2, r6
 8012a74:	4641      	mov	r1, r8
 8012a76:	f000 f919 	bl	8012cac <memmove>
 8012a7a:	68a3      	ldr	r3, [r4, #8]
 8012a7c:	1b9b      	subs	r3, r3, r6
 8012a7e:	60a3      	str	r3, [r4, #8]
 8012a80:	6823      	ldr	r3, [r4, #0]
 8012a82:	4433      	add	r3, r6
 8012a84:	6023      	str	r3, [r4, #0]
 8012a86:	2000      	movs	r0, #0
 8012a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a8c:	462a      	mov	r2, r5
 8012a8e:	f000 f969 	bl	8012d64 <_realloc_r>
 8012a92:	4606      	mov	r6, r0
 8012a94:	2800      	cmp	r0, #0
 8012a96:	d1e0      	bne.n	8012a5a <__ssputs_r+0x5c>
 8012a98:	6921      	ldr	r1, [r4, #16]
 8012a9a:	4650      	mov	r0, sl
 8012a9c:	f7fe feac 	bl	80117f8 <_free_r>
 8012aa0:	230c      	movs	r3, #12
 8012aa2:	f8ca 3000 	str.w	r3, [sl]
 8012aa6:	89a3      	ldrh	r3, [r4, #12]
 8012aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012aac:	81a3      	strh	r3, [r4, #12]
 8012aae:	f04f 30ff 	mov.w	r0, #4294967295
 8012ab2:	e7e9      	b.n	8012a88 <__ssputs_r+0x8a>

08012ab4 <_svfiprintf_r>:
 8012ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ab8:	4698      	mov	r8, r3
 8012aba:	898b      	ldrh	r3, [r1, #12]
 8012abc:	061b      	lsls	r3, r3, #24
 8012abe:	b09d      	sub	sp, #116	@ 0x74
 8012ac0:	4607      	mov	r7, r0
 8012ac2:	460d      	mov	r5, r1
 8012ac4:	4614      	mov	r4, r2
 8012ac6:	d510      	bpl.n	8012aea <_svfiprintf_r+0x36>
 8012ac8:	690b      	ldr	r3, [r1, #16]
 8012aca:	b973      	cbnz	r3, 8012aea <_svfiprintf_r+0x36>
 8012acc:	2140      	movs	r1, #64	@ 0x40
 8012ace:	f7ff fa41 	bl	8011f54 <_malloc_r>
 8012ad2:	6028      	str	r0, [r5, #0]
 8012ad4:	6128      	str	r0, [r5, #16]
 8012ad6:	b930      	cbnz	r0, 8012ae6 <_svfiprintf_r+0x32>
 8012ad8:	230c      	movs	r3, #12
 8012ada:	603b      	str	r3, [r7, #0]
 8012adc:	f04f 30ff 	mov.w	r0, #4294967295
 8012ae0:	b01d      	add	sp, #116	@ 0x74
 8012ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ae6:	2340      	movs	r3, #64	@ 0x40
 8012ae8:	616b      	str	r3, [r5, #20]
 8012aea:	2300      	movs	r3, #0
 8012aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8012aee:	2320      	movs	r3, #32
 8012af0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012af4:	f8cd 800c 	str.w	r8, [sp, #12]
 8012af8:	2330      	movs	r3, #48	@ 0x30
 8012afa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012c98 <_svfiprintf_r+0x1e4>
 8012afe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012b02:	f04f 0901 	mov.w	r9, #1
 8012b06:	4623      	mov	r3, r4
 8012b08:	469a      	mov	sl, r3
 8012b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b0e:	b10a      	cbz	r2, 8012b14 <_svfiprintf_r+0x60>
 8012b10:	2a25      	cmp	r2, #37	@ 0x25
 8012b12:	d1f9      	bne.n	8012b08 <_svfiprintf_r+0x54>
 8012b14:	ebba 0b04 	subs.w	fp, sl, r4
 8012b18:	d00b      	beq.n	8012b32 <_svfiprintf_r+0x7e>
 8012b1a:	465b      	mov	r3, fp
 8012b1c:	4622      	mov	r2, r4
 8012b1e:	4629      	mov	r1, r5
 8012b20:	4638      	mov	r0, r7
 8012b22:	f7ff ff6c 	bl	80129fe <__ssputs_r>
 8012b26:	3001      	adds	r0, #1
 8012b28:	f000 80a7 	beq.w	8012c7a <_svfiprintf_r+0x1c6>
 8012b2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b2e:	445a      	add	r2, fp
 8012b30:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b32:	f89a 3000 	ldrb.w	r3, [sl]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f000 809f 	beq.w	8012c7a <_svfiprintf_r+0x1c6>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b46:	f10a 0a01 	add.w	sl, sl, #1
 8012b4a:	9304      	str	r3, [sp, #16]
 8012b4c:	9307      	str	r3, [sp, #28]
 8012b4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012b52:	931a      	str	r3, [sp, #104]	@ 0x68
 8012b54:	4654      	mov	r4, sl
 8012b56:	2205      	movs	r2, #5
 8012b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b5c:	484e      	ldr	r0, [pc, #312]	@ (8012c98 <_svfiprintf_r+0x1e4>)
 8012b5e:	f7ed fb47 	bl	80001f0 <memchr>
 8012b62:	9a04      	ldr	r2, [sp, #16]
 8012b64:	b9d8      	cbnz	r0, 8012b9e <_svfiprintf_r+0xea>
 8012b66:	06d0      	lsls	r0, r2, #27
 8012b68:	bf44      	itt	mi
 8012b6a:	2320      	movmi	r3, #32
 8012b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012b70:	0711      	lsls	r1, r2, #28
 8012b72:	bf44      	itt	mi
 8012b74:	232b      	movmi	r3, #43	@ 0x2b
 8012b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8012b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012b80:	d015      	beq.n	8012bae <_svfiprintf_r+0xfa>
 8012b82:	9a07      	ldr	r2, [sp, #28]
 8012b84:	4654      	mov	r4, sl
 8012b86:	2000      	movs	r0, #0
 8012b88:	f04f 0c0a 	mov.w	ip, #10
 8012b8c:	4621      	mov	r1, r4
 8012b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b92:	3b30      	subs	r3, #48	@ 0x30
 8012b94:	2b09      	cmp	r3, #9
 8012b96:	d94b      	bls.n	8012c30 <_svfiprintf_r+0x17c>
 8012b98:	b1b0      	cbz	r0, 8012bc8 <_svfiprintf_r+0x114>
 8012b9a:	9207      	str	r2, [sp, #28]
 8012b9c:	e014      	b.n	8012bc8 <_svfiprintf_r+0x114>
 8012b9e:	eba0 0308 	sub.w	r3, r0, r8
 8012ba2:	fa09 f303 	lsl.w	r3, r9, r3
 8012ba6:	4313      	orrs	r3, r2
 8012ba8:	9304      	str	r3, [sp, #16]
 8012baa:	46a2      	mov	sl, r4
 8012bac:	e7d2      	b.n	8012b54 <_svfiprintf_r+0xa0>
 8012bae:	9b03      	ldr	r3, [sp, #12]
 8012bb0:	1d19      	adds	r1, r3, #4
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	9103      	str	r1, [sp, #12]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	bfbb      	ittet	lt
 8012bba:	425b      	neglt	r3, r3
 8012bbc:	f042 0202 	orrlt.w	r2, r2, #2
 8012bc0:	9307      	strge	r3, [sp, #28]
 8012bc2:	9307      	strlt	r3, [sp, #28]
 8012bc4:	bfb8      	it	lt
 8012bc6:	9204      	strlt	r2, [sp, #16]
 8012bc8:	7823      	ldrb	r3, [r4, #0]
 8012bca:	2b2e      	cmp	r3, #46	@ 0x2e
 8012bcc:	d10a      	bne.n	8012be4 <_svfiprintf_r+0x130>
 8012bce:	7863      	ldrb	r3, [r4, #1]
 8012bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bd2:	d132      	bne.n	8012c3a <_svfiprintf_r+0x186>
 8012bd4:	9b03      	ldr	r3, [sp, #12]
 8012bd6:	1d1a      	adds	r2, r3, #4
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	9203      	str	r2, [sp, #12]
 8012bdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012be0:	3402      	adds	r4, #2
 8012be2:	9305      	str	r3, [sp, #20]
 8012be4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012ca8 <_svfiprintf_r+0x1f4>
 8012be8:	7821      	ldrb	r1, [r4, #0]
 8012bea:	2203      	movs	r2, #3
 8012bec:	4650      	mov	r0, sl
 8012bee:	f7ed faff 	bl	80001f0 <memchr>
 8012bf2:	b138      	cbz	r0, 8012c04 <_svfiprintf_r+0x150>
 8012bf4:	9b04      	ldr	r3, [sp, #16]
 8012bf6:	eba0 000a 	sub.w	r0, r0, sl
 8012bfa:	2240      	movs	r2, #64	@ 0x40
 8012bfc:	4082      	lsls	r2, r0
 8012bfe:	4313      	orrs	r3, r2
 8012c00:	3401      	adds	r4, #1
 8012c02:	9304      	str	r3, [sp, #16]
 8012c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c08:	4824      	ldr	r0, [pc, #144]	@ (8012c9c <_svfiprintf_r+0x1e8>)
 8012c0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012c0e:	2206      	movs	r2, #6
 8012c10:	f7ed faee 	bl	80001f0 <memchr>
 8012c14:	2800      	cmp	r0, #0
 8012c16:	d036      	beq.n	8012c86 <_svfiprintf_r+0x1d2>
 8012c18:	4b21      	ldr	r3, [pc, #132]	@ (8012ca0 <_svfiprintf_r+0x1ec>)
 8012c1a:	bb1b      	cbnz	r3, 8012c64 <_svfiprintf_r+0x1b0>
 8012c1c:	9b03      	ldr	r3, [sp, #12]
 8012c1e:	3307      	adds	r3, #7
 8012c20:	f023 0307 	bic.w	r3, r3, #7
 8012c24:	3308      	adds	r3, #8
 8012c26:	9303      	str	r3, [sp, #12]
 8012c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c2a:	4433      	add	r3, r6
 8012c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c2e:	e76a      	b.n	8012b06 <_svfiprintf_r+0x52>
 8012c30:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c34:	460c      	mov	r4, r1
 8012c36:	2001      	movs	r0, #1
 8012c38:	e7a8      	b.n	8012b8c <_svfiprintf_r+0xd8>
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	3401      	adds	r4, #1
 8012c3e:	9305      	str	r3, [sp, #20]
 8012c40:	4619      	mov	r1, r3
 8012c42:	f04f 0c0a 	mov.w	ip, #10
 8012c46:	4620      	mov	r0, r4
 8012c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c4c:	3a30      	subs	r2, #48	@ 0x30
 8012c4e:	2a09      	cmp	r2, #9
 8012c50:	d903      	bls.n	8012c5a <_svfiprintf_r+0x1a6>
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d0c6      	beq.n	8012be4 <_svfiprintf_r+0x130>
 8012c56:	9105      	str	r1, [sp, #20]
 8012c58:	e7c4      	b.n	8012be4 <_svfiprintf_r+0x130>
 8012c5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c5e:	4604      	mov	r4, r0
 8012c60:	2301      	movs	r3, #1
 8012c62:	e7f0      	b.n	8012c46 <_svfiprintf_r+0x192>
 8012c64:	ab03      	add	r3, sp, #12
 8012c66:	9300      	str	r3, [sp, #0]
 8012c68:	462a      	mov	r2, r5
 8012c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8012ca4 <_svfiprintf_r+0x1f0>)
 8012c6c:	a904      	add	r1, sp, #16
 8012c6e:	4638      	mov	r0, r7
 8012c70:	f7fd f8d2 	bl	800fe18 <_printf_float>
 8012c74:	1c42      	adds	r2, r0, #1
 8012c76:	4606      	mov	r6, r0
 8012c78:	d1d6      	bne.n	8012c28 <_svfiprintf_r+0x174>
 8012c7a:	89ab      	ldrh	r3, [r5, #12]
 8012c7c:	065b      	lsls	r3, r3, #25
 8012c7e:	f53f af2d 	bmi.w	8012adc <_svfiprintf_r+0x28>
 8012c82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c84:	e72c      	b.n	8012ae0 <_svfiprintf_r+0x2c>
 8012c86:	ab03      	add	r3, sp, #12
 8012c88:	9300      	str	r3, [sp, #0]
 8012c8a:	462a      	mov	r2, r5
 8012c8c:	4b05      	ldr	r3, [pc, #20]	@ (8012ca4 <_svfiprintf_r+0x1f0>)
 8012c8e:	a904      	add	r1, sp, #16
 8012c90:	4638      	mov	r0, r7
 8012c92:	f7fd fb59 	bl	8010348 <_printf_i>
 8012c96:	e7ed      	b.n	8012c74 <_svfiprintf_r+0x1c0>
 8012c98:	08015740 	.word	0x08015740
 8012c9c:	0801574a 	.word	0x0801574a
 8012ca0:	0800fe19 	.word	0x0800fe19
 8012ca4:	080129ff 	.word	0x080129ff
 8012ca8:	08015746 	.word	0x08015746

08012cac <memmove>:
 8012cac:	4288      	cmp	r0, r1
 8012cae:	b510      	push	{r4, lr}
 8012cb0:	eb01 0402 	add.w	r4, r1, r2
 8012cb4:	d902      	bls.n	8012cbc <memmove+0x10>
 8012cb6:	4284      	cmp	r4, r0
 8012cb8:	4623      	mov	r3, r4
 8012cba:	d807      	bhi.n	8012ccc <memmove+0x20>
 8012cbc:	1e43      	subs	r3, r0, #1
 8012cbe:	42a1      	cmp	r1, r4
 8012cc0:	d008      	beq.n	8012cd4 <memmove+0x28>
 8012cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012cca:	e7f8      	b.n	8012cbe <memmove+0x12>
 8012ccc:	4402      	add	r2, r0
 8012cce:	4601      	mov	r1, r0
 8012cd0:	428a      	cmp	r2, r1
 8012cd2:	d100      	bne.n	8012cd6 <memmove+0x2a>
 8012cd4:	bd10      	pop	{r4, pc}
 8012cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012cde:	e7f7      	b.n	8012cd0 <memmove+0x24>

08012ce0 <_sbrk_r>:
 8012ce0:	b538      	push	{r3, r4, r5, lr}
 8012ce2:	4d06      	ldr	r5, [pc, #24]	@ (8012cfc <_sbrk_r+0x1c>)
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	4604      	mov	r4, r0
 8012ce8:	4608      	mov	r0, r1
 8012cea:	602b      	str	r3, [r5, #0]
 8012cec:	f7ee fec4 	bl	8001a78 <_sbrk>
 8012cf0:	1c43      	adds	r3, r0, #1
 8012cf2:	d102      	bne.n	8012cfa <_sbrk_r+0x1a>
 8012cf4:	682b      	ldr	r3, [r5, #0]
 8012cf6:	b103      	cbz	r3, 8012cfa <_sbrk_r+0x1a>
 8012cf8:	6023      	str	r3, [r4, #0]
 8012cfa:	bd38      	pop	{r3, r4, r5, pc}
 8012cfc:	20006748 	.word	0x20006748

08012d00 <__assert_func>:
 8012d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d02:	4614      	mov	r4, r2
 8012d04:	461a      	mov	r2, r3
 8012d06:	4b09      	ldr	r3, [pc, #36]	@ (8012d2c <__assert_func+0x2c>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	4605      	mov	r5, r0
 8012d0c:	68d8      	ldr	r0, [r3, #12]
 8012d0e:	b14c      	cbz	r4, 8012d24 <__assert_func+0x24>
 8012d10:	4b07      	ldr	r3, [pc, #28]	@ (8012d30 <__assert_func+0x30>)
 8012d12:	9100      	str	r1, [sp, #0]
 8012d14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d18:	4906      	ldr	r1, [pc, #24]	@ (8012d34 <__assert_func+0x34>)
 8012d1a:	462b      	mov	r3, r5
 8012d1c:	f000 f850 	bl	8012dc0 <fiprintf>
 8012d20:	f000 f860 	bl	8012de4 <abort>
 8012d24:	4b04      	ldr	r3, [pc, #16]	@ (8012d38 <__assert_func+0x38>)
 8012d26:	461c      	mov	r4, r3
 8012d28:	e7f3      	b.n	8012d12 <__assert_func+0x12>
 8012d2a:	bf00      	nop
 8012d2c:	2000018c 	.word	0x2000018c
 8012d30:	08015751 	.word	0x08015751
 8012d34:	0801575e 	.word	0x0801575e
 8012d38:	0801578c 	.word	0x0801578c

08012d3c <_calloc_r>:
 8012d3c:	b570      	push	{r4, r5, r6, lr}
 8012d3e:	fba1 5402 	umull	r5, r4, r1, r2
 8012d42:	b934      	cbnz	r4, 8012d52 <_calloc_r+0x16>
 8012d44:	4629      	mov	r1, r5
 8012d46:	f7ff f905 	bl	8011f54 <_malloc_r>
 8012d4a:	4606      	mov	r6, r0
 8012d4c:	b928      	cbnz	r0, 8012d5a <_calloc_r+0x1e>
 8012d4e:	4630      	mov	r0, r6
 8012d50:	bd70      	pop	{r4, r5, r6, pc}
 8012d52:	220c      	movs	r2, #12
 8012d54:	6002      	str	r2, [r0, #0]
 8012d56:	2600      	movs	r6, #0
 8012d58:	e7f9      	b.n	8012d4e <_calloc_r+0x12>
 8012d5a:	462a      	mov	r2, r5
 8012d5c:	4621      	mov	r1, r4
 8012d5e:	f7fd fe2e 	bl	80109be <memset>
 8012d62:	e7f4      	b.n	8012d4e <_calloc_r+0x12>

08012d64 <_realloc_r>:
 8012d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d68:	4607      	mov	r7, r0
 8012d6a:	4614      	mov	r4, r2
 8012d6c:	460d      	mov	r5, r1
 8012d6e:	b921      	cbnz	r1, 8012d7a <_realloc_r+0x16>
 8012d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d74:	4611      	mov	r1, r2
 8012d76:	f7ff b8ed 	b.w	8011f54 <_malloc_r>
 8012d7a:	b92a      	cbnz	r2, 8012d88 <_realloc_r+0x24>
 8012d7c:	f7fe fd3c 	bl	80117f8 <_free_r>
 8012d80:	4625      	mov	r5, r4
 8012d82:	4628      	mov	r0, r5
 8012d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d88:	f000 f833 	bl	8012df2 <_malloc_usable_size_r>
 8012d8c:	4284      	cmp	r4, r0
 8012d8e:	4606      	mov	r6, r0
 8012d90:	d802      	bhi.n	8012d98 <_realloc_r+0x34>
 8012d92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012d96:	d8f4      	bhi.n	8012d82 <_realloc_r+0x1e>
 8012d98:	4621      	mov	r1, r4
 8012d9a:	4638      	mov	r0, r7
 8012d9c:	f7ff f8da 	bl	8011f54 <_malloc_r>
 8012da0:	4680      	mov	r8, r0
 8012da2:	b908      	cbnz	r0, 8012da8 <_realloc_r+0x44>
 8012da4:	4645      	mov	r5, r8
 8012da6:	e7ec      	b.n	8012d82 <_realloc_r+0x1e>
 8012da8:	42b4      	cmp	r4, r6
 8012daa:	4622      	mov	r2, r4
 8012dac:	4629      	mov	r1, r5
 8012dae:	bf28      	it	cs
 8012db0:	4632      	movcs	r2, r6
 8012db2:	f7fd fea8 	bl	8010b06 <memcpy>
 8012db6:	4629      	mov	r1, r5
 8012db8:	4638      	mov	r0, r7
 8012dba:	f7fe fd1d 	bl	80117f8 <_free_r>
 8012dbe:	e7f1      	b.n	8012da4 <_realloc_r+0x40>

08012dc0 <fiprintf>:
 8012dc0:	b40e      	push	{r1, r2, r3}
 8012dc2:	b503      	push	{r0, r1, lr}
 8012dc4:	4601      	mov	r1, r0
 8012dc6:	ab03      	add	r3, sp, #12
 8012dc8:	4805      	ldr	r0, [pc, #20]	@ (8012de0 <fiprintf+0x20>)
 8012dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dce:	6800      	ldr	r0, [r0, #0]
 8012dd0:	9301      	str	r3, [sp, #4]
 8012dd2:	f000 f83f 	bl	8012e54 <_vfiprintf_r>
 8012dd6:	b002      	add	sp, #8
 8012dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ddc:	b003      	add	sp, #12
 8012dde:	4770      	bx	lr
 8012de0:	2000018c 	.word	0x2000018c

08012de4 <abort>:
 8012de4:	b508      	push	{r3, lr}
 8012de6:	2006      	movs	r0, #6
 8012de8:	f000 fa08 	bl	80131fc <raise>
 8012dec:	2001      	movs	r0, #1
 8012dee:	f7ee fdcb 	bl	8001988 <_exit>

08012df2 <_malloc_usable_size_r>:
 8012df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012df6:	1f18      	subs	r0, r3, #4
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	bfbc      	itt	lt
 8012dfc:	580b      	ldrlt	r3, [r1, r0]
 8012dfe:	18c0      	addlt	r0, r0, r3
 8012e00:	4770      	bx	lr

08012e02 <__sfputc_r>:
 8012e02:	6893      	ldr	r3, [r2, #8]
 8012e04:	3b01      	subs	r3, #1
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	b410      	push	{r4}
 8012e0a:	6093      	str	r3, [r2, #8]
 8012e0c:	da08      	bge.n	8012e20 <__sfputc_r+0x1e>
 8012e0e:	6994      	ldr	r4, [r2, #24]
 8012e10:	42a3      	cmp	r3, r4
 8012e12:	db01      	blt.n	8012e18 <__sfputc_r+0x16>
 8012e14:	290a      	cmp	r1, #10
 8012e16:	d103      	bne.n	8012e20 <__sfputc_r+0x1e>
 8012e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e1c:	f000 b932 	b.w	8013084 <__swbuf_r>
 8012e20:	6813      	ldr	r3, [r2, #0]
 8012e22:	1c58      	adds	r0, r3, #1
 8012e24:	6010      	str	r0, [r2, #0]
 8012e26:	7019      	strb	r1, [r3, #0]
 8012e28:	4608      	mov	r0, r1
 8012e2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e2e:	4770      	bx	lr

08012e30 <__sfputs_r>:
 8012e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e32:	4606      	mov	r6, r0
 8012e34:	460f      	mov	r7, r1
 8012e36:	4614      	mov	r4, r2
 8012e38:	18d5      	adds	r5, r2, r3
 8012e3a:	42ac      	cmp	r4, r5
 8012e3c:	d101      	bne.n	8012e42 <__sfputs_r+0x12>
 8012e3e:	2000      	movs	r0, #0
 8012e40:	e007      	b.n	8012e52 <__sfputs_r+0x22>
 8012e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e46:	463a      	mov	r2, r7
 8012e48:	4630      	mov	r0, r6
 8012e4a:	f7ff ffda 	bl	8012e02 <__sfputc_r>
 8012e4e:	1c43      	adds	r3, r0, #1
 8012e50:	d1f3      	bne.n	8012e3a <__sfputs_r+0xa>
 8012e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012e54 <_vfiprintf_r>:
 8012e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e58:	460d      	mov	r5, r1
 8012e5a:	b09d      	sub	sp, #116	@ 0x74
 8012e5c:	4614      	mov	r4, r2
 8012e5e:	4698      	mov	r8, r3
 8012e60:	4606      	mov	r6, r0
 8012e62:	b118      	cbz	r0, 8012e6c <_vfiprintf_r+0x18>
 8012e64:	6a03      	ldr	r3, [r0, #32]
 8012e66:	b90b      	cbnz	r3, 8012e6c <_vfiprintf_r+0x18>
 8012e68:	f7fd fcd8 	bl	801081c <__sinit>
 8012e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e6e:	07d9      	lsls	r1, r3, #31
 8012e70:	d405      	bmi.n	8012e7e <_vfiprintf_r+0x2a>
 8012e72:	89ab      	ldrh	r3, [r5, #12]
 8012e74:	059a      	lsls	r2, r3, #22
 8012e76:	d402      	bmi.n	8012e7e <_vfiprintf_r+0x2a>
 8012e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e7a:	f7fd fe42 	bl	8010b02 <__retarget_lock_acquire_recursive>
 8012e7e:	89ab      	ldrh	r3, [r5, #12]
 8012e80:	071b      	lsls	r3, r3, #28
 8012e82:	d501      	bpl.n	8012e88 <_vfiprintf_r+0x34>
 8012e84:	692b      	ldr	r3, [r5, #16]
 8012e86:	b99b      	cbnz	r3, 8012eb0 <_vfiprintf_r+0x5c>
 8012e88:	4629      	mov	r1, r5
 8012e8a:	4630      	mov	r0, r6
 8012e8c:	f000 f938 	bl	8013100 <__swsetup_r>
 8012e90:	b170      	cbz	r0, 8012eb0 <_vfiprintf_r+0x5c>
 8012e92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e94:	07dc      	lsls	r4, r3, #31
 8012e96:	d504      	bpl.n	8012ea2 <_vfiprintf_r+0x4e>
 8012e98:	f04f 30ff 	mov.w	r0, #4294967295
 8012e9c:	b01d      	add	sp, #116	@ 0x74
 8012e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea2:	89ab      	ldrh	r3, [r5, #12]
 8012ea4:	0598      	lsls	r0, r3, #22
 8012ea6:	d4f7      	bmi.n	8012e98 <_vfiprintf_r+0x44>
 8012ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012eaa:	f7fd fe2b 	bl	8010b04 <__retarget_lock_release_recursive>
 8012eae:	e7f3      	b.n	8012e98 <_vfiprintf_r+0x44>
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8012eb4:	2320      	movs	r3, #32
 8012eb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ebe:	2330      	movs	r3, #48	@ 0x30
 8012ec0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013070 <_vfiprintf_r+0x21c>
 8012ec4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012ec8:	f04f 0901 	mov.w	r9, #1
 8012ecc:	4623      	mov	r3, r4
 8012ece:	469a      	mov	sl, r3
 8012ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ed4:	b10a      	cbz	r2, 8012eda <_vfiprintf_r+0x86>
 8012ed6:	2a25      	cmp	r2, #37	@ 0x25
 8012ed8:	d1f9      	bne.n	8012ece <_vfiprintf_r+0x7a>
 8012eda:	ebba 0b04 	subs.w	fp, sl, r4
 8012ede:	d00b      	beq.n	8012ef8 <_vfiprintf_r+0xa4>
 8012ee0:	465b      	mov	r3, fp
 8012ee2:	4622      	mov	r2, r4
 8012ee4:	4629      	mov	r1, r5
 8012ee6:	4630      	mov	r0, r6
 8012ee8:	f7ff ffa2 	bl	8012e30 <__sfputs_r>
 8012eec:	3001      	adds	r0, #1
 8012eee:	f000 80a7 	beq.w	8013040 <_vfiprintf_r+0x1ec>
 8012ef2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ef4:	445a      	add	r2, fp
 8012ef6:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	f000 809f 	beq.w	8013040 <_vfiprintf_r+0x1ec>
 8012f02:	2300      	movs	r3, #0
 8012f04:	f04f 32ff 	mov.w	r2, #4294967295
 8012f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f0c:	f10a 0a01 	add.w	sl, sl, #1
 8012f10:	9304      	str	r3, [sp, #16]
 8012f12:	9307      	str	r3, [sp, #28]
 8012f14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012f18:	931a      	str	r3, [sp, #104]	@ 0x68
 8012f1a:	4654      	mov	r4, sl
 8012f1c:	2205      	movs	r2, #5
 8012f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f22:	4853      	ldr	r0, [pc, #332]	@ (8013070 <_vfiprintf_r+0x21c>)
 8012f24:	f7ed f964 	bl	80001f0 <memchr>
 8012f28:	9a04      	ldr	r2, [sp, #16]
 8012f2a:	b9d8      	cbnz	r0, 8012f64 <_vfiprintf_r+0x110>
 8012f2c:	06d1      	lsls	r1, r2, #27
 8012f2e:	bf44      	itt	mi
 8012f30:	2320      	movmi	r3, #32
 8012f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f36:	0713      	lsls	r3, r2, #28
 8012f38:	bf44      	itt	mi
 8012f3a:	232b      	movmi	r3, #43	@ 0x2b
 8012f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f40:	f89a 3000 	ldrb.w	r3, [sl]
 8012f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f46:	d015      	beq.n	8012f74 <_vfiprintf_r+0x120>
 8012f48:	9a07      	ldr	r2, [sp, #28]
 8012f4a:	4654      	mov	r4, sl
 8012f4c:	2000      	movs	r0, #0
 8012f4e:	f04f 0c0a 	mov.w	ip, #10
 8012f52:	4621      	mov	r1, r4
 8012f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f58:	3b30      	subs	r3, #48	@ 0x30
 8012f5a:	2b09      	cmp	r3, #9
 8012f5c:	d94b      	bls.n	8012ff6 <_vfiprintf_r+0x1a2>
 8012f5e:	b1b0      	cbz	r0, 8012f8e <_vfiprintf_r+0x13a>
 8012f60:	9207      	str	r2, [sp, #28]
 8012f62:	e014      	b.n	8012f8e <_vfiprintf_r+0x13a>
 8012f64:	eba0 0308 	sub.w	r3, r0, r8
 8012f68:	fa09 f303 	lsl.w	r3, r9, r3
 8012f6c:	4313      	orrs	r3, r2
 8012f6e:	9304      	str	r3, [sp, #16]
 8012f70:	46a2      	mov	sl, r4
 8012f72:	e7d2      	b.n	8012f1a <_vfiprintf_r+0xc6>
 8012f74:	9b03      	ldr	r3, [sp, #12]
 8012f76:	1d19      	adds	r1, r3, #4
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	9103      	str	r1, [sp, #12]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	bfbb      	ittet	lt
 8012f80:	425b      	neglt	r3, r3
 8012f82:	f042 0202 	orrlt.w	r2, r2, #2
 8012f86:	9307      	strge	r3, [sp, #28]
 8012f88:	9307      	strlt	r3, [sp, #28]
 8012f8a:	bfb8      	it	lt
 8012f8c:	9204      	strlt	r2, [sp, #16]
 8012f8e:	7823      	ldrb	r3, [r4, #0]
 8012f90:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f92:	d10a      	bne.n	8012faa <_vfiprintf_r+0x156>
 8012f94:	7863      	ldrb	r3, [r4, #1]
 8012f96:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f98:	d132      	bne.n	8013000 <_vfiprintf_r+0x1ac>
 8012f9a:	9b03      	ldr	r3, [sp, #12]
 8012f9c:	1d1a      	adds	r2, r3, #4
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	9203      	str	r2, [sp, #12]
 8012fa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012fa6:	3402      	adds	r4, #2
 8012fa8:	9305      	str	r3, [sp, #20]
 8012faa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013080 <_vfiprintf_r+0x22c>
 8012fae:	7821      	ldrb	r1, [r4, #0]
 8012fb0:	2203      	movs	r2, #3
 8012fb2:	4650      	mov	r0, sl
 8012fb4:	f7ed f91c 	bl	80001f0 <memchr>
 8012fb8:	b138      	cbz	r0, 8012fca <_vfiprintf_r+0x176>
 8012fba:	9b04      	ldr	r3, [sp, #16]
 8012fbc:	eba0 000a 	sub.w	r0, r0, sl
 8012fc0:	2240      	movs	r2, #64	@ 0x40
 8012fc2:	4082      	lsls	r2, r0
 8012fc4:	4313      	orrs	r3, r2
 8012fc6:	3401      	adds	r4, #1
 8012fc8:	9304      	str	r3, [sp, #16]
 8012fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fce:	4829      	ldr	r0, [pc, #164]	@ (8013074 <_vfiprintf_r+0x220>)
 8012fd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012fd4:	2206      	movs	r2, #6
 8012fd6:	f7ed f90b 	bl	80001f0 <memchr>
 8012fda:	2800      	cmp	r0, #0
 8012fdc:	d03f      	beq.n	801305e <_vfiprintf_r+0x20a>
 8012fde:	4b26      	ldr	r3, [pc, #152]	@ (8013078 <_vfiprintf_r+0x224>)
 8012fe0:	bb1b      	cbnz	r3, 801302a <_vfiprintf_r+0x1d6>
 8012fe2:	9b03      	ldr	r3, [sp, #12]
 8012fe4:	3307      	adds	r3, #7
 8012fe6:	f023 0307 	bic.w	r3, r3, #7
 8012fea:	3308      	adds	r3, #8
 8012fec:	9303      	str	r3, [sp, #12]
 8012fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ff0:	443b      	add	r3, r7
 8012ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ff4:	e76a      	b.n	8012ecc <_vfiprintf_r+0x78>
 8012ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ffa:	460c      	mov	r4, r1
 8012ffc:	2001      	movs	r0, #1
 8012ffe:	e7a8      	b.n	8012f52 <_vfiprintf_r+0xfe>
 8013000:	2300      	movs	r3, #0
 8013002:	3401      	adds	r4, #1
 8013004:	9305      	str	r3, [sp, #20]
 8013006:	4619      	mov	r1, r3
 8013008:	f04f 0c0a 	mov.w	ip, #10
 801300c:	4620      	mov	r0, r4
 801300e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013012:	3a30      	subs	r2, #48	@ 0x30
 8013014:	2a09      	cmp	r2, #9
 8013016:	d903      	bls.n	8013020 <_vfiprintf_r+0x1cc>
 8013018:	2b00      	cmp	r3, #0
 801301a:	d0c6      	beq.n	8012faa <_vfiprintf_r+0x156>
 801301c:	9105      	str	r1, [sp, #20]
 801301e:	e7c4      	b.n	8012faa <_vfiprintf_r+0x156>
 8013020:	fb0c 2101 	mla	r1, ip, r1, r2
 8013024:	4604      	mov	r4, r0
 8013026:	2301      	movs	r3, #1
 8013028:	e7f0      	b.n	801300c <_vfiprintf_r+0x1b8>
 801302a:	ab03      	add	r3, sp, #12
 801302c:	9300      	str	r3, [sp, #0]
 801302e:	462a      	mov	r2, r5
 8013030:	4b12      	ldr	r3, [pc, #72]	@ (801307c <_vfiprintf_r+0x228>)
 8013032:	a904      	add	r1, sp, #16
 8013034:	4630      	mov	r0, r6
 8013036:	f7fc feef 	bl	800fe18 <_printf_float>
 801303a:	4607      	mov	r7, r0
 801303c:	1c78      	adds	r0, r7, #1
 801303e:	d1d6      	bne.n	8012fee <_vfiprintf_r+0x19a>
 8013040:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013042:	07d9      	lsls	r1, r3, #31
 8013044:	d405      	bmi.n	8013052 <_vfiprintf_r+0x1fe>
 8013046:	89ab      	ldrh	r3, [r5, #12]
 8013048:	059a      	lsls	r2, r3, #22
 801304a:	d402      	bmi.n	8013052 <_vfiprintf_r+0x1fe>
 801304c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801304e:	f7fd fd59 	bl	8010b04 <__retarget_lock_release_recursive>
 8013052:	89ab      	ldrh	r3, [r5, #12]
 8013054:	065b      	lsls	r3, r3, #25
 8013056:	f53f af1f 	bmi.w	8012e98 <_vfiprintf_r+0x44>
 801305a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801305c:	e71e      	b.n	8012e9c <_vfiprintf_r+0x48>
 801305e:	ab03      	add	r3, sp, #12
 8013060:	9300      	str	r3, [sp, #0]
 8013062:	462a      	mov	r2, r5
 8013064:	4b05      	ldr	r3, [pc, #20]	@ (801307c <_vfiprintf_r+0x228>)
 8013066:	a904      	add	r1, sp, #16
 8013068:	4630      	mov	r0, r6
 801306a:	f7fd f96d 	bl	8010348 <_printf_i>
 801306e:	e7e4      	b.n	801303a <_vfiprintf_r+0x1e6>
 8013070:	08015740 	.word	0x08015740
 8013074:	0801574a 	.word	0x0801574a
 8013078:	0800fe19 	.word	0x0800fe19
 801307c:	08012e31 	.word	0x08012e31
 8013080:	08015746 	.word	0x08015746

08013084 <__swbuf_r>:
 8013084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013086:	460e      	mov	r6, r1
 8013088:	4614      	mov	r4, r2
 801308a:	4605      	mov	r5, r0
 801308c:	b118      	cbz	r0, 8013096 <__swbuf_r+0x12>
 801308e:	6a03      	ldr	r3, [r0, #32]
 8013090:	b90b      	cbnz	r3, 8013096 <__swbuf_r+0x12>
 8013092:	f7fd fbc3 	bl	801081c <__sinit>
 8013096:	69a3      	ldr	r3, [r4, #24]
 8013098:	60a3      	str	r3, [r4, #8]
 801309a:	89a3      	ldrh	r3, [r4, #12]
 801309c:	071a      	lsls	r2, r3, #28
 801309e:	d501      	bpl.n	80130a4 <__swbuf_r+0x20>
 80130a0:	6923      	ldr	r3, [r4, #16]
 80130a2:	b943      	cbnz	r3, 80130b6 <__swbuf_r+0x32>
 80130a4:	4621      	mov	r1, r4
 80130a6:	4628      	mov	r0, r5
 80130a8:	f000 f82a 	bl	8013100 <__swsetup_r>
 80130ac:	b118      	cbz	r0, 80130b6 <__swbuf_r+0x32>
 80130ae:	f04f 37ff 	mov.w	r7, #4294967295
 80130b2:	4638      	mov	r0, r7
 80130b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130b6:	6823      	ldr	r3, [r4, #0]
 80130b8:	6922      	ldr	r2, [r4, #16]
 80130ba:	1a98      	subs	r0, r3, r2
 80130bc:	6963      	ldr	r3, [r4, #20]
 80130be:	b2f6      	uxtb	r6, r6
 80130c0:	4283      	cmp	r3, r0
 80130c2:	4637      	mov	r7, r6
 80130c4:	dc05      	bgt.n	80130d2 <__swbuf_r+0x4e>
 80130c6:	4621      	mov	r1, r4
 80130c8:	4628      	mov	r0, r5
 80130ca:	f7fd fadf 	bl	801068c <_fflush_r>
 80130ce:	2800      	cmp	r0, #0
 80130d0:	d1ed      	bne.n	80130ae <__swbuf_r+0x2a>
 80130d2:	68a3      	ldr	r3, [r4, #8]
 80130d4:	3b01      	subs	r3, #1
 80130d6:	60a3      	str	r3, [r4, #8]
 80130d8:	6823      	ldr	r3, [r4, #0]
 80130da:	1c5a      	adds	r2, r3, #1
 80130dc:	6022      	str	r2, [r4, #0]
 80130de:	701e      	strb	r6, [r3, #0]
 80130e0:	6962      	ldr	r2, [r4, #20]
 80130e2:	1c43      	adds	r3, r0, #1
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d004      	beq.n	80130f2 <__swbuf_r+0x6e>
 80130e8:	89a3      	ldrh	r3, [r4, #12]
 80130ea:	07db      	lsls	r3, r3, #31
 80130ec:	d5e1      	bpl.n	80130b2 <__swbuf_r+0x2e>
 80130ee:	2e0a      	cmp	r6, #10
 80130f0:	d1df      	bne.n	80130b2 <__swbuf_r+0x2e>
 80130f2:	4621      	mov	r1, r4
 80130f4:	4628      	mov	r0, r5
 80130f6:	f7fd fac9 	bl	801068c <_fflush_r>
 80130fa:	2800      	cmp	r0, #0
 80130fc:	d0d9      	beq.n	80130b2 <__swbuf_r+0x2e>
 80130fe:	e7d6      	b.n	80130ae <__swbuf_r+0x2a>

08013100 <__swsetup_r>:
 8013100:	b538      	push	{r3, r4, r5, lr}
 8013102:	4b29      	ldr	r3, [pc, #164]	@ (80131a8 <__swsetup_r+0xa8>)
 8013104:	4605      	mov	r5, r0
 8013106:	6818      	ldr	r0, [r3, #0]
 8013108:	460c      	mov	r4, r1
 801310a:	b118      	cbz	r0, 8013114 <__swsetup_r+0x14>
 801310c:	6a03      	ldr	r3, [r0, #32]
 801310e:	b90b      	cbnz	r3, 8013114 <__swsetup_r+0x14>
 8013110:	f7fd fb84 	bl	801081c <__sinit>
 8013114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013118:	0719      	lsls	r1, r3, #28
 801311a:	d422      	bmi.n	8013162 <__swsetup_r+0x62>
 801311c:	06da      	lsls	r2, r3, #27
 801311e:	d407      	bmi.n	8013130 <__swsetup_r+0x30>
 8013120:	2209      	movs	r2, #9
 8013122:	602a      	str	r2, [r5, #0]
 8013124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013128:	81a3      	strh	r3, [r4, #12]
 801312a:	f04f 30ff 	mov.w	r0, #4294967295
 801312e:	e033      	b.n	8013198 <__swsetup_r+0x98>
 8013130:	0758      	lsls	r0, r3, #29
 8013132:	d512      	bpl.n	801315a <__swsetup_r+0x5a>
 8013134:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013136:	b141      	cbz	r1, 801314a <__swsetup_r+0x4a>
 8013138:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801313c:	4299      	cmp	r1, r3
 801313e:	d002      	beq.n	8013146 <__swsetup_r+0x46>
 8013140:	4628      	mov	r0, r5
 8013142:	f7fe fb59 	bl	80117f8 <_free_r>
 8013146:	2300      	movs	r3, #0
 8013148:	6363      	str	r3, [r4, #52]	@ 0x34
 801314a:	89a3      	ldrh	r3, [r4, #12]
 801314c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013150:	81a3      	strh	r3, [r4, #12]
 8013152:	2300      	movs	r3, #0
 8013154:	6063      	str	r3, [r4, #4]
 8013156:	6923      	ldr	r3, [r4, #16]
 8013158:	6023      	str	r3, [r4, #0]
 801315a:	89a3      	ldrh	r3, [r4, #12]
 801315c:	f043 0308 	orr.w	r3, r3, #8
 8013160:	81a3      	strh	r3, [r4, #12]
 8013162:	6923      	ldr	r3, [r4, #16]
 8013164:	b94b      	cbnz	r3, 801317a <__swsetup_r+0x7a>
 8013166:	89a3      	ldrh	r3, [r4, #12]
 8013168:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801316c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013170:	d003      	beq.n	801317a <__swsetup_r+0x7a>
 8013172:	4621      	mov	r1, r4
 8013174:	4628      	mov	r0, r5
 8013176:	f000 f883 	bl	8013280 <__smakebuf_r>
 801317a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801317e:	f013 0201 	ands.w	r2, r3, #1
 8013182:	d00a      	beq.n	801319a <__swsetup_r+0x9a>
 8013184:	2200      	movs	r2, #0
 8013186:	60a2      	str	r2, [r4, #8]
 8013188:	6962      	ldr	r2, [r4, #20]
 801318a:	4252      	negs	r2, r2
 801318c:	61a2      	str	r2, [r4, #24]
 801318e:	6922      	ldr	r2, [r4, #16]
 8013190:	b942      	cbnz	r2, 80131a4 <__swsetup_r+0xa4>
 8013192:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013196:	d1c5      	bne.n	8013124 <__swsetup_r+0x24>
 8013198:	bd38      	pop	{r3, r4, r5, pc}
 801319a:	0799      	lsls	r1, r3, #30
 801319c:	bf58      	it	pl
 801319e:	6962      	ldrpl	r2, [r4, #20]
 80131a0:	60a2      	str	r2, [r4, #8]
 80131a2:	e7f4      	b.n	801318e <__swsetup_r+0x8e>
 80131a4:	2000      	movs	r0, #0
 80131a6:	e7f7      	b.n	8013198 <__swsetup_r+0x98>
 80131a8:	2000018c 	.word	0x2000018c

080131ac <_raise_r>:
 80131ac:	291f      	cmp	r1, #31
 80131ae:	b538      	push	{r3, r4, r5, lr}
 80131b0:	4605      	mov	r5, r0
 80131b2:	460c      	mov	r4, r1
 80131b4:	d904      	bls.n	80131c0 <_raise_r+0x14>
 80131b6:	2316      	movs	r3, #22
 80131b8:	6003      	str	r3, [r0, #0]
 80131ba:	f04f 30ff 	mov.w	r0, #4294967295
 80131be:	bd38      	pop	{r3, r4, r5, pc}
 80131c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80131c2:	b112      	cbz	r2, 80131ca <_raise_r+0x1e>
 80131c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80131c8:	b94b      	cbnz	r3, 80131de <_raise_r+0x32>
 80131ca:	4628      	mov	r0, r5
 80131cc:	f000 f830 	bl	8013230 <_getpid_r>
 80131d0:	4622      	mov	r2, r4
 80131d2:	4601      	mov	r1, r0
 80131d4:	4628      	mov	r0, r5
 80131d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131da:	f000 b817 	b.w	801320c <_kill_r>
 80131de:	2b01      	cmp	r3, #1
 80131e0:	d00a      	beq.n	80131f8 <_raise_r+0x4c>
 80131e2:	1c59      	adds	r1, r3, #1
 80131e4:	d103      	bne.n	80131ee <_raise_r+0x42>
 80131e6:	2316      	movs	r3, #22
 80131e8:	6003      	str	r3, [r0, #0]
 80131ea:	2001      	movs	r0, #1
 80131ec:	e7e7      	b.n	80131be <_raise_r+0x12>
 80131ee:	2100      	movs	r1, #0
 80131f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80131f4:	4620      	mov	r0, r4
 80131f6:	4798      	blx	r3
 80131f8:	2000      	movs	r0, #0
 80131fa:	e7e0      	b.n	80131be <_raise_r+0x12>

080131fc <raise>:
 80131fc:	4b02      	ldr	r3, [pc, #8]	@ (8013208 <raise+0xc>)
 80131fe:	4601      	mov	r1, r0
 8013200:	6818      	ldr	r0, [r3, #0]
 8013202:	f7ff bfd3 	b.w	80131ac <_raise_r>
 8013206:	bf00      	nop
 8013208:	2000018c 	.word	0x2000018c

0801320c <_kill_r>:
 801320c:	b538      	push	{r3, r4, r5, lr}
 801320e:	4d07      	ldr	r5, [pc, #28]	@ (801322c <_kill_r+0x20>)
 8013210:	2300      	movs	r3, #0
 8013212:	4604      	mov	r4, r0
 8013214:	4608      	mov	r0, r1
 8013216:	4611      	mov	r1, r2
 8013218:	602b      	str	r3, [r5, #0]
 801321a:	f7ee fba5 	bl	8001968 <_kill>
 801321e:	1c43      	adds	r3, r0, #1
 8013220:	d102      	bne.n	8013228 <_kill_r+0x1c>
 8013222:	682b      	ldr	r3, [r5, #0]
 8013224:	b103      	cbz	r3, 8013228 <_kill_r+0x1c>
 8013226:	6023      	str	r3, [r4, #0]
 8013228:	bd38      	pop	{r3, r4, r5, pc}
 801322a:	bf00      	nop
 801322c:	20006748 	.word	0x20006748

08013230 <_getpid_r>:
 8013230:	f7ee bb92 	b.w	8001958 <_getpid>

08013234 <__swhatbuf_r>:
 8013234:	b570      	push	{r4, r5, r6, lr}
 8013236:	460c      	mov	r4, r1
 8013238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801323c:	2900      	cmp	r1, #0
 801323e:	b096      	sub	sp, #88	@ 0x58
 8013240:	4615      	mov	r5, r2
 8013242:	461e      	mov	r6, r3
 8013244:	da0d      	bge.n	8013262 <__swhatbuf_r+0x2e>
 8013246:	89a3      	ldrh	r3, [r4, #12]
 8013248:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801324c:	f04f 0100 	mov.w	r1, #0
 8013250:	bf14      	ite	ne
 8013252:	2340      	movne	r3, #64	@ 0x40
 8013254:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013258:	2000      	movs	r0, #0
 801325a:	6031      	str	r1, [r6, #0]
 801325c:	602b      	str	r3, [r5, #0]
 801325e:	b016      	add	sp, #88	@ 0x58
 8013260:	bd70      	pop	{r4, r5, r6, pc}
 8013262:	466a      	mov	r2, sp
 8013264:	f000 f848 	bl	80132f8 <_fstat_r>
 8013268:	2800      	cmp	r0, #0
 801326a:	dbec      	blt.n	8013246 <__swhatbuf_r+0x12>
 801326c:	9901      	ldr	r1, [sp, #4]
 801326e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013272:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013276:	4259      	negs	r1, r3
 8013278:	4159      	adcs	r1, r3
 801327a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801327e:	e7eb      	b.n	8013258 <__swhatbuf_r+0x24>

08013280 <__smakebuf_r>:
 8013280:	898b      	ldrh	r3, [r1, #12]
 8013282:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013284:	079d      	lsls	r5, r3, #30
 8013286:	4606      	mov	r6, r0
 8013288:	460c      	mov	r4, r1
 801328a:	d507      	bpl.n	801329c <__smakebuf_r+0x1c>
 801328c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013290:	6023      	str	r3, [r4, #0]
 8013292:	6123      	str	r3, [r4, #16]
 8013294:	2301      	movs	r3, #1
 8013296:	6163      	str	r3, [r4, #20]
 8013298:	b003      	add	sp, #12
 801329a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801329c:	ab01      	add	r3, sp, #4
 801329e:	466a      	mov	r2, sp
 80132a0:	f7ff ffc8 	bl	8013234 <__swhatbuf_r>
 80132a4:	9f00      	ldr	r7, [sp, #0]
 80132a6:	4605      	mov	r5, r0
 80132a8:	4639      	mov	r1, r7
 80132aa:	4630      	mov	r0, r6
 80132ac:	f7fe fe52 	bl	8011f54 <_malloc_r>
 80132b0:	b948      	cbnz	r0, 80132c6 <__smakebuf_r+0x46>
 80132b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132b6:	059a      	lsls	r2, r3, #22
 80132b8:	d4ee      	bmi.n	8013298 <__smakebuf_r+0x18>
 80132ba:	f023 0303 	bic.w	r3, r3, #3
 80132be:	f043 0302 	orr.w	r3, r3, #2
 80132c2:	81a3      	strh	r3, [r4, #12]
 80132c4:	e7e2      	b.n	801328c <__smakebuf_r+0xc>
 80132c6:	89a3      	ldrh	r3, [r4, #12]
 80132c8:	6020      	str	r0, [r4, #0]
 80132ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132ce:	81a3      	strh	r3, [r4, #12]
 80132d0:	9b01      	ldr	r3, [sp, #4]
 80132d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80132d6:	b15b      	cbz	r3, 80132f0 <__smakebuf_r+0x70>
 80132d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132dc:	4630      	mov	r0, r6
 80132de:	f000 f81d 	bl	801331c <_isatty_r>
 80132e2:	b128      	cbz	r0, 80132f0 <__smakebuf_r+0x70>
 80132e4:	89a3      	ldrh	r3, [r4, #12]
 80132e6:	f023 0303 	bic.w	r3, r3, #3
 80132ea:	f043 0301 	orr.w	r3, r3, #1
 80132ee:	81a3      	strh	r3, [r4, #12]
 80132f0:	89a3      	ldrh	r3, [r4, #12]
 80132f2:	431d      	orrs	r5, r3
 80132f4:	81a5      	strh	r5, [r4, #12]
 80132f6:	e7cf      	b.n	8013298 <__smakebuf_r+0x18>

080132f8 <_fstat_r>:
 80132f8:	b538      	push	{r3, r4, r5, lr}
 80132fa:	4d07      	ldr	r5, [pc, #28]	@ (8013318 <_fstat_r+0x20>)
 80132fc:	2300      	movs	r3, #0
 80132fe:	4604      	mov	r4, r0
 8013300:	4608      	mov	r0, r1
 8013302:	4611      	mov	r1, r2
 8013304:	602b      	str	r3, [r5, #0]
 8013306:	f7ee fb8f 	bl	8001a28 <_fstat>
 801330a:	1c43      	adds	r3, r0, #1
 801330c:	d102      	bne.n	8013314 <_fstat_r+0x1c>
 801330e:	682b      	ldr	r3, [r5, #0]
 8013310:	b103      	cbz	r3, 8013314 <_fstat_r+0x1c>
 8013312:	6023      	str	r3, [r4, #0]
 8013314:	bd38      	pop	{r3, r4, r5, pc}
 8013316:	bf00      	nop
 8013318:	20006748 	.word	0x20006748

0801331c <_isatty_r>:
 801331c:	b538      	push	{r3, r4, r5, lr}
 801331e:	4d06      	ldr	r5, [pc, #24]	@ (8013338 <_isatty_r+0x1c>)
 8013320:	2300      	movs	r3, #0
 8013322:	4604      	mov	r4, r0
 8013324:	4608      	mov	r0, r1
 8013326:	602b      	str	r3, [r5, #0]
 8013328:	f7ee fb8e 	bl	8001a48 <_isatty>
 801332c:	1c43      	adds	r3, r0, #1
 801332e:	d102      	bne.n	8013336 <_isatty_r+0x1a>
 8013330:	682b      	ldr	r3, [r5, #0]
 8013332:	b103      	cbz	r3, 8013336 <_isatty_r+0x1a>
 8013334:	6023      	str	r3, [r4, #0]
 8013336:	bd38      	pop	{r3, r4, r5, pc}
 8013338:	20006748 	.word	0x20006748

0801333c <fmod>:
 801333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801333e:	ed2d 8b02 	vpush	{d8}
 8013342:	ec57 6b10 	vmov	r6, r7, d0
 8013346:	ec55 4b11 	vmov	r4, r5, d1
 801334a:	f000 f825 	bl	8013398 <__ieee754_fmod>
 801334e:	4622      	mov	r2, r4
 8013350:	462b      	mov	r3, r5
 8013352:	4630      	mov	r0, r6
 8013354:	4639      	mov	r1, r7
 8013356:	eeb0 8a40 	vmov.f32	s16, s0
 801335a:	eef0 8a60 	vmov.f32	s17, s1
 801335e:	f7ed fbf5 	bl	8000b4c <__aeabi_dcmpun>
 8013362:	b990      	cbnz	r0, 801338a <fmod+0x4e>
 8013364:	2200      	movs	r2, #0
 8013366:	2300      	movs	r3, #0
 8013368:	4620      	mov	r0, r4
 801336a:	4629      	mov	r1, r5
 801336c:	f7ed fbbc 	bl	8000ae8 <__aeabi_dcmpeq>
 8013370:	b158      	cbz	r0, 801338a <fmod+0x4e>
 8013372:	f7fd fb9b 	bl	8010aac <__errno>
 8013376:	2321      	movs	r3, #33	@ 0x21
 8013378:	6003      	str	r3, [r0, #0]
 801337a:	2200      	movs	r2, #0
 801337c:	2300      	movs	r3, #0
 801337e:	4610      	mov	r0, r2
 8013380:	4619      	mov	r1, r3
 8013382:	f7ed fa73 	bl	800086c <__aeabi_ddiv>
 8013386:	ec41 0b18 	vmov	d8, r0, r1
 801338a:	eeb0 0a48 	vmov.f32	s0, s16
 801338e:	eef0 0a68 	vmov.f32	s1, s17
 8013392:	ecbd 8b02 	vpop	{d8}
 8013396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013398 <__ieee754_fmod>:
 8013398:	ec53 2b11 	vmov	r2, r3, d1
 801339c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133a0:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 80133a4:	ea52 0408 	orrs.w	r4, r2, r8
 80133a8:	ec51 0b10 	vmov	r0, r1, d0
 80133ac:	461e      	mov	r6, r3
 80133ae:	4696      	mov	lr, r2
 80133b0:	4694      	mov	ip, r2
 80133b2:	d00c      	beq.n	80133ce <__ieee754_fmod+0x36>
 80133b4:	4d76      	ldr	r5, [pc, #472]	@ (8013590 <__ieee754_fmod+0x1f8>)
 80133b6:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 80133ba:	45a9      	cmp	r9, r5
 80133bc:	460c      	mov	r4, r1
 80133be:	d806      	bhi.n	80133ce <__ieee754_fmod+0x36>
 80133c0:	4255      	negs	r5, r2
 80133c2:	4f74      	ldr	r7, [pc, #464]	@ (8013594 <__ieee754_fmod+0x1fc>)
 80133c4:	4315      	orrs	r5, r2
 80133c6:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 80133ca:	42bd      	cmp	r5, r7
 80133cc:	d909      	bls.n	80133e2 <__ieee754_fmod+0x4a>
 80133ce:	f7ed f923 	bl	8000618 <__aeabi_dmul>
 80133d2:	4602      	mov	r2, r0
 80133d4:	460b      	mov	r3, r1
 80133d6:	f7ed fa49 	bl	800086c <__aeabi_ddiv>
 80133da:	ec41 0b10 	vmov	d0, r0, r1
 80133de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133e2:	45c1      	cmp	r9, r8
 80133e4:	4682      	mov	sl, r0
 80133e6:	4607      	mov	r7, r0
 80133e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80133ec:	dc09      	bgt.n	8013402 <__ieee754_fmod+0x6a>
 80133ee:	dbf4      	blt.n	80133da <__ieee754_fmod+0x42>
 80133f0:	4282      	cmp	r2, r0
 80133f2:	d8f2      	bhi.n	80133da <__ieee754_fmod+0x42>
 80133f4:	d105      	bne.n	8013402 <__ieee754_fmod+0x6a>
 80133f6:	4b68      	ldr	r3, [pc, #416]	@ (8013598 <__ieee754_fmod+0x200>)
 80133f8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80133fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013400:	e7eb      	b.n	80133da <__ieee754_fmod+0x42>
 8013402:	4964      	ldr	r1, [pc, #400]	@ (8013594 <__ieee754_fmod+0x1fc>)
 8013404:	420c      	tst	r4, r1
 8013406:	d148      	bne.n	801349a <__ieee754_fmod+0x102>
 8013408:	f1b9 0f00 	cmp.w	r9, #0
 801340c:	d13d      	bne.n	801348a <__ieee754_fmod+0xf2>
 801340e:	4a63      	ldr	r2, [pc, #396]	@ (801359c <__ieee754_fmod+0x204>)
 8013410:	4653      	mov	r3, sl
 8013412:	2b00      	cmp	r3, #0
 8013414:	dc36      	bgt.n	8013484 <__ieee754_fmod+0xec>
 8013416:	420e      	tst	r6, r1
 8013418:	d14f      	bne.n	80134ba <__ieee754_fmod+0x122>
 801341a:	f1b8 0f00 	cmp.w	r8, #0
 801341e:	d144      	bne.n	80134aa <__ieee754_fmod+0x112>
 8013420:	4b5e      	ldr	r3, [pc, #376]	@ (801359c <__ieee754_fmod+0x204>)
 8013422:	4671      	mov	r1, lr
 8013424:	2900      	cmp	r1, #0
 8013426:	dc3d      	bgt.n	80134a4 <__ieee754_fmod+0x10c>
 8013428:	485d      	ldr	r0, [pc, #372]	@ (80135a0 <__ieee754_fmod+0x208>)
 801342a:	4282      	cmp	r2, r0
 801342c:	db4a      	blt.n	80134c4 <__ieee754_fmod+0x12c>
 801342e:	f3c4 0113 	ubfx	r1, r4, #0, #20
 8013432:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8013436:	485a      	ldr	r0, [pc, #360]	@ (80135a0 <__ieee754_fmod+0x208>)
 8013438:	4283      	cmp	r3, r0
 801343a:	db57      	blt.n	80134ec <__ieee754_fmod+0x154>
 801343c:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8013440:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8013444:	1ad0      	subs	r0, r2, r3
 8013446:	1b8a      	subs	r2, r1, r6
 8013448:	eba7 040c 	sub.w	r4, r7, ip
 801344c:	2800      	cmp	r0, #0
 801344e:	d162      	bne.n	8013516 <__ieee754_fmod+0x17e>
 8013450:	4567      	cmp	r7, ip
 8013452:	bf38      	it	cc
 8013454:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8013458:	2a00      	cmp	r2, #0
 801345a:	bfbc      	itt	lt
 801345c:	463c      	movlt	r4, r7
 801345e:	460a      	movlt	r2, r1
 8013460:	ea52 0104 	orrs.w	r1, r2, r4
 8013464:	d0c7      	beq.n	80133f6 <__ieee754_fmod+0x5e>
 8013466:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 801346a:	db69      	blt.n	8013540 <__ieee754_fmod+0x1a8>
 801346c:	494c      	ldr	r1, [pc, #304]	@ (80135a0 <__ieee754_fmod+0x208>)
 801346e:	428b      	cmp	r3, r1
 8013470:	db6c      	blt.n	801354c <__ieee754_fmod+0x1b4>
 8013472:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 8013476:	432a      	orrs	r2, r5
 8013478:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 801347c:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 8013480:	4620      	mov	r0, r4
 8013482:	e7aa      	b.n	80133da <__ieee754_fmod+0x42>
 8013484:	3a01      	subs	r2, #1
 8013486:	005b      	lsls	r3, r3, #1
 8013488:	e7c3      	b.n	8013412 <__ieee754_fmod+0x7a>
 801348a:	4a45      	ldr	r2, [pc, #276]	@ (80135a0 <__ieee754_fmod+0x208>)
 801348c:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 8013490:	2b00      	cmp	r3, #0
 8013492:	ddc0      	ble.n	8013416 <__ieee754_fmod+0x7e>
 8013494:	3a01      	subs	r2, #1
 8013496:	005b      	lsls	r3, r3, #1
 8013498:	e7fa      	b.n	8013490 <__ieee754_fmod+0xf8>
 801349a:	ea4f 5229 	mov.w	r2, r9, asr #20
 801349e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80134a2:	e7b8      	b.n	8013416 <__ieee754_fmod+0x7e>
 80134a4:	3b01      	subs	r3, #1
 80134a6:	0049      	lsls	r1, r1, #1
 80134a8:	e7bc      	b.n	8013424 <__ieee754_fmod+0x8c>
 80134aa:	4b3d      	ldr	r3, [pc, #244]	@ (80135a0 <__ieee754_fmod+0x208>)
 80134ac:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 80134b0:	2900      	cmp	r1, #0
 80134b2:	ddb9      	ble.n	8013428 <__ieee754_fmod+0x90>
 80134b4:	3b01      	subs	r3, #1
 80134b6:	0049      	lsls	r1, r1, #1
 80134b8:	e7fa      	b.n	80134b0 <__ieee754_fmod+0x118>
 80134ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 80134be:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80134c2:	e7b1      	b.n	8013428 <__ieee754_fmod+0x90>
 80134c4:	1a80      	subs	r0, r0, r2
 80134c6:	281f      	cmp	r0, #31
 80134c8:	dc0a      	bgt.n	80134e0 <__ieee754_fmod+0x148>
 80134ca:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 80134ce:	fa09 f900 	lsl.w	r9, r9, r0
 80134d2:	fa2a f101 	lsr.w	r1, sl, r1
 80134d6:	ea41 0109 	orr.w	r1, r1, r9
 80134da:	fa0a f700 	lsl.w	r7, sl, r0
 80134de:	e7aa      	b.n	8013436 <__ieee754_fmod+0x9e>
 80134e0:	4930      	ldr	r1, [pc, #192]	@ (80135a4 <__ieee754_fmod+0x20c>)
 80134e2:	1a89      	subs	r1, r1, r2
 80134e4:	fa0a f101 	lsl.w	r1, sl, r1
 80134e8:	2700      	movs	r7, #0
 80134ea:	e7a4      	b.n	8013436 <__ieee754_fmod+0x9e>
 80134ec:	1ac0      	subs	r0, r0, r3
 80134ee:	281f      	cmp	r0, #31
 80134f0:	dc0a      	bgt.n	8013508 <__ieee754_fmod+0x170>
 80134f2:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 80134f6:	fa08 f800 	lsl.w	r8, r8, r0
 80134fa:	fa2e f606 	lsr.w	r6, lr, r6
 80134fe:	ea46 0608 	orr.w	r6, r6, r8
 8013502:	fa0e fc00 	lsl.w	ip, lr, r0
 8013506:	e79d      	b.n	8013444 <__ieee754_fmod+0xac>
 8013508:	4e26      	ldr	r6, [pc, #152]	@ (80135a4 <__ieee754_fmod+0x20c>)
 801350a:	1af6      	subs	r6, r6, r3
 801350c:	fa0e f606 	lsl.w	r6, lr, r6
 8013510:	f04f 0c00 	mov.w	ip, #0
 8013514:	e796      	b.n	8013444 <__ieee754_fmod+0xac>
 8013516:	4567      	cmp	r7, ip
 8013518:	bf38      	it	cc
 801351a:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801351e:	2a00      	cmp	r2, #0
 8013520:	da05      	bge.n	801352e <__ieee754_fmod+0x196>
 8013522:	0ffa      	lsrs	r2, r7, #31
 8013524:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8013528:	007f      	lsls	r7, r7, #1
 801352a:	3801      	subs	r0, #1
 801352c:	e78b      	b.n	8013446 <__ieee754_fmod+0xae>
 801352e:	ea52 0104 	orrs.w	r1, r2, r4
 8013532:	f43f af60 	beq.w	80133f6 <__ieee754_fmod+0x5e>
 8013536:	0fe1      	lsrs	r1, r4, #31
 8013538:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801353c:	0067      	lsls	r7, r4, #1
 801353e:	e7f4      	b.n	801352a <__ieee754_fmod+0x192>
 8013540:	0fe1      	lsrs	r1, r4, #31
 8013542:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8013546:	0064      	lsls	r4, r4, #1
 8013548:	3b01      	subs	r3, #1
 801354a:	e78c      	b.n	8013466 <__ieee754_fmod+0xce>
 801354c:	1ac9      	subs	r1, r1, r3
 801354e:	2914      	cmp	r1, #20
 8013550:	dc0a      	bgt.n	8013568 <__ieee754_fmod+0x1d0>
 8013552:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 8013556:	fa02 f303 	lsl.w	r3, r2, r3
 801355a:	40cc      	lsrs	r4, r1
 801355c:	4323      	orrs	r3, r4
 801355e:	410a      	asrs	r2, r1
 8013560:	ea42 0105 	orr.w	r1, r2, r5
 8013564:	4618      	mov	r0, r3
 8013566:	e738      	b.n	80133da <__ieee754_fmod+0x42>
 8013568:	291f      	cmp	r1, #31
 801356a:	dc07      	bgt.n	801357c <__ieee754_fmod+0x1e4>
 801356c:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 8013570:	40cc      	lsrs	r4, r1
 8013572:	fa02 f303 	lsl.w	r3, r2, r3
 8013576:	4323      	orrs	r3, r4
 8013578:	462a      	mov	r2, r5
 801357a:	e7f1      	b.n	8013560 <__ieee754_fmod+0x1c8>
 801357c:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 8013580:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8013584:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 8013588:	33e2      	adds	r3, #226	@ 0xe2
 801358a:	fa42 f303 	asr.w	r3, r2, r3
 801358e:	e7f3      	b.n	8013578 <__ieee754_fmod+0x1e0>
 8013590:	7fefffff 	.word	0x7fefffff
 8013594:	7ff00000 	.word	0x7ff00000
 8013598:	080159e0 	.word	0x080159e0
 801359c:	fffffbed 	.word	0xfffffbed
 80135a0:	fffffc02 	.word	0xfffffc02
 80135a4:	fffffbe2 	.word	0xfffffbe2

080135a8 <_init>:
 80135a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135aa:	bf00      	nop
 80135ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135ae:	bc08      	pop	{r3}
 80135b0:	469e      	mov	lr, r3
 80135b2:	4770      	bx	lr

080135b4 <_fini>:
 80135b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135b6:	bf00      	nop
 80135b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135ba:	bc08      	pop	{r3}
 80135bc:	469e      	mov	lr, r3
 80135be:	4770      	bx	lr
